// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьАвтоЗаполнениеРеквизитов;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
		Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда 
			Объект.КонтактнаяИнформация.Загрузить(Объект.ФизЛицо.КонтактнаяИнформация.Выгрузить());
		КонецЕсли;
		УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект.ФизЛицо, 
			"ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	Иначе
		УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, 
			"ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация	
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ФормаСтандартныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
	КонецЕсли;
	
	ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
	РеквизитыПроверкиКонтрагентов.НеИспользоватьКэш = Истина;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ФизическоеЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	СтароеЮрФизЛицо = Объект.ЮрФизЛицо;
	
	Если Параметры.Свойство("Представление") Тогда
		Объект.Наименование = Параметры.Представление;
	КонецЕсли;	
	
	Если Параметры.Свойство("Адрес") Тогда
		
		ДобавленАдрес = Истина;
		
		// EmailАдресата
		Если ЗначениеЗаполнено(Параметры.Адрес) И Найти(Параметры.Адрес, "@") <> 0 Тогда
			НовСтр = Объект.КонтактнаяИнформация.Добавить();
			НовСтр.ЗначенияПолей = Параметры.Адрес;
			НовСтр.АдресЭП = Параметры.Адрес;
			НовСтр.Представление = Параметры.Адрес;
			НовСтр.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			НовСтр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Параметры.Свойство("ЛичныйАдресат") Тогда
		
		ЛичныйАдресат = Параметры.ЛичныйАдресат;
		
		Объект.Наименование = ЛичныйАдресат.Наименование;
		Объект.Ответственный = ЛичныйАдресат.Пользователь;
		Объект.Комментарий = ЛичныйАдресат.Комментарий;
		
		НеиспользованныеПоля = "";
		
		Для Каждого КонтактИнфоАдресата Из ЛичныйАдресат.КонтактнаяИнформация Цикл
			
			ЕстьПолеТакогоВида = Ложь;
			Для Каждого КонтактИнфоКонтрагента Из Объект.КонтактнаяИнформация Цикл
				
				Если Строка(КонтактИнфоКонтрагента.Вид) = Строка(КонтактИнфоАдресата.Вид) Тогда
					ЕстьПолеТакогоВида = Истина;
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;	
			
			Если ЕстьПолеТакогоВида = Ложь Тогда
				
				Если КонтактИнфоАдресата.Вид = Справочники.ВидыКонтактнойИнформации.EmailАдресата Тогда
					
					НовСтр = Объект.КонтактнаяИнформация.Добавить();
					НовСтр.ЗначенияПолей = КонтактИнфоАдресата.ЗначенияПолей;
					НовСтр.АдресЭП = КонтактИнфоАдресата.АдресЭП;
					НовСтр.Представление = КонтактИнфоАдресата.Представление;
					НовСтр.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
					НовСтр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					
				КонецЕсли;	
				
				Если КонтактИнфоАдресата.Вид = Справочники.ВидыКонтактнойИнформации.РабочийТелефонАдресата Тогда
					
					НовСтр = Объект.КонтактнаяИнформация.Добавить();
					НовСтр.ЗначенияПолей = КонтактИнфоАдресата.ЗначенияПолей;
					НовСтр.Представление = КонтактИнфоАдресата.Представление;
					НовСтр.НомерТелефона = КонтактИнфоАдресата.НомерТелефона;
					НовСтр.НомерТелефонаБезКодов = КонтактИнфоАдресата.НомерТелефонаБезКодов;
					НовСтр.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
					НовСтр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					
				КонецЕсли;	
				
				Если КонтактИнфоАдресата.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресАдресата Тогда
					
					НовСтр = Объект.КонтактнаяИнформация.Добавить();
					НовСтр.ЗначенияПолей = КонтактИнфоАдресата.ЗначенияПолей;
					НовСтр.Представление = КонтактИнфоАдресата.Представление;
					НовСтр.Страна = КонтактИнфоАдресата.Страна;
					НовСтр.Регион = КонтактИнфоАдресата.Регион;
					НовСтр.Город = КонтактИнфоАдресата.Город;
					НовСтр.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
					НовСтр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
					
				КонецЕсли;	
				
			Иначе	
				
				НеиспользованныеПоля = НеиспользованныеПоля + " "
					+ Строка(КонтактИнфоАдресата.Вид) + ": " + КонтактИнфоАдресата.ЗначенияПолей + 
					" " + КонтактИнфоАдресата.Представление;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		Объект.Комментарий = Объект.Комментарий + " " + НеиспользованныеПоля;
		
	КонецЕсли;	
	
	Если Не Объект.Ссылка.Пустая() И Объект.ЮрФизЛицо = ФизическоеЛицо Тогда 
		Элементы.ФизЛицо1.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьНаЗакладкеКонтактнойИнформации") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаКонтактнаяИнформация;
	КонецЕсли;	
	
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ИмяФормы + "/ТекущиеДанные", "");
	Если НастройкиФормы = Неопределено 
		Или НастройкиФормы.Получить("ПоказыватьУдаленныеКонтактныеЛица") = Неопределено Тогда
		ПоказыватьУдаленныеКонтактныеЛица = Ложь;
		Элементы.ПоказыватьУдаленныеКонтактныеЛица.Пометка = Ложь;
		ЗаполнитьСписокКонтактныхЛиц();
	КонецЕсли;
	
	Если Справочники.БанковскиеСчета.ИмеетБанковскийСчет(Объект.Ссылка) Тогда 
		Элементы.БанковскийСчетЗадан.Видимость = Истина;
		Элементы.БанковскийСчетНеЗадан.Видимость = Ложь;
	Иначе 
		Элементы.БанковскийСчетЗадан.Видимость = Ложь;
		Элементы.БанковскийСчетНеЗадан.Видимость = Истина;
	КонецЕсли;
	
	Нумерация.ПоказатьИндексНумерации(ЭтаФорма);
	
	Если Параметры.Свойство("ОткрытьЗакладкуКЛ") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаКонтактныеЛица;
	КонецЕсли;
	
	Если Объект.ЮрФизЛицо = ФизическоеЛицо Тогда 
		Элементы.ГруппаКонтактныеЛица.Видимость = Ложь;
	Иначе 
		Элементы.ГруппаКонтактныеЛица.Видимость = Истина;
	КонецЕсли;
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
		
	Если Параметры.Ключ.Пустая() Тогда
		ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
			ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	КонецЕсли;
		
	Если РольДоступна("ПросмотрОтчетаДосьеКонтрагента") Или РольДоступна("ПолныеПрава") Тогда 
		Элементы.ДосьеКонтрагента.Видимость = Истина;
	Иначе 
		Элементы.ДосьеКонтрагента.Видимость = Ложь;
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентами.ПроверитьКонтрагентаВ1СЭДОПриСозданииНаСервере(Объект.Ссылка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	 
	Если (ИмяСобытия = "ИзмененоФизическоеЛицо") 
	   И (Параметр = Объект.ФизЛицо) 
	   И (Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо")) Тогда 
	   
		ЗагрузитьКонтактнуюИнформацию();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписатьОсновнойБанковскийСчет"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Владелец = Объект.Ссылка
	Тогда 
		Объект.ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
		Элементы.БанковскийСчетЗадан.Видимость = Истина;
		Элементы.БанковскийСчетНеЗадан.Видимость = Ложь;
		Записать();
	КонецЕсли;
	
	Если ИмяСобытия = "СозданоНовоеКонтактноеЛицо" 
		И Параметр.Владелец = Объект.Ссылка Тогда
		ЗаполнитьСписокКонтактныхЛиц();
	ИначеЕсли ИмяСобытия = "ИзменилосьКонтактноеЛицо"
		И Параметр.Владелец = Объект.Ссылка Тогда
		Для Каждого Строка Из КонтактныеЛица Цикл
			Если Строка.Ссылка = Параметр.КонтактноеЛицо Тогда 
				СтруктураДанных = ПолучитьДанныеДляСписка(Параметр.КонтактноеЛицо);
				ЗаполнитьЗначенияСвойств(Строка, СтруктураДанных);
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОтображатьФотографииПерсональнаяНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы",
		"ОтображатьФотографииПерсональнаяНастройка",
		Истина);
		
	ОтображатьФотографииОбщаяНастройка = ПолучитьФункциональнуюОпцию("ОтображатьФотографииОбщаяНастройка");
	
	ПолучатьФотографии = Истина;
	
	Если Не ОтображатьФотографииОбщаяНастройка 
		Или Не ОтображатьФотографииПерсональнаяНастройка
		Или ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ПолучатьФотографии = Ложь;
		Элементы.Фотография.Видимость = Ложь;
	КонецЕсли;	
	
	Если ПолучатьФотографии Тогда
		Фотография = РаботаСФотографиями.ПолучитьАдресФото(Объект.Ссылка, 
			УникальныйИдентификатор, ЕстьКартинка);
	КонецЕсли;	
	
	Если ЕстьКартинка Тогда
		
		Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
		Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
		Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = ЕстьКартинка;
	КонецЕсли;	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект.ФизЛицо);
	Иначе
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	ТекстСообщения = "";
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда 
		
		Если ЗначениеЗаполнено(Объект.ИНН) 
			И Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.ИНН, Истина, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ИНН",, Отказ)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КПП) 
			И Не РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Объект.КПП, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.КПП",, Отказ)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КодПоОКПО) 
			И Не РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(Объект.КодПоОКПО, Истина, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.КодПоОКПО",, Отказ)
		КонецЕсли;
		
	ИначеЕсли Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель") Тогда 
		
		Если ЗначениеЗаполнено(Объект.ИНН) 
			И Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.ИНН, Ложь, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ИНН",, Отказ)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КодПоОКПО) 
			И Не РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(Объект.КодПоОКПО, Ложь, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.КодПоОКПО",, Отказ)
		КонецЕсли;
		
	ИначеЕсли Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		
		Если ЗначениеЗаполнено(Объект.ИНН) 
			И Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.ИНН, Ложь, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ИНН",, Отказ)
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если НЕ Отказ И ЗначениеЗаполнено(Объект.Наименование) Тогда
		
		Попытка
			НайденныеОбъекты = ПроверитьУникальностьКонтрагента();
		Исключение
			Отказ = Истина;
			Инфо = ИнформацияОбОшибке();
			Если Инфо.Причина <> Неопределено Тогда
				ОписаниеОшибки = Инфо.Причина.Описание;
			Иначе
				ОписаниеОшибки = Инфо.Описание;
			КонецЕсли;

			ВызватьИсключение(ОписаниеОшибки);
		КонецПопытки;
		
		Если Не ПараметрыЗаписи.Свойство("ЗаписьДублирующегоКонтрагента") 
			И НайденныеОбъекты.Количество() > 0 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("НайденныеОбъекты", НайденныеОбъекты); 
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжение",
				ЭтотОбъект,
				ПараметрыЗаписи);
			
			ОткрытьФорму(
				"Справочник.Контрагенты.Форма.СписокДублейКонтрагентов", 
				ПараметрыФормы, 
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТекущийОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
		
		Если ТекущийОбъект.Ссылка.Пустая() И ТекущийОбъект.ФизЛицо.Пустая() Тогда 
			ОбъектФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ОбъектФизЛицо.Наименование = ТекущийОбъект.Наименование;
			// Здесь нужна дополнительная операция, чтобы перенести контактные данные.
			// СтандартныеПодсистемы.КонтактнаяИнформация
			УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ОбъектФизЛицо);
			// Конец СтандартныеПодсистемы.КонтактнаяИнформация
			ОбъектФизЛицо.Записать();
			ТекущийОбъект.ФизЛицо = ОбъектФизЛицо.Ссылка;
		ИначеЕсли Не ТекущийОбъект.ФизЛицо.Пустая() Тогда 
			ЗаблокироватьДанныеДляРедактирования(ТекущийОбъект.ФизЛицо);
			ОбъектФизЛицо = ТекущийОбъект.ФизЛицо.ПолучитьОбъект();
			// Здесь нужна дополнительная операция, чтобы перенести контактные данные.
			// СтандартныеПодсистемы.КонтактнаяИнформация
			УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ОбъектФизЛицо);
			// Конец СтандартныеПодсистемы.КонтактнаяИнформация
			ОбъектФизЛицо.Записать();
		Иначе 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Укажите ""Физическое лицо""'; en = 'Specify ""Individual""'"),,
				"Объект.ФизЛицо",, 
				Отказ); 
			ЭтаФорма.ТекущийЭлемент = Элементы.ФизЛицо1;
			Возврат;
		КонецЕсли;
		
		Элементы.ФизЛицо1.ТолькоПросмотр = Истина;
		
	ИначеЕсли ТекущийОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		Или ТекущийОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда 
		
		Если Не ТекущийОбъект.ФизЛицо.Пустая() Тогда 
			ЗаблокироватьДанныеДляРедактирования(ТекущийОбъект.ФизЛицо);
			ОбъектФизЛицо = ТекущийОбъект.ФизЛицо.ПолучитьОбъект();
			ОбъектФизЛицо.УстановитьПометкуУдаления(Истина);
			ТекущийОбъект.ФизЛицо = Неопределено;
		КонецЕсли;
		
	КонецЕсли;	
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	Если ДанныеКонтактногоЛица <> Неопределено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеКонтактногоЛица", ДанныеКонтактногоЛица);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("НетНастройкиНумерации", Нумерация.НетНастройкиНумерации(ТекущийОбъект.Ссылка));
	ПараметрыЗаписи.Вставить("Модифицированность", Модифицированность);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ИндексНумерации = СокрЛП(ИндексНумерации);
	Если ИндексНумерации <> ИндексНумерацииПриОткрытии Тогда 
		Если ЗначениеЗаполнено(ИндексНумерации) Тогда 
			РегистрыСведений.ИндексыНумерации.ЗаписатьИндексНумерации(Объект.Ссылка, ИндексНумерации);
		Иначе 
			РегистрыСведений.ИндексыНумерации.УдалитьИндексНумерации(Объект.Ссылка);
		КонецЕсли;
		
		ИндексНумерацииПриОткрытии = ИндексНумерации;
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ДанныеКонтактногоЛица")
		И НЕ ТекущийОбъект.Модифицированность() Тогда
		
		ДанныеКонтактногоЛица = Неопределено;
		ПредставлениеКонтактногоЛица = Неопределено;
		ЗаполнитьСписокКонтактныхЛиц();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не Объект.Ссылка.Пустая() 
	   И Объект.ФизЛицо.Пустая()
	   И Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
	   
	   ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле  ""Физическое лицо"" не заполнено'; en = 'Field  ""Individual"" not filled'"),,"Объект.ФизЛицо",,Отказ);
	   
	КонецЕсли;	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; en = 'Data has been changed. Save changes?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказыватьУдаленныеКонтактныеЛица"] <> Неопределено Тогда
		ПоказыватьУдаленныеКонтактныеЛица = Настройки["ПоказыватьУдаленныеКонтактныеЛица"];
		Элементы.ПоказыватьУдаленныеКонтактныеЛица.Пометка = ПоказыватьУдаленныеКонтактныеЛица;
		ЗаполнитьСписокКонтактныхЛиц();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// СтандартныеПодсистемы.РаботаСКонтрагентами
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	//ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(Объект.ИНН, Истина);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	Если Объект.ЮрФизЛицо = СтароеЮрФизЛицо Тогда 
		Возврат;
	КонецЕсли;	
		
	ИзменитьВидКонтрагента();
	УстановитьВидимость();
		
	ЭтоЮридическоеЛицо = (Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"));
	Если НЕ ЭтоЮридическоеЛицо Тогда
		Объект.КПП = "";
	КонецЕсли;
	
	ЭтоИностранныйКонтрагент = (Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"));
	РеквизитыПроверкиКонтрагентов.ЭтоИностранныйКонтрагент = ЭтоИностранныйКонтрагент;
		
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо = ЭтоЮридическоеЛицо;
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
	СтароеЮрФизЛицо = Объект.ЮрФизЛицо;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеПолноеАвтоматически 
		Или Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)

	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Список = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Список.Добавить(Объект.НаименованиеПолное);
	КонецЕсли;
	Для каждого НаименованиеАвтозаполнения Из НаименованияАвтозаполнения Цикл
		ТекНаименование = НаименованиеАвтозаполнения.Значение;
		Если ЗначениеЗаполнено(ТекНаименование)	
			И Список.НайтиПоЗначению(ТекНаименование) = Неопределено Тогда
			Список.Добавить(ТекНаименование);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Объект.Наименование)
		И Список.НайтиПоЗначению(Объект.Наименование) = Неопределено Тогда
		Список.Добавить(Объект.Наименование);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.ПолноеНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.НаименованиеПолное = Результат.Значение;
		Модифицированность = Истина;
		ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
			ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора основного счета необходимо записать контрагента'; en = 'To select the main account you should save the counterparty'"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицо1ПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда 
		Объект.Наименование = СокрЛП(Объект.ФизЛицо);
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	ЗагрузитьКонтактнуюИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицо2ПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда 
		Объект.Наименование = СокрЛП(Объект.ФизЛицо);
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	ЗагрузитьКонтактнуюИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеЛица

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Если Копирование Тогда 
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элементы.КонтактныеЛица.ТекущиеДанные.Ссылка);
	Иначе 
		ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КонтактныеЛица.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.КонтактныеЛица.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
	ОткрытьФорму("Справочник.КонтактныеЛица.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.КонтактныеЛица.ВыделенныеСтроки;
	КоличествоСтрок = ВыделенныеСтроки.Количество();
	
	// Если карточка еще не записана, то удаляем просто элементы списка
	Если Объект.Ссылка.Пустая() Тогда 
		КоличествоКонтактныхЛиц = ?(КоличествоКонтактныхЛиц > КоличествоСтрок, 
			КоличествоКонтактныхЛиц - КоличествоСтрок, 0);
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	СписокКонтактныхЛиц = Новый СписокЗначений;
	
	Если КоличествоСтрок = 0 Тогда 
		Возврат;
	ИначеЕсли КоличествоСтрок = 1 Тогда 
		ТекущиеДанные = Элементы.КонтактныеЛица.ТекущиеДанные;
		СписокКонтактныхЛиц.Добавить(ТекущиеДанные.Ссылка);
		ТекущаяПометкаУдаления = ТекущиеДанные.ПометкаУдаления;
		
		Если ТекущаяПометкаУдаления Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'; en = 'Remove deletion mark from ""%1"" ?'"),
					Строка(ТекущиеДанные.Ссылка));
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"),
					Строка(ТекущиеДанные.Ссылка));
		КонецЕсли;
	Иначе 
		
		ТекущаяПометкаУдаления = Ложь;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.КонтактныеЛица.ДанныеСтроки(ВыбраннаяСтрока);
			СписокКонтактныхЛиц.Добавить(ДанныеСтроки.Ссылка);
			
			Если ДанныеСтроки.ПометкаУдаления Тогда 
				ТекущаяПометкаУдаления = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущаяПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'; en = 'Remove deletion mark from selected items?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?'; en = 'Mark selected items for deletion?'");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("КонтактныеЛица",  СписокКонтактныхЛиц);
	ПараметрыОбработчика.Вставить("ВыделенныеСтроки",  ВыделенныеСтроки);
	ПараметрыОбработчика.Вставить("ТекущаяПометкаУдаления", ТекущаяПометкаУдаления);
	
	ОписаниеОповещенияОтветаНаВопрос = Новый ОписаниеОповещения(
		"КонтактныеЛицаПередУдалениемПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	ПоказатьВопрос(ОписаниеОповещенияОтветаНаВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяПометкаУдаления = Параметры.ТекущаяПометкаУдаления;
	ТекстОшибки = "";
	
	Если УстановитьПометкуНаУдаление(Параметры.КонтактныеЛица, Не ТекущаяПометкаУдаления, ТекстОшибки) Тогда
		Если ПоказыватьУдаленныеКонтактныеЛица Тогда 
			Для Каждого ВыбраннаяСтрока Из Параметры.ВыделенныеСтроки Цикл 
				ДанныеСтроки = Элементы.КонтактныеЛица.ДанныеСтроки(ВыбраннаяСтрока);
				ДанныеСтроки.ПометкаУдаления = Не ТекущаяПометкаУдаления;
			КонецЦикла;
		КонецЕсли;
	Иначе 
		Если ТекущаяПометкаУдаления Тогда
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось снять пометку на удаление.
					|%1';
					|en = 'Unable to unmark for deletion.
					|%1'"),
				ТекстОшибки);
		Иначе
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось установить пометку на удаление.
					|%1';
					|en = 'Unable set mark for deletion. 
					|%1'"),
				ТекстОшибки);
		КонецЕсли;
		
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


// СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""Наименование"" не заполнено'; en = 'Field  ""Description"" not filled'"));
		ТекущийЭлемент = Элементы.Наименование;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(Объект.Наименование, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'; en = 'Field ""TIN"" is not filled in'"));
		
		Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель") Тогда 
			ТекущийЭлемент = Элементы.ИНН2;
		Иначе 
			ТекущийЭлемент = Элементы.ИНН;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Объект.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель")
	   И Объект.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Заполнение по ИНН возможно только для юридических лиц и индивидуальных предпринимателей'; en = 'Filling by TIN only possible for legal entities and individual entrepreneurs'"));
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(Объект.ИНН, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеКонтактныеЛица(Команда)
	
	ПоказыватьУдаленныеКонтактныеЛица = Не ПоказыватьУдаленныеКонтактныеЛица;
	Элементы.ПоказыватьУдаленныеКонтактныеЛица.Пометка = ПоказыватьУдаленныеКонтактныеЛица;
	
	ЗаполнитьСписокКонтактныхЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийСчет(Команда)
	
	ОписаниеОповещенияОтветаНаВопрос = Новый ОписаниеОповещения(
		"СоздатьБанковскийСчетПродолжение",
		ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(ОписаниеОповещенияОтветаНаВопрос, 
			НСтр("ru = 'Данные еще не записаны.
                 |Создание ""Банковского счета"" возможно только после записи данных. Записать?';
                 |en = 'Data is not yet saved. 
                 |To create a ""Bank account"" you must save the data. Save?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОтветаНаВопрос, КодВозвратаДиалога.Ок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийСчетПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да И Не Записать() Тогда 
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец", Объект.Ссылка));
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты(Команда)
	
	ПараметрыФормы = Новый Структура("Источник", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаСпискаИсточника", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Учет времени

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Работа с контрагентом""%1""'; en = 'Working with counterparty ""%1""'"),
			Объект.Наименование);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
			
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект);
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтаФорма); // Выполнена
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	РаботаСФотографиями.ОчиститьИзображение(Объект.Ссылка, УникальныйИдентификатор);
	
	ЕстьКартинка = Ложь;
	Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = ЕстьКартинка;
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеПоКонтрагенту(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Контрагент еще не записан.'; en = 'Counterparty is not yet saved.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контрагент", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ВсеПоКонтрагенту");
	ОткрытьФорму("Отчет.СводкаПоКонтрагенту.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛентаКонтрагента(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Контрагент еще не записан.'; en = 'Counterparty is not yet saved.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контрагент", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "Лента");
	ОткрытьФорму("Отчет.СводкаПоКонтрагенту.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДосьеКонтрагента(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Контрагент еще не записан.'; en = 'Counterparty is not yet saved.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Контрагент", Объект.Ссылка);
	
	ОткрытьФорму("Отчет.ДосьеКонтрагента.Форма", 
		ПараметрыФормы, 
		ЭтаФорма);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Отправить

&НаКлиенте
Процедура ПроцессСогласование(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Согласование", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессУтверждение(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Утверждение", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессРассмотрение(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Рассмотрение", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Исполнение", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Ознакомление", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"КомплексныйПроцесс", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Учет времени

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ВидыРабот,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидКонтрагента()
	
	ИзменитьКонтактнуюИнформацию();
	
	// Обработчик механизма "Свойства".
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
		Элементы.ГруппаКонтактныеЛица.Видимость = Ложь;
	Иначе 
		Элементы.ГруппаКонтактныеЛица.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.КнопкаЗаполнитьПоНаименованию.Видимость = Ложь;
	Элементы.ГруппаКакЮрЛицо.Видимость = Ложь;
	Элементы.ГруппаКакФизЛицо.Видимость = Ложь;
	Элементы.ГруппаКакИП.Видимость = Ложь;
	Элементы.ГруппаКакНерезидент.Видимость = Ложь;
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Элементы.ГруппаКакФизЛицо.Видимость = Истина;
		Элементы.Фотография.Видимость = Истина;
		
		Если Объект.ФизЛицо.Пустая() Тогда
			Элементы.ФизЛицо1.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	ИначеЕсли Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель") Тогда
		Элементы.ГруппаКакИП.Видимость = Истина;
		Элементы.Фотография.Видимость = Ложь;
		
	ИначеЕсли Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда	
		Элементы.ГруппаКакНерезидент.Видимость = Истина;
		Элементы.Фотография.Видимость = Ложь;
		
	Иначе
		Элементы.ГруппаКакЮрЛицо.Видимость = Истина;
		Элементы.Фотография.Видимость = Ложь;
		Элементы.КнопкаЗаполнитьПоНаименованию.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтактнуюИнформацию()
	
	// Обработчик подсистемы "Контактная информация".
	Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, Объект.ФизЛицо);
	Иначе
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, Объект);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьКонтактнуюИнформацию()
	
	Объект.КонтактнаяИнформация.Загрузить(Объект.ФизЛицо.КонтактнаяИнформация.Выгрузить());
	ИзменитьКонтактнуюИнформацию();
	
КонецПроцедуры	

&НаСервере
Функция ПроверитьУникальностьКонтрагента()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда // проверим уникальность только по измененным
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка,
			"Наименование, НаименованиеПолное, ИНН, РегистрационныйНомер");
	Иначе
		Реквизиты = Новый Структура(
			"Наименование, НаименованиеПолное, ИНН, РегистрационныйНомер");
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Код", Неопределено); // не сравниваем, но получаем
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если ЗначениеЗаполнено(Объект[Реквизит.Ключ])
			И Объект[Реквизит.Ключ] <> Реквизит.Значение Тогда
			СтруктураПоиска.Вставить(Реквизит.Ключ, "=");
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураПоиска.Количество() > 1 Тогда
		Возврат РаботаСДублямиЗначений.НайтиДубли(Объект, СтруктураПоиска);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Истина Тогда
		ПараметрыЗаписи.Вставить("ЗаписьДублирующегоКонтрагента", Истина);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение") 
		И ПараметрыЗаписи.Свойство("НетНастройкиНумерации") И ПараметрыЗаписи.НетНастройкиНумерации = Истина Тогда
		ОписаниеПредупреждения = Новый ОписаниеОповещения(
			"ПослеЗаписиПродолжениеПослеПредупреждения",
			ЭтотОбъект,
			ПараметрыЗаписи);
		ПоказатьПредупреждение(ОписаниеПредупреждения,
			НСтр("ru = 'Документы с данным контрагентом нельзя будет зарегистрировать, так как отсутствует подходящая настройка нумерации.'; en = 'Documents with this counterparty will be unregistrable, because there is no suitable numeration settings.'"));
		Возврат;	
	КонецЕсли;	
	
	Если ПараметрыЗаписи.Свойство("Модифицированность") И ПараметрыЗаписи.Модифицированность Тогда
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Владелец", Объект.Ссылка);
		Оповестить("ИзменилсяКонтрагент", ПараметрОповещения);
	КонецЕсли;
	
	Оповестить("Запись_Контрагент", , Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'; en = 'Changed:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжениеПослеПредупреждения(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение", Истина);
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	ПараметрыОписания = Новый Структура(
		"АдресВременногоХранилищаФайла", 
		"");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьИзображениеНаКлиентеПродолжение",
		ЭтотОбъект,
		ПараметрыОписания);	
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'; en = 'You have to save the object to choose an image. Save it?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеПродолжение(Результат, Параметры)Экспорт 

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Если Не Записать() Тогда 
		Возврат;
	КонецЕсли;	

	Если Не ЕстьКартинка И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыборКартинкиПродолжение",
			ЭтотОбъект,
			Параметры);

		ФайловыеФункцииКлиент.ВыбратьКартинкуИПоместитьВХранилище(
			ОписаниеОповещения, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКартинкиПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФотографиями.ЗаписатьИзображение(Параметры.АдресВременногоХранилищаФайла, 
		УникальныйИдентификатор, 
		Объект.Ссылка, Объект.Наименование);

	ЕстьКартинка = Истина;
	Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = ЕстьКартинка;
	Прочитать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтактныеЛица(Отбор, ПоказыватьУдаленные = Истина)
	
	Если Не ЗначениеЗаполнено(Отбор) Тогда 
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
		|	КонтактныеЛица.ПометкаУдаления КАК ПометкаУдаления,
		|	КонтактныеЛица.Наименование КАК Наименование,
		|	КонтактныеЛица.Должность КАК Должность,
		|	ЕСТЬNULL(КонтактнаяИнформацияEmail.Представление, """") КАК Email,
		|	ЕСТЬNULL(КонтактнаяИнформацияМобильный.Представление, """") КАК Мобильный,
		|	ЕСТЬNULL(КонтактнаяИнформацияТелефон.Представление, """") КАК Телефон
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактнаяИнформацияEmail
		|		ПО КонтактныеЛица.Ссылка = КонтактнаяИнформацияEmail.Ссылка
		|			И (КонтактнаяИнформацияEmail.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактнаяИнформацияМобильный
		|		ПО КонтактныеЛица.Ссылка = КонтактнаяИнформацияМобильный.Ссылка
		|			И (КонтактнаяИнформацияМобильный.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
		|		ПО КонтактныеЛица.Ссылка = КонтактнаяИнформацияТелефон.Ссылка
		|			И (КонтактнаяИнформацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица))
		| ГДЕ
		| 	%1
		|ИТОГИ ПО
		|	КонтактноеЛицо";
		
	ТекстОтбора = "";
	Если ТипЗнч(Отбор) = Тип("СправочникСсылка.Контрагенты") Тогда 
		ТекстОтбора = ТекстОтбора + "КонтактныеЛица.Владелец = &Параметр";
	Иначе 
		ТекстОтбора = ТекстОтбора + "КонтактныеЛица.Ссылка = &Параметр";
	КонецЕсли;
	
	Если Не ПоказыватьУдаленные Тогда 
		ТекстОтбора = ТекстОтбора + "
		|	И НЕ КонтактныеЛица.ПометкаУдаления";
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон(Запрос.Текст, ТекстОтбора);
	
	Запрос.Параметры.Вставить("Параметр", Отбор);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ссылка");
	Таблица.Колонки.Добавить("Наименование");
	Таблица.Колонки.Добавить("Должность");
	Таблица.Колонки.Добавить("АдресаТелефоны");
	Таблица.Колонки.Добавить("ПометкаУдаления");
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Строка = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
		Строка.Ссылка = Выборка.КонтактноеЛицо;
		Строка.АдресаТелефоны = "";
		
		ВыборкаОбъектов = Выборка.Выбрать();
		Пока ВыборкаОбъектов.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаОбъектов.Телефон) Тогда 
				СтрокаТелефон = СокрЛП(ВыборкаОбъектов.Телефон) + ", ";
				
				Если СтрНайти(Строка.АдресаТелефоны, СтрокаТелефон) = 0 Тогда 
					Строка.АдресаТелефоны = Строка.АдресаТелефоны + СтрокаТелефон;
				КонецЕсли;
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ВыборкаОбъектов.Мобильный) Тогда 
				СтрокаМобильный = НСтр("ru = 'моб.'; en = 'mobile.'") + " " + СокрЛП(ВыборкаОбъектов.Мобильный) + ", ";
				
				Если СтрНайти(Строка.АдресаТелефоны, СтрокаМобильный) = 0 Тогда 
					Строка.АдресаТелефоны = Строка.АдресаТелефоны + СтрокаМобильный;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаОбъектов.Email) Тогда 
				СтрокаEmail = СокрЛП(ВыборкаОбъектов.Email) + ", ";
				
				Если СтрНайти(Строка.АдресаТелефоны, СтрокаEmail) = 0 Тогда 
					Строка.АдресаТелефоны = Строка.АдресаТелефоны + СтрокаEmail;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Строка.АдресаТелефоны = Лев(Строка.АдресаТелефоны, СтрДлина(Строка.АдресаТелефоны) - 2);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокКонтактныхЛиц()
	
	ТаблицаКонтактныеЛица = ПолучитьКонтактныеЛица(Объект.Ссылка, ПоказыватьУдаленныеКонтактныеЛица);
	КонтактныеЛица.Очистить();
	
	Для Каждого КонтактноеЛицо Из ТаблицаКонтактныеЛица Цикл
		НоваяСтрока = КонтактныеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КонтактноеЛицо);
	КонецЦикла;
	
	КоличествоКонтактныхЛиц = КонтактныеЛица.Количество();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляСписка(КонтактноеЛицо)
	
	Таблица = ПолучитьКонтактныеЛица(КонтактноеЛицо);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Ссылка");
	СтруктураДанных.Вставить("ПометкаУдаления");
	СтруктураДанных.Вставить("Наименование");
	СтруктураДанных.Вставить("Должность");
	СтруктураДанных.Вставить("АдресаТелефоны");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Таблица[0]);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Функция УстановитьПометкуНаУдаление(СписокКонтактныхЛиц, ЗначениеПометкиУдаления, ТекстОшибки) Экспорт

	Для Каждого КонтактноеЛицо Из СписокКонтактныхЛиц Цикл 
		Попытка
			ОбъектКонтактногоЛица = КонтактноеЛицо.Значение.Ссылка.ПолучитьОбъект();
			ОбъектКонтактногоЛица.Заблокировать();
			ОбъектКонтактногоЛица.УстановитьПометкуУдаления(ЗначениеПометкиУдаления);
			ОбъектКонтактногоЛица.Разблокировать();
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Если Не ПоказыватьУдаленныеКонтактныеЛица Тогда 
		ЗаполнитьСписокКонтактныхЛиц();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения)

	Если ЭтоИНН(ТекстЗаполнения) Тогда 
	
		Объект.Наименование = "";
		Объект.ИНН = ТекстЗаполнения;
		Объект.ЮрФизЛицо = ?(СтрДлина(ТекстЗаполнения) = 10,
			Перечисления.ЮрФизЛицо.ЮрЛицо,
			Перечисления.ЮрФизЛицо.ФизЛицо);
			
		ЗаполнитьРеквизитыПоИНННаСервере(ТекстЗаполнения);
		ТекстЗаполнения = Неопределено;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(СтрокаПоиска, Знач ЗаполнениеПоИНН = Неопределено)

	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтключитьАвтоЗаполнениеРеквизитов <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьАвтоЗаполнениеРеквизитов = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьАвтоЗаполнениеРеквизитов", 0.1, Истина);
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	ПроверятьИНН = ЗаполнениеПоИНН <> Истина;
	
	Если ЗаполнениеПоИНН = Неопределено Тогда
		ЗаполнениеПоИНН = ЭтоИНН(СтрокаПоиска);
	КонецЕсли;
	
	Если (ПроверятьИНН И ЗначениеЗаполнено(Объект.ИНН))
		ИЛИ ЗначениеЗаполнено(Объект.КПП)
		ИЛИ ЗначениеЗаполнено(Объект.Наименование) 
		ИЛИ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'; en = 'Refill current attributes?'");
		ДопПараметры = Новый Структура("ЗаполнениеПоИНН,СтрокаПоиска", ЗаполнениеПоИНН, СтрокаПоиска);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение", 
			ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Если ЗаполнениеПоИНН Тогда
			ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаПоиска);
			ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
		Иначе 
			ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(СтрокаПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ДопПараметры.ЗаполнениеПоИНН Тогда
			ЗаполнитьРеквизитыПоИНННаКлиенте(ДопПараметры.СтрокаПоиска);
		Иначе 
			ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ДопПараметры.СтрокаПоиска);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаИНН)
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(СтрокаИНН, ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// Обработка ошибок
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?';
				|en = 'To automatically fill in details of counterparties, you must connect to customers online support. 
				|Connect now?'");
			ДопПараметры = Новый Структура("СтрокаПоиска,ЗаполнениеПоИНН", СтрокаИНН, Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ИначеЕсли ОписаниеОшибки = "НеУказанПароль" Тогда
			ТекстВопроса = НСтр("ru='Необходимо указать пароль к Интернет-поддержке пользователей
				|и установить флажок ""Запомнить пароль"".
				|Указать сейчас?';
				|en = 'You must specify password to cгstomers online support and check ""Remember password"". 
				|Specify now?'");
			ДопПараметры = Новый Структура("СтрокаПоиска,ЗаполнениеПоИНН", СтрокаИНН, Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ИначеЕсли ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИдентификаторМестаВызова", "forma_kontragenta");
			ОткрытьФорму("ОбщаяФорма.Сервис1СКонтрагентНеПодключен", ПараметрыФормы, ЭтотОбъект);
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли Объект.ЮрФизЛицо = ПредопределенноеЗначение(
		"Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда
		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов - мог измениться КПП.
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(СтрокаНаименование)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаПоиска", СтрокаНаименование);
	ДопПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента", 
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт

	Если НЕ ЭтоИНН(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоИНННаКлиенте(Результат);
	ТекущийЭлемент = Элементы.Наименование;

КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено 
		И Результат <> КодВозвратаДиалога.Отмена Тогда
		ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(ДопПараметры.СтрокаПоиска, ДопПараметры.ЗаполнениеПоИНН);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьАвтоЗаполнениеРеквизитов()

	ОтключитьАвтоЗаполнениеРеквизитов = Неопределено;	

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(СтрокаИНН, ОписаниеОшибки = "")
	
	ЭтоЮридическоеЛицо = (Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыКонтрагента = ДанныеЕдиныхГосРеестров.РеквизитыЮридическогоЛицаПоИНН(СтрокаИНН);
	Иначе
		РеквизитыКонтрагента = ДанныеЕдиныхГосРеестров.РеквизитыПредпринимателяПоИНН(СтрокаИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
	
	НаименованияАвтозаполнения.Очистить();
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеПолное);
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеСокращенное);
	
	Если ЭтоЮридическоеЛицо Тогда
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента, РеквизитыКонтрагента.ЮридическийАдрес);
		
		// Заполнение телефона
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, РеквизитыКонтрагента.Телефон);
		
		Если РеквизитыКонтрагента.Руководитель <> Неопределено Тогда
			
			Если Не Объект.Ссылка.Пустая() Тогда 
				ЗаполнитьСписокКонтактныхЛиц();
				ТаблицаКонтактныеЛица = ПолучитьКонтактныеЛица(Объект.Ссылка, ПоказыватьУдаленныеКонтактныеЛица);
				КонтактныеЛица.Очистить();
				
				Для Каждого КонтактноеЛицо Из ТаблицаКонтактныеЛица Цикл
					НоваяСтрока = КонтактныеЛица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, КонтактноеЛицо);
				КонецЦикла;
			КонецЕсли;
			
			Руководитель = РеквизитыКонтрагента.Руководитель;
			ПредставлениеКонтактногоЛица = Руководитель.Фамилия
				+ " " + Руководитель.Имя
				+ " " + Руководитель.Отчество;
			
			Отбор = Новый Структура("Наименование", ПредставлениеКонтактногоЛица);
			Строки = КонтактныеЛица.НайтиСтроки(Отбор);
			Если Строки.Количество() = 0 Тогда 
				ДанныеКонтактногоЛица = РеквизитыКонтрагента.Руководитель;
				НоваяСтрока = КонтактныеЛица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеКонтактногоЛица);
				НоваяСтрока.Наименование = ПредставлениеКонтактногоЛица;
			КонецЕсли;
			
			КоличествоКонтактныхЛиц = КонтактныеЛица.Количество();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанных.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
	ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИНН(СтрокаИНН)
	Возврат ЗначениеЗаполнено(СтрокаИНН)
		И ТипЗнч(СтрокаИНН) = Тип("Строка")
		И (СтрДлина(СтрокаИНН) = 10 ИЛИ СтрДлина(СтрокаИНН) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаИНН);
КонецФункции

// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти
