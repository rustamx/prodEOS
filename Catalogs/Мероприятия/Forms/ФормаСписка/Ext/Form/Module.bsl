#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Параметры списка
	Список.Параметры.УстановитьЗначениеПараметра("Участник", Справочники.Пользователи.ПустаяСсылка());
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	
	// Задачи
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда 
		Элементы.Задачи.Видимость = Ложь;
	КонецЕсли;
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Элементы.СостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	// Категории
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
		Элементы.ЕстьКатегорииДанных.Видимость = Ложь;
	КонецЕсли;
	
	// Автообновление
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.СписокКонтекстноеМенюАвтообновление.Видимость = Ложь;
	Иначе
		Автообновление.ЗагрузитьНастройкиАвтообновленияСписка(ЭтаФорма, "Список");
		Элементы.СписокКонтекстноеМенюАвтообновление.Видимость = Истина;
	КонецЕсли;
	
	// Вид просмотра
	ПереключитьВидПросмотра();
	
	// Отображение удаленных
	ПереключитьОтображатьУдаленные();
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Раздельное исполнение пунктов протокола.
	РаздельноеИсполнениеПунктовПротокола =
		ПолучитьФункциональнуюОпцию("ИспользоватьРаздельноеИсполнениеПунктовПротоколаМероприятия");
	
	// Отбор списка
	ПоказыватьМероприятия = Неопределено;
	
	// Отбор организатор - автоподбор
	Если Не ЗначениеЗаполнено(Организатор) Тогда
		Организатор = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	// Отбор участник - автоподбор
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Участник = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьОтбор();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Неопределено,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда 
			ОповеститьОбИзменении(Параметр.Предмет);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Отбор списка
	УстановитьОтборСписка(Список, Настройки);
	
	// Вид просмотра
	ПереключитьВидПросмотра();
	
	// Отображение удаленных
	ПереключитьОтображатьУдаленные();
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ПоказыватьМероприятия, ПоказыватьМероприятия);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ВидМероприятия, ВидМероприятия);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Участник, Участник);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Организатор, Организатор);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Проект, Проект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьМероприятияПриИзменении(Элемент)
	
	УстановитьОтбор();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ПоказыватьМероприятия, ПоказыватьМероприятия);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникПриИзменении(Элемент)
	
	УстановитьОтбор();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Участник, Участник);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ОтображатьЛичныхАдресатов", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор участника мероприятия'; en = 'Event attendee choice'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораУчастника", ЭтаФорма);
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораУчастника(ВыбранныеУчастники, ДопПараметры) Экспорт
	
	Если ВыбранныеУчастники = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Участник = ВыбранныеУчастники[0].Контакт;
	УстановитьОтбор();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Участник, Участник);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Участник = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	УстановитьОтбор();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Участник, Участник);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораУчастника(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораУчастника(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидМероприятияПриИзменении(Элемент)
	
	УстановитьОтбор();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ВидМероприятия, ВидМероприятия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторПриИзменении(Элемент)
	
	УстановитьОтбор();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Организатор, Организатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор организатора мероприятия'; en = 'Event organizer choice'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораОрганизатора", ЭтаФорма);
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораОрганизатора(ВыбранныеУчастники, ДопПараметры) Экспорт
	
	Если ВыбранныеУчастники = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Организатор = ВыбранныеУчастники[0].Контакт;
	УстановитьОтбор();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Организатор, Организатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Организатор = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	УстановитьОтбор();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Организатор, Организатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораОрганизатора(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	УстановитьОтбор();
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.Проект, Проект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПапки

&НаКлиенте
Процедура ПапкиПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам")
		И Элементы.Папки.Видимость
		И ТекущаяПапка <> Элементы.Папки.ТекущаяСтрока Тогда
		
		ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;
		
		ПодключитьОбработчикОжидания("УстановитьПараметрыСписка", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	// Запрет перетаскивания в пустую папку
	Если Не ЗначениеЗаполнено(Строка) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		УправлениеМероприятиямиКлиент.ИзменитьПапкуМероприятий(ПараметрыПеретаскивания.Значение, Строка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.Файлы Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуФайлы", ВыбраннаяСтрока, Истина);
		ОткрытьФорму("Справочник.Мероприятия.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.Задачи Тогда
		ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
			Новый Структура("Предмет", ВыбраннаяСтрока),
			ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ЕстьКатегорииДанных Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуКатегории", ВыбраннаяСтрока, Истина);
		ОткрытьФорму("Справочник.Мероприятия.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.СостояниеКонтроля Тогда
		КонтрольКлиент.ОбработкаКомандыКонтроль(ВыбраннаяСтрока, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ВыбраннаяСтрока);
	ОткрытьФорму("Справочник.Мероприятия.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущееМероприятие = Неопределено;
		ТекущаяПапка = Неопределено;
		УстановитьДоступностьКомандОтправить(Ложь);
		ОбновитьПараметрыУчетаВремениВФорме();
		Возврат;
	КонецЕсли;
	
	ТекущееМероприятие = ТекущиеДанные.Ссылка;
	УстановитьДоступностьКомандОтправить(ТекущиеДанные.ПротокольноеМероприятие);
	ОбновитьПараметрыУчетаВремениВФорме();
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		ТекущаяПапка = ТекущиеДанные.Папка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда 
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = ПолучитьЗначенияЗаполненияПоВидуПросмотра(); 
	Если ЗначенияЗаполнения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Открытьформу("Справочник.Мероприятия.ФормаОбъекта", ПараметрыФормы, Элемент, Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры


&НаКлиенте
Процедура Автообновление(Команда)
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияСписка(ЭтаФорма, "Список");
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрПапками(Команда)
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам");
		ПереключитьВидПросмотра();
		ПодключитьОбработчикОжидания("УстановитьПараметрыСписка", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрСписком(Команда)
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком");
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьМатериалы(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеЗапросаМатериалов = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.МатериалыВыступающихЗапрошены"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеЗапросаМатериалов", УстановилСостояниеЗапросаМатериалов);
	
	Оповещение = Новый ОписаниеОповещения("ЗапроситьМатериалы_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеЗапросаМатериалов)
		И ТипЗнч(УстановилСостояниеЗапросаМатериалов) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Материалы уже запрошены.'; en = 'Materials have already been requested.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть запрос'; en = 'Open request'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новый'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьМатериалы_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеЗапросаМатериалов);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ЗапроситьМатериалы");
	Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнитьПротокол(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеИсполненияПротокола = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколНаИсполнении"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеИсполненияПротокола", УстановилСостояниеИсполненияПротокола);
	
	Оповещение = Новый ОписаниеОповещения("ИсполнитьПротокол_Завершение", ЭтотОбъект, ДопПараметры);
	Если ЗначениеЗаполнено(УстановилСостояниеИсполненияПротокола)
		И ТипЗнч(УстановилСостояниеИсполненияПротокола) <> Тип("СправочникСсылка.Пользователи") Тогда
		ТекстВопроса = НСтр("ru = 'Протокол уже отправлен на исполнение.'; en = 'Minutes has been sent for performance.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть исполнение'; en = 'Open performance'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнитьПротокол_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеИсполненияПротокола);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(ТекущиеДанные.МатериалПротокол) Тогда 
		ПараметрыФормы = Новый Структура("Основание", ТекущиеДанные.МатериалПротокол);
		ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		
		УправлениеМероприятиямиКлиент.НаправитьПротоколМероприятияНаИсполнение(
			ТекущиеДанные.Ссылка, РаздельноеИсполнениеПунктовПротокола, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомитьСМатериалами(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеОзнакомленияСМатериалами = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.МатериалыОтправленыНаОзнакомление"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеОзнакомленияСМатериалами", УстановилСостояниеОзнакомленияСМатериалами);
	
	Оповещение = Новый ОписаниеОповещения("ОзнакомитьСМатериалами_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеОзнакомленияСМатериалами)
		И ТипЗнч(УстановилСостояниеОзнакомленияСМатериалами) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Материалы уже отправлены на ознакомление.'; en = 'Materials have already been sent for examination.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть ознакомление'; en = 'Open examination'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомитьСМатериалами_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеОзнакомленияСМатериалами);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ОзнакомитьСМатериалами");
	Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Ознакомление.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленные(Команда)
	
	ОтображатьУдаленные = Не ОтображатьУдаленные;
	ПереключитьОтображатьУдаленные();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПрава(Команда)
	
	Папка = Элементы.Папки.ТекущаяСтрока;
	Если Не ЗначениеЗаполнено(Папка) Тогда
		Возврат;
	КонецЕсли;
	
	// Открытие формы настройки прав
	ПараметрыФормы = Новый Структура("СсылкаНаОбъект", Папка);
	ОткрытьФорму("ОбщаяФорма.НастройкиПравПапок", ПараметрыФормы, , Папка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПротокол(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеПодготовкиПротокола = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколГотовиться"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеПодготовкиПротокола", УстановилСостояниеПодготовкиПротокола);
	
	Оповещение = Новый ОписаниеОповещения("ПодготовитьПротокол_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеПодготовкиПротокола)
		И ТипЗнч(УстановилСостояниеПодготовкиПротокола) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Подготовка протокола уже инициирована.'; en = 'Minutes preparation has already been initiated.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть процесс подготовки'; en = 'Open preparation process'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новый'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПротокол_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеПодготовкиПротокола);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ПодготовитьПротокол");
	Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегории(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьКатегорииПродолжение",
		ЭтотОбъект);
		
	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаОбъектов(
		Элементы.Список, Истина, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегорииПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Неопределено Тогда
		ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПригласитьУчастников(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановилСостояниеПриглашенияУчастников = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПриглашенияОтправлены"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеПриглашенияУчастников", УстановилСостояниеПриглашенияУчастников);
	
	Оповещение = Новый ОписаниеОповещения("ПригласитьУчастников_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеПриглашенияУчастников)
		И ТипЗнч(УстановилСостояниеПриглашенияУчастников) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Приглашение уже отправлено.'; en = 'Invitation has already been sent.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть приглашение'; en = 'Open invitation'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПригласитьУчастников_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеПриглашенияУчастников);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипПрограммы = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(ТекущиеДанные.МатериалПрограмма) Тогда 
		ПараметрыФормы = Новый Структура("Основание", ТекущиеДанные.МатериалПрограмма);
		ОткрытьФорму("БизнесПроцесс.Приглашение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		ПараметрыФормы = Новый Структура("Основание", ТекущиеДанные.Ссылка);
		ОткрытьФорму("БизнесПроцесс.Приглашение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиМероприятие(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеПроведенияМероприятия = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеПроведенияМероприятия", УстановилСостояниеПроведенияМероприятия);
	
	Оповещение = Новый ОписаниеОповещения("ПровестиМероприятие_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеПроведенияМероприятия)
		И ТипЗнч(УстановилСостояниеПроведенияМероприятия) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Проведение мероприятия уже инициировано.'; en = 'Event holding has already been initiated.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть процесс'; en = 'Open process'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новый'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиМероприятие_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеПроведенияМероприятия);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ПровестиМероприятие");
	Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьПротокол(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеСогласованияПротокола = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
		ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколНаСогласовании"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеСогласованияПротокола", УстановилСостояниеСогласованияПротокола);
	
	Оповещение = Новый ОписаниеОповещения("СогласоватьПротокол_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеСогласованияПротокола)
		И ТипЗнч(УстановилСостояниеСогласованияПротокола) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Протокол уже отправлен на согласование.'; en = 'Minutes has been sent for approval.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть согласование'; en = 'Open approval'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьПротокол_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеСогласованияПротокола);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(ТекущиеДанные.МатериалПротокол) Тогда 
		ПараметрыФормы = Новый Структура("Основание", ТекущиеДанные.МатериалПротокол);
		ОткрытьФорму("БизнесПроцесс.Согласование.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе	
		Основание = Новый Структура;
		Основание.Вставить("ОперацияМероприятия", "СогласоватьПротокол");
		Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		ОткрытьФорму("БизнесПроцесс.Согласование.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПрограмму(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеУтвержденияПрограммы = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
			ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПрограммаНаУтверждении"));
			
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеУтвержденияПрограммы", УстановилСостояниеУтвержденияПрограммы);
	
	Оповещение = Новый ОписаниеОповещения("УтвердитьПрограмму_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеУтвержденияПрограммы)
		И ТипЗнч(УстановилСостояниеУтвержденияПрограммы) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Программа уже находиться на утверждении.'; en = 'Agenda has already been sent for confirmation.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть утверждение'; en = 'Open confirmation'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПрограмму_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеУтвержденияПрограммы);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипПрограммы = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(ТекущиеДанные.МатериалПрограмма) Тогда 
		ПараметрыФормы = Новый Структура("Основание", ТекущиеДанные.МатериалПрограмма);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе	
		Основание = Новый Структура;
		Основание.Вставить("ОперацияМероприятия", "УтвердитьПрограмму");
		Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПротокол(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановилСостояниеУтвержденияПротокола = УправлениеМероприятиямиВызовСервера.ПолучитьУстановилСостояниеМероприятия(
			ТекущиеДанные.Ссылка, ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.ПротоколНаУтверждении"));
			
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("УстановилСостояниеУтвержденияПротокола", УстановилСостояниеУтвержденияПротокола);
	
	Оповещение = Новый ОписаниеОповещения("УтвердитьПротокол_Завершение",
		ЭтотОбъект, ДопПараметры);
	
	Если ЗначениеЗаполнено(УстановилСостояниеУтвержденияПротокола)
		И ТипЗнч(УстановилСостояниеУтвержденияПротокола) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		ТекстВопроса = НСтр("ru = 'Протокол уже отправлен на утверждение.'; en = 'Minutes has been sent for confirmation.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть утверждение'; en = 'Open confirmation'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПротокол_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, ДопПараметры.УстановилСостояниеУтвержденияПротокола);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(ТекущиеДанные.МатериалПротокол) Тогда 
		ПараметрыФормы = Новый Структура("Основание", ТекущиеДанные.МатериалПротокол);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		Основание = Новый Структура;
		Основание.Вставить("ОперацияМероприятия", "УтвердитьПротокол");
		Основание.Вставить("Мероприятие", ТекущиеДанные.Ссылка);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчеты(Команда)
		
	Раздел = ПредопределенноеЗначение("Перечисление.РазделыОтчетов.МероприятияСписок");
	
	ЗаголовокФормы = НСтр("ru = 'Отчеты по мероприятиям'; en = 'Events reports'");
	
	РазделГипперссылка = НастройкиВариантовОтчетовДокументооборот.ПолучитьРазделОтчетаПоИмени("СовместнаяРабота");
	
	ПараметрыФормы = Новый Структура("Раздел, ЗаголовокФормы, НеОтображатьИерархию, РазделГипперссылка", 
										Раздел, ЗаголовокФормы, Истина, РазделГипперссылка);
	
	ОткрытьФорму(
		"Обработка.ВсеОтчеты.Форма.ФормаПоКатегориям",
		ПараметрыФормы,
		ЭтаФорма, 
		"МероприятияСписок");

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, ТекущиеДанные.Ссылка);
		
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", Строка(ТекущиеДанные.Ссылка));
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект,
			Новый Структура("Объект", ТекущиеДанные.Ссылка));
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты(Команда)
	
	ПараметрыФормы = Новый Структура("Источник", ТекущееМероприятие);
	ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаСпискаИсточника", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		ТекущиеДанные.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтаФорма); // Выполнена
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтбор()
	
	ЗначениеОтбораОрганизатор = Неопределено;
	Если ТипЗнч(Организатор) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(Организатор) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЗначениеОтбораОрганизатор = Организатор;
	КонецЕсли;
	
	ЗначениеОтбораОрганизаторКонтактноеЛицо = Неопределено;
	Если ТипЗнч(Организатор) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ЗначениеОтбораОрганизаторКонтактноеЛицо = Организатор;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Соответствие();
	Параметрыотбора.Вставить("ПоказыватьМероприятия", ПоказыватьМероприятия);
	Параметрыотбора.Вставить("Участник", Участник);
	Параметрыотбора.Вставить("ВидМероприятия", ВидМероприятия);
	Параметрыотбора.Вставить("Организатор", ЗначениеОтбораОрганизатор);
	Параметрыотбора.Вставить("ОрганизаторКонтактноеЛицо", ЗначениеОтбораОрганизаторКонтактноеЛицо);
	Параметрыотбора.Вставить("Проект", Проект);
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСписка(Список, ПараметрыОтбора)
	
	Список.Параметры.УстановитьЗначениеПараметра("Участник", ПараметрыОтбора["Участник"]);
	
	УстановитьОтборСпискаПоПараметру(Список.Параметры, "СостояниеМероприятия", ПараметрыОтбора["ПоказыватьМероприятия"]);
	УстановитьОтборСпискаПоПараметру(Список.Параметры, "ВидМероприятия", ПараметрыОтбора["ВидМероприятия"]);
	УстановитьОтборСпискаПоПараметру(Список.Параметры, "Организатор", ПараметрыОтбора["Организатор"]);
	УстановитьОтборСпискаПоПараметру(Список.Параметры, "ОрганизаторКонтактноеЛицо", ПараметрыОтбора["ОрганизаторКонтактноеЛицо"]);
	УстановитьОтборСпискаПоПараметру(Список.Параметры, "Проект", ПараметрыОтбора["Проект"]);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСпискаПоПараметру(Параметры, ИмяПараметра, Значение)
	
	Параметр = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Параметр.Использование = Ложь;
	Если ЗначениеЗаполнено(Значение) Тогда
		Параметры.УстановитьЗначениеПараметра(ИмяПараметра, Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСписка()
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяПапка) Тогда
			ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;
		КонецЕсли;
		
		Список.Параметры.УстановитьЗначениеПараметра("Папка", ТекущаяПапка);
		Элементы.Список.ТекущаяСтрока = ТекущееМероприятие;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьВидПросмотра()
	
	ПредыдущийВидПросмотра = ВидПросмотра;
	
	Параметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Папка"));
	Параметр.Использование = Ложь;
	
	Элементы.ВключитьПросмотрПапками.Пометка = Ложь;
	Элементы.ВключитьПросмотрСписком.Пометка = Ложь;
	
	Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком Тогда
		
		Элементы.Папки.Видимость = Ложь;
		Элементы.ВключитьПросмотрСписком.Пометка = Истина;
		
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам Тогда
		
		Элементы.Папки.Видимость = Истина;
		Элементы.ВключитьПросмотрПапками.Пометка = Истина;
		
		Список.Параметры.УстановитьЗначениеПараметра("Папка", Неопределено);
		Элементы.Папки.ТекущаяСтрока = ТекущаяПапка;
		ТекущаяПапка = Неопределено;
		
	Иначе
		
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
		ПереключитьВидПросмотра();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначенияЗаполненияПоВидуПросмотра()
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяПапка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЗначенияЗаполнения.Вставить("Папка", ТекущаяПапка);
		
	КонецЕсли;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

&НаСервере
Процедура ПереключитьОтображатьУдаленные()
	
	Элементы.ФормаОтображатьУдаленные.Пометка = ОтображатьУдаленные;
	Список.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленные);
	Папки.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандОтправить(ПротокольноеМероприятие)
	
	ВыбраноМероприятие = ЗначениеЗаполнено(ТекущееМероприятие);
	
	Если Элементы.Найти("ФормаОбщаяКомандаСоздатьПисьмоНаОсновании") <> Неопределено Тогда
		Элементы.ФормаОбщаяКомандаСоздатьПисьмоНаОсновании.Доступность = ВыбраноМероприятие;
	КонецЕсли;
	Элементы.ОбщаяКомандаСоздатьБизнесПроцесс.Доступность = ВыбраноМероприятие;
	
	Элементы.ФормаУтвердитьПрограмму.Доступность = ВыбраноМероприятие;
	Элементы.ФормаПригласитьУчастников.Доступность = ВыбраноМероприятие;
	Элементы.ФормаЗапроситьМатериалы.Доступность = ВыбраноМероприятие;
	Элементы.ФормаОзнакомитьСМатериалами.Доступность = ВыбраноМероприятие;
	Элементы.ФормаПровестиМероприятие.Доступность = ВыбраноМероприятие;
	
	Элементы.ФормаПодготовитьПротокол.Доступность = ПротокольноеМероприятие;
	Элементы.ФормаСогласоватьПротокол.Доступность = ПротокольноеМероприятие;
	Элементы.ФормаУтвердитьПротокол.Доступность = ПротокольноеМероприятие;
	Элементы.ФормаИсполнитьПротокол.Доступность = ПротокольноеМероприятие;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыУчетаВремениВФорме()
	
	Если Не ЗначениеЗаполнено(ТекущееМероприятие) Тогда 
		Элементы.ПереключитьХронометраж.Доступность = Ложь;
		Элементы.УказатьТрудозатраты.Доступность = Ложь;
		Элементы.Трудозатраты.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыУчетаВремени = ПолучитьПараметрыУчетаВремени(ТекущееМероприятие);
	
	ДатаНачалаХронометража = ПараметрыУчетаВремени.ДатаНачалаХронометража;
	ДатаКонцаХронометража = ПараметрыУчетаВремени.ДатаКонцаХронометража;
	ВключенХронометраж = ПараметрыУчетаВремени.ВключенХронометраж;
	ОпцияИспользоватьУчетВремени = ПараметрыУчетаВремени.ОпцияИспользоватьУчетВремени;
	ВидыРабот = ПараметрыУчетаВремени.ВидыРабот;
	СпособУказанияВремени = ПараметрыУчетаВремени.СпособУказанияВремени;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.ПереключитьХронометраж Цикл
		Элементы.ПереключитьХронометраж[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.УказатьТрудозатраты Цикл
		Элементы.УказатьТрудозатраты[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
	Элементы.Трудозатраты.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущееМероприятие) Тогда 
		Возврат;
	КонецЕсли;
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ТекущееМероприятие,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Параметры.Объект);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущееМероприятие) Тогда 
		Возврат;
	КонецЕсли;
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ТекущееМероприятие,
		ВидыРабот,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыУчетаВремени(Мероприятие)
	
	Результат = Новый Структура;
	
	ДатаНачалаХронометража = Неопределено;
	ДатаКонцаХронометража = Неопределено;
	ВключенХронометраж = Неопределено;
	ОпцияИспользоватьУчетВремени = Неопределено;
	ВидыРабот = Неопределено;
	СпособУказанияВремени = Неопределено;
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Имя, Подсказка");
	
	ПереключитьХронометраж = Новый Структура("Доступность, Пометка, Видимость");
	ПереключитьХронометраж.Доступность = Истина;
	
	УказатьТрудозатраты = Новый Структура("Доступность");
	УказатьТрудозатраты.Доступность = Истина;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Мероприятие,
		ВидыРабот,
		СпособУказанияВремени,
		ПереключитьХронометражНеМеняяПодсказку,
		ПереключитьХронометраж,
		УказатьТрудозатраты);
		
	Результат.Вставить("ПереключитьХронометраж", Новый Соответствие);
	Результат.Вставить("УказатьТрудозатраты", Новый Соответствие);
	
	Результат.ПереключитьХронометраж.Вставить(
		"Доступность",
		ПереключитьХронометраж.Доступность);
	Результат.ПереключитьХронометраж.Вставить(
		"Пометка",
		ПереключитьХронометраж.Пометка);
	Результат.УказатьТрудозатраты.Вставить(
		"Доступность",
		УказатьТрудозатраты.Доступность);
	
	Результат.Вставить("ДатаНачалаХронометража", ДатаНачалаХронометража);
	Результат.Вставить("ДатаКонцаХронометража", ДатаКонцаХронометража);
	Результат.Вставить("ВключенХронометраж", ВключенХронометраж);
	Результат.Вставить("ОпцияИспользоватьУчетВремени", ОпцияИспользоватьУчетВремени);
	Результат.Вставить("ВидыРабот", ВидыРабот);
	Результат.Вставить("СпособУказанияВремени", СпособУказанияВремени);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
