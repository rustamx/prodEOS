#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЯвкаОбязательнаПоУмолчанию = УправлениеМероприятиями.ПолучитьПерсональнуюНастройку("ЯвкаОбязательнаПоУмолчанию");
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	// Кэшируемые значения
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	// Категории данных
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	
	// Установка параметров файлов
	Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	Файлы.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
	НайтиИПоказатьКоличествоФайлов();
	
	// Установка времени
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.РешенияСрокИсполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	
	// Вывод предмета строкой
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда 
		ПредметСтрокой = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(Объект.Предмет);
	КонецЕсли;	
	
	ПерепискаПоПредмету = Неопределено;
	НачальныйПерепискаПоПредмету = ПерепискаПоПредмету;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		
		МассивФайлов =
			РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Параметры.ЗначениеКопирования, Ложь);
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			Для Каждого ФайлСсылка Из МассивФайлов Цикл
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлСсылка);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ШаблонОснованиеДляСоздания = ФайлСсылка.ШаблонОснованиеДляСоздания;
				НоваяСтрока.ДобавленИзШаблона = ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания);
				
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайлов = МассивФайлов.Количество();
			
		КонецЕсли;
		
		// Копирование категорий данных
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(Параметры.ЗначениеКопирования);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		// Копирование участников и включение организатора в участники
		УчастникиЗначенияКопирования = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Параметры.ЗначениеКопирования);
		Участники.Загрузить(УчастникиЗначенияКопирования);
		
		ДобавитьВУчастники(Объект.Организатор);
		ДобавитьВУчастники(Объект.ОрганизаторКонтактноеЛицо);
		
		Для Каждого Участник Из Участники Цикл
			Участник.СостояниеПриглашения = Неопределено;
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Основание) Тогда // Ввод на основании	
		
		Если ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
			ОснованиеДокумента = Параметры.Основание.Основание;
		Иначе
			ОснованиеДокумента = Параметры.Основание;
		КонецЕсли;
		
	 	Если ТипЗнч(ОснованиеДокумента) = Тип("Массив") 
			И ОснованиеДокумента.Количество() > 0
			И ТипЗнч(ОснованиеДокумента[0]) = Тип("СправочникСсылка.Файлы") Тогда 			
			
			Для Каждого Файл Из ОснованиеДокумента Цикл  
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			КоличествоФайлов = ФайлыДобавленные.Количество();	
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(ОснованиеДокумента) Тогда
			
			МассивФайлов =
				РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОснованиеДокумента, Ложь);
				
			Если МассивФайлов.Количество() > 0 Тогда
				
				Для Каждого ФайлСсылка Из МассивФайлов Цикл
					
					ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлСсылка);
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
					
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
					НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
					НоваяСтрока.ДобавленИзШаблона = Ложь;
					
				КонецЦикла;
				
				Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
				
				КоличествоФайлов = МассивФайлов.Количество();
				
			КонецЕсли;
			
			Если ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.ВходящиеДокументы")
				Или ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
				ПерепискаПоПредмету = ОснованиеДокумента;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.Мероприятия") Тогда 
			УчастникиОснования = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(ОснованиеДокумента);
			Участники.Загрузить(УчастникиОснования);
			
			Для Каждого Участник Из Участники Цикл
				Участник.СостояниеПриглашения = Неопределено;
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(Объект, ОснованиеДокумента, "Председатель");
			ЗаполнитьЗначенияСвойств(Объект, ОснованиеДокумента, "Секретарь");
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.Проекты") Тогда
			
			Для Каждого ЭлементПроектнаяКоманда Из ОснованиеДокумента.ПроектнаяКоманда Цикл
				ДобавитьВУчастники(ЭлементПроектнаяКоманда.Исполнитель);
			КонецЦикла;
			
			Объект.Председатель = ОснованиеДокумента.Руководитель;
			ДобавитьВУчастники(Объект.Председатель);
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.Контрагенты")
			Или ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			
			ДобавитьВУчастники(ОснованиеДокумента);
			
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОснованиеДокумента) Тогда 
			
			Параметры.ПисьмоОснование = ОснованиеДокумента;
			
			Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ОснованиеДокумента) Тогда
				
				ОтправительАдресат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеДокумента, "ОтправительАдресат");
				Если ЗначениеЗаполнено(ОтправительАдресат) Тогда
					ДанныеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(ОтправительАдресат);
					ДобавитьВУчастники(ДанныеАдресата.Контакт);
				КонецЕсли;
				
			ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ОснованиеДокумента) Тогда
				
				Для Каждого Получатель Из ОснованиеДокумента.ПолучателиПисьма Цикл
					Адресат = Получатель.Адресат;
					Если ЗначениеЗаполнено(Адресат) Тогда
						ДанныеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Адресат);
						ДобавитьВУчастники(ДанныеАдресата.Контакт);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// Заполнение файлов из письма
			МассивФайлов =
				РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОснованиеДокумента, Ложь);
			
			Если МассивФайлов.Количество() > 0 Тогда
				
				Для Каждого ФайлСсылка Из МассивФайлов Цикл
					
					ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлСсылка);
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
					
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
					НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
					НоваяСтрока.ДобавленИзШаблона = Ложь;
					
				КонецЦикла;
				
				Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
				
				КоличествоФайлов = МассивФайлов.Количество();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("МассивФайлов") Тогда
		
		МассивФайлов = Параметры.МассивФайлов;
		Если МассивФайлов.Количество() <> 0 Тогда
			Для Каждого ФайлПринятый Из МассивФайлов Цикл
				Файл = Новый Файл(ФайлПринятый);
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
				НоваяСтрока.ПолныйПуть = ФайлПринятый;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайлов = МассивФайлов.Количество();
			
			Если МассивФайлов.Количество() = 1 Тогда
				Файл = Новый Файл(МассивФайлов[0]);
				Объект.Заголовок = Файл.ИмяБезРасширения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(Объект.Ссылка);
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи()
		И Не ЭлектроннаяПодпись.ИспользоватьШифрование() Тогда
		
		Элементы.ФайлыПодписан.Видимость = Ложь;
	КонецЕсли;
	
	// Чтение категорий данных
	Если ИспользоватьКатегорииДанных Тогда
		ПредопределенныеВсеКатегории = Справочники.КатегорииДанных.ВсеКатегории;
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных"); 
		Если РольДоступна(Метаданные.Роли.ПроверкаКатегорий) Тогда
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
				Если АвтоматическаяКатегоризацияВыполнена Тогда
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
				Иначе
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
				КонецЕсли;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			КонецЕсли;
			Если ИспользоватьПроверкуКатегорий Тогда
				КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
				Если КатегорииПроверены Тогда
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
				Иначе
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
				КонецЕсли;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;
	
	// Видимость программы и протокола
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидМероприятия", Объект.ВидМероприятия));
	УчитыватьКакПротокольноеМероприятие = ПолучитьФункциональнуюОпциюФормы("УчитыватьКакПротокольноеМероприятие");
	УчитыватьКуратора = ПолучитьФункциональнуюОпциюФормы("УчитыватьКуратора");
	ДлительностьПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидМероприятия, "Длительность");
	Если Не ЗначениеЗаполнено(ДлительностьПоУмолчанию) Тогда
		ДлительностьПоУмолчанию = 3600;
	Иначе
		ДлительностьПоУмолчанию = ДлительностьПоУмолчанию * 60;
	КонецЕсли;
	
	УстановитьВидимость();
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьРеквизитыПоВидуМероприятия();
	КонецЕсли;
	
	// Заполнение участников мероприятия
	ЗаполнитьУчастниковМероприятия();
	
	// Вывод информационных надписей
	ВывестиДлительностьВПрограмме();
	ВывестиРешенияВПрограмме();
	ВывестиПротоколМероприятия();
	
	СледующееМероприятие = УправлениеМероприятиями.ПолучитьСледующееМероприятие(Объект.Ссылка);
	Если Не ЗначениеЗаполнено(СледующееМероприятие) Тогда 
		Элементы.СледующееМероприятие.Видимость = Ложь;
	КонецЕсли;	
	
	// Инициализация учета времени
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияВестиУчетТрудозатрат,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
	    ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
	
	// Заполнение рабочих групп
	РаботаСРабочимиГруппами.ДокументПриСозданииНаСервере(ЭтаФорма);
	
	// Запись в список последних
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаСвойства");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
	ОтображатьПодсказкуСледующегоДействия = ТекущийПользователь = Объект.Организатор
		Или ТекущийПользователь = Объект.Секретарь
		Или ТекущийПользователь = Объект.Председатель;
	Элементы.ПодсказкаСледующегоДействия.Видимость = ОтображатьПодсказкуСледующегоДействия;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДобавитьВУчастники(Объект.Организатор);
		ДобавитьВУчастники(Объект.ОрганизаторКонтактноеЛицо);
		ПринятьПриглашениеТекущимПользователем();
	КонецЕсли;
	
	// Показ помеченных на удаление файлов
	ПоказатьПомеченныеНаУдаление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭтаФорма.ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		Ложь);
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	
	ВывестиСтрокуСостояний();
	
	// Вывод состояний
	ОбновитьСостоянияМероприятия();
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	ПроверитьОтсутствие = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ИспользоватьСхемыПомещений = ПолучитьФункциональнуюОпцию("ИспользоватьСхемыПомещений");
	Элементы.МестоПроведения.КнопкаВыбора = ИспользоватьСхемыПомещений;
	ПрочитатьМестоПроведения();
	
	// Текущая закладка при открытии.
	Если Параметры.ОткрытьЗакладкуФайлы Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаФайлы;
	ИначеЕсли Параметры.ОткрытьЗакладкуКатегории Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Категории;
	КонецЕсли;
	
	// Доступность по правам
	УстановитьДоступностьПоПравам();
	
	// Раздельное исполнение пунктов протокола.
	РаздельноеИсполнениеПунктовПротокола =
		ПолучитьФункциональнуюОпцию("ИспользоватьРаздельноеИсполнениеПунктовПротоколаМероприятия");
	
	УправлениеМероприятиямиПереопределяемый.ОбработкаЗаполненияДополнительныхРеквизитов(ЭтаФорма, Объект, Параметры.Основание);
	
	// Организатор текстом.
	Если ЗначениеЗаполнено(Объект.Организатор) И ЗначениеЗаполнено(Объект.ОрганизаторКонтактноеЛицо) Тогда
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2", Объект.Организатор, Объект.ОрганизаторКонтактноеЛицо);
	Иначе
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", Объект.Организатор);
	КонецЕсли;
	
	УстановитьДоступностьПоСостоянию();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	Параметры.Свойство("ПользовательКалендаря", ПользовательКалендаря);
	ОбновитьДанныеСвязаннойЗаписиКалендаря();
	ОбновитьДанныеПриглашения();
	ИспользоватьРабочийКалендарь = ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь");
	
	ЗаполнитьСписокТиповПредмета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиОсталосьДоНачала();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	УстановитьДоступность();
	ЗаполнитьИнтервалыНапоминания();
	
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрытьФормуПриНаличииЗанятыхФайлов <> Истина Тогда
		ДелопроизводствоКлиент.ПередЗакрытиемДокумента(Объект, Отказ, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") Тогда
		ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", Ложь);
	КонецЕсли;
	
	ИнформацияОбОтсутствии = Неопределено;
	Если Не ОтсутствияКлиент.ПроверитьОтсутствиеПоМероприятию(ЭтаФорма, Отказ, ИнформацияОбОтсутствии) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюПослеВопросаОВозможностиОтсутствия",
			ЭтотОбъект, ПараметрыЗаписи);
		ОтсутствияКлиент.ПоказатьПредупреждениеОбОтсутствииПоМероприятию(
			ИнформацияОбОтсутствии, ОписаниеОповещения, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Программа Цикл
		Строка.ВремяПланСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.ВремяПлан);
		Строка.ВремяФактСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.ВремяФакт);
	КонецЦикла;
	
	УправлениеМероприятиямиКлиентСервер.ВывестиРешенияПрограммы(Объект.Программа, Объект.Протокол);
	
	// Сортировка протокола
	УправлениеМероприятиямиКлиентСервер.СортироватьПротокол(Объект.Протокол);
	
	Если Не УчитыватьКакПротокольноеМероприятие Тогда
		Объект.Председатель = ПользователиПустаяСсылка;
		Объект.Секретарь = ПользователиПустаяСсылка;
	КонецЕсли;
	
	Если Не УчитыватьКуратора Тогда
		Объект.Куратор = ПользователиПустаяСсылка;
	КонецЕсли;
	
	УстановитьМестоПроведения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПослеВопросаОВозможностиОтсутствия(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьОтсутствие = Ложь;
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") И Не ПараметрыЗаписи.ЗакрытьПослеЗаписи Тогда
			Возврат;
		КонецЕсли;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	// Удаление пустых строк участников
	КоличествоУчастников = Участники.Количество();
	Для Инд = 1 По КоличествоУчастников Цикл
		Строка = Участники[КоличествоУчастников - Инд];
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Участники.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	КоличествоУчастников = Участники.Количество();
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;	
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(
				Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СписокУчастников", Участники);
	
	Если ПараметрыЗаписи.ЭтоНовыйОбъект Тогда 
		
		Если Не ИзмененоСостояние Тогда 
			
			ИзмененоСостояние = Истина;
			
			СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние, Тип",
				Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки,
				ПользователиКлиентСервер.ТекущийПользователь(),
				ТекущаяДатаСеанса(),
				Перечисления.СостоянияМероприятий.ПустаяСсылка(),
				"Мероприятия");
			
			ИзмененныеСостояния.Очистить();
			ИзмененныеСостояния.Добавить(СтруктураСостояния);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстОшибки = "";
	ДопустимыеПользователи = Новый Массив;
	ДопустимыеПользователи.Добавить(ТекущийОбъект.Организатор);
	Если ЗначениеЗаполнено(ТекущийОбъект.Куратор) Тогда
		ДопустимыеПользователи.Добавить(ТекущийОбъект.Куратор);
	КонецЕсли;
	Если Не БронированиеПомещений.ВозможнаБроньПомещения(Объект.Помещение, Объект.ДатаНачала,
		Объект.ДатаОкончания, ДопустимыеПользователи, Объект.Ссылка, ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "МестоПроведения",, Отказ);
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИзмененныеСостояния", ИзмененныеСостояния.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ПерепискаПоПредмету) И НачальныйПерепискаПоПредмету <> ПерепискаПоПредмету Тогда 
		ОснованиеПереписки = ПерепискаПоПредмету;	
	КонецЕсли;
	
	// Запись участников совещания
	Если ДанныеУчастниковЗаблокированы Или Объект.Ссылка.Пустая() Тогда 
		
		НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Мероприятие.Значение = ТекущийОбъект.Ссылка;
		НаборЗаписей.Отбор.Мероприятие.Использование = Истина;
		
		Для Каждого Строка Из Участники Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				РеквизитыРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Исполнитель,
					"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
				НоваяЗапись.УдалитьИсполнитель = РеквизитыРоли.Владелец;
				НоваяЗапись.УдалитьОсновнойОбъектАдресации = РеквизитыРоли.ОсновнойОбъектАдресации;
				НоваяЗапись.УдалитьДополнительныйОбъектАдресации = РеквизитыРоли.ДополнительныйОбъектАдресации;
			Иначе
				НоваяЗапись.УдалитьИсполнитель = Строка.Исполнитель;
				НоваяЗапись.УдалитьОсновнойОбъектАдресации = Неопределено;
				НоваяЗапись.УдалитьДополнительныйОбъектАдресации = Неопределено;
			КонецЕсли;
			НоваяЗапись.Мероприятие = ТекущийОбъект.Ссылка;
			НоваяЗапись.Порядок = Участники.Индекс(Строка);
		КонецЦикла;	
		НаборЗаписей.Записать();
		
		РазблокироватьДанныеУчастниковДляРедактирования();
		
	КонецЕсли;
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
	// Установка связей
	СвязиДокументов.УстановитьСвязь(
		ТекущийОбъект.Ссылка,
		НачальныйПерепискаПоПредмету,
		ПерепискаПоПредмету,
		Справочники.ТипыСвязей.ПерепискаПоПредмету);
	Если ЗначениеЗаполнено(Параметры.ПисьмоОснование) Тогда
		СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, Неопределено, Параметры.ПисьмоОснование,
			Справочники.ТипыСвязей.НаОснованииПисьма);
	КонецЕсли;
	
	// Изменение номеров пунктов протокола
	Если ИзменилсяНомерПунктаПротокола Тогда
		Для Каждого СтрокаПротокола Из Объект.Протокол Цикл
			Если Не СтрокаПротокола.ИзменилсяНомерПунктаПротокола Тогда
				Продолжить;
			КонецЕсли;
			ПунктПротокола = СтрокаПротокола.ПунктПротокола.ПолучитьОбъект();
			ПунктПротокола.ДополнительныеСвойства.Вставить("ИзменениеИзМероприятия", Истина);
			ПунктПротокола.НомерПунктаПрограммы = СтрокаПротокола.НомерПунктаПрограммы;
			ПунктПротокола.Записать();
			СтрокаПротокола.ИзменилсяНомерПунктаПротокола = Ложь;
		КонецЦикла;
		ИзменилсяНомерПунктаПротокола = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Состояние
	ИзмененныеСостояния.Очистить();
	ОбновитьСостоянияМероприятия();
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	ВывестиДлительностьВПрограмме();
	ВывестиРешенияВПрограмме();
	ВывестиПротоколМероприятия();
	
	// Создание файлов при сохранении нового документа
	Если ФайлыДобавленные.Количество() <> 0 И ЭтоАдресВременногоХранилища(ФайлыДобавленные[0].ПолныйПуть) Тогда
		Для Каждого ФайлТаблицы Из ФайлыДобавленные Цикл
			ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
			
			ВладелецФайла = Объект.Ссылка;
			Источник = ДанныеФайла.Ссылка;
			
			ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
			
			Если ТипЗнч(Объект.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Тогда 
				ХранитьВерсииНовыйФайл = Истина;
			КонецЕсли;	
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.Комментарий = Источник.Описание;
			СведенияОФайле.ИмяБезРасширения = Источник.ПолноеНаименование;
			СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;
			
			НачатьТранзакцию();
			Попытка
				Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(ВладелецФайла, СведенияОФайле);
				
				ХранилищеФайла = Неопределено;
				Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
					ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
				КонецЕсли;	
				
				СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
				СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
				СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
				СведенияОФайле.АдресВременногоХранилищаТекста = Источник.ТекущаяВерсия.ТекстХранилище;
				СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
				СведенияОФайле.ВремяИзменения = Источник.ТекущаяВерсия.ДатаМодификацииФайла;
				СведенияОФайле.ВремяИзмененияУниверсальное = Источник.ТекущаяВерсия.ДатаМодификацииУниверсальная;

				Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
				
				РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
				
				ПараметрыРаспознавания = РаботаСФайламиВызовСервера.ПодготовитьПараметрыРаспознавания();
				Если ПараметрыРаспознавания <> Неопределено И ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления") И ПараметрыРаспознавания.РаспознатьПослеДобавления Тогда
					РаспознатьНемедленно = Ложь;
					ОписаниеОшибки = "";
					РаспознанныйТекст = "";
					РаботаСФайламиВызовСервера.РаспознатьФайл(Приемник, ПараметрыРаспознавания, ОписаниеОшибки, 
						РаспознанныйТекст, УникальныйИдентификатор,  РаспознатьНемедленно);		
				КонецЕсли;
				
				Если ФайлТаблицы.ДобавленИзШаблона Тогда
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.ШаблонОснованиеДляСоздания = ФайлТаблицы.ШаблонОснованиеДляСоздания;
					ФайлОбъект.Записать();	
				КонецЕсли;
				
				Если ДанныеФайла.Зашифрован Тогда
					
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.Зашифрован = Истина;
					
					Для Каждого Строка Из Источник.СертификатыШифрования Цикл
						НоваяСтрока = ФайлОбъект.СертификатыШифрования.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					КонецЦикла;
					
					ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ФайлОбъект.Записать();
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					ВерсияОбъект.Зашифрован = Истина;
					ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ВерсияОбъект.Записать();
					
				КонецЕсли;	
				
				Если Источник = ТекущийФайлВСпискеДобавленных Тогда
					ТекущийФайлВСпискеДобавленных = Приемник;
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
		ФайлыДобавленные.Очистить();	
	КонецЕсли;
	
	// Категории данных
	Если ИспользоватьКатегорииДанных Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Объект.Ссылка);
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы
	УчастникиРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из УчастникиРабочейГруппы Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	ВывестиСтрокуСостояний();
	
	// Файлы
	ЗначениеПараметра = Файлы.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВладелецФайла"));
	Если Не ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда 
		Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	КонецЕсли;
	Если Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица Тогда 
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаСписок;
	КонецЕсли;
	
	УстановитьДоступностьПоСостоянию();
	
	ОбработатьИзменениеНапоминанияНаСервере();
	Если Не ПараметрыЗаписи.ЗакрытьПослеЗаписи Тогда
		ОбновитьДанныеСвязаннойЗаписиКалендаря();
		ОбновитьДанныеПриглашения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ФайлыДобавленные.Количество() <> 0 И Не ЭтоАдресВременногоХранилища(ФайлыДобавленные[0].ПолныйПуть) Тогда
		Для Каждого ФайлТаблицы Из ФайлыДобавленные Цикл
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ФайлТаблицы.ПолныйПуть, Объект.Ссылка, ЭтаФорма, Истина);
		КонецЦикла;
		ФайлыДобавленные.Очистить();
	КонецЕсли;
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	ВывестиПодсказкуСледующегоДействия();
	
	Если ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленных) Тогда
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущийФайлВСпискеДобавленных);
		УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
		Элементы.Файлы.ТекущаяСтрока = ТекущийФайлВСпискеДобавленных;
		ТекущийФайлВСпискеДобавленных = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПерепискаПоПредмету) Тогда 
		Оповестить("ОбновитьПредметПереписки", ПерепискаПоПредмету, ЭтаФорма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПереписки) Тогда 
		ПараметрСобытия = Новый Структура;
		ПараметрСобытия.Вставить("Документ", ОснованиеПереписки);
		Оповестить("ИзмененыСвязиПодчиненныхДокументов", ПараметрСобытия);
		ОснованиеПереписки = Неопределено;
	КонецЕсли;
	
	ТекстОповещения = ?(ПараметрыЗаписи.ЭтоНовыйОбъект, НСтр("ru = 'Создание:'; en = 'Added:'"), НСтр("ru = 'Изменение:'; en = 'Changed:'"));
	ПоказатьОповещениеПользователя(
		ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
	Оповестить("Запись_Мероприятие");
	
	ОбработатьИзменениеНапоминанияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДокументСоздан" И ТипЗнч(Источник) = Тип("УправляемаяФорма") Тогда 
		Если Источник.ВладелецФормы = Элементы.МатериалПрограмма Тогда 
			Объект.МатериалПрограмма = Параметр;
			УстановитьДоступность();
			Модифицированность = Истина;
		КонецЕсли;	
			
		Если Источник.ВладелецФормы = Элементы.МатериалПротокол Тогда 
			Объект.МатериалПротокол = Параметр;
			УстановитьДоступность();
			Модифицированность = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Объект.Ссылка Тогда
		
		Элементы.Файлы.Обновить();
		НайтиИПоказатьКоличествоФайлов();
		
		Если Параметр <> Неопределено Тогда
			Элементы.Файлы.ТекущаяСтрока = Параметр;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		ВладелецФайла = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
		КонецЕсли;	
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			Элементы.Файлы.Обновить();
			УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
			
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				РаботаСКатегориямиДанных.СнятьПризнакОбработкиОбъектаПравилами(Объект.Ссылка);
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
			КонецЕсли;
		КонецЕсли;	
 	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		Если Параметр <> Неопределено Тогда
			
			ВладелецФайла = Неопределено;
			Если Параметр.Свойство("Владелец", ВладелецФайла) Тогда
				Если ВладелецФайла = Объект.Ссылка Тогда
					Элементы.Файлы.Обновить();
					
					ФайлСозданный = Неопределено;
					Если Параметр.Свойство("Файл", ФайлСозданный) Тогда
						Элементы.Файлы.ТекущаяСтрока = ФайлСозданный;
					КонецЕсли;
					
					КоличествоФайлов = КоличествоФайлов + 1;
					
					ОповеститьОбИзменении(Объект.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Если ИмяСобытия = "БизнесПроцессСтартован" Тогда 
		Если Параметр.Свойство("СсылкаНаБизнесПроцесс")
			И ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение")
			И (Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Или 
				Параметр.СсылкаНаПредметБизнесПроцесса = Объект.МатериалПротокол Или
				Параметр.СсылкаНаПредметБизнесПроцесса = Объект.МатериалПрограмма) Тогда 
			ЗаполнитьУчастниковМероприятия();
			Прочитать();
			ВывестиПодсказкуСледующегоДействия();
		ИначеЕсли Параметр.Свойство("СсылкаНаПредметБизнесПроцесса")
			И (Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Или 
				Параметр.СсылкаНаПредметБизнесПроцесса = Объект.МатериалПротокол Или
				Параметр.СсылкаНаПредметБизнесПроцесса = Объект.МатериалПрограмма) Тогда 
			Прочитать();
			ВывестиПодсказкуСледующегоДействия();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироваласьКатегория" Тогда
		ОбновитьДанныеОКатегориях(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ПриглашениеПринято" 
		Или ИмяСобытия = "ПриглашениеОтклонено" 
		Или ИмяСобытия = "ПриглашенияОтправлены"
		Или ИмяСобытия = "ИсключеныУчастники" Тогда 
		Если Параметр = Объект.Ссылка Тогда 
			ЗаполнитьУчастниковМероприятия();
		КонецЕсли;
	КонецЕсли;	
	
	Если ИмяСобытия = "СозданаТемаПоПредмету" Тогда 
		Если Параметр.Предмет = Объект.Ссылка Тогда 
			ВывестиСтрокуСостояний();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПунктПротокола" Тогда
		Если Параметр.Мероприятие = Объект.Ссылка Тогда
			
			Прочитать();
			
			ПараметрыОтбора = Новый Структура("ПунктПротокола", Параметр.ПунктПротокола);
			СтрокиПунктаПротокола = Объект.Протокол.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиПунктаПротокола.Количество() <> 0 Тогда
				СтрокаПунктаПротокола = СтрокиПунктаПротокола[0];
				Элементы.Протокол.ТекущаяСтрока = СтрокаПунктаПротокола.ПолучитьИдентификатор()
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_НапоминанияПользователя_Документооборот"
		И Источник = СвязаннаяЗаписьКалендаря
		И ПараметрыНапоминанияДокументооборота(Параметр) 
		И ИспользоватьНапоминанияПользователя Тогда
		
		Напоминание = Параметр;
		УстановитьНадписьНапоминания(
			Параметр,
			УстановитьНапоминание,
			УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию,
			ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания,
			ВремяНапоминания);
		УстановитьДоступностьЭлементовФормы();
		ЗаполнитьИнтервалыНапоминания();
		
	ИначеЕсли ИмяСобытия = "Удаление_НапоминанияПользователя_Документооборот"
		И Источник = СвязаннаяЗаписьКалендаря
		И ИспользоватьНапоминанияПользователя Тогда
		
		Напоминание = Неопределено;
		УстановитьНадписьНапоминания(
			Неопределено,
			УстановитьНапоминание,
			УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию,
			ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания,
			ВремяНапоминания);
		УстановитьДоступностьЭлементовФормы();
		ЗаполнитьИнтервалыНапоминания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ВывестиДлительностьВПрограмме();
	ВывестиРешенияВПрограмме();
	ВывестиПротоколМероприятия();
	ЗаполнитьСпискиВыбора(Объект.ДатаНачала, Элементы.ДатаНачалаВремя.СписокВыбора,
		Элементы.ДатаНачалаВремяФакт.СписокВыбора);
	ЗаполнитьСпискиВыбора(Объект.ДатаОкончания, Элементы.ДатаОкончанияВремя.СписокВыбора,
		Элементы.ДатаОкончанияВремяФакт.СписокВыбора);
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы
	УчастникиРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из УчастникиРабочейГруппы Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Вывод состояний
	ОбновитьСостоянияМероприятия();
	ВывестиСтрокуСостояний();
	
	ПрочитатьМестоПроведения();
	
	// Организатор текстом.
	Если ЗначениеЗаполнено(Объект.Организатор) И ЗначениеЗаполнено(Объект.ОрганизаторКонтактноеЛицо) Тогда
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2", Объект.Организатор, Объект.ОрганизаторКонтактноеЛицо);
	Иначе
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", Объект.Организатор);
	КонецЕсли;
	
	УстановитьДоступностьПоСостоянию();
	
	ОбновитьДанныеПриглашения();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка дублей
	КоличествоИсполнителей = Участники.Количество();
	Для Инд1 = 0 По КоличествоИсполнителей-2 Цикл
		Строка1 = Участники[Инд1];
		
		Если Не ЗначениеЗаполнено(Строка1.Исполнитель) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Инд2 = Инд1+1 По КоличествоИсполнителей-1 Цикл
			Строка2 = Участники[Инд2];
			
			Если Строка1.Исполнитель = Строка2.Исполнитель Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Участник ""%1"" указан дважды в списке участников!'; en = 'Participant ""%1"" is specified twice in the participants list!'"),
					Строка(Строка1.Исполнитель));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					"Участники[" + Формат(Инд1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Проверка председателя
	Если ЗначениеЗаполнено(Объект.Председатель) И УчитыватьКакПротокольноеМероприятие Тогда 
		
		Найден = Ложь;
		Для Каждого Строка Из Участники Цикл
			Если Строка.Исполнитель = Объект.Председатель Тогда 
				Найден = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден Тогда 
			ТекстСообщения = НСтр("ru = 'Председатель не найден среди участников мероприятия'; en = 'Chairman is not found among the event attendees.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.Председатель",, 
				Отказ);
		КонецЕсли;	
		
	КонецЕсли;
	
	// Проверка секретаря
	Если ЗначениеЗаполнено(Объект.Секретарь) И УчитыватьКакПротокольноеМероприятие Тогда 
		
		Найден = Ложь;
		Для Каждого Строка Из Участники Цикл
			Если Строка.Исполнитель = Объект.Секретарь Тогда 
				Найден = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден И Участники.Количество() > 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Секретарь не найден среди участников мероприятия'; en = 'Secretary is not found among the event attendees.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.Секретарь",, 
				Отказ);
		КонецЕсли;	
		
	КонецЕсли;	

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ((УстановитьНапоминание И (ИзмененоНапоминание Или ИзмененоВремя Или Не УстановленоНапоминание))
			Или (Не УстановитьНапоминание И УстановленоНапоминание)) Тогда
		ОбработатьИзменениеНапоминанияНаСервере();
		ОбработатьИзменениеНапоминанияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтработанаПриИзменении(Элемент)
	
	ПриИзмененииОтработана();
	УстановитьДоступностьЭлементовФормы();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИзмененныеЗаписиКалендаря = Новый Массив;
		ИзмененныеЗаписиКалендаря.Добавить(СвязаннаяЗаписьКалендаря);
		Оповестить("Запись_ЗаписьКалендаря", ИзмененныеЗаписиКалендаря, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПриглашенияПриИзменении(Элемент)
	
	ДоступноеПриглашение = ДоступныеПриглашения.НайтиПоИдентификатору(ПредставлениеПриглашения);
	Если ДоступноеПриглашение <> Неопределено Тогда
		ИсполнительПриглашения = ДоступноеПриглашение.Исполнитель;
		ОбновитьДанныеПриглашения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредседательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбораУчастника = СформироватьДанныеВыбораУчастника();
	
	Если ДанныеВыбораУчастника.Количество() = 0 Тогда 
		ТекстПредупреждения = НСтр("ru = 'Председатель выбирается из состава участников. Укажите участников мероприятия.'; en = 'Chairman is selected from the event attendees. Specify the event attendees.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ДанныеВыбораУчастника.Количество() > 10 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредседательНачалоВыбораЗавершение", ЭтотОбъект);
		ДанныеВыбораУчастника.ПоказатьВыборЭлемента(ОписаниеОповещения, "Укажите председателя", Объект.Председатель);
	Иначе
		Модифицированность = Истина;
		ДанныеВыбора = ДанныеВыбораУчастника;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредседательНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Объект.Председатель = Результат.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредседательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораУчастника(Текст);
	Иначе
		ПредседательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредседательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораУчастника = СформироватьДанныеВыбораУчастника(Текст);
		Если ДанныеВыбораУчастника.Количество() = 1 Тогда 
			Модифицированность = Истина;
			Объект.Председатель = ДанныеВыбораУчастника[0].Значение;
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораУчастника;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретарьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбораУчастника = СформироватьДанныеВыбораУчастника();
	
	Если ДанныеВыбораУчастника.Количество() = 0 Тогда 
		ТекстПредупреждения = НСтр("ru = 'Секретарь выбирается из состава участников. Укажите участников мероприятия.'; en = 'Secretary is selected from the event attendees. Specify the event attendees.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ДанныеВыбораУчастника.Количество() > 10 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("СекретарьНачалоВыбораЗавершение", ЭтотОбъект);
		ДанныеВыбораУчастника.ПоказатьВыборЭлемента(ОписаниеОповещения ,"Укажите секретаря", Объект.Секретарь);
	Иначе
		Модифицированность = Истина;
		ДанныеВыбора = ДанныеВыбораУчастника;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретарьНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Объект.Секретарь = Результат.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретарьАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораУчастника(Текст);
	Иначе
		СекретарьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретарьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораУчастника = СформироватьДанныеВыбораУчастника(Текст);
		Если ДанныеВыбораУчастника.Количество() = 1 Тогда
			Модифицированность = Истина;
			Объект.Секретарь = ДанныеВыбораУчастника[0].Значение;
		Иначе
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораУчастника;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ОрганизаторТекст) Тогда
		Объект.Организатор = Неопределено;
		Объект.ОрганизаторКонтактноеЛицо = Неопределено;
		ОрганизаторТекст = Неопределено;
	КонецЕсли;
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор организатора мероприятия'; en = 'Event organizer choice'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораОрганизатора", ЭтаФорма);
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораОрганизатора(ВыбранныеУчастники, ДопПараметры) Экспорт
	
	Если ВыбранныеУчастники = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизаторТекстОбработкаВыбора(Элементы.ОрганизаторТекст, ВыбранныеУчастники[0].Контакт, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Организатор = Неопределено;
	Объект.ОрганизаторКонтактноеЛицо = Неопределено;
	ОрганизаторТекст = Неопределено;
	Модифицированность = Истина;
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ОрганизаторКонтактноеЛицо) Тогда
		ПоказатьЗначение(, Объект.ОрганизаторКонтактноеЛицо);
	ИначеЕсли ЗначениеЗаполнено(Объект.Организатор) Тогда
		ПоказатьЗначение(, Объект.Организатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", ВыбранноеЗначение);
		Объект.Организатор = ВыбранноеЗначение;
		Объект.ОрганизаторКонтактноеЛицо = Неопределено;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Организатор = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2", Организатор, ВыбранноеЗначение);
		Объект.Организатор = Организатор;
		Объект.ОрганизаторКонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда 	
		
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", ВыбранноеЗначение);
		Объект.Организатор = ВыбранноеЗначение;
		Объект.ОрганизаторКонтактноеЛицо = Неопределено;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Контрагент) И ЗначениеЗаполнено(ВыбранноеЗначение.КонтактноеЛицо) Тогда
			ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2", ВыбранноеЗначение.Контрагент, ВыбранноеЗначение.КонтактноеЛицо);
			Объект.Организатор = ВыбранноеЗначение.Контрагент;
			Объект.ОрганизаторКонтактноеЛицо = ВыбранноеЗначение.КонтактноеЛицо;
		Иначе
			ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1", ВыбранноеЗначение.Контрагент);
			Объект.Организатор = ВыбранноеЗначение.Контрагент%
			Объект.ОрганизаторКонтактноеЛицо = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Текст = СокрЛП(ВыбранноеЗначение);
		
		Если Найти(Текст, ",") > 0 Тогда 
			ТекстОрганизаторКонтрагент = Лев(Текст, Найти(Текст, ",") - 1); 
			ТекстОрганизаторКонтактноеЛицо = СокрЛП(Прав(Текст, СтрДлина(Текст)-СтрДлина(СокрЛП(ТекстОрганизаторКонтрагент))-1));
		Иначе
			ТекстОрганизаторКонтрагент = Текст; 
			ТекстОрганизаторКонтактноеЛицо = "";
		КонецЕсли;	
		
		Результат = Делопроизводство.НайтиКонтрагентаИКонтактноеЛицо(ТекстОрганизаторКонтрагент, ТекстОрганизаторКонтактноеЛицо);
		
		Если ЗначениеЗаполнено(Результат) Тогда 
			Если ЗначениеЗаполнено(Результат.Контрагент) И ЗначениеЗаполнено(Результат.КонтактноеЛицо) Тогда
				ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1, %2", Результат.Контрагент, Результат.КонтактноеЛицо);
				Объект.Организатор = Результат.Контрагент;
				Объект.ОрганизаторКонтактноеЛицо = Результат.КонтактноеЛицо;
			Иначе
				ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1", Результат.Контрагент);
				Объект.Организатор = Результат.Контрагент;
				Объект.ОрганизаторКонтактноеЛицо = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		Если ЗначениеЗаполнено(Объект.Организатор) Тогда
			Если Найти(Текст, СокрЛП(Объект.Организатор)+",") > 0 Тогда 
				ТекстПоиска = СокрЛП(Прав(Текст, СтрДлина(Текст)-СтрДлина(СокрЛП(Объект.Организатор))-1));
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораКонтактногоЛицаПолучателя(ТекстПоиска, Объект.Организатор);
			Иначе
				ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораОрганизатора(ПараметрыПолученияДанных);
			КонецЕсли;
		Иначе
			ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораОрганизатора(ПараметрыПолученияДанных);;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		Если ЗначениеЗаполнено(Объект.Организатор) Тогда
			Если Найти(Текст, СокрЛП(Объект.Организатор)+",") > 0 Тогда 
				ТекстПоиска = СокрЛП(Прав(Текст, СтрДлина(Текст)-СтрДлина(СокрЛП(Объект.Организатор))-1));
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораКонтактногоЛицаПолучателя(ТекстПоиска, Объект.Организатор);
			Иначе
				ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораОрганизатора(ПараметрыПолученияДанных);;
			КонецЕсли;
		Иначе
			ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораОрганизатора(ПараметрыПолученияДанных);;
		КонецЕсли;
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			СтандартнаяОбработка = Истина;
			ОрганизаторТекстОбработкаВыбора(Элемент, ДанныеВыбора[0].Значение, Ложь)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидМероприятияПриИзменении(Элемент)
	
	ПриИзмененииВидаМероприятия();
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаМероприятия()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидМероприятия", Объект.ВидМероприятия));
	УчитыватьКакПротокольноеМероприятие = ПолучитьФункциональнуюОпциюФормы("УчитыватьКакПротокольноеМероприятие");
	УчитыватьКуратора = ПолучитьФункциональнуюОпциюФормы("УчитыватьКуратора");
	ДлительностьПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидМероприятия, "Длительность");
	Если Не ЗначениеЗаполнено(ДлительностьПоУмолчанию) Тогда
		ДлительностьПоУмолчанию = 3600;
	Иначе
		ДлительностьПоУмолчанию = ДлительностьПоУмолчанию * 60;
	КонецЕсли;
	ВывестиРешенияВПрограмме();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриИзмененииВидаДокумента(ЭтаФорма);
	
	// Подсистема Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	ЗаполнитьРеквизитыПоВидуМероприятия();
	
КонецПроцедуры	

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Ложь,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , , ДлительностьПоУмолчанию);
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиОсталосьДоНачала();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Ложь,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , , ДлительностьПоУмолчанию);
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Ложь,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , , ДлительностьПоУмолчанию);
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиОсталосьДоНачала();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачала);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Ложь,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , , ДлительностьПоУмолчанию);
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяФактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяФактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Объект.ДатаНачалаФакт) Тогда
			РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачалаФакт);
		Иначе
			РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачала);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяФактОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаФакт) Тогда
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачалаФакт);
	Иначе
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяФактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяФактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Объект.ДатаОкончанияФакт) Тогда
			РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончанияФакт);
		Иначе
			РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяФактОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияФакт) Тогда
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончанияФакт);
	Иначе
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПрограммыПриИзменении(Элемент)
	
	Если Объект.ТипПрограммы <> ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе") Тогда 
		Объект.МатериалПрограмма = Неопределено;
	КонецЕсли;	
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПротоколаПриИзменении(Элемент)
	
	Если Объект.ТипПротокола <> ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе") Тогда 
		Объект.МатериалПротокол = Неопределено;
	КонецЕсли;	
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалПротоколПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Элемент", Элемент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредметНачалоВыбораЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокТиповПредмета, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбранныйТип = Результат.Значение;
	
	ЗначениеВыбранногоТипа = Неопределено;
	Если Найти(ВыбранныйТип, "Справочник.") <> 0 Тогда
		ЗначениеВыбранногоТипа = Тип(СтрЗаменить(ВыбранныйТип, "Справочник.", "СправочникСсылка."));
	ИначеЕсли Найти(ВыбранныйТип, "Документ.") <> 0 Тогда
		ЗначениеВыбранногоТипа = Тип(СтрЗаменить(ВыбранныйТип, "Документ.", "ДокументСсылка."));
	КонецЕсли;
	
	Если ТипЗнч(Объект.Предмет) = ЗначениеВыбранногоТипа Тогда 
		РаботаСФайламиКлиент.ОбъектВыборСФайлами(ДополнительныеПараметры.Элемент, ВыбранныйТип, Объект.Предмет);
	Иначе
		РаботаСФайламиКлиент.ОбъектВыборСФайлами(ДополнительныеПараметры.Элемент, ВыбранныйТип, Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ПредметСтрокой = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(ВыбранноеЗначение);
	КонецЕсли;
	
	Объект.Предмет = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда 
		ПоказатьЗначение(, Объект.Предмет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Предмет = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияПриИзменении(Элемент)
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("КлючНазначенияИспользования", "ВыборПомещенияДляМероприятия");
	
	ОткрытьФорму("Справочник.ТерриторииИПомещения.Форма.ВыборПомещения", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МестоПроведения = "";
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") И ИспользоватьСхемыПомещений Тогда
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораМестаПроведения(ВыбранноеЗначение);
		Если ДанныеВыбора.Количество() > 0 Тогда
			ВыбранноеЗначение = ДанныеВыбора[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И ИспользоватьСхемыПомещений Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораМестаПроведения(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И ИспользоватьСхемыПомещений Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораМестаПроведения(ПараметрыПолученияДанных);
		Если ДанныеВыбора.Количество() = 0 Тогда
			ДанныеВыбора.Добавить(Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
	ПроверитьОтсутствие = Истина;
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаВзаимодействиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке мероприятие необходимо записать.'; en = 'You must save the event before using this link.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
		Новый Структура("Предмет", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКатегорииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Категории;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаФорумНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке мероприятие необходимо записать.'; en = 'You must save the event before using this link.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Справочник.ТемыОбсуждений.Форма.ФормаПросмотраТемы", 
		Новый Структура("Документ", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКонтрольНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для постановки на контроль мероприятия необходимо записать.'; en = 'You must save the event before using this link.'"));
		Возврат;
	КонецЕсли;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуСостояния("СостояниеМероприятия");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуСостояния("СостояниеМероприятия");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриглашенийПриИзменении(Элемент)
	
	ПриИзмененииСостояния("Приглашений");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриглашенийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПрограммыПриИзменении(Элемент)
	
	ПриИзмененииСостояния("Программы");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПрограммыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПротоколаПриИзменении(Элемент)
	
	ПриИзмененииСостояния("Протокола");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПротоколаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеМатериаловВыступающихПриИзменении(Элемент)
	
	ПриИзмененииСостояния("МатериаловВыступающих");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеМатериаловВыступающихОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНапоминаниеПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойПриИзменении(Элемент)
	
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = НСтр("ru = 'Другое...'; en = 'More...'") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		
		ПараметрыФормы.Вставить("СпособУстановкиВремениНапоминания", СпособУстановкиВремениНапоминания);
		ПараметрыФормы.Вставить("ИнтервалВремениСтрокой", ИнтервалВремениСтрокой);
		ПараметрыФормы.Вставить("ВремяНапоминания",
			?(СпособУстановкиВремениНапоминания 
				= ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя"),
				ВремяНапоминания,
				Объект.ДатаНачала));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИнтервалВремениСтрокойОбработкаВыбораЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Результат = ОткрытьФорму("РегистрСведений.НапоминанияПользователя.Форма.НапоминаниеДокументооборот", ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	ИначеЕсли ИнтервалВремениСтрокой <> ВыбранноеЗначение Тогда
		
		ИзмененоНапоминание = Истина;
		СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СпособУстановкиВремениНапоминания
		= ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета") Тогда
		
		Если УстановитьНапоминание = Ложь ИЛИ ИнтервалВремениСтрокой <> Результат.ИнтервалВремениСтрокой Тогда
			УстановитьНапоминание = Истина;
			ИзмененоНапоминание = Истина;
		КонецЕсли;
		СпособУстановкиВремениНапоминания = Результат.СпособУстановкиВремениНапоминания;
		ИнтервалВремениСтрокой = Результат.ИнтервалВремениСтрокой;
		ВремяНапоминания = Дата(1,1,1);
		
	ИначеЕсли Результат.СпособУстановкиВремениНапоминания =
		ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
		
		Если УстановитьНапоминание = Ложь ИЛИ ВремяНапоминания <> Результат.ВремяНапоминания Тогда
			УстановитьНапоминание = Истина;
			ИзмененоНапоминание = Истина;
		КонецЕсли;
		СпособУстановкиВремениНапоминания = Результат.СпособУстановкиВремениНапоминания;
		ВремяНапоминания = Результат.ВремяНапоминания;
		ИнтервалВремениСтрокой =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'в %2 %1'; en = 'in %2 %1'"),
				Формат(ВремяНапоминания, "ДЛФ=D"),
				Формат(ВремяНапоминания, "ДФ=ЧЧ:мм"));
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилПриИзменении(Элемент)
	
	ПодготовилПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
		ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
		ТекущиеДанные.ЯвкаОбязательна = ЯвкаОбязательнаПоУмолчанию;
		
		КоличествоУчастников = Участники.Количество();
	КонецЕсли;
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Исполнитель = Объект.Председатель
		И ЗначениеЗаполнено(Объект.Председатель) И УчитыватьКакПротокольноеМероприятие Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя изменить участника ""%1"", так как он указан в качестве председателя'; en = 'You cannot change attendee ""%1"" because he is specified as the event chairman.'"),
			Строка(ТекущиеДанные.Исполнитель));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.Исполнитель = Объект.Секретарь
		И ЗначениеЗаполнено(Объект.Секретарь) И УчитыватьКакПротокольноеМероприятие Тогда 
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя изменить участника ""%1"", так как он указан в качестве секретаря'; en = 'You cannot change attendee ""%1"" because he is specified as the event secretary.'"),
			Строка(ТекущиеДанные.Исполнитель));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ОтображатьЛичныхАдресатов", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор исполнителя'; en = 'Performer choice'"));
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ТекущиеДанные.Исполнитель);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы,
		Элементы.УчастникиИсполнитель,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораУчастника(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораУчастника(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не УчитыватьКакПротокольноеМероприятие Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Председатель) 
		И ТекущиеДанные.Исполнитель = Объект.Председатель Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя удалить участника ""%1"", так как он указан в качестве председателя'; en = 'You cannot delete attendee ""%1"" because he is specified as the event chairman.'"),
			Строка(ТекущиеДанные.Исполнитель));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Секретарь) 
		И ТекущиеДанные.Исполнитель = Объект.Секретарь Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя удалить участника ""%1"", так как он указан в качестве секретаря'; en = 'You cannot delete attendee ""%1"" because he is specified as the event secretary.'"),
			Строка(ТекущиеДанные.Исполнитель));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	КоличествоУчастников = Участники.Количество();
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПослеУдаления(Элемент)
	
	КоличествоУчастников = Участники.Количество();
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СоставРабочейГруппы = РаботаСПользователями.ПолучитьПользователейРабочейГруппы(ВыбранноеЗначение);
		
		ВГраницаСоставРабочейГруппы = СоставРабочейГруппы.ВГраница();
		Для Инд = 0 По ВГраницаСоставРабочейГруппы Цикл
			СтруктураПоиска = Новый Структура("Исполнитель", СоставРабочейГруппы[ВГраницаСоставРабочейГруппы - Инд]);
			НайденныеСтроки = Участники.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СоставРабочейГруппы.Удалить(ВГраницаСоставРабочейГруппы - Инд);
			КонецЕсли;
		КонецЦикла;
		
		Если СоставРабочейГруппы.Количество() > 0 Тогда 
			
			ТекущийДанные = Элементы.Участники.ТекущиеДанные;
			ТекущийДанные.Исполнитель = СоставРабочейГруппы[0];
			
			Для Инд = 1 По СоставРабочейГруппы.ВГраница() Цикл
				
				ТекущаяСтрока = Элементы.Участники.ТекущаяСтрока;
				Индекс = Участники.Индекс(Участники.НайтиПоИдентификатору(ТекущаяСтрока));
				
				НоваяСтрока = Участники.Вставить(Индекс + 1);
				НоваяСтрока.Исполнитель = СоставРабочейГруппы[Инд];
				НоваяСтрока.ЯвкаОбязательна = ЯвкаОбязательнаПоУмолчанию;
				
				Элементы.Участники.ТекущаяСтрока = новаяСтрока.ПолучитьИдентификатор();
				
			КонецЦикла;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрограмма

&НаКлиенте
Процедура ПрограммаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура(
		"НомерПункта, 
		|Исполнитель, 
		|Содержание,
		|ВремяПлан,
		|ВремяФакт,
		|Начало,
		|Окончание,
		|ТребуетПринятияРешения,
		|ВидМероприятия,
		|Комментарий");
	
	Если Копирование Тогда 
		ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	КонецЕсли;	
	
	// последний пункт программы
	Если Объект.Программа.Количество() = 0 Тогда 
		НомерПункта = 1;
		Начало = Объект.ДатаНачала;
	Иначе	
		ПоследнийПункт = Объект.Программа[Объект.Программа.Количество()-1];
		НомерПункта = ПоследнийПункт.НомерПункта + 1;
		Начало = ПоследнийПункт.Окончание;
	КонецЕсли;
	
	ПараметрыФормы.НомерПункта = НомерПункта;
	ПараметрыФормы.Начало = Начало;
	ПараметрыФормы.ТребуетПринятияРешения = Истина;
	ПараметрыФормы.ВидМероприятия = Объект.ВидМероприятия;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрограммаПередНачаломДобавленияЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.Мероприятия.Форма.ВводПунктаПрограммы", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.Программа.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
	
	НоваяСтрока.ВремяПланСтр = УчетВремениКлиентСервер.ЧислоВСтроку(НоваяСтрока.ВремяПлан);
	НоваяСтрока.ВремяФактСтр = УчетВремениКлиентСервер.ЧислоВСтроку(НоваяСтрока.ВремяФакт);
	НоваяСтрока.Решение = УправлениеМероприятиямиКлиентСервер.ПолучитьРешениеВСтрокеПрограммы(НоваяСтрока, Объект.Протокол);
	
	Элементы.Программа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Модифицированность = Истина;
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	ВывестиСуммарнуюДлительностьПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура(
		"НомерПункта, 
		|Исполнитель, 
		|Содержание,
		|ВремяПлан,
		|ВремяФакт,
		|Начало,
		|Окончание,
		|ТребуетПринятияРешения,
		|ВидМероприятия,
		|Комментарий");
		
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	ПараметрыФормы.ВидМероприятия = Объект.ВидМероприятия;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрограммаПередНачаломИзмененияЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.Мероприятия.Форма.ВводПунктаПрограммы", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	
	ТекущиеДанные.ВремяПланСтр = УчетВремениКлиентСервер.ЧислоВСтроку(ТекущиеДанные.ВремяПлан);
	ТекущиеДанные.ВремяФактСтр = УчетВремениКлиентСервер.ЧислоВСтроку(ТекущиеДанные.ВремяФакт);
	ТекущиеДанные.Решение = УправлениеМероприятиямиКлиентСервер.ПолучитьРешениеВСтрокеПрограммы(ТекущиеДанные, Объект.Протокол);
	
	Модифицированность = Истина;
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	ВывестиСуммарнуюДлительностьПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда 
		Возврат;
	КонецЕсли;	
	СтарыйНомер = ТекущиеДанные.НомерПункта;
	НовыйНомер = СтарыйНомер-1;
	
	Объект.Программа.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, -1); 
	ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	Модифицированность = Истина;
	
	// Сортировка протокола
	УправлениеМероприятиямиКлиентСервер.СортироватьПротокол(Объект.Протокол);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = Объект.Программа.Количество() Тогда 
		Возврат;
	КонецЕсли;
	СтарыйНомер = ТекущиеДанные.НомерПункта;
	НовыйНомер = СтарыйНомер+1;
	
	Объект.Программа.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, 1); 
	ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	Модифицированность = Истина;
	
	// Сортировка протокола
	УправлениеМероприятиямиКлиентСервер.СортироватьПротокол(Объект.Протокол);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("НомерПунктаПрограммы", ТекущиеДанные.НомерПункта);
	НайденныеСтроки = Объект.Протокол.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда 
		ТекстПредупреждения = НСтр("ru = 'Нельзя удалить пункт программы, так как для него введен пункт протокола.'; en = 'You cannot delete the agenda item because it has related minutes item.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Программа.ТекущаяСтрока;
	ЭлементКоллекции = Объект.Программа.НайтиПоИдентификатору(ТекущаяСтрока);
	ИндексЭлемента = Объект.Программа.Индекс(ЭлементКоллекции);
	
	// Изменение номеров пунктов программы
	Для Инд = ИндексЭлемента + 1 По Объект.Программа.Количество()-1 Цикл
		
		СтарыйНомер = Объект.Программа[Инд].НомерПункта;
		НовыйНомер = СтарыйНомер - 1;
		
		ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
		
	КонецЦикла;
	
	Объект.Программа.Удалить(ИндексЭлемента);
	
	// Пересчет программы
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	ВывестиСуммарнуюДлительностьПрограммы();
	
	// Сортировка протокола
	УправлениеМероприятиямиКлиентСервер.СортироватьПротокол(Объект.Протокол);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	// Изменение номеров пунктов программы
	ИзмененияНомеровПунктовПрограммы = Новый Соответствие;
	Для Каждого ПунктПрограммы Из Объект.Программа Цикл
		
		СтарыйНомер = ПунктПрограммы.НомерПункта;
		НовыйНомер = ПунктПрограммы.НомерСтроки;
		
		Если СтарыйНомер = НовыйНомер Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененияНомеровПунктовПрограммы.Вставить(СтарыйНомер, НовыйНомер);
		ПунктПрограммы.НомерПункта = НовыйНомер;
		
	КонецЦикла;
	
	// Пересчет программы
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	
	// Изменение номеров пунктов протокола
	Для Каждого ПунктПротокола Из Объект.Протокол Цикл
		
		НовыйНомер = ИзмененияНомеровПунктовПрограммы[ПунктПротокола.НомерПунктаПрограммы];
		Если НовыйНомер = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПунктПротокола.НомерПунктаПрограммы = НовыйНомер;
		ПунктПротокола.ИзменилсяНомерПунктаПротокола = Истина;
		
	КонецЦикла;
	
	// Сортировка протокола
	УправлениеМероприятиямиКлиентСервер.СортироватьПротокол(Объект.Протокол);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПротокол

&НаКлиенте
Процедура ПротоколПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если ПротоколТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Если Копирование Тогда
		ТекущиеДанные = Элементы.Протокол.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.ПунктПротокола);
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ПротоколыМероприятий.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Протокол.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ПротоколСостояниеИсполненияГиперссылка Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Исполнение) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Исполнение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ПунктПротокола);
	ОткрытьФорму("Справочник.ПротоколыМероприятий.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколПриИзменении(Элемент)
	
	// Сортировка протокола
	УправлениеМероприятиямиКлиентСервер.СортироватьПротокол(Объект.Протокол);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Протокол.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ПротоколСостояниеИсполненияГиперссылка Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Исполнение) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Исполнение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ПунктПротокола);
	ОткрытьФорму("Справочник.ПротоколыМероприятий.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколПередУдалением(Элемент, Отказ)
	
	Если ПротоколТолькоПросмотр Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	ФайлОснование = Элементы.Файлы.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 1;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтаФорма, РежимСоздания, Истина);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка создания нового файла: %1'; en = 'Error creating new file: %1'"),
				КраткоеПредставлениеОшибки(Инфо));
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецПопытки;
	Иначе
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	НайтиИПоказатьКоличествоФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ВыбраннаяСтрока, 
		Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка, 
			Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПослеУдаления(Элемент)
	
	КоличествоФайлов = ФайлыДобавленные.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКатегорий

&НаКлиенте
Процедура СписокКатегорийДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьКатегорииИзСпискаВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПослеУдаления(Элемент)
	
	СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
	Элементы.Категории.Заголовок = 
		РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппа

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


#Область Файлы

&НаКлиенте
Процедура ПоказатьПомеченныеНаУдаление(Команда)
	
	ПоказатьПомеченныеНаУдаление = Не ПоказатьПомеченныеНаУдаление;
	ПоказатьПомеченныеНаУдалениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка, 
			Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленных = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе			
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;	
	Иначе
		
		Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
			
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
		РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;	
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		Элементы.Файлы.ТекущаяСтрока, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	ПараметрыОбновленияФайла.АвторТекущейВерсии = ТекущиеДанные.Автор;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Обработчик, 
		Элементы.Файлы.ТекущаяСтрока);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		Элементы.Файлы.ТекущаяСтрока, 
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.Файлы.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.Файлы.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокФайлов", ЭтотОбъект);
	
	Если Элементы.Файлы.ВыделенныеСтроки.Количество() > 1 Тогда
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, Элементы.Файлы.ВыделенныеСтроки);
	Иначе
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Результат, ПараметрыВыполнения) Экспорт
	
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловПослеУстановкиРасширения", ЭтотОбъект);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	Если НЕ ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
		Возврат;
	КонецЕсли;
		
	РаботаСФайламиКлиент.ВыполнитьИмпортФайловСОткрытиемФормыИмпорта(Объект.Ссылка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайл(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(Элементы.Файлы.ТекущаяСтрока);
	
	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(МассивФайлов, УникальныйИдентификатор,
		Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	Оповестить("ПрисоединенныйФайлПодписан", ПараметрыВыполнения.ДанныеФайла.Владелец);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	
	Обработчик = Новый ОписаниеОповещения("ДобавитьЭПИзФайлаЗавершение", ЭтотОбъект);
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(Элементы.Файлы.ТекущаяСтрока, УникальныйИдентификатор, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайлаЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(Элементы.Файлы.ТекущаяСтрока, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Элементы.Файлы.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Истина;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
	СсылкаВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ВладелецФайла");
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(СсылкаВладелецФайла);	
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Элементы.Файлы.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(Обработчик, ДанныеФайла.Ссылка, УникальныйИдентификатор, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ЧислоФайлов = 0;
	СкопироватьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) скопированы в буфер обмена.'; en = 'Files (%1 pcs) copied to the clipboard.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование в буфер'; en = 'Copy to clipboard'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	Если Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЧислоФайлов = 0;
	ВставитьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) вставлены из буфера обмена.'; en = 'Files (%1 pcs) pasted from the clipboard.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Вставка из буфера'; en = 'Paste from clipboard'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ЧислоФайлов)
	
	ЧислоФайлов = Элементы.Файлы.ВыделенныеСтроки.Количество();
	ОбщегоНазначения.СкопироватьФайлыВБуферОбменаИзСпискаФайлов(Элементы.Файлы.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ЧислоФайлов)
	
	Если ОбщегоНазначения.ПустойБуферОбмена() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	МассивФайлов = ДанныеИзБуфераОбмена.Данные;
	
	ЧислоФайлов = МассивФайлов.Количество();
	
	ВладелецФайла = Объект.Ссылка;
	
	РаботаСФайламиВызовСервера.СкопироватьФайлы(МассивФайлов, ВладелецФайла);
	Элементы.Файлы.Обновить();
	
	НайтиИПоказатьКоличествоФайлов();
	
КонецПроцедуры

#КонецОбласти

#Область Категории

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорий(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКатегорииИзСпискаВыбранных()
	
	Если Элементы.СписокКатегорийДанных.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = РаботаСКатегориямиДанных.ФильтроватьСписокКатегорийДляУдаления(Объект.Ссылка, СписокКатегорийДанных, Элементы.СписокКатегорийДанных.ВыделенныеСтроки);
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		СписокКатегорийДанных.Удалить(СписокКатегорийДанных.НайтиПоИдентификатору(СтрокаДляУдаления));
	КонецЦикла;
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		Модифицированность = Истина;
		СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбъектовСВыбраннымиКатегориями(Команда)
	
	Если СписокКатегорийДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКатегорий = Новый Массив();
	УникальныйИдентификаторСпискаКатегорий = "";
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		МассивКатегорий.Добавить(ВыбраннаяКатегория.Значение);
		УникальныйИдентификаторСпискаКатегорий = УникальныйИдентификаторСпискаКатегорий + "," + ВыбраннаяКатегория.ПолноеНаименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокВыбранныхКатегорий", МассивКатегорий);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаСписка", ПараметрыФормы, Элементы.СписокКатегорийДанных, УникальныйИдентификаторСпискаКатегорий);
	
КонецПроцедуры

#КонецОбласти

#Область РабочаяГруппа

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокумента(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерезаполнитьРабочуюГруппуДокументаЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Рабочая группа будет заполнена автоматически. Все внесенные изменения будут удалены. Продолжить?';
|en = 'Working group will be filled automatically. All changes will be deleted.
|Do you want to continue?'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьРабочуюГруппуДокументаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаОбновить(Команда)
	
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область УчетВремени

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ПараметрыОповещения = Неопределено;
	
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
		
	Иначе
		
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", Строка(Объект.Ссылка));
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПереключитьХронометражЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы",
			ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПараметрыОповещения = Неопределено;
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтаФорма);
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПодобратьУчастников(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Подбор участников мероприятия'; en = 'Selection of attendees'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные участники мероприятия:'; en = 'Selected event attendees:'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все участники мероприятия:'; en = 'All event attendees:'"));
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ОтображатьЛичныхАдресатов", Истина);
	
	ВыбранныеАдресаты = Новый Массив;
	Для Каждого СтрУчастник Из Участники Цикл
		Адресат = РаботаСАдреснойКнигойКлиент.СтруктураВыбранногоАдресата();
		Адресат.Контакт = СтрУчастник.Исполнитель;
		ВыбранныеАдресаты.Добавить(Адресат);
	КонецЦикла;
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеАдресаты);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодобратьУчастников_Продолжение", ЭтаФорма);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастников_Продолжение(УчастникиМероприятия, ДополнительныеПараметры) Экспорт
	
	Если УчастникиМероприятия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из УчастникиМероприятия Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Исполнитель", Строка.Контакт);
		НайденныеУчастники = Участники.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеУчастники.Количество() = 0 Тогда
			Строка.Вставить("ЯвкаОбязательна", ЯвкаОбязательнаПоУмолчанию);
			Строка.Вставить("Отсутствовал", Ложь);
			Строка.Вставить("СостояниеПриглашения",
				ПредопределенноеЗначение("Перечисление.СостоянияПриглашения.ПустаяСсылка"));
			Продолжить;
		КонецЕсли;
		
		НайденныйУчастник = НайденныеУчастники[0];
		
		Строка.Вставить("ЯвкаОбязательна", НайденныйУчастник.ЯвкаОбязательна);
		Строка.Вставить("Отсутствовал", НайденныйУчастник.Отсутствовал);
		Строка.Вставить("СостояниеПриглашения", НайденныйУчастник.СостояниеПриглашения);
		
	КонецЦикла;
	Участники.Очистить();
	
	Для Каждого Строка Из УчастникиМероприятия Цикл
		НоваяСтрока = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Исполнитель = Строка.Контакт;
	КонецЦикла;
	
	КоличествоУчастников = Участники.Количество();
	
	Если УчастникиМероприятия.Количество() > 0 Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеУчастников(Команда)
	
	ЗаполнитьУчастниковМероприятия();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротокол(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПротоколЗавершение", ЭтотОбъект);
	Если Объект.Протокол.Количество() > 0  Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением строки протокола будут очищены, а мероприятие будет записано.
			|Продолжить?'; en = 'Current minutes will be cleared before filling. Do you want to contrinue?'");
		ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Заполнить протокол мероприятия?'; en = 'Fill event minutes?'");
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротоколЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеМероприятиямиВызовСервера.ЗаполнитьПротокол(Объект.Ссылка);
	
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротоколНаОснованииПредыдущего(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПредыдущееМероприятие) Тогда
		ТекстСообщения = НСтр("ru = 'Не указано предыдущее мероприятие.'; en = 'Previous event is not specified.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, , "Объект.ПредыдущееМероприятие");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПротоколНаОснованииПредыдущегоЗавершение", ЭтотОбъект);
	Если Объект.Протокол.Количество() > 0  Тогда
		ТекстВопроса =
			НСтр("ru = 'Выполняется заполнение протокола на основании протокола предыдущего мероприятия.
				|Перед заполнением строки протокола будут очищены. Продолжить?';
				|en = 'You are going to fill the event minutes based on the minutes of the previous event.
				|Current minutes will be cleared before filling. Do you want to contrinue?'");
		ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Заполнить программу и протокол на основании протокола предыдущего мероприятия?
		|Внимание! Программа мероприятия будет очищена и скопирована из предыдущего.';
		|en = 'Fill the agenda and the minutes based on previous event minutes?
		|Attention! Event agenda will be cleared and coped from the previous event before filling.'");
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротоколНаОснованииПредыдущегоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеМероприятиямиВызовСервера.ЗаполнитьПротоколНаОснованииПредыдущего(Объект.Ссылка);
	
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрограмму(Команда)
	
	СоздатьДокумент(Элементы.МатериалПрограмма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПротокол(Команда)
	
	СоздатьДокумент(Элементы.МатериалПротокол);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВремя(Команда)
	
	ПодобратьВремяКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьУчастников(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Или Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указана дата мероприятия.'; en = 'Event date is not specified.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Объект.ДатаНачала");
		Возврат;
		
	КонецЕсли;
	
	Если Участники.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны участники мероприятия.'; en = 'Event attendees are not specified.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Участники");
		Возврат;
		
	КонецЕсли;
	
	МассивУчастников = Новый Массив;
	Для Каждого Строка Из Участники Цикл
		Если ЗначениеЗаполнено(Строка.Исполнитель)
			И ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи")Тогда 
			МассивУчастников.Добавить(Строка.Исполнитель);
		КонецЕсли;
	КонецЦикла;
	
	ИсключенияЗанятости = Новый Массив;
	ИсключенияЗанятости.Добавить(Объект.Ссылка);
	УчастникиДоступны = РаботаСРабочимКалендаремКлиент.ПроверитьДоступностьПользователей(
		МассивУчастников,
		Объект.ДатаНачала,
		Объект.ДатаОкончания,
		ИспользоватьРабочийКалендарь,
		ИсключенияЗанятости,
		Ложь);
	
	Если УчастникиДоступны Тогда
		ТекстПредупреждения = НСтр("ru = 'Все участники доступны.'; en = 'All attendees are available.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьДоступностьУчастниковЗавершение", ЭтотОбъект);
	РаботаСРабочимКалендаремКлиент.ОткрытьФормуЗанятостиПользователей(
		ОписаниеОповещения, МассивУчастников, Объект.ДатаНачала, Объект.ДатаОкончания, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПрограмму(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УтвердитьПрограмму_Завершение", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(УстановилСостояниеУтвержденияПрограммы) Тогда
		ТекстВопроса = НСтр("ru = 'Программа уже находиться на утверждении.'; en = 'Agenda has already been sent for confirmation.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть утверждение'; en = 'Open confirmation'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'; en = 'Create new'"));

		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПрограмму_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, УстановилСостояниеУтвержденияПрограммы);
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПрограммы = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(Объект.МатериалПрограмма) Тогда 
		ПараметрыФормы = Новый Структура("Основание", Объект.МатериалПрограмма);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		Основание = Новый Структура;
		Основание.Вставить("ОперацияМероприятия", "УтвердитьПрограмму");
		Основание.Вставить("Мероприятие", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПригласитьУчастников(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПригласитьУчастников_Завершение", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(УстановилСостояниеПриглашенияУчастников) Тогда
		ТекстВопроса = НСтр("ru = 'Приглашение уже отправлено.'; en = 'Invitation has already been sent.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть приглашение'; en = 'Open invitation'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПригласитьУчастников_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, УстановилСостояниеПриглашенияУчастников);
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПрограммы = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(Объект.МатериалПрограмма) Тогда
		ПараметрыФормы = Новый Структура("Основание", Объект.МатериалПрограмма);
		ОткрытьФорму("БизнесПроцесс.Приглашение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе	
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму("БизнесПроцесс.Приглашение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьМатериалы(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗапроситьМатериалы_Завершение", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(УстановилСостояниеЗапросаМатериалов) Тогда
		ТекстВопроса = НСтр("ru = 'Материалы уже запрошены.'; en = 'Materials have already been requested.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть запрос'; en = 'Open request'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новый'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьМатериалы_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, УстановилСостояниеЗапросаМатериалов);
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ЗапроситьМатериалы");
	Основание.Вставить("Мероприятие", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомитьСМатериалами(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОзнакомитьСМатериалами_Завершение", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(УстановилСостояниеОзнакомленияСМатериалами) Тогда
		ТекстВопроса = НСтр("ru = 'Материалы уже отправлены на ознакомление.'; en = 'Materials have already been sent for examination.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть ознакомление'; en = 'Open examination'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомитьСМатериалами_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, УстановилСостояниеОзнакомленияСМатериалами);
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ОзнакомитьСМатериалами");
	Основание.Вставить("Мероприятие", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Ознакомление.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиМероприятие(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПровестиМероприятие_Завершение", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(УстановилСостояниеПроведенияМероприятия) Тогда
		ТекстВопроса = НСтр("ru = 'Проведение мероприятия уже инициировано.'; en = 'Event holding has already been initiated.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть процесс'; en = 'Open process'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новый'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиМероприятие_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, УстановилСостояниеПроведенияМероприятия);
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ПровестиМероприятие");
	Основание.Вставить("Мероприятие", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПротокол(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодготовитьПротокол_Завершение", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(УстановилСостояниеПодготовкиПротокола) Тогда
		ТекстВопроса = НСтр("ru = 'Подготовка протокола уже инициирована.'; en = 'Minutes preparation has already been initiated.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть процесс подготовки'; en = 'Open preparation process'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новый'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПротокол_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, УстановилСостояниеПодготовкиПротокола);
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ПодготовитьПротокол");
	Основание.Вставить("Мероприятие", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьПротокол(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СогласоватьПротокол_Завершение", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(УстановилСостояниеСогласованияПротокола) Тогда
		ТекстВопроса = НСтр("ru = 'Протокол уже отправлен на согласование.'; en = 'Minutes has been sent for approval.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть согласование'; en = 'Open approval'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'; en = 'Create new'"));

		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьПротокол_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, УстановилСостояниеСогласованияПротокола);
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(Объект.МатериалПротокол) Тогда 
		ПараметрыФормы = Новый Структура("Основание", Объект.МатериалПротокол);
		ОткрытьФорму("БизнесПроцесс.Согласование.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		Основание = Новый Структура;
		Основание.Вставить("ОперацияМероприятия", "СогласоватьПротокол");
		Основание.Вставить("Мероприятие", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		ОткрытьФорму("БизнесПроцесс.Согласование.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПротокол(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УтвердитьПротокол_Завершение", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(УстановилСостояниеУтвержденияПротокола) Тогда
		ТекстВопроса = НСтр("ru = 'Протокол уже отправлен на утверждение.'; en = 'Minutes has been sent for confirmation.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть утверждение'; en = 'Open confirmation'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'; en = 'Create new'"));

		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПротокол_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, УстановилСостояниеУтвержденияПротокола);
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(Объект.МатериалПротокол) Тогда 
		ПараметрыФормы = Новый Структура("Основание", Объект.МатериалПротокол);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		Основание = Новый Структура;
		Основание.Вставить("ОперацияМероприятия", "УтвердитьПротокол");
		Основание.Вставить("Мероприятие", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнитьПротокол(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ИсполнитьПротокол_Завершение", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(УстановилСостояниеИсполненияПротокола) Тогда
		ТекстВопроса = НСтр("ru = 'Протокол уже отправлен на исполнение.'; en = 'Minutes has been sent for performance.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Открыть исполнение'; en = 'Open performance'"));
		КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Создать новое'; en = 'Create new'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнитьПротокол_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоказатьЗначение(, УстановилСостояниеИсполненияПротокола);
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе")
		И ЗначениеЗаполнено(Объект.МатериалПротокол) Тогда 
		ПараметрыФормы = Новый Структура("Основание", Объект.МатериалПротокол);
		ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		УправлениеМероприятиямиКлиент.НаправитьПротоколМероприятияНаИсполнение(
			Объект.Ссылка, РаздельноеИсполнениеПунктовПротокола, ЭтаФорма, Объект.Протокол);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьУчастниковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда
		ПодобратьВремяКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиПрограммуВОтдельномДокументе(Команда)
	
	Объект.ТипПрограммы = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе");
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиПрограммуВТаблице(Команда)
	
	Объект.ТипПрограммы = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВТаблице");
	Объект.МатериалПрограмма = Неопределено;
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиПрограммуВФайлах(Команда)
	
	Объект.ТипПрограммы = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВМатериалах");
	Объект.МатериалПрограмма = Неопределено;
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиПротоколВОтдельномДокументе(Команда)
	
	Объект.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе");
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиПротоколВТаблице(Команда)
	
	Объект.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВТаблице");
	Объект.МатериалПротокол = Неопределено;
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиПротоколВФайлах(Команда)
	
	Объект.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВМатериалах");
	Объект.МатериалПротокол = Неопределено;
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Не УчитыватьКакПротокольноеМероприятие Тогда
		Объект.Председатель = ПользователиПустаяСсылка;
		Объект.Секретарь = ПользователиПустаяСсылка;
	КонецЕсли;
	
	УстановитьМестоПроведения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", Истина);
	ЗаписатьКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Если Не УчитыватьКакПротокольноеМероприятие Тогда
		Объект.Председатель = ПользователиПустаяСсылка;
		Объект.Секретарь = ПользователиПустаяСсылка;
	КонецЕсли;
	
	УстановитьМестоПроведения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", Ложь);
	ЗаписатьКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЯвкаОбязательнаДляВсех(Команда)
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
	Для Каждого Участник Из Участники Цикл
		Участник.ЯвкаОбязательна = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьЯвкаОбязательнаДляВсех(Команда)
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
	Для Каждого Участник Из Участники Цикл
		Участник.ЯвкаОбязательна = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьИсполнение(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеМероприятиямиКлиент.ОстановитьИсполнениеПротокола(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьИсполнение(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеМероприятиямиКлиент.ПродолжитьИсполнениеПротокола(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьИсполнение(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеМероприятиямиКлиент.ПрерватьИсполнениеПротокола(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
				ПутьКФайлу, Объект.Ссылка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
				
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'; en = 'Ther is no picture in clipboard'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЖелтый(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЗеленый(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветКрасный(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветНет(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветОранжевый(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветСиний(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашение(Команда)
	
	Если СостояниеПриглашения = ПредопределенноеЗначение("Перечисление.СостоянияПриглашения.Принято") Тогда
		Возврат;
	КонецЕсли;
	
	ИсключенияЗанятости = Новый Массив;
	ИсключенияЗанятости.Добавить(Объект.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПринятьПриглашениеЗавершение", ЭтотОбъект);
	Если Не РаботаСРабочимКалендаремКлиент.ПроверитьДоступностьПользователей(
			ПользователиКлиентСервер.ТекущийПользователь(),
			Объект.ДатаНачала,
			Объект.ДатаОкончания,
			ИспользоватьРабочийКалендарь,
			ИсключенияЗанятости,
			Истина,
			ОписаниеОповещения) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеПриглашения(ПредопределенноеЗначение("Перечисление.СостоянияПриглашения.Принято"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашение(Команда)
	
	Если СостояниеПриглашения = ПредопределенноеЗначение("Перечисление.СостоянияПриглашения.НеПринято") Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеПриглашения(ПредопределенноеЗначение("Перечисление.СостоянияПриглашения.НеПринято"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПриглашение(Команда)
	
	ИзменитьСостояниеПриглашения(ПредопределенноеЗначение("Перечисление.СостоянияПриглашения.ПустаяСсылка"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Файлы

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Элементы.Файлы.ТекущаяСтрока, 
		Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПомеченныеНаУдалениеНаСервере()
	
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ЭтаФорма.ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		ПоказатьПомеченныеНаУдаление);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоказПомеченныхНаУдалениеФайлов()
	
	Элементы.ФайлыПоказатьПомеченныеНаУдаление.Пометка = ПоказатьПомеченныеНаУдаление;
	
	Если ПоказатьПомеченныеНаУдаление Тогда
		ПараметрПометкиУдаления = Новый ПараметрКомпоновкиДанных("НеПоказыватьПомеченныеНаУдаление");
		Для Каждого Элемент Из Файлы.Параметры.Элементы Цикл
			Если Элемент.Параметр = ПараметрПометкиУдаления Тогда
				Элемент.Использование = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Файлы.Параметры.УстановитьЗначениеПараметра("НеПоказыватьПомеченныеНаУдаление", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОперацииМероприятия

&НаСервере
Процедура ОбновитьОтображениеОпераций()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Утвердить программу
	ОбновитьКартинкуОперации(
		Команды.УтвердитьПрограмму,
		УстановилСостояниеУтвержденияПрограммы);
	
	// Отправить приглашения
	ОбновитьКартинкуОперации(
		Команды.ПригласитьУчастников,
		УстановилСостояниеПриглашенияУчастников);
	
	// Запросить материалы
	ОбновитьКартинкуОперации(
		Команды.ЗапроситьМатериалы,
		УстановилСостояниеЗапросаМатериалов);
		
	// Ознакомить с материалами
	ОбновитьКартинкуОперации(
		Команды.ОзнакомитьСМатериалами,
		УстановилСостояниеОзнакомленияСМатериалами);
	
	// Провести мероприятие
	ОбновитьКартинкуОперации(
		Команды.ПровестиМероприятие,
		УстановилСостояниеПроведенияМероприятия);
	
	// Подготовить протокол
	ОбновитьКартинкуОперации(
		Команды.ПодготовитьПротокол,
		УстановилСостояниеПодготовкиПротокола);
	
	// Согласовать протокол
	ОбновитьКартинкуОперации(
		Команды.СогласоватьПротокол,
		УстановилСостояниеСогласованияПротокола);
	
	// Утвердить протокол
	ОбновитьКартинкуОперации(
		Команды.УтвердитьПротокол,
		УстановилСостояниеУтвержденияПротокола);
	
	// Исполнить протокол
	ОбновитьКартинкуОперации(
		Команды.ИсполнитьПротокол,
		УстановилСостояниеИсполненияПротокола);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкуОперации(Элемент, УстановилСостояние)
	
	УстановитьКартинку = ЗначениеЗаполнено(УстановилСостояние);
	
	Если УстановитьКартинку Тогда
		Элемент.Картинка = БиблиотекаКартинок.ЗеленаяГалочка;
	Иначе
		Элемент.Картинка = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПередВыполнениемОперацииМероприятия()
	
	ОтменаОперации = Ложь;
	ТребуетсяЗаписатьМероприятие = Объект.Ссылка.Пустая() Или Модифицированность;
	Если ТребуетсяЗаписатьМероприятие Тогда
		Если Не Записать() Тогда
			ОтменаОперации = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОтменаОперации Тогда
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Возврат ОтменаОперации;
	
КонецФункции

#КонецОбласти

#Область Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область РабочаяГруппа

&НаСервере
Процедура ПерезаполнитьРабочуюГруппуДокументаСервер()
	
	РаботаСРабочимиГруппами.ПерезаполнитьРабочуюГруппуНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РабочаяГруппаОбновитьНаСервере()
	
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область УчетВремени

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ВидыРабот,
	ЭтаФорма.Команды.ПереключитьХронометраж,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СоздатьДокумент(ЭлементВладелец)
	
	ТипШаблонаДокумента = "ШаблоныВнутреннихДокументов";
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТипШаблонаДокумента", ТипШаблонаДокумента);
	ПараметрыФормы.Вставить("ВозможностьСозданияПустогоДокумента", Истина);
	
	Попытка
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ЭлементВладелец", ЭлементВладелец);
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьДокументЗавершение", ЭтотОбъект, ПараметрыОбработчика);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Результат = ОткрытьФорму("ОбщаяФорма.СозданиеДокументаПоШаблону", ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
	Исключение
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Описание = "СоздатьПустойДокумент" Тогда
			Результат = "СоздатьПустойДокумент";
			СоздатьДокументЗавершение(Результат, ПараметрыОбработчика)
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Или Результат = "ПрерватьОперацию" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыДокумента = "Справочник.ВнутренниеДокументы.ФормаОбъекта";
	
	КлючеваяОперация = "ВнутренниеДокументыВыполнениеКомандыСоздать";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	ПараметрыФормы = Новый Структура;
	Если (ТипЗнч(Результат) <> Тип("Строка")) Тогда 
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат.ШаблонДокумента);
		ПараметрыФормы.Вставить("ЗаполнятьРеквизитыДоСоздания", Ложь);
	Иначе
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат);
		ПараметрыФормы.Вставить("ЗаполнятьРеквизитыДоСоздания", Ложь);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыДокумента, ПараметрыФормы, ДополнительныеПараметры.ЭлементВладелец);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостоянияМероприятия()
	
	// Считываем состояние мероприятия из базы данных.
	ПрочитатьСостоянияМероприятия();
	
	// Учитываем состояния, которые пользователь успел поменять за время работы.
	ПрочитатьИзмененныеСостояния();
	
	// Обновляем представление состояния мероприятия.
	ОбновитьОбщееПредставлениеСостояния(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСостоянияМероприятия()
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		СостояниеМероприятия = Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки;
		НачальноеСостояниеМероприятия = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
		СостояниеПрограммы = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		НачальноеСостояниеПрограммы = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
		СостояниеПриглашений = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		НачальноеСостояниеПриглашений = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
		СостояниеМатериаловВыступающих = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		НачальноеСостояниеМатериаловВыступающих = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
		СостояниеПротокола = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		НачальноеСостояниеПротокола = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
	Иначе
		
		СостояниеМероприятия = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеМероприятия");
		НачальноеСостояниеМероприятия = СостояниеМероприятия;
		
		СостояниеПриглашений = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеПриглашений");
		НачальноеСостояниеПриглашений = СостояниеПриглашений;
		
		СостояниеПрограммы = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеПрограммы");
		НачальноеСостояниеПрограммы = СостояниеПрограммы;
		
		СостояниеМатериаловВыступающих = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеМатериаловВыступающих");
		НачальноеСостояниеМатериаловВыступающих = СостояниеМатериаловВыступающих;
		
		СостояниеПротокола = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеПротокола");
		НачальноеСостояниеПротокола = СостояниеПротокола;
		
		УстановилСостояниеУтвержденияПрограммы = УправлениеМероприятиями.ПолучитьУстановилСостояниеМероприятия(
			Объект.Ссылка, Перечисления.СостоянияМероприятий.ПрограммаНаУтверждении);
		
		УстановилСостояниеПриглашенияУчастников = УправлениеМероприятиями.ПолучитьУстановилСостояниеМероприятия(
			Объект.Ссылка, Перечисления.СостоянияМероприятий.ПриглашенияОтправлены);
			
		УстановилСостояниеЗапросаМатериалов = УправлениеМероприятиями.ПолучитьУстановилСостояниеМероприятия(
			Объект.Ссылка, Перечисления.СостоянияМероприятий.МатериалыВыступающихЗапрошены);
		
		УстановилСостояниеОзнакомленияСМатериалами = УправлениеМероприятиями.ПолучитьУстановилСостояниеМероприятия(
			Объект.Ссылка, Перечисления.СостоянияМероприятий.МатериалыОтправленыНаОзнакомление);
			
		УстановилСостояниеПроведенияМероприятия = УправлениеМероприятиями.ПолучитьУстановилСостояниеМероприятия(
			Объект.Ссылка, Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки);
		
		УстановилСостояниеПодготовкиПротокола = УправлениеМероприятиями.ПолучитьУстановилСостояниеМероприятия(
			Объект.Ссылка, Перечисления.СостоянияМероприятий.ПротоколГотовиться);
			
		УстановилСостояниеСогласованияПротокола = УправлениеМероприятиями.ПолучитьУстановилСостояниеМероприятия(
			Объект.Ссылка, Перечисления.СостоянияМероприятий.ПротоколНаСогласовании);
		
		УстановилСостояниеУтвержденияПротокола = УправлениеМероприятиями.ПолучитьУстановилСостояниеМероприятия(
			Объект.Ссылка, Перечисления.СостоянияМероприятий.ПротоколНаУтверждении);
		
		УстановилСостояниеИсполненияПротокола = УправлениеМероприятиями.ПолучитьУстановилСостояниеМероприятия(
			Объект.Ссылка, Перечисления.СостоянияМероприятий.ПротоколНаИсполнении);
		
	КонецЕсли;
	
	ОбновитьОтображениеОпераций();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИзмененныеСостояния()
	
	СостоянияКУдалению = Новый Массив;
	Для Каждого ЭлементИзмененноеСостояние Из ИзмененныеСостояния Цикл
		
		ИзмененноеСостояние = ЭлементИзмененноеСостояние.Значение;
		Если ЗначениеЗаполнено(ИзмененноеСостояние.Состояние) Тогда 
			ИмяСостояния = УправлениеМероприятиями.ПолучитьИмяЭлементаСостояния(ИзмененноеСостояние.Состояние);
		Иначе
			ИмяСостояния = УправлениеМероприятиями.ПолучитьИмяЭлементаСостояния(ИзмененноеСостояние.НачальноеСостояние);
		КонецЕсли;
		
		Если ИзмененноеСостояние.НачальноеСостояние <> ЭтаФорма["НачальноеСостояние" + ИмяСостояния] Тогда
			СостоянияКУдалению.Добавить(ЭлементИзмененноеСостояние);
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма["Состояние" + ИмяСостояния] = ИзмененноеСостояние.Состояние;
		
	КонецЦикла;
	Для Каждого ЭлементКУдалению Из СостоянияКУдалению Цикл
		ИзмененныеСостояния.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОбщееПредставлениеСостояния(ЭтаФорма)
	
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(ЭтаФорма.СостояниеМероприятия);
	МассивСостояний.Добавить(ЭтаФорма.СостояниеПриглашений);
	МассивСостояний.Добавить(ЭтаФорма.СостояниеПрограммы);
	МассивСостояний.Добавить(ЭтаФорма.СостояниеМатериаловВыступающих);
	МассивСостояний.Добавить(ЭтаФорма.СостояниеПротокола);
	ЭтаФорма.СостояниеТекст = УправлениеМероприятиямиКлиентСервер.ПолучитьСтроковоеПредставлениеСостояний(МассивСостояний);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСуммарнуюДлительностьПрограммы()
	
	Если Объект.ТипПрограммы <> ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВТаблице") Тогда 
		Возврат;
	КонецЕсли;
	
	// Вывод итогового времени в подвал
	ВремяПланСек = 0; ВремяФактСек = 0;
	
	Для Каждого Строка Из Объект.Программа Цикл
		ВремяПланСек = ВремяПланСек + Строка.ВремяПлан;
		ВремяФактСек = ВремяФактСек + Строка.ВремяФакт;
	КонецЦикла;
	
	ИтогоВремяПлан = УчетВремениКлиентСервер.ЧислоВСтроку(ВремяПланСек);
	ИтогоВремяФакт = УчетВремениКлиентСервер.ЧислоВСтроку(ВремяФактСек);
	
	// Вывод превышенного / оставшегося времени
	СуммарнаяДлительностьПрограммы = 0;
	Для Каждого Строка Из Объект.Программа Цикл
		СуммарнаяДлительностьПрограммы = СуммарнаяДлительностьПрограммы + Строка.ВремяПлан;
	КонецЦикла;
	
	ИнформационнаяНадписьПрограмма = "";
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) 
		И ЗначениеЗаполнено(Объект.ДатаОкончания)
		И НачалоДня(Объект.ДатаНачала) = НачалоДня(Объект.ДатаОкончания) Тогда 
		
		ДлительностьСек = Объект.ДатаОкончания - Объект.ДатаНачала;
		Если СуммарнаяДлительностьПрограммы <> ДлительностьСек Тогда 
			Если СуммарнаяДлительностьПрограммы > ДлительностьСек Тогда 
				ИнформационнаяНадписьПрограмма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Превышено на %1'; en = 'Exceeded by %1'"),  
					УчетВремениКлиентСервер.ЧислоВСтроку(СуммарнаяДлительностьПрограммы - ДлительностьСек));
			Иначе
				ИнформационнаяНадписьПрограмма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Осталось %1'; en = 'Left %1'"),
					УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьСек - СуммарнаяДлительностьПрограммы));
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер)
	
	СтруктураПоиска = Новый Структура("НомерПункта", СтарыйНомер);
	НайденныеСтрокиСтарыйНомер = Объект.Программа.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("НомерПункта", НовыйНомер);
	НайденныеСтрокиНовыйНомер = Объект.Программа.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтрокиСтарыйНомер.Количество() > 0 Тогда 
		НайденныеСтрокиСтарыйНомер[0].НомерПункта = НовыйНомер;
	КонецЕсли;
	
	Если НайденныеСтрокиНовыйНомер.Количество() > 0 Тогда 
		НайденныеСтрокиНовыйНомер[0].НомерПункта = СтарыйНомер;
	КонецЕсли;
	
	Если НовыйНомер > СтарыйНомер Тогда 
		
		НайденныеСтрокиНовыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Начало;
		НайденныеСтрокиНовыйНомер[0].Окончание = НайденныеСтрокиНовыйНомер[0].Начало + НайденныеСтрокиНовыйНомер[0].ВремяПлан;
		
		НайденныеСтрокиСтарыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Окончание;
		НайденныеСтрокиСтарыйНомер[0].Окончание = НайденныеСтрокиСтарыйНомер[0].Начало + НайденныеСтрокиСтарыйНомер[0].ВремяПлан;
		
	ИначеЕсли НовыйНомер < СтарыйНомер Тогда 
		
		НайденныеСтрокиСтарыйНомер[0].Начало = НайденныеСтрокиНовыйНомер[0].Начало;
		НайденныеСтрокиСтарыйНомер[0].Окончание = НайденныеСтрокиСтарыйНомер[0].Начало + НайденныеСтрокиСтарыйНомер[0].ВремяПлан;
		
		НайденныеСтрокиНовыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Окончание;
		НайденныеСтрокиНовыйНомер[0].Окончание = НайденныеСтрокиНовыйНомер[0].Начало + НайденныеСтрокиНовыйНомер[0].ВремяПлан;
		
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("НомерПунктаПрограммы", СтарыйНомер);
	НайденныеСтрокиСтарыйНомер = Объект.Протокол.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("НомерПунктаПрограммы", НовыйНомер);
	НайденныеСтрокиНовыйНомер = Объект.Протокол.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка Из НайденныеСтрокиСтарыйНомер Цикл
		Строка.НомерПунктаПрограммы = НовыйНомер;
		Строка.ИзменилсяНомерПунктаПротокола = Истина;
		ИзменилсяНомерПунктаПротокола = Истина;
	КонецЦикла;	
	
	Для Каждого Строка Из НайденныеСтрокиНовыйНомер Цикл
		Строка.НомерПунктаПрограммы = СтарыйНомер;
		Строка.ИзменилсяНомерПунктаПротокола = Истина;
		ИзменилсяНомерПунктаПротокола = Истина;
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ВывестиДлительностьВПрограмме()
	
	Для Каждого Строка Из Объект.Программа Цикл
		Строка.ВремяПланСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.ВремяПлан);
		Строка.ВремяФактСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.ВремяФакт);
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ВывестиПротоколМероприятия()
	
	// Чтение данных протокола выполняется только для протокольных мероприятий.
	Если Не УчитыватьКакПротокольноеМероприятие Тогда 
		Возврат;
	КонецЕсли;
	
	// Чтение данных протокола выполняется только если протокол ведется в таблице.
	Если Объект.ТипПротокола <> ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВТаблице") Тогда 
		Возврат;
	КонецЕсли;
	
	УправлениеМероприятиями.ВывестиПротоколМероприятия(Объект.Протокол);
	УправлениеМероприятиямиКлиентСервер.ВывестиРешенияПрограммы(Объект.Программа, Объект.Протокол);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРешенияВПрограмме()
	
	Если Не УчитыватьКакПротокольноеМероприятие
		Или Объект.ТипПротокола <> ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВТаблице") Тогда 
		Элементы.ПрограммаРешение.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ПрограммаРешение.Видимость = Истина;
	
	УправлениеМероприятиямиКлиентСервер.ВывестиРешенияПрограммы(Объект.Программа, Объект.Протокол);
	
КонецПроцедуры	
 
&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандКлиент(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элементы.Файлы.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОткрытьФайл, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыРедактировать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗакончитьРедактирование, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Занять, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗанять, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьИзменения, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьКак, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Освободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОсвободить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыРаспознать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.ФайлыКонтекстноеМенюРаспознать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыПодписатьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюПодписатьФайл, Ложь);

		УстановитьДоступностьКоманды(Элементы.ФайлыДобавитьЭПИзФайла, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюДобавитьЭПИзФайла, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыСохранитьВместеСЭП, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьВместеСЭП, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыЗашифровать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗашифровать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыРасшифровать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРасшифровать, Ложь);
		
	Иначе	
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
		Зашифрован 	= ТекущиеДанные.Зашифрован;
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОткрытьФайл, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, НЕ ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыРедактировать, НЕ ТекущиеДанные.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗакончитьРедактирование, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Занять, Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗанять, Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьИзменения, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьКак, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Освободить, Не Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОсвободить, Не Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Истина);
		
		Расширение = ТекущиеДанные.Расширение;
		ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Расширение, ИспользоватьImageMagickДляРаспознаванияPDF);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыРаспознать, РасширениеПоддерживается И Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.ФайлыКонтекстноеМенюРаспознать, РасширениеПоддерживается И Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы.ФайлыПодписатьФайл, Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюПодписатьФайл, Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыДобавитьЭПИзФайла, Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюДобавитьЭПИзФайла, Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыСохранитьВместеСЭП, ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьВместеСЭП, ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыЗашифровать, Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗашифровать, Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыРасшифровать, Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРасшифровать, Зашифрован);
		
	КонецЕсли;
	
КонецПроцедуры
  
&НаКлиенте
Функция СформироватьДанныеВыбораУчастника(Текст = "")
	
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого Строка Из Участники Цикл
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;
		Если Текст <> "" И НРег(Лев(Строка.Исполнитель, СтрДлина(Текст))) <> НРег(Текст) Тогда 
			Продолжить;
		КонецЕсли;
		ДанныеВыбора.Добавить(Строка.Исполнитель, Строка(Строка.Исполнитель));
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура;
	СохраняемыеЭлементы.Вставить("МестоПроведения", Объект.МестоПроведения);
	
	Если ЗначениеЗаполнено(Объект.ОрганизаторКонтактноеЛицо) Тогда 
		СохраняемыеЭлементы.Вставить("ОрганизаторТекст", 
			СокрЛП(Объект.Организатор) + ", " + СокрЛП(Объект.ОрганизаторКонтактноеЛицо));
	Иначе 
		СохраняемыеЭлементы.Вставить("ОрганизаторТекст", Объект.Организатор);
	КонецЕсли;
	
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьПоСостоянию()
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат;
	КонецЕсли;	
	
	// Установка доступности по состоянию приглашения.
	Элементы.Участники.ТолькоПросмотр = Ложь;
	Элементы.ДатаНачала.ТолькоПросмотр = Ложь;
	Элементы.ДатаНачалаВремя.ТолькоПросмотр = Ложь;
	Элементы.ДатаОкончания.ТолькоПросмотр = Ложь;
	Элементы.ДатаОкончанияВремя.ТолькоПросмотр = Ложь;
	Элементы.МестоПроведения.ТолькоПросмотр = Ложь;
	Элементы.Программа.ТолькоПросмотр = Ложь;
	
	Элементы.ДатаНачала.Подсказка = "";
	Элементы.ДатаНачалаВремя.Подсказка = "";
	Элементы.ДатаОкончания.Подсказка = "";
	Элементы.ДатаОкончанияВремя.Подсказка = "";
	Элементы.МестоПроведения.Подсказка = "";
	
	Если СостояниеПриглашений = Перечисления.СостоянияМероприятий.ПриглашенияОтправлены Тогда 
		
		Элементы.ДатаНачала.ТолькоПросмотр = Истина;
		Элементы.ДатаНачалаВремя.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончания.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончанияВремя.ТолькоПросмотр = Истина;
		Элементы.МестоПроведения.ТолькоПросмотр = Истина;
		
		ПодсказкаДоступностьПоСостоянию =
			НСтр("ru = 'Изменение недоступно в связи с тем, что приглашения уже отправлены.
				|Для редактирования измените состояние приглашения на мероприятие.';
				|en = 'Change is not available due to the fact that the invitations have already been sent.
				|To edit, change the status of invitations to the event.'");
		Элементы.ДатаНачала.Подсказка = ПодсказкаДоступностьПоСостоянию;
		Элементы.ДатаНачалаВремя.Подсказка = ПодсказкаДоступностьПоСостоянию;
		Элементы.ДатаОкончания.Подсказка = ПодсказкаДоступностьПоСостоянию;
		Элементы.ДатаОкончанияВремя.Подсказка = ПодсказкаДоступностьПоСостоянию;
		Элементы.МестоПроведения.Подсказка = ПодсказкаДоступностьПоСостоянию;
		
	КонецЕсли;
	
	Если СостояниеПриглашений = Перечисления.СостоянияМероприятий.ПриглашенияПриняты Тогда 
		
		Элементы.ДатаНачала.ТолькоПросмотр = Истина;
		Элементы.ДатаНачалаВремя.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончания.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончанияВремя.ТолькоПросмотр = Истина;
		Элементы.МестоПроведения.ТолькоПросмотр = Истина;
		
		ПодсказкаДоступностьПоСостоянию =
			НСтр("ru = 'Изменение недоступно в связи с тем, что приглашения уже приняты.
				|Для редактирования измените состояние приглашения на мероприятие.';
				|en = 'Change is not available due to the fact that the invitations had already been taken.
				|To edit, change the status of invitations to the event.'");
		Элементы.ДатаНачала.Подсказка = ПодсказкаДоступностьПоСостоянию;
		Элементы.ДатаНачалаВремя.Подсказка = ПодсказкаДоступностьПоСостоянию;
		Элементы.ДатаОкончания.Подсказка = ПодсказкаДоступностьПоСостоянию;
		Элементы.ДатаОкончанияВремя.Подсказка = ПодсказкаДоступностьПоСостоянию;
		Элементы.МестоПроведения.Подсказка = ПодсказкаДоступностьПоСостоянию;
		
	КонецЕсли;
	
	// Установка доступности по состоянию протокола.
	ПротоколТолькоПросмотр = Ложь;
	Элементы.ПротоколЗаполнитьПротокол.Доступность = Истина;
	Элементы.ПротоколДобавить.Доступность = Истина;
	Элементы.ПротоколУдалить.Доступность = Истина;
	Элементы.ПротоколВестиПротоколВОтдельномДокументе.Доступность = Истина;
	Элементы.ПротоколВестиПротоколВТаблице.Доступность = Истина;
	Элементы.ПротоколВестиПротоколВФайлах.Доступность = Истина;
	Элементы.ПротоколКонтекстноеМенюДобавить.Доступность = Истина;
	Элементы.ПротоколКонтекстноеМенюСкопировать.Доступность = Истина;
	Элементы.ПротоколКонтекстноеМенюУдалить.Доступность = Истина;
	Элементы.ПротоколКонтекстноеМенюПереместитьВверх.Доступность = Истина;
	Элементы.ПротоколКонтекстноеМенюПереместитьВниз.Доступность = Истина;
	
	Если СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколСогласован
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколНаУтверждении
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколУтвержден
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколИсполнен Тогда 
		
		ПротоколТолькоПросмотр = Истина;
		Элементы.ПротоколЗаполнитьПротокол.Доступность = Ложь;
		Элементы.ПротоколДобавить.Доступность = Ложь;
		Элементы.ПротоколУдалить.Доступность = Ложь;
		Элементы.ПротоколВестиПротоколВОтдельномДокументе.Доступность = Ложь;
		Элементы.ПротоколВестиПротоколВТаблице.Доступность = Ложь;
		Элементы.ПротоколВестиПротоколВФайлах.Доступность = Ложь;
		Элементы.ПротоколКонтекстноеМенюДобавить.Доступность = Ложь;
		Элементы.ПротоколКонтекстноеМенюСкопировать.Доступность = Ложь;
		Элементы.ПротоколКонтекстноеМенюУдалить.Доступность = Ложь;
		Элементы.ПротоколКонтекстноеМенюПереместитьВверх.Доступность = Ложь;
		Элементы.ПротоколКонтекстноеМенюПереместитьВниз.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок()
	
	СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);	
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОКатегориях(Параметр)
	
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		ВыбраннаяКатегория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбраннаяКатегория.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьДанныеУчастниковДляРедактирования()
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗначенияКлюча = Новый Структура;
		ЗначенияКлюча.Вставить("Мероприятие", Объект.Ссылка);
		ЗначенияКлюча.Вставить("Исполнитель", Строка.Исполнитель);
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Исполнитель,
				"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ЗначенияКлюча.Вставить("УдалитьИсполнитель", ЗначенияРеквизитов.Владелец);
			ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", ЗначенияРеквизитов.ОсновнойОбъектАдресации);
			ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", ЗначенияРеквизитов.ДополнительныйОбъектАдресации);
		Иначе
			ЗначенияКлюча.Вставить("УдалитьИсполнитель", Строка.Исполнитель);
			ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", Неопределено);
			ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", Неопределено);
		КонецЕсли;
		КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи,,ЭтаФорма.УникальныйИдентификатор);
		
	КонецЦикла;	
	
	ДанныеУчастниковЗаблокированы = Истина;
	
КонецПроцедуры	

&НаСервере
Процедура РазблокироватьДанныеУчастниковДляРедактирования()
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗначенияКлюча = Новый Структура;
		ЗначенияКлюча.Вставить("Мероприятие", Объект.Ссылка);
		ЗначенияКлюча.Вставить("Исполнитель", Строка.Исполнитель);
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Исполнитель,
				"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ЗначенияКлюча.Вставить("УдалитьИсполнитель", ЗначенияРеквизитов.Владелец);
			ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", ЗначенияРеквизитов.ОсновнойОбъектАдресации);
			ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", ЗначенияРеквизитов.ДополнительныйОбъектАдресации);
		Иначе
			ЗначенияКлюча.Вставить("УдалитьИсполнитель", Строка.Исполнитель);
			ЗначенияКлюча.Вставить("УдалитьОсновнойОбъектАдресации", Неопределено);
			ЗначенияКлюча.Вставить("УдалитьДополнительныйОбъектАдресации", Неопределено);
		КонецЕсли;
				
		КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
		РазблокироватьДанныеДляРедактирования(КлючЗаписи,ЭтаФорма.УникальныйИдентификатор);
		
	КонецЦикла;	
	
	ДанныеУчастниковЗаблокированы = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчастниковМероприятия()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Участники.Очистить();
		
		НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Мероприятие.Значение = Объект.Ссылка;
		НаборЗаписей.Отбор.Мероприятие.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		Записи = НаборЗаписей.Выгрузить();
		Записи.Сортировать("Порядок");
		Для Каждого Запись Из Записи Цикл
			НоваяСтрока = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
		КонецЦикла;	
		
	КонецЕсли;
	
	ДанныеУчастниковЗаблокированы = Ложь;
	КоличествоУчастников = Участники.Количество();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.ТипПрограммы = Перечисления.ТипыПрограммыПротокола.ВМатериалах Тогда 
		
		Элементы.Программа.Видимость = Ложь;
		Элементы.ИнформационнаяНадписьПрограмма.Видимость = Ложь;
		Элементы.ГруппаКоманднаяПанельПрограмма.Видимость = Ложь;
		Элементы.ГруппаПрограмма.Видимость = Истина;
		Элементы.ТипПрограммы.Видимость = Истина;
		Элементы.МатериалПрограмма.Видимость = Ложь;
		Элементы.СоздатьПрограмму.Видимость = Ложь;
		
	ИначеЕсли Объект.ТипПрограммы = Перечисления.ТипыПрограммыПротокола.ВОтдельномДокументе Тогда 
		
		Элементы.Программа.Видимость = Ложь;
		Элементы.ИнформационнаяНадписьПрограмма.Видимость = Ложь;
		Элементы.ГруппаКоманднаяПанельПрограмма.Видимость = Ложь;
		Элементы.ГруппаПрограмма.Видимость = Истина;
		Элементы.ТипПрограммы.Видимость = Истина;
		Элементы.МатериалПрограмма.Видимость = Истина;
		Элементы.СоздатьПрограмму.Видимость = Истина;
		
	ИначеЕсли Объект.ТипПрограммы = Перечисления.ТипыПрограммыПротокола.ВТаблице Тогда 	
		
		Элементы.Программа.Видимость = Истина;
		Элементы.ИнформационнаяНадписьПрограмма.Видимость = Истина;
		Элементы.ГруппаКоманднаяПанельПрограмма.Видимость = Истина;
		Элементы.ГруппаПрограмма.Видимость = Ложь;
		Элементы.ТипПрограммы.Видимость = Ложь;
		Элементы.МатериалПрограмма.Видимость = Ложь;
		Элементы.СоздатьПрограмму.Видимость = Ложь;
		
	КонецЕсли;	
	
	Если Объект.ТипПротокола = Перечисления.ТипыПрограммыПротокола.ВМатериалах Тогда 
		
		Элементы.Протокол.Видимость = Ложь;
		Элементы.ГруппаПротокол.Видимость = Истина;
		Элементы.ТипПротокола.Видимость = Истина;
		Элементы.МатериалПротокол.Видимость = Ложь;
		Элементы.СоздатьПротокол.Видимость = Ложь;
		
	ИначеЕсли Объект.ТипПротокола = Перечисления.ТипыПрограммыПротокола.ВОтдельномДокументе Тогда 
		
		Элементы.Протокол.Видимость = Ложь;
		Элементы.ГруппаПротокол.Видимость = Истина;
		Элементы.ТипПротокола.Видимость = Истина;
		Элементы.МатериалПротокол.Видимость = Истина;
		Элементы.СоздатьПротокол.Видимость = Истина;
		
	ИначеЕсли Объект.ТипПротокола = Перечисления.ТипыПрограммыПротокола.ВТаблице Тогда 	
		
		Элементы.Протокол.Видимость = Истина;
		Элементы.ГруппаПротокол.Видимость = Ложь;
		Элементы.ТипПротокола.Видимость = Ложь;
		Элементы.МатериалПротокол.Видимость = Ложь;
		Элементы.СоздатьПротокол.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Элементы.СоздатьПрограмму.Доступность = Не ЗначениеЗаполнено(Объект.МатериалПрограмма);
	Элементы.СоздатьПротокол.Доступность = Не ЗначениеЗаполнено(Объект.МатериалПротокол);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДлительностьМероприятия()
	
	ДлительностьСтр = "";
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаНачала) <> НачалоДня(Объект.ДатаОкончания) Тогда 
		Возврат;
	КонецЕсли;	
	
	ДлительностьСек = Объект.ДатаОкончания - Объект.ДатаНачала;
		
	Часов = Цел(ДлительностьСек	/ 3600);
	ПодписьЧасов = ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(Часов);
	
	Минут = Цел((ДлительностьСек - Часов*3600) / 60);
	ПодписьМинут = ДелопроизводствоКлиентСервер.ПолучитьПодписьМинут(Минут);
	
	Если Часов > 0 Тогда 
		ДлительностьСтр = ДлительностьСтр + Строка(Часов) + " " + ПодписьЧасов;
	КонецЕсли;	
		
	Если Минут > 0 Тогда 
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ДлительностьСтр, " ", Строка(Минут) + " " + ПодписьМинут);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОсталосьДоНачала()
	
	ТекущаяДата = ТекущаяДата();
	Если Объект.ДатаНачала <= ТекущаяДата Тогда 
		ОсталосьДоНачала = "";
	Иначе
		ОсталосьДоНачала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'осталось %1'; en = 'left %1'"),
			НРег(ДелопроизводствоКлиентСервер.РазностьДатВДнях(Объект.ДатаНачала, ТекущаяДата)));
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура НайтиИПоказатьКоличествоФайлов()
	
	КоличествоФайлов = 0;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФайлов = Делопроизводство.КоличествоФайлов(Объект.Ссылка);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодобратьВремяКлиент()
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда 
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Участники.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны участники мероприятия.'; en = 'Event attendees are not specified.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Участники");
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Мероприятие", Объект.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодобратьВремяКлиентЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.ВыборВремени", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВремяКлиентЗавершение(Время, ДополнительныеПараметры) Экспорт
	
	Если Время = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Объект.ДатаНачала = Время.ДатаНачала;
	Объект.ДатаОкончания = Время.ДатаОкончания;
	
	Если Объект.ДатаНачала > Объект.ДатаОкончания Тогда 
		Объект.ДатаОкончания = Объект.ДатаНачала +  1 * ДлительностьПоУмолчанию;
	КонецЕсли;

	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиОсталосьДоНачала();
	
	// Включение добавленных во время подбора участников в участники мероприятия
	Для Каждого ДобавленныйУчастник Из Время.ДобавленныеУчастники Цикл
		
		Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
			ЗаблокироватьДанныеУчастниковДляРедактирования();
		КонецЕсли;
		
		ТекущаяСтрока = Элементы.Участники.ТекущаяСтрока;
		Индекс = Участники.Индекс(Участники.НайтиПоИдентификатору(ТекущаяСтрока));
		
		НоваяСтрока = Участники.Вставить(Индекс + 1);
		НоваяСтрока.Исполнитель = ДобавленныйУчастник;
		НоваяСтрока.ЯвкаОбязательна = ЯвкаОбязательнаПоУмолчанию;
		
		Элементы.Участники.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПодсказкуСледующегоДействия()
	
	Если Не ОтображатьПодсказкуСледующегоДействия Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполненыОсновныеРеквизиты = 
		ЗначениеЗаполнено(Объект.ВидМероприятия)
		И ЗначениеЗаполнено(Объект.Наименование)
		И ЗначениеЗаполнено(Объект.ДатаНачала)
		И ЗначениеЗаполнено(Объект.ДатаОкончания)
		И ЗначениеЗаполнено(Объект.Организатор)
		И Участники.Количество() <> 0;
	
	ПодсказкаСледующегоДействия = УправлениеМероприятиямиКлиент.ПолучитьПодсказкуСледующегоДействия(
		СостояниеМероприятия, СостояниеПрограммы, СостояниеПриглашений, СостояниеМатериаловВыступающих,
		СостояниеПротокола, ЗаполненыОсновныеРеквизиты, УчитыватьКакПротокольноеМероприятие, Объект);
	Элементы.ПодсказкаСледующегоДействия.Видимость = ЗначениеЗаполнено(ПодсказкаСледующегоДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиВыбораДат()
	
	ЗаполнитьСпискиВыбора(Объект.ДатаНачала, Элементы.ДатаНачалаВремя.СписокВыбора,
		Элементы.ДатаНачалаВремяФакт.СписокВыбора);
	ЗаполнитьСпискиВыбора(Объект.ДатаОкончания, Элементы.ДатаОкончанияВремя.СписокВыбора,
		Элементы.ДатаОкончанияВремяФакт.СписокВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСпискиВыбора(ДатаВыбора, СписокВыбораПлан, СписокВыбораФакт)
	
	СписокВыбораПлан.Очистить();
	
	Если ЗначениеЗаполнено(ДатаВыбора) Тогда
		ТекДата = НачалоДня(ДатаВыбора);
	Иначе
		ТекДата = НачалоДня(ТекущаяДата());
	КонецЕсли;	
		
	Для Инд = 1 По 24 Цикл
		
		СписокВыбораПлан.Добавить(ТекДата, Формат(ТекДата, "ДФ=ЧЧ:мм"));
		Если ДатаВыбора > ТекДата И ДатаВыбора < ТекДата + 3600 Тогда
			СписокВыбораПлан.Добавить(ДатаВыбора, Формат(ДатаВыбора, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		
		ТекДата = ТекДата + 3600;
		
	КонецЦикла;	
	
	СписокВыбораФакт.Очистить();
	Если ЗначениеЗаполнено(ДатаВыбора) Тогда
		СписокВыбораФакт.Добавить(ДатаВыбора);
	Иначе
		Для Каждого ТекДата Из СписокВыбораПлан Цикл
			СписокВыбораФакт.Добавить(ТекДата.Значение, Формат(ТекДата, "ДФ=ЧЧ:мм"));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуСостояний()
	
	УстановитьПривилегированныйРежим(Истина);
	
	КешИнформации = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
	КешИнформации.Объект = Объект.Ссылка;
	КешИнформации.Прочитать();
	
	// Картинка Взаимодействие
	Элементы.КартинкаВзаимодействие.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	Если КешИнформации.ЕстьЗадачи Тогда 
		СтатусВзаимодействие = 1;
		Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'Есть выполняющиеся задачи'; en = 'Has tasks'");
	Иначе	
		СтатусВзаимодействие = 0;
		Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'Нет выполняющихся задач'; en = 'No tasks'");
	КонецЕсли;	
	
	// Картинка Категории
	Элементы.КартинкаКатегории.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	Если СписокКатегорийДанных.Количество() > 0 Тогда 
		СтатусКатегории = 1;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Есть категории'; en = 'Has categories'");
	Иначе
		СтатусКатегории = 0;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Нет категорий'; en = 'No categories'");
	КонецЕсли;	
	
	// Картинка Форум
	ИспользоватьОбсуждения = ПолучитьФункциональнуюОпцию("ИспользоватьОбсуждения");
	Элементы.КартинкаФорум.Видимость = ИспользоватьОбсуждения;
	Если ИспользоватьОбсуждения Тогда
		Тема = РаботаСОбсуждениями.НайтиТемуПоПредмету(Объект.Ссылка);
		Если Тема = Неопределено Тогда 
			СтатусФорум = 0;
			Элементы.КартинкаФорум.Подсказка = НСтр("ru = 'Нет обсуждения'; en = 'No forum thread'");
		Иначе
			СтатусФорум = 1;
			Элементы.КартинкаФорум.Подсказка = НСтр("ru = 'Есть обсуждение'; en = 'Has forum thread'");
		КонецЕсли;
	КонецЕсли;
	
	// Картинка Контроль
	Элементы.КартинкаКонтроль.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов");
	ОбзорДокумента.ВывестиКартинкуКонтроля(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьРешениеНеПринято()
	
	ЕстьРешениеНеПринято = Ложь;
	Если УчитыватьКакПротокольноеМероприятие Тогда 
		
		Для Каждого Строка Из Объект.Программа Цикл
			
			Решение = "";
			Если Строка.ТребуетПринятияРешения Тогда 
				НайденныеСтроки = Объект.Протокол.НайтиСтроки(Новый Структура("НомерПунктаПрограммы", Строка.НомерПункта));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если ЗначениеЗаполнено(НайденнаяСтрока.Решили) Тогда 
						Решение = НСтр("ru = 'Принято'; en = 'Taken'");
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				
				Если Решение = "" Тогда 
					ЕстьРешениеНеПринято = Истина;
					Прервать;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат ЕстьРешениеНеПринято;
	
КонецФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры


&НаСервере
Процедура ПрочитатьМестоПроведения()
	
	Если ЗначениеЗаполнено(Объект.Помещение) Тогда
		МестоПроведения = Объект.Помещение;
	Иначе
		МестоПроведения = Объект.МестоПроведения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМестоПроведения()
	
	Объект.МестоПроведения = МестоПроведения;
	Объект.Помещение = МестоПроведения;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоПравам()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТолькоПросмотр = Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка).Изменение;
	
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = Не ТолькоПросмотр;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Не ТолькоПросмотр;
	Элементы.ФормаЗакрыть.Видимость = ТолькоПросмотр;
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = ТолькоПросмотр;
	
	Элементы.ФормаЗаписать.Видимость = Не ТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКлиент(ПараметрыЗаписи)
	
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") И Не ПараметрыЗаписи.ЗакрытьПослеЗаписи Тогда
			Возврат;
		КонецЕсли;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСостояния(АктивизироватьЭлемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Мероприятие", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидМероприятия", Объект.ВидМероприятия);
	ПараметрыФормы.Вставить("УчитыватьКакПротокольноеМероприятие", УчитыватьКакПротокольноеМероприятие);
	ПараметрыФормы.Вставить("ИзмененныеСостояния", ИзмененныеСостояния);
	ПараметрыФормы.Вставить("ЕстьРешениеНеПринято", ЕстьРешениеНеПринято());
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("АктивизироватьЭлемент", АктивизироватьЭлемент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуСостоянияЗавершение",
		ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Мероприятия.Форма.СостоянияМероприятия",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСостоянияЗавершение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда 
		
		Модифицированность = Истина;
		
		ИзмененоСостояние = Истина;
		ИзмененныеСостояния.Очистить();
		ИзмененныеСостояния.ЗагрузитьЗначения(Результат);
		
		ОбновитьСостоянияМероприятия();
		ВывестиПодсказкуСледующегоДействия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВУчастники(Исполнитель)
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбораИсполнитель = Новый Структура("Исполнитель", Исполнитель);
	Если Участники.НайтиСтроки(ПараметрыОтбораИсполнитель).Количество() = 0 Тогда
		НоваяСтрока = Участники.Добавить();
		НоваяСтрока.Исполнитель = Исполнитель;
		НоваяСтрока.ЯвкаОбязательна = ЯвкаОбязательнаПоУмолчанию;
		КоличествоУчастников = Участники.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСостояния(ИмяСостояния)
	
	ИзмененоСостояние = Истина;
	
	СостоянияКУдалению = Новый Массив;
	Для Каждого ИзмененноеСостояние Из ИзмененныеСостояния Цикл
		
		Если ИзмененноеСостояние.Значение.Тип <> ИмяСостояния Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИзмененноеСостояние.Значение.Состояние = ЭтаФорма["Состояние" + ИмяСостояния] Тогда
			Возврат;
		КонецЕсли;
		
		СостоянияКУдалению.Добавить(ИзмененноеСостояние);
		
	КонецЦикла;
	Для Каждого ЭлементКУдалению Из СостоянияКУдалению Цикл
		ИзмененныеСостояния.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
	Если ЭтаФорма["Состояние" + ИмяСостояния] <> ЭтаФорма["НачальноеСостояние" + ИмяСостояния] Тогда
		СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние, Тип",
			ЭтаФорма["Состояние" + ИмяСостояния],
			ПользователиКлиентСервер.ТекущийПользователь(),
			ТекущаяДата(),
			ЭтаФорма["НачальноеСостояние" + ИмяСостояния],
			ИмяСостояния);
		ИзмененныеСостояния.Добавить(СтруктураСостояния);
	КонецЕсли;
	
	ОбновитьОбщееПредставлениеСостояния(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоВидуМероприятия()
	
	Если Не ЗначениеЗаполнено(Объект.ВидМероприятия) Тогда
		Возврат;
	КонецЕсли;
	
	Если УчитыватьКуратора Тогда
		КураторПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидМероприятия, "Куратор");
		Если ЗначениеЗаполнено(КураторПоУмолчанию) Тогда
			Объект.Куратор = КураторПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	ПомещениеПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидМероприятия, "Помещение");
	Если ЗначениеЗаполнено(ПомещениеПоУмолчанию) Тогда
		МестоПроведения = ПомещениеПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦвет(НовыйЦвет)
	
	Если Цвет = НовыйЦвет Тогда
		Возврат;
	КонецЕсли;
	
	Цвет = НовыйЦвет;
	ПриИзмененииЦвета();
	Если ЗначениеЗаполнено(СвязаннаяЗаписьКалендаря) Тогда
		ИзмененныеЗаписиКалендаря = Новый Массив;
		ИзмененныеЗаписиКалендаря.Добавить(СвязаннаяЗаписьКалендаря);
		Оповестить("Запись_ЗаписьКалендаря", ИзмененныеЗаписиКалендаря, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦвета()
	
	УстановитьПометкуКомандЦвета();
	РаботаСРабочимКалендаремСервер.УстановитьЦветЗаписиКалендаря(СвязаннаяЗаписьКалендаря, Цвет);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуКомандЦвета()
	
	Элементы.УстановитьЦветКрасный.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Красный);
	Элементы.УстановитьЦветСиний.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Синий);
	Элементы.УстановитьЦветЖелтый.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Желтый);
	Элементы.УстановитьЦветЗеленый.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Зеленый);
	Элементы.УстановитьЦветОранжевый.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Оранжевый);
	Элементы.УстановитьЦветНет.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЦвет()
	
	Цвет = РаботаСРабочимКалендаремСервер.ПолучитьЦветСобытияКалендаря(СвязаннаяЗаписьКалендаря);
	УстановитьПометкуКомандЦвета();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСвязаннойЗаписиКалендаря()
	
	СвязаннаяЗаписьКалендаря = Справочники.ЗаписиРабочегоКалендаря.СвязаннаяЗаписьКалендаря(
		Объект.Ссылка,
		ПользовательКалендаря);
	Если Не ЗначениеЗаполнено(СвязаннаяЗаписьКалендаря) Тогда
		Элементы.ГруппаДанныеЗаписиКалендаря.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаДанныеЗаписиКалендаря.Видимость = Истина;
	ПрочитатьЦвет();
	ИспользоватьНапоминанияПользователя = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	
	Если ИспользоватьНапоминанияПользователя Тогда 
		СрокНапоминанияПоУмолчанию =
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"СрокНапоминанияПоУмолчанию",
			15);
		УстанавливатьНапоминаниеАвтоматически =
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"УстанавливатьНапоминаниеАвтоматически",
			Истина);
		ПрочитатьНапоминание();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНапоминание()
	
	Если Не ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;

	ИзмененоНапоминание = Ложь;
	
	Если ЗначениеЗаполнено(СвязаннаяЗаписьКалендаря) Тогда
		
		Напоминание = ПолучитьПараметрыНапоминанияПоИсточнику(СвязаннаяЗаписьКалендаря);
		УстановитьНадписьНапоминания(
			Напоминание,
			УстановитьНапоминание,
			УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию,
			ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания,
			ВремяНапоминания);
		
	Иначе
		
		УстановитьНапоминание = УстанавливатьНапоминаниеАвтоматически;
		УстановленоНапоминание = Ложь;
		ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремениДокументооборот(СрокНапоминанияПоУмолчанию * 60);
		СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета;
		ВремяНапоминания = Дата(1,1,1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНапоминанияНаСервере()
	
	Если Не ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;
	
	Если УстановитьНапоминание И (ИзмененоНапоминание Или ИзмененоВремя Или Не УстановленоНапоминание) Тогда
		
		// Отключение старого напоминания, если оно было установлено ранее
		Если УстановленоНапоминание И (ИзмененоНапоминание Или ИзмененоВремя) Тогда
			НапоминанияПользователяСлужебный.ОтключитьНапоминание(Напоминание, Ложь);
			НапоминаниеСтарое = Напоминание;
			Напоминание = Неопределено;
			ИзмененоНапоминание = Ложь;
			ИзмененоВремя = Ложь;
		КонецЕсли;
		
		Если СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета Тогда
			// Подключение напоминания относительно времени предмета
			ИнтервалВремениНапоминания = НапоминанияПользователяКлиентСервер.ПолучитьИнтервалВремениИзСтроки(ИнтервалВремениСтрокой);
			Напоминание = НапоминанияПользователяСлужебный.ПодключитьНапоминаниеДоВремениПредмета(
				Строка(СвязаннаяЗаписьКалендаря), ИнтервалВремениНапоминания, СвязаннаяЗаписьКалендаря, "ДатаНачала");
			ОбновитьЗаписьВКешеНапоминаний = Истина;
			УстановленоНапоминание = Истина;
			
		ИначеЕсли СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя Тогда
			// Подключение напоминания в указанное время
			Напоминание = НапоминанияПользователяСлужебный.ПодключитьНапоминаниеВУказанноеВремя(
				Строка(СвязаннаяЗаписьКалендаря), ВремяНапоминания, СвязаннаяЗаписьКалендаря);
			ОбновитьЗаписьВКешеНапоминаний = Истина;
			УстановленоНапоминание = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Не УстановитьНапоминание И УстановленоНапоминание Тогда
		
		// Отключение старого напоминания
		НапоминанияПользователяСлужебный.ОтключитьНапоминание(Напоминание);
		НапоминаниеСтарое = Напоминание;
		Напоминание = Неопределено;
		УстановленоНапоминание = Ложь;
		
	КонецЕсли;
	
	УстановитьНадписьНапоминания(Напоминание, УстановитьНапоминание, УстановленоНапоминание,
		СрокНапоминанияПоУмолчанию, ИнтервалВремениСтрокой,
		СпособУстановкиВремениНапоминания, ВремяНапоминания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНапоминанияНаКлиенте()
	
	Если Не ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновитьЗаписьВКешеНапоминаний Тогда
		НапоминанияПользователяКлиент.ОбновитьЗаписьВКэшеОповещений(Напоминание);
		Оповестить("Запись_НапоминанияПользователя_Документооборот", Напоминание, Напоминание.Источник);
		НапоминанияПользователяКлиент.СброситьТаймерПроверкиТекущихОповещений();
		ОбновитьЗаписьВКешеНапоминаний = Ложь;
	ИначеЕсли НапоминаниеСтарое <> Неопределено Тогда
		НапоминанияПользователяКлиент.УдалитьЗаписьИзКэшаОповещений(НапоминаниеСтарое);
		Оповестить("Удаление_НапоминанияПользователя_Документооборот", , НапоминаниеСтарое.Источник);
		НапоминаниеСтарое = Неопределено;
		НапоминанияПользователяКлиент.СброситьТаймерПроверкиТекущихОповещений();
	КонецЕсли;
	УстановитьДоступностьЭлементовФормы();
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнтервалыНапоминания()
	
	Если ИспользоватьНапоминанияПользователя Тогда
		
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Очистить();
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'при наступлении события'; en = 'at the time of the event'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 5 минут'; en = '5 minutes before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 10 минут'; en = '10 minutes before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 15 минут'; en = '15 minutes before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 30 минут'; en = '30 minutes before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 1 час'; en = '1 hour before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 2 часа'; en = '2 hours before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 3 часа'; en = '3 hours before'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'Другое...'; en = 'More...'"));
		
		Если Элементы.ИнтервалВремениСтрокой.СписокВыбора.НайтиПоЗначению(ИнтервалВремениСтрокой) = Неопределено Тогда
			Элементы.ИнтервалВремениСтрокой.СписокВыбора.Вставить(0, ИнтервалВремениСтрокой);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если ИспользоватьНапоминанияПользователя Тогда
		Элементы.ИнтервалВремениСтрокой.Доступность = УстановитьНапоминание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыНапоминанияПоИсточнику(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НапоминанияПользователя.Пользователь,
	|	НапоминанияПользователя.ВремяСобытия,
	|	НапоминанияПользователя.Источник,
	|	НапоминанияПользователя.СрокНапоминания КАК СрокНапоминания,
	|	НапоминанияПользователя.Описание КАК Описание,
	|	2 КАК ИндексКартинки,
	|	НапоминанияПользователя.СпособУстановкиВремениНапоминания,
	|	НапоминанияПользователя.ИнтервалВремениНапоминания,
	|	НапоминанияПользователя.ИмяРеквизитаИсточника
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.Пользователь = &Пользователь
	|	И НапоминанияПользователя.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыНапоминания = Новый Структура("Пользователь,Источник,ВремяСобытия,СрокНапоминания,
		|Описание,СпособУстановкиВремениНапоминания,ИнтервалВремениНапоминания,ИмяРеквизитаИсточника");
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыНапоминания, Выборка);
		Результат = ПараметрыНапоминания;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьНапоминания(
	Напоминание,
	УстановитьНапоминание,
	УстановленоНапоминание,
	СрокНапоминанияПоУмолчанию,
	ИнтервалВремениСтрокой,
	СпособУстановкиВремениНапоминания,
	ВремяНапоминания)
	
	Если Напоминание <> Неопределено Тогда
		
		УстановитьНапоминание = Истина;
		УстановленоНапоминание = Истина;
		
		Если Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
			
			ИнтервалВремениСтрокой =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'в %2 %1'; en = 'in %2 %1'"),
					Формат(Напоминание.ВремяСобытия, "ДЛФ=D"),
					Формат(Напоминание.ВремяСобытия, "ДФ=ЧЧ:мм"));
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя");
			ВремяНапоминания = Напоминание.ВремяСобытия;
			
		ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета") Тогда
			
			Если Напоминание.ИнтервалВремениНапоминания >= 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаНачала" Тогда
				
				ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремениДокументооборот(Напоминание.ИнтервалВремениНапоминания);
				
			ИначеЕсли Напоминание.ИнтервалВремениНапоминания <> 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаОкончания" Тогда
				
				ИнтервалВремениСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'за %1 до окончания'; en = 'at %1 before the end'"),
					НапоминанияПользователяКлиентСервер.ПредставлениеВремени(Напоминание.ИнтервалВремениНапоминания));
				
			ИначеЕсли Напоминание.ИнтервалВремениНапоминания = 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаОкончания" Тогда
				
				ИнтервалВремениСтрокой = НСтр("ru = 'при окончании события'; en = 'at the end of the event'");
				
			КонецЕсли;
			
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
			ВремяНапоминания = Дата(1,1,1);
			
		ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.Периодически") Тогда
			
			ИнтервалВремениСтрокой = НСтр("ru = 'по заданному расписанию'; en = 'according to the specified schedule'");
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.Периодически");
			ВремяНапоминания = Дата(1,1,1);
			
		КонецЕсли;
		
	Иначе
		
		УстановитьНапоминание = Ложь;
		УстановленоНапоминание = Ложь;
		ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремениДокументооборот(СрокНапоминанияПоУмолчанию * 60);
		СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
		ВремяНапоминания = Дата(1,1,1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыНапоминанияДокументооборота(ПараметрыНапоминания)
	
	Если ПараметрыНапоминания.Свойство("Пользователь")
		И ПараметрыНапоминания.Свойство("Источник")
		И ПараметрыНапоминания.Свойство("ВремяСобытия")
		И ПараметрыНапоминания.Свойство("СпособУстановкиВремениНапоминания")
		И ПараметрыНапоминания.Свойство("ИнтервалВремениНапоминания")
		И ПараметрыНапоминания.Свойство("ИмяРеквизитаИсточника") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеПриглашения()
	
	Элементы.ПредставлениеПриглашения.СписокВыбора.Очистить();
	ЗначениеВРеквизитФормы(
		РегистрыСведений.УчастникиМероприятия.ДоступныеПриглашения(Объект.Ссылка),
		"ДоступныеПриглашения");
	
	Для Каждого ДоступноеПриглашение Из ДоступныеПриглашения Цикл
		ДоступноеПриглашениеТекст = Строка(ДоступноеПриглашение.Исполнитель);
		Элементы.ПредставлениеПриглашения.СписокВыбора.Добавить(
			Строка(ДоступноеПриглашение.ПолучитьИдентификатор()),
			ДоступноеПриглашениеТекст);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИсполнительПриглашения) Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Исполнитель", ИсполнительПриглашения);
		НайденныеСтроки = ДоступныеПриглашения.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ИсполнительПриглашения = Неопределено;
			СостояниеПриглашения = Неопределено;
			ПредставлениеПриглашения = Неопределено;
		Иначе
			ИсполнительПриглашения = НайденныеСтроки[0].Исполнитель;
			СостояниеПриглашения = НайденныеСтроки[0].СостояниеПриглашения;
			ПредставлениеПриглашения = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИсполнительПриглашения) И ДоступныеПриглашения.Количество() <> 0 Тогда
		ИсполнительПриглашения = ДоступныеПриглашения[0].Исполнитель;
		СостояниеПриглашения = ДоступныеПриглашения[0].СостояниеПриглашения;
		ПредставлениеПриглашения = ДоступныеПриглашения[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Элементы.ГруппаПриглашение.Видимость = ЗначениеЗаполнено(ИсполнительПриглашения);
	Если ДоступныеПриглашения.Количество() > 1 Тогда
		Элементы.ПредставлениеПриглашения.Видимость = Истина;
		Элементы.ГруппаПриглашение.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Иначе
		Элементы.ПредставлениеПриглашения.Видимость = Ложь;
		Элементы.ГруппаПриглашение.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	КонецЕсли;
	Элементы.ПринятьПриглашение.Видимость = СостояниеПриглашения <> Перечисления.СостоянияПриглашения.НеПринято;
	Элементы.ПринятьПриглашение.Пометка = СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято;
	Элементы.ОтклонитьПриглашение.Видимость = СостояниеПриглашения <> Перечисления.СостоянияПриглашения.Принято;
	Элементы.ОтклонитьПриглашение.Пометка = СостояниеПриглашения = Перечисления.СостоянияПриглашения.НеПринято;
	Элементы.ИзменитьПриглашение.Видимость = СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято
		Или СостояниеПриглашения = Перечисления.СостоянияПриглашения.НеПринято;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеПриглашения(НовоеСостояниеПриглашения)
	
	ИзменитьСостояниеПриглашенияНаСервере(НовоеСостояниеПриглашения);
	Если ЗначениеЗаполнено(СвязаннаяЗаписьКалендаря) Тогда
		ИзмененныеЗаписиКалендаря = Новый Массив;
		ИзмененныеЗаписиКалендаря.Добавить(СвязаннаяЗаписьКалендаря);
		Оповестить("Запись_ЗаписьКалендаря", ИзмененныеЗаписиКалендаря, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояниеПриглашенияНаСервере(НовоеСостояниеПриглашения)
	
	РегистрыСведений.УчастникиМероприятия.ИзменитьСостояниеПриглашения(
		Объект.Ссылка,
		ИсполнительПриглашения,
		НовоеСостояниеПриглашения);
	ОбновитьДанныеПриглашения();
	ЗаполнитьУчастниковМероприятия();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтработана()
	
	Если Отработана Тогда
		УстановитьНапоминание = Ложь;
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;
	
	РаботаСРабочимКалендаремСервер.УстановитьОтработанаЗаписьКалендаря(СвязаннаяЗаписьКалендаря, Отработана);
	ПриИзмененииЦвета();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТиповПредмета()
	
	СписокТиповПредмета.Очистить();
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.ВходящиеДокументы) Тогда
		СписокТиповПредмета.Добавить("Справочник.ВходящиеДокументы", НСтр("ru = 'Входящий документ'; en = 'Incoming document'"));
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.ИсходящиеДокументы) Тогда
		СписокТиповПредмета.Добавить("Справочник.ИсходящиеДокументы", НСтр("ru = 'Исходящий документ'; en = 'Outgoing document'"));
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.ВнутренниеДокументы) Тогда
		СписокТиповПредмета.Добавить("Справочник.ВнутренниеДокументы", НСтр("ru = 'Внутренний документ'; en = 'Internal document'"));
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.Файлы) Тогда
		СписокТиповПредмета.Добавить("Справочник.Файлы", НСтр("ru = 'Файл'; en = 'File'"));
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.Контрагенты) Тогда
		СписокТиповПредмета.Добавить("Справочник.Контрагенты", НСтр("ru = 'Контрагент'; en = 'Counterparty'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользованиеВстроеннойПочты") Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Документы.ВходящееПисьмо) Тогда
			СписокТиповПредмета.Добавить("Документ.ВходящееПисьмо", НСтр("ru = 'Входящее письмо'; en = 'Incoming email'"));
		КонецЕсли;
		Если ПравоДоступа("Просмотр", Метаданные.Документы.ИсходящееПисьмо) Тогда
			СписокТиповПредмета.Добавить("Документ.ИсходящееПисьмо", НСтр("ru = 'Исходящее письмо'; en = 'Outgoing email'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовилПриИзмененииНаСервере()
	
	Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Подготовил);
	
КонецПроцедуры

&НаСервере
Процедура ПринятьПриглашениеТекущимПользователем()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Исполнитель", ТекущийПользователь);
	НайденныеУчастники = Участники.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеУчастники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйУчастник = НайденныеУчастники[0];
	НайденныйУчастник.СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято;
	
КонецПроцедуры

#КонецОбласти
