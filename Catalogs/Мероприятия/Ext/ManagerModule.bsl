#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПраваДоступа

// Возвращает строку, содержащую перечисление полей доступа через запятую.
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Ссылка,
		|ГрифДоступа,
		|Организация,
		|Подразделение,
		|ВидМероприятия,
		|Проект,
		|Папка,
		|Организатор,
		|Председатель,
		|Секретарь,
		|Куратор,
		|Подготовил";
	
КонецФункции

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	// Стандартные дескрипторы.
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторыОбъектаСтандартно(
		ОбъектДоступа, ТаблицаДескрипторов);
	
	СтрокиПротокола = Новый Массив;
	
	// Управляющие мероприятием.
	Если ЗначениеЗаполнено(ОбъектДоступа.Организатор)
		И (ТипЗнч(ОбъектДоступа.Организатор) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(ОбъектДоступа.Организатор) = Тип("СправочникСсылка.ПолныеРоли")) Тогда 
		
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Организатор, Истина);
		
		СтрокиПротокола.Добавить("Организатор");
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОбъектДоступа.Председатель)
		И (ТипЗнч(ОбъектДоступа.Председатель) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(ОбъектДоступа.Председатель) = Тип("СправочникСсылка.ПолныеРоли")) Тогда 
		
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Председатель, Истина);
		
		СтрокиПротокола.Добавить("Председатель");
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОбъектДоступа.Секретарь)
		И (ТипЗнч(ОбъектДоступа.Секретарь) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(ОбъектДоступа.Секретарь) = Тип("СправочникСсылка.ПолныеРоли")) Тогда 
		
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Секретарь, Истина);
		
		СтрокиПротокола.Добавить("Секретарь");
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОбъектДоступа.Куратор)
		И (ТипЗнч(ОбъектДоступа.Куратор) = Тип("СправочникСсылка.Пользователи")) Тогда
		
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Куратор, Истина);
		
		СтрокиПротокола.Добавить("Куратор");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДоступа.Подготовил)
		И (ТипЗнч(ОбъектДоступа.Подготовил) = Тип("СправочникСсылка.Пользователи")) Тогда
		
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Подготовил, Истина);
		
		СтрокиПротокола.Добавить("Подготовил");
		
	КонецЕсли;
	
	// Участники мероприятия.
	Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(ОбъектДоступа.Ссылка, Истина);
	Для Каждого СтрУчастника Из Участники Цикл
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, СтрУчастника.Исполнитель, Ложь);
	КонецЦикла;
	
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		
		Для Каждого СтрПротокола Из СтрокиПротокола Цикл
			
			Если СтрПротокола = "Организатор" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Организатор, НСтр("ru = 'Организатор'; en = 'Organizer'"));
			ИначеЕсли СтрПротокола = "Председатель" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Председатель, НСтр("ru = 'Председатель'; en = 'Chairman'"));
			ИначеЕсли СтрПротокола = "Секретарь" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Секретарь, НСтр("ru = 'Секретарь'; en = 'Secretary'"));
			ИначеЕсли СтрПротокола = "Куратор" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Куратор, НСтр("ru = 'Куратор'; en = 'Curator'"));
			ИначеЕсли СтрПротокола = "Подготовил" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Подготовил, НСтр("ru = 'Подготовил'; en = 'Prepared by'"));
			КонецЕсли;
			
			ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
			
		КонецЦикла;
		
		Если Участники.Количество() > 0 Тогда
			ЗаписьПротокола = Новый Структура("Элемент, Описание",
				ОбъектДоступа.Ссылка, НСтр("ru = 'Участники мероприятия'; en = 'Event attendees'"));
			ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ГрифДоступа = ОбъектДоступа.ГрифДоступа;
	ДескрипторДоступа.Организация = ОбъектДоступа.Организация;
	ДескрипторДоступа.Подразделение = ОбъектДоступа.Подразделение;
	ДескрипторДоступа.ВидОбъекта = ОбъектДоступа.ВидМероприятия;
	
	ДокументооборотПраваДоступа.ЗаполнитьПапкуДескриптораОбъекта(ОбъектДоступа, ДескрипторДоступа);
	
КонецПроцедуры

// Проверяет наличие метода.
// 
Функция ЕстьМетодПолучитьПраваПоФайлам() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает права доступа пользователей к переданным файлам.
// 
Функция ПолучитьПраваПоФайлам(Файлы, Пользователи = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПрав = ДокументооборотПраваДоступа.ТаблицаПравПользователейПоОбъектам();
	
	// Права на изменение файлов должны быть у управляющих мероприятием и всех участников мероприятия.
	// Если есть рабочая группа, то права на изменение файлов должны быть только у ее участников,
	//  для которых установлен признак "Изменение".
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Ссылка,
		|	ПраваПоДескрипторамДоступаОбъектов.Пользователь,
		|	ИСТИНА КАК Чтение,
		|	ДескрипторыДляОбъектов.ТипДескриптора = 2
		|		ИЛИ ДескрипторыДляОбъектов.ТипДескриптора = 1
		|			И ПраваПоДескрипторамДоступаОбъектов.Изменение КАК Добавление,
		|	ДескрипторыДляОбъектов.ТипДескриптора = 2
		|		ИЛИ ДескрипторыДляОбъектов.ТипДескриптора = 1
		|			И ПраваПоДескрипторамДоступаОбъектов.Изменение КАК Изменение,
		|	ДескрипторыДляОбъектов.ТипДескриптора = 2
		|		ИЛИ ДескрипторыДляОбъектов.ТипДескриптора = 1
		|			И ПраваПоДескрипторамДоступаОбъектов.Изменение КАК Удаление,
		|	ЛОЖЬ КАК УправлениеПравами
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Мероприятия КАК Мероприятия
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
		|				ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
		|			ПО Мероприятия.Ссылка = ДескрипторыДляОбъектов.Объект
		|		ПО Файлы.ВладелецФайла = Мероприятия.Ссылка
		|ГДЕ
		|	Файлы.Ссылка В(&Файлы)
		|	И НЕ ДескрипторыДляОбъектов.Отключен
		|	И ПраваПоДескрипторамДоступаОбъектов.Пользователь В(&Пользователи)");
	
	Запрос.УстановитьПараметр("Файлы", Файлы);
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	
	Если Пользователи = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И ПраваПоДескрипторамДоступаОбъектов.Пользователь В(&Пользователи)", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПрав.Добавить(), Выборка);
	КонецЦикла;
	
	ИдентификаторОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.Файлы);
	ДокументооборотПраваДоступа.РасширитьТаблицуПравНеограниченнымиПравами(
		ТаблицаПрав, ИдентификаторОМ, Файлы, Пользователи);
	
	Возврат ТаблицаПрав;
	
КонецФункции

// Возвращает права доступа пользователей к файлам мероприятий.
// 
Функция ПолучитьПраваНаФайлы(Мероприятия, Пользователи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПрав = ДокументооборотПраваДоступа.ТаблицаПравПользователейПоОбъектам();
	
	// Права на изменение файлов должны быть у управляющих мероприятием и всех участников мероприятия.
	// Если есть рабочая группа, то права на изменение файлов должны быть только у ее участников,
	//  для которых установлен признак "Изменение".
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Мероприятия.Ссылка КАК ОбъектДоступа,
		|	ПраваПоДескрипторамДоступаОбъектов.Пользователь КАК Пользователь,
		|	ИСТИНА КАК Чтение,
		|	ДескрипторыДляОбъектов.ТипДескриптора = 2
		|		ИЛИ ДескрипторыДляОбъектов.ТипДескриптора = 1
		|			И ПраваПоДескрипторамДоступаОбъектов.Изменение КАК Добавление,
		|	ДескрипторыДляОбъектов.ТипДескриптора = 2
		|		ИЛИ ДескрипторыДляОбъектов.ТипДескриптора = 1
		|			И ПраваПоДескрипторамДоступаОбъектов.Изменение КАК Изменение,
		|	ДескрипторыДляОбъектов.ТипДескриптора = 2
		|		ИЛИ ДескрипторыДляОбъектов.ТипДескриптора = 1
		|			И ПраваПоДескрипторамДоступаОбъектов.Изменение КАК Удаление,
		|	ЛОЖЬ КАК УправлениеПравами
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
		|			ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
		|		ПО Мероприятия.Ссылка = ДескрипторыДляОбъектов.Объект
		|ГДЕ
		|	Мероприятия.Ссылка В(&Мероприятия)
		|	И НЕ ДескрипторыДляОбъектов.Отключен
		|	И ПраваПоДескрипторамДоступаОбъектов.Пользователь В(&Пользователи)");
	
	Запрос.УстановитьПараметр("Мероприятия", Мероприятия);
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПрав.Добавить(), Выборка);
	КонецЦикла;
	
	ИдентификаторОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.Файлы);
	ДокументооборотПраваДоступа.РасширитьТаблицуПравНеограниченнымиПравами(
		ТаблицаПрав, ИдентификаторОМ, Мероприятия, Пользователи);
	
	Возврат ТаблицаПрав;
	
КонецФункции

// Проверяет наличие метода.
// 
Функция ЕстьМетодПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает таблицу значений с правилами обработки настроек прав папки,
// которые следует применять для расчета прав объекта
// 
Функция ПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	ТаблицаПравил = ДокументооборотПраваДоступа.ТаблицаПравилОбработкиНастроекПапки();
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ЧтениеПапокИМероприятий";
	Стр.Чтение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ДобавлениеПапокИМероприятий";
	Стр.Добавление = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ИзменениеПапокИМероприятий";
	Стр.Изменение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ПометкаУдаленияПапокИМероприятий";
	Стр.Удаление = Истина;
	
	Возврат ТаблицаПравил;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Карточка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.Мероприятия";
	КомандаПечати.Идентификатор = "Карточка";
	КомандаПечати.Представление = НСтр("ru = 'Карточка мероприятия'; en = 'Event form'");
	КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьКарточкиМероприятия";
	
КонецПроцедуры

// Процедура формирования печатной формы
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда	
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Карточка", "Карточка мероприятия", ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			, "Справочник.Мероприятия.ПФ_MXL_Карточка");
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму карточки мероприятия
//
Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_Карточка";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Получаем запросом необходимые данные
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Мероприятия.Ссылка КАК Ссылка,
	|	Мероприятия.Организация КАК Организация,
	|	Мероприятия.Наименование КАК Наименование,
	|	Мероприятия.МестоПроведения,
	|	Мероприятия.ДатаНачалаФакт,
	|	Мероприятия.ДатаОкончанияФакт,
	|	Мероприятия.Председатель КАК Председатель,
	|	Мероприятия.Секретарь КАК Секретарь,
	|	Мероприятия.ДатаНачала,
	|	Мероприятия.ДатаОкончания,
	|	Мероприятия.Организатор КАК Организатор
	|ИЗ
	|	Справочник.Мероприятия КАК Мероприятия
	|ГДЕ
	|	Мероприятия.Ссылка В(&МассивОбъектов)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаЗаголовок = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчастникиМероприятия.Порядок КАК Порядок,
	|	УчастникиМероприятия.Исполнитель,
	|	УчастникиМероприятия.Мероприятие КАК Ссылка
	|ИЗ
	|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
	|ГДЕ
	|	УчастникиМероприятия.Мероприятие В(&МассивОбъектов)
	|	И Не УчастникиМероприятия.Отсутствовал
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаУчастники = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Программа.НомерПункта КАК НомерПункта,
	|	Программа.Содержание КАК Содержание,
	|	Программа.Исполнитель КАК Исполнитель,
	|	Программа.Ссылка КАК Ссылка,
	|	Программа.ВремяПлан,
	|	Программа.Начало,
	|	Программа.Окончание,
	|	Программа.ВремяФакт
	|ИЗ
	|	Справочник.Мероприятия.Программа КАК Программа
	|ГДЕ
	|	Программа.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПункта";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаПункты = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Протокол.Ссылка КАК Ссылка,
	|	Протокол.НомерСтроки КАК НомерСтроки,
	|	ПротоколыМероприятий.Ответственный КАК Исполнитель,
	|	ПротоколыМероприятий.НомерПунктаПрограммы КАК НомерПунктаПрограммы,
	|	ПротоколыМероприятий.Слушали КАК Слушали,
	|	ПротоколыМероприятий.Выступили КАК Выступили,
	|	ПротоколыМероприятий.Решили КАК Решили,
	|	ПротоколыМероприятий.СрокИсполненияПроцесса КАК СрокИсполнения
	|ИЗ
	|	Справочник.Мероприятия.Протокол КАК Протокол
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
	|		ПО Протокол.ПунктПротокола = ПротоколыМероприятий.Ссылка
	|ГДЕ
	|	Протокол.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Протокол.НомерПунктаПрограммы,
	|	Протокол.НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаПротокол = Запрос.Выполнить().Выбрать();
	ТаблицаПротокол = Новый ТаблицаЗначений;
	ТаблицаПротокол.Колонки.Добавить("Ссылка");
	ТаблицаПротокол.Колонки.Добавить("НомерСтроки");
	ТаблицаПротокол.Колонки.Добавить("Исполнитель");
	ТаблицаПротокол.Колонки.Добавить("НомерПунктаПрограммы");
	ТаблицаПротокол.Колонки.Добавить("Слушали");
	ТаблицаПротокол.Колонки.Добавить("Выступили");
	ТаблицаПротокол.Колонки.Добавить("Решили");
	ТаблицаПротокол.Колонки.Добавить("СрокИсполнения");
	ТаблицаПротокол.Колонки.Добавить("НомерПунктаПротокола");
	
	// Получение областей макета 
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.Мероприятия.ПФ_MXL_Карточка");
	ОбластьЗаголовокНаименованиеПредприятия = Макет.ПолучитьОбласть("ЗаголовокНаименованиеПредприятия");
	ОбластьЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	ОбластьЗаголовокНаименованиеМероприятия = Макет.ПолучитьОбласть("ЗаголовокНаименованиеМероприятия");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьЗаголовокУчастники = Макет.ПолучитьОбласть("ЗаголовокУчастники");
	ОбластьСтрокаУчастники = Макет.ПолучитьОбласть("СтрокаУчастники");
	
	ОбластьЗаголовокПрограмма = Макет.ПолучитьОбласть("ЗаголовокПрограмма");
	ОбластьСтрокаПрограмма = Макет.ПолучитьОбласть("СтрокаПрограмма");
	
	ОбластьЗаголовокСлушали = Макет.ПолучитьОбласть("ЗаголовокСлушали");
	ОбластьСтрокаСлушали = Макет.ПолучитьОбласть("СтрокаСлушали");
	
	ОбластьЗаголовокВыступили = Макет.ПолучитьОбласть("ЗаголовокВыступили");
	ОбластьСтрокаВыступили = Макет.ПолучитьОбласть("СтрокаВыступили");
	
	ОбластьЗаголовокРешили = Макет.ПолучитьОбласть("ЗаголовокРешили");
	ОбластьСтрокаРешили = Макет.ПолучитьОбласть("СтрокаРешили");
	
	ОбластьПредседательСекретарь = Макет.ПолучитьОбласть("ПредседательСекретарь");
	ОбластьОрганизатор = Макет.ПолучитьОбласть("Организатор");
	ОбластьДатаНесколькоДней = Макет.ПолучитьОбласть("ДатаНесколькоДней");
	ОбластьДата = Макет.ПолучитьОбласть("Дата");
	ОбластьМесто = Макет.ПолучитьОбласть("Место");
	ОбластьЗаголовокПротокол = Макет.ПолучитьОбласть("ЗаголовокПротокол");
	
	ПервыйДокумент = Истина;
	Пока ВыборкаЗаголовок.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Вывод заголовка
		Если ПараметрыПечати.ВыводитьОрганизацию Тогда
			НаименованиеПредприятия = РаботаСОрганизациями.ПолучитьНаименованиеОрганизации(ВыборкаЗаголовок.Организация);
			Если ЗначениеЗаполнено(НаименованиеПредприятия) Тогда
				ОбластьЗаголовокНаименованиеПредприятия.Параметры.НаименованиеПредприятия = НаименованиеПредприятия;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокНаименованиеПредприятия);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыПечати.ЗаголовокОтчета) Тогда
			ОбластьЗаголовокОтчета.Параметры.ЗаголовокОтчета = ПараметрыПечати.ЗаголовокОтчета;
			ТабличныйДокумент.Вывести(ОбластьЗаголовокОтчета);
		КонецЕсли;
		
		ОбластьЗаголовокНаименованиеМероприятия.Параметры.НаименованиеМероприятия = ВыборкаЗаголовок.Наименование;
		ТабличныйДокумент.Вывести(ОбластьЗаголовокНаименованиеМероприятия);
		
		// Вывод тела
		Если ПараметрыПечати.ВыводитьДатуИМестоПроведения Тогда 
			
			// Вывод даты и места
			Если НачалоДня(ВыборкаЗаголовок.ДатаОкончания) - НачалоДня(ВыборкаЗаголовок.ДатаНачала) = 0 Тогда
				ОбластьДата.Параметры.ДатаПроведения = Формат(ВыборкаЗаголовок.ДатаНачала, "ДФ=dd.MM.yyyy");
				ОбластьДата.Параметры.ВремяПроведения = Формат(ВыборкаЗаголовок.ДатаНачала, "ДФ=ЧЧ:мм") + " - "
					+ Формат(ВыборкаЗаголовок.ДатаОкончания, "ДФ=ЧЧ:мм");
				ТабличныйДокумент.Вывести(ОбластьДата);
			Иначе
				ОбластьДатаНесколькоДней.Параметры.ДатаНачала = Формат(ВыборкаЗаголовок.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
				ОбластьДатаНесколькоДней.Параметры.ДатаОкончания = Формат(ВыборкаЗаголовок.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
				ТабличныйДокумент.Вывести(ОбластьДатаНесколькоДней);
			КонецЕсли;
			
			ОбластьМесто.Параметры.МестоПроведения = ВыборкаЗаголовок.МестоПроведения;
			ТабличныйДокумент.Вывести(ОбластьМесто);
			
		КонецЕсли;
		
		Если ПараметрыПечати.ВыводитьПредседателяИСекретаря Тогда 
			// Вывод председателя и секретаря
			ОбластьПредседательСекретарь.Параметры.Председатель = Строка(ВыборкаЗаголовок.Председатель);
			ОбластьПредседательСекретарь.Параметры.Секретарь = Строка(ВыборкаЗаголовок.Секретарь);
			ТабличныйДокумент.Вывести(ОбластьПредседательСекретарь);
		КонецЕсли;
		
		Если ПараметрыПечати.ВыводитьОрганизатора Тогда 
			// Вывод организатора
			ОбластьОрганизатор.Параметры.Организатор = ВыборкаЗаголовок.Организатор;
			ТабличныйДокумент.Вывести(ОбластьОрганизатор);
		КонецЕсли;
		
		Если ПараметрыПечати.ВыводитьУчастников Тогда 
			// Вывод участников
			ТабличныйДокумент.Вывести(ОбластьЗаголовокУчастники);
			Номер = 0;
			Пока ВыборкаУчастники.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
				Номер = Номер + 1;
				ОбластьСтрокаУчастники.Параметры.Номер = Номер;
				ОбластьСтрокаУчастники.Параметры.Участник = Строка(ВыборкаУчастники.Исполнитель);
				ТабличныйДокумент.Вывести(ОбластьСтрокаУчастники);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПечати.ВыводитьПрограмму И ВыборкаПункты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда 
			ВыборкаПункты.Сбросить();
			
			// Вывод программы
			ТабличныйДокумент.Вывести(ОбластьЗаголовокПрограмма);
			Номер = 0;
			Пока ВыборкаПункты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
				
				Номер = Номер + 1;
				ОбластьСтрокаПрограмма.Параметры.НомерПункта = Номер;
				ОбластьСтрокаПрограмма.Параметры.Содержание = ВыборкаПункты.Содержание;
				ОбластьСтрокаПрограмма.Параметры.Исполнитель = Строка(ВыборкаПункты.Исполнитель);
				Если ЗначениеЗаполнено(ВыборкаПункты.Начало) И ЗначениеЗаполнено(ВыборкаПункты.Окончание) Тогда 
					ОбластьСтрокаПрограмма.Параметры.Время =
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'с %1 по %2'; en = 'from %1 to %2'"),
							Формат(ВыборкаПункты.Начало, "ДФ=ЧЧ:мм"),
							Формат(ВыборкаПункты.Окончание, "ДФ=ЧЧ:мм"));
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПункты.ВремяПлан) Тогда
					ОбластьСтрокаПрограмма.Параметры.Время = 
						НапоминанияПользователяКлиентСервер.ПредставлениеВремени(ВыборкаПункты.ВремяПлан, Ложь, Ложь);
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаПрограмма);
				
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПечати.ВыводитьПротокол И ВыборкаПротокол.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда 
			ВыборкаПротокол.Сбросить();
			ТаблицаПротокол.Очистить();
			
			// Вывод протокола
			ТабличныйДокумент.Вывести(ОбластьЗаголовокПротокол);
			
			Пока ВыборкаПротокол.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
				СтрокаПротокола = ТаблицаПротокол.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПротокола, ВыборкаПротокол);
			КонецЦикла;
			УправлениеМероприятиямиКлиентСервер.ВывестиНомераПунктовПротокола(ТаблицаПротокол);
			
			Для Каждого СтрокаПротокола Из ТаблицаПротокол Цикл
				
				ОбластьЗаголовокСлушали.Параметры.НомерПункта = СтрокаПротокола.НомерПунктаПротокола;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокСлушали);
				
				ОбластьСтрокаСлушали.Параметры.Слушали = СтрокаПротокола.Слушали;
				ТабличныйДокумент.Вывести(ОбластьСтрокаСлушали);
				
				Если ЗначениеЗаполнено(СтрокаПротокола.Выступили) Тогда 
					
					ТабличныйДокумент.Вывести(ОбластьЗаголовокВыступили);
					ОбластьСтрокаВыступили.Параметры.Выступили = СтрокаПротокола.Выступили;
					ТабличныйДокумент.Вывести(ОбластьСтрокаВыступили);
					
				КонецЕсли;	
				
				ТабличныйДокумент.Вывести(ОбластьЗаголовокРешили);
				
				Решили = СтрокаПротокола.Решили;
				Если ЗначениеЗаполнено(СтрокаПротокола.Исполнитель) Тогда 
					Решили = Решили 
					+ Символы.ПС 
					+ НСтр("ru = 'Ответственный:'; en = 'Responsible:'") + " "
					+ Строка(СтрокаПротокола.Исполнитель);
					
					Если ЗначениеЗаполнено(СтрокаПротокола.СрокИсполнения) Тогда 
						Решили = Решили 
						+ НСтр("ru = 'Срок:'; en = 'Date:'") + " "
						+ Формат(СтрокаПротокола.СрокИсполнения, "ДЛФ=D");
					КонецЕсли;		
				КонецЕсли;		
				
				ОбластьСтрокаРешили.Параметры.Решили = Решили;
				ТабличныйДокумент.Вывести(ОбластьСтрокаРешили);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Вывод подвала
		Если ПараметрыПечати.ВыводитьПредседателяИСекретаря Тогда 
			ОбластьПодвал.Параметры.Председатель =
				Строка(ВыборкаЗаголовок.Председатель);
			ОбластьПодвал.Параметры.Секретарь = 
				Строка(ВыборкаЗаголовок.Секретарь);
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		КонецЕсли;	
		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаЗаголовок.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

#КонецОбласти

#Область РабочаяГруппа

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Добавляет участников мероприятия в переданную таблицу.
//
// Параметры:
//  ТаблицаНабора	 - РегистрСведенийНаборЗаписей.РабочиеГруппы	 - Набор участников.
//  Мероприятие		 - СправочникСсылка.Мероприятия	 - Мероприятие.
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, Мероприятие) Экспорт
	
	Если ТипЗнч(Мероприятие) = Тип("СправочникСсылка.Мероприятия") Тогда 
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мероприятие,
			"Организатор, Секретарь, Председатель, Куратор, Подготовил, Ссылка");
	Иначе 
		РеквизитыМероприятия = Мероприятие;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыМероприятия.Ссылка) Тогда 
		Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(РеквизитыМероприятия.Ссылка, Истина);
		
		Для Каждого Строка Из Участники Цикл
			ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Строка.Исполнитель);
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыМероприятия.Организатор, Истина);
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыМероприятия.Секретарь, Истина);
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыМероприятия.Председатель, Истина);
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыМероприятия.Куратор, Истина);
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыМероприятия.Подготовил, Истина);
	
	ПротоколМероприятия = УправлениеМероприятиями.ПолучитьПротоколМероприятия(РеквизитыМероприятия.Ссылка);
	Для Каждого Строка Из ПротоколМероприятия Цикл
		ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, 
			Строка.Ответственный);
		Для Каждого СтрокаИсполнителя Из Строка.Исполнители Цикл
			ДобавитьУчастникаВТаблицуНабора(
				ТаблицаНабора, 
				СтрокаИсполнителя.Исполнитель);
		КонецЦикла;
	КонецЦикла;
	
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, РеквизитыМероприятия.Ссылка);
	
КонецПроцедуры

#КонецОбласти

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат БизнесСобытияВызовСервера.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоДокументу(ШаблонСсылка, 
		ПредметСсылка, Подписчик, ВидСобытия, Условие);
	
КонецФункции

// Возвращает имя предмета процесса по умолчанию
//
Функция ПолучитьИмяПредметаПоУмолчанию(Ссылка) Экспорт
	
	Возврат НСтр("ru='Мероприятие'; en = 'Event'");
	
КонецФункции

// Формирует HTML представление записи календаря
Функция СформироватьHTMLПредставление(Мероприятие, ДатаЗаписи) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Мероприятие)
		ИЛИ ТипЗнч(Мероприятие) <> Тип("СправочникСсылка.Мероприятия") Тогда
		Возврат РаботаСРабочимКалендаремКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мероприятие,
		"Наименование, ВидМероприятия, МестоПроведения, Организатор,
		|Председатель, Секретарь, ДатаНачала, ДатаОкончания, Описание");
	
	ТекстНаименование = РеквизитыМероприятия.Наименование;
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстНаименование);
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстНаименование);
	
	ТекстВидМероприятия = Строка(РеквизитыМероприятия.ВидМероприятия);
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстВидМероприятия);
	
	ТекстМестоПроведения =  РеквизитыМероприятия.МестоПроведения;
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстМестоПроведения);
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстМестоПроведения);
	
	ТекстОрганизатор = Строка(РеквизитыМероприятия.Организатор);
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстОрганизатор);
	
	ТекстПредседатель = Строка(РеквизитыМероприятия.Председатель);
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстПредседатель);
	
	ТекстСекретарь = Строка(РеквизитыМероприятия.Секретарь);
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстСекретарь);
	
	ТекстВремя = Формат(РеквизитыМероприятия.ДатаНачала, "ДФ=ЧЧ:мм") + " - "
		+ Формат(РеквизитыМероприятия.ДатаОкончания, "ДФ=ЧЧ:мм");
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстВремя);
	
	ТекстДата = Формат(РеквизитыМероприятия.ДатаНачала, "ДФ='дддд, д ММММ гггг'");
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстДата);
	
	ТекстДатаНачала = Формат(РеквизитыМероприятия.ДатаНачала, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстДатаНачала);
	
	ТекстДатаОкончания = Формат(РеквизитыМероприятия.ДатаОкончания, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстДатаОкончания);
	
	ТекстОписание = РеквизитыМероприятия.Описание;
	ТекстОписание = РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстОписание);
	ТекстОписание = СтрЗаменить(ТекстОписание, Символы.ПС, "<br>");
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстОписание);
	
	ПредставлениеHTML =
		"<html><body scroll=auto>
		|<div style='font-size=14pt;font-family=Arial;line-height:150%'>
		|<b>[Наименование]</b>
		|</div>
		|<div style='font-size=10pt;font-family=Arial;top-margin:10px'>
		|<b>[НадписьВидМероприятия]:</b> [ВидМероприятия]<br>
		|<b>[НадписьМестоПроведения]:</b> [МестоПроведения]<br>
		|<b>[НадписьОрганизатор]:</b> [Организатор]<br>
		|<b>[НадписьПредседатель]:</b> [Председатель]<br>
		|<b>[НадписьСекретарь]:</b> [Секретарь]<br>
		|<b>[НадписьВремя]:</b> [Время]<br>
		|<b>[НадписьДата]:</b> [Дата]<br>
		|<b>[НадписьДатаНачала]:</b> [ДатаНачала]<br>
		|<b>[НадписьДатаОкончания]:</b> [ДатаОкончания]<br>
		|</div>
		|<hr>
		|<div style='font-size=10pt;font-family=Arial'>
		|[Описание]
		|</div>
		|</body></html>";
	
	Если НачалоДня(РеквизитыМероприятия.ДатаОкончания) - НачалоДня(РеквизитыМероприятия.ДатаНачала) <> 0 Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьВремя]:</b> [Время]<br>", "");
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДата]:</b> [Дата]<br>", "");
	Иначе
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаНачала]:</b> [ДатаНачала]<br>", "");
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаОкончания]:</b> [ДатаОкончания]<br>", "");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстМестоПроведения) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьМестоПроведения]:</b> [МестоПроведения]<br>", "");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекстПредседатель) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьПредседатель]:</b> [Председатель]<br>", "");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекстСекретарь) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьСекретарь]:</b> [Секретарь]<br>", "");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекстДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ТекстДатаОкончания) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаНачала]:</b> [ДатаНачала]<br>", "");
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаОкончания]:</b> [ДатаОкончания]<br>", "");
	КонецЕсли;
	
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьВидМероприятия]", НСтр("ru = 'Вид мероприятия'; en = 'Event type'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьМестоПроведения]", НСтр("ru = 'Место проведения'; en = 'Location'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьОрганизатор]", НСтр("ru = 'Организатор'; en = 'Organizer'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьПредседатель]", НСтр("ru = 'Председатель'; en = 'Chairman'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьСекретарь]", НСтр("ru = 'Секретарь'; en = 'Secretary'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьВремя]", НСтр("ru = 'Время'; en = 'Time'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьДата]", НСтр("ru = 'Дата'; en = 'Date'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьДатаНачала]", НСтр("ru = 'Начало'; en = 'Start'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьДатаОкончания]", НСтр("ru = 'Окончание'; en = 'End'"));
	
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Наименование]", ТекстНаименование);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[ВидМероприятия]", ТекстВидМероприятия);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[МестоПроведения]", ТекстМестоПроведения);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Организатор]", ТекстОрганизатор);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Председатель]", ТекстПредседатель);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Секретарь]", ТекстСекретарь);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Время]", ТекстВремя);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Дата]", ТекстДата);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[ДатаНачала]", ТекстДатаНачала);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[ДатаОкончания]", ТекстДатаОкончания);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Описание]", ТекстОписание);
	
	Возврат ПредставлениеHTML;
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты =
		"Наименование, Описание, Помещение, ДатаНачала, ДатаОкончания, ПометкаУдаления";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

// Обработчик подписки КалендарьПриЗаписиПредмета.
Процедура КалендарьПриЗаписиПредмета(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущееЗначениеОтменено = Источник.ДополнительныеСвойства.ПредыдущееЗначениеОтменено;
	Отменено = РегистрыСведений.СостоянияМероприятий.Отменено(Источник.Ссылка);
	
	ПредыдущиеЗначенияРеквизитов = Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
	ИзменилисьРеквизиты = 
		ПредыдущиеЗначенияРеквизитов.Наименование <> Источник.Наименование
		Или ПредыдущиеЗначенияРеквизитов.Описание <> Источник.Описание
		Или ПредыдущиеЗначенияРеквизитов.ДатаНачала <> Источник.ДатаНачала
		Или ПредыдущиеЗначенияРеквизитов.ДатаОкончания <> Источник.ДатаОкончания;
	ИзмениласьПометкаУдаления =
		ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Источник.ПометкаУдаления;
	ИзменилосьОтменено = 
		ПредыдущееЗначениеОтменено <> Отменено;
	Если Не ИзменилисьРеквизиты И Не ИзмениласьПометкаУдаления И Не ИзменилосьОтменено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ИзмениласьПометкаУдаления И Источник.ПометкаУдаления = Истина)
		Или (ИзменилосьОтменено И Отменено = Истина) Тогда
		Справочники.ЗаписиРабочегоКалендаря.УдалитьСвязанныеЗаписиКалендаря(Источник.Ссылка);
		
	ИначеЕсли (ИзмениласьПометкаУдаления И Источник.ПометкаУдаления = Ложь)
		Или (ИзменилосьОтменено И Отменено = Ложь) Тогда
		СостоянияЗаписейКалендаря = ПолучитьСостоянияЗаписейКалендаря(Источник.Ссылка);
		ОбновитьСостоянияЗаписейКалендаря(
			Источник.Ссылка,
			СостоянияЗаписейКалендаря,
			Истина);
		
	Иначе
		
		НовоеОписание = Новый Массив;
		НовоеОписание.Добавить(СокрЛП(Источник.Наименование));
		НовоеОписание.Добавить(СокрЛП(Источник.Описание));
		НовоеОписание = СтрСоединить(НовоеОписание, Символы.ПС);
		
		СвязанныеЗаписиКалендаря =
			Справочники.ЗаписиРабочегоКалендаря.СвязанныеЗаписиКалендаря(Источник.Ссылка);
		Для Каждого СвязаннаяЗаписьКалендаря Из СвязанныеЗаписиКалендаря Цикл
			Справочники.ЗаписиРабочегоКалендаря.ОбновитьСвязаннуюЗаписьКалендаря(
				СвязаннаяЗаписьКалендаря.Ссылка,
				Источник.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.ДатаНачала)
		И Не ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.ДатаОкончания)
		И ЗначениеЗаполнено(Источник.ДатаНачала)
		И ЗначениеЗаполнено(Источник.ДатаОкончания)
		И Не Источник.ПометкаУдаления 
		И Не Отменено Тогда
		СостоянияЗаписейКалендаря = ПолучитьСостоянияЗаписейКалендаря(Источник.Ссылка);
		ОбновитьСостоянияЗаписейКалендаря(Источник.Ссылка, СостоянияЗаписейКалендаря);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки КалендарьПередЗаписьюУчастников.
Процедура КалендарьПередЗаписьюУчастников(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь") Тогда
		Возврат;
	КонецЕсли;
	
	Предмет = Источник.Отбор.Мероприятие.Значение;
	Если ЗначениеЗаполнено(Предмет) Тогда
		ПредыдущиеСостоянияЗаписейКалендаря = ПолучитьСостоянияЗаписейКалендаря(Предмет);
		Источник.ДополнительныеСвойства.Вставить(
			"ПредыдущиеСостоянияЗаписейКалендаря", 
			ПредыдущиеСостоянияЗаписейКалендаря);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки КалендарьПриЗаписиУчастников.
Процедура КалендарьПриЗаписиУчастников(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеСостоянияЗаписейКалендаря") Тогда
		
		ПредыдущиеСостоянияЗаписейКалендаря = Источник.ДополнительныеСвойства.ПредыдущиеСостоянияЗаписейКалендаря;
		Предмет = Источник.Отбор.Мероприятие.Значение;
		Отменено = РегистрыСведений.СостоянияМероприятий.Отменено(Предмет);
		Если ЗначениеЗаполнено(Предмет) И Не Предмет.ПометкаУдаления И Не Отменено Тогда
			СостоянияЗаписейКалендаря = ПолучитьСостоянияЗаписейКалендаря(Предмет);
			Если СостоянияЗаписейКалендаряИзменились(СостоянияЗаписейКалендаря, ПредыдущиеСостоянияЗаписейКалендаря) Тогда
				ОбновитьСостоянияЗаписейКалендаря(
					Предмет,
					СостоянияЗаписейКалендаря,,
					ПредыдущиеСостоянияЗаписейКалендаря);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает состояния записей календаря
Функция ПолучитьСостоянияЗаписейКалендаря(Предмет) Экспорт
	
	ПредыдущиеУчастники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Предмет, Истина);
	СостоянияЗаписейКалендаря = Новый Соответствие;
	
	Для Каждого Участник Из ПредыдущиеУчастники Цикл
		
		Пользователь = Участник.Исполнитель;
		СостояниеЗаписиРабочегоКалендаря =
			ПолучитьСоответствующееСостояниеЗаписиРабочегоКалендаря(Участник.СостояниеПриглашения);
		
		Если Не ЗначениеЗаполнено(Пользователь) Или ТипЗнч(Пользователь) <> Тип("СправочникСсылка.Пользователи")
			Или Не ЗначениеЗаполнено(СостояниеЗаписиРабочегоКалендаря) Тогда
			Продолжить;
		КонецЕсли;
		
		СостоянияЗаписейКалендаря.Вставить(Пользователь, СостояниеЗаписиРабочегоКалендаря);
		
	КонецЦикла;
	
	Возврат СостоянияЗаписейКалендаря;
	
КонецФункции

// Возвращает факт изменения состояний записей календаря
Процедура ОбновитьСостоянияЗаписейКалендаря(
	Предмет,
	СостоянияЗаписейКалендаря,
	СнятьПометкуУдаления = Ложь,
	ПредыдущиеСостоянияЗаписейКалендаря = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СвязанныеЗаписиКалендаря = Справочники.ЗаписиРабочегоКалендаря.СвязанныеЗаписиКалендаря(Предмет);
	
	Для Каждого СостояниеЗаписиКалендаря Из СостоянияЗаписейКалендаря Цикл
		НайденнаяСтрока = СвязанныеЗаписиКалендаря.Найти(СостояниеЗаписиКалендаря.Ключ, "Пользователь");
		Если НайденнаяСтрока = Неопределено Тогда
			СоздатьСвязаннуюЗаписьКалендаря(
				Предмет,
				СостояниеЗаписиКалендаря.Ключ,
				СостояниеЗаписиКалендаря.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СвязаннаяЗаписьКалендаря Из СвязанныеЗаписиКалендаря Цикл
		НовоеСостояниеЗаписиКалендаря = СостоянияЗаписейКалендаря[СвязаннаяЗаписьКалендаря.Пользователь];
		Если НовоеСостояниеЗаписиКалендаря = Неопределено Тогда
			НовоеСостояниеЗаписиКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено;
			СнятьПометкуУдаления = Ложь;
		КонецЕсли;
		
		Если ПредыдущиеСостоянияЗаписейКалендаря <> Неопределено И Не СнятьПометкуУдаления Тогда
			ПредыдущееСостояниеЗаписиКалендаря = ПредыдущиеСостоянияЗаписейКалендаря[СвязаннаяЗаписьКалендаря.Пользователь];
			Если ПредыдущееСостояниеЗаписиКалендаря <> Неопределено
				И НовоеСостояниеЗаписиКалендаря = ПредыдущееСостояниеЗаписиКалендаря Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьСвязаннуюЗаписьКалендаря(
			СвязаннаяЗаписьКалендаря.Ссылка,
			НовоеСостояниеЗаписиКалендаря,
			СнятьПометкуУдаления);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет что участник мероприятия является участником.
//
// Параметры:
//  РеквизитыМероприятия - СправочникСсылка.Мероприятия, Структура - Мероприятие.
// 
// Возвращаемое значение:
//  Тип - Текстовое описание содержания возвращаемого значения функции.
//
Функция ОрганизаторЯвляетсяУчастником(Мероприятие) Экспорт
	
	Если ТипЗнч(Мероприятие) = Тип("Структура") Тогда
		РеквизитыМероприятия = Мероприятие;
	Иначе
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мероприятие, "Ссылка, Организатор");
	КонецЕсли;
	
	ОрганизаторЯвляетсяУчастником = РегистрыСведений.УчастникиМероприятия.ЯвляетсяУчастникомМероприятия(
		РеквизитыМероприятия.Ссылка,
		РеквизитыМероприятия.Организатор);
	
	Возврат ОрганизаторЯвляетсяУчастником;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет участника в переданную таблицу.
//
Процедура ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора,
			Участник,
			Изменение = Ложь) Экспорт
	
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, Участник, Изменение);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает факт изменения состояний записей календаря
Функция СостоянияЗаписейКалендаряИзменились(СостоянияЗаписейКалендаря, ПредыдущиеСостоянияЗаписейКалендаря)
	
	Если СостоянияЗаписейКалендаря.Количество() <> ПредыдущиеСостоянияЗаписейКалендаря.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СостояниеЗаписиКалендаря Из СостоянияЗаписейКалендаря Цикл
		
		ПредыдущееЗначение = ПредыдущиеСостоянияЗаписейКалендаря[СостояниеЗаписиКалендаря.Ключ];
		
		Если СостояниеЗаписиКалендаря.Значение <> ПредыдущееЗначение Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Обновляет состояние связанной записи
Процедура ОбновитьСвязаннуюЗаписьКалендаря(ЗаписьКалендаря, НовоеСостояние, СнятьПометкуУдаления = Ложь)
	
	СнятаПометкаУдаления = Ложь;
	ЗаписьКалендаряОбъект = ЗаписьКалендаря.ПолучитьОбъект();
	
	// Если состояние не изменилось то перезапись не производим
	Если ЗаписьКалендаряОбъект.Состояние = НовоеСостояние
		И (Не СнятьПометкуУдаления Или Не ЗаписьКалендаряОбъект.ПометкаУдаления) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьКалендаряОбъект.Заблокировать();
	ЗаписьКалендаряОбъект.Состояние = НовоеСостояние;
	
	// Снятие пометка удаления в случае если новое состояние ПодВопросом или Принято
	Если ЗаписьКалендаряОбъект.ПометкаУдаления
		И (СнятьПометкуУдаления
			ИЛИ НовоеСостояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом
			ИЛИ НовоеСостояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято) Тогда
		
		СнятаПометкаУдаления = Истина;
		ЗаписьКалендаряОбъект.ПометкаУдаления = Ложь;
		
	КонецЕсли;
	
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойЗаписи");
	ЗаписьКалендаряОбъект.Записать();
	Если СнятаПометкаУдаления Тогда
		РаботаСРабочимКалендаремСервер.ПодключитьНапоминаниеАвтоматически(ЗаписьКалендаряОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Создает связанную запись календаря
Процедура СоздатьСвязаннуюЗаписьКалендаря(Предмет, Пользователь, Состояние)
	
	Если (Не ЗначениеЗаполнено(Предмет.ДатаНачала)
		Или Не ЗначениеЗаполнено(Предмет.ДатаОкончания)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Предмет.ДатаНачала)
		И ЗначениеЗаполнено(Предмет.ДатаОкончания)
		И Предмет.ДатаНачала >= Предмет.ДатаОкончания Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.ЗаписиРабочегоКалендаря.СоздатьСвязаннуюЗаписьКалендаря(
		Предмет,
		Пользователь,
		Состояние,
		Истина);
	
КонецПроцедуры

// Возвращает соответствующее состояние записи календаря
Функция ПолучитьСоответствующееСостояниеЗаписиРабочегоКалендаря(СостояниеПриглашения)
	
	СостояниеЗаписиРабочегоКалендаря = Неопределено;
	
	Если СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято Тогда
		СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято;
	ИначеЕсли СостояниеПриглашения = Перечисления.СостоянияПриглашения.НеПринято Тогда
		СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено;
	ИначеЕсли СостояниеПриглашения = Перечисления.СостоянияПриглашения.Отправлено 
		ИЛИ Не ЗначениеЗаполнено(СостояниеПриглашения) Тогда
		СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом;
	КонецЕсли;
	
	Возврат СостояниеЗаписиРабочегоКалендаря;
	
КонецФункции

#КонецОбласти

#КонецЕсли
