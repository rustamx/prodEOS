
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если ЗначениеЗаполнено(Параметры.Проект) Тогда 
			Объект.Владелец = Параметры.Проект;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Параметры.Родитель) Тогда 
			Объект.Родитель = Параметры.Родитель;
		КонецЕсли;	
		
		СпособПланирования = Перечисления.СпособыПланированияПроекта.ОтДатыНачалаПроекта;
		Объект.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноРаньше;
		
		Если ЗначениеЗаполнено(Объект.Владелец) Тогда 		
			РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Владелец,
				"Состояние, ЕдиницаТрудозатратЗадач, ЕдиницаДлительностиЗадач, ТекущийПланНачало,
				|ТекущийПланОкончание, СпособПланирования");
				
			СпособПланирования = РеквизитыПроекта.СпособПланирования;	
				
			Объект.ТекущийПланЕдиницаТрудозатрат = РеквизитыПроекта.ЕдиницаТрудозатратЗадач;
			Объект.ЕдиницаТрудозатратФакт = РеквизитыПроекта.ЕдиницаТрудозатратЗадач;
			
			ТекущийПланЕдиницаДлительности = РеквизитыПроекта.ЕдиницаДлительностиЗадач;
			ЕдиницаДлительностиФакт = РеквизитыПроекта.ЕдиницаДлительностиЗадач;
			
			Если СпособПланирования = Перечисления.СпособыПланированияПроекта.ОтДатыНачалаПроекта Тогда 
				ТекущийПланНачало = РеквизитыПроекта.ТекущийПланНачало;
				Объект.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноРаньше;
			Иначе
				ТекущийПланОкончание = РеквизитыПроекта.ТекущийПланОкончание;
				Объект.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноПозже;
			КонецЕсли;	
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Родитель) Тогда 
			Результат = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(Объект.Родитель);
			ТекущийПланНачало = Результат.ТекущийПланНачало;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Параметры.Предшественник) Тогда 
			НоваяСтрока = Объект.Предшественники.Добавить();
			НоваяСтрока.Предшественник = Параметры.Предшественник;
			НоваяСтрока.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало;
			
			Результат = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(Параметры.Предшественник);
			ТекущийПланНачало = Результат.ТекущийПланОкончание;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ТекущийПланДлительность) Тогда 
			ТекущийПланДлительность = 1;
		КонецЕсли;	
		
		Если Объект.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноРаньше Тогда 
			Если ЗначениеЗаполнено(ТекущийПланНачало) И ЗначениеЗаполнено(ТекущийПланДлительность) Тогда 
				ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
					ТекущийПланНачало, 
					ТекущийПланДлительность, 
					ТекущийПланЕдиницаДлительности);
			КонецЕсли;	
		Иначе
			Если ЗначениеЗаполнено(ТекущийПланОкончание) И ЗначениеЗаполнено(ТекущийПланДлительность) Тогда 
				ТекущийПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(Объект, 
					ТекущийПланОкончание, 
					ТекущийПланДлительность, 
					ТекущийПланЕдиницаДлительности);
			КонецЕсли;	
		КонецЕсли;
		
		Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		
	Иначе
		СпособПланирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "СпособПланирования");
		
		ПрочитатьСрокиПроектнойЗадачи();
		НачальныйТекущийПланОкончание = ТекущийПланОкончание;
		
		// Получение фактических трудозатрат проектной задачи
		ТрудозатратыФакт = РаботаСПроектами.ПолучитьФактическиеТрудозатратыПроектнойЗадачи(Объект.Ссылка);
		ПолучитьФактическиеТрудозатратыИсполнителей();
	КонецЕсли;	
	
	АвтоматическиРассчитыватьПланПроекта = Истина;
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда 
		АвтоматическиРассчитыватьПланПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, 
			"АвтоматическиРассчитыватьПланПроекта");
	КонецЕсли;
	
	ДатаНачалаДоРедактирования = ТекущийПланНачало;
	
	Если Не АвтоматическиРассчитыватьПланПроекта Тогда 
		Элементы.ГруппаОграничение.Видимость = Ложь;
	КонецЕсли;
	
	Если ИспользоватьГрафикиРаботы Тогда
		ГрафикРаботыПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ГрафикРаботы");
	КонецЕсли;
	ЗаполненаПроектнаяКоманда = (Объект.Владелец.ПроектнаяКоманда.Количество() > 0);
	
	Если Объект.СуммарнаяЗадача Тогда 
		Элементы.ТекущийПланНачало.ТолькоПросмотр = Истина;
		Элементы.ТекущийПланОкончание.ТолькоПросмотр = Истина;
		Элементы.ТекущийПланДлительность.ТолькоПросмотр = Истина;
		Элементы.ТекущийПланЕдиницаДлительности.ТолькоПросмотр = Истина;
		
		Элементы.НачалоФакт.ТолькоПросмотр = Истина;
		Элементы.ОкончаниеФакт.ТолькоПросмотр = Истина;
		Элементы.ДлительностьФакт.ТолькоПросмотр = Истина;
		Элементы.ЕдиницаДлительностиФакт.ТолькоПросмотр = Истина;
		
		Элементы.Веха.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	// Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Категории данных
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		// Копирование категорий данных
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(Параметры.ЗначениеКопирования);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Чтение категорий данных	
	Если ИспользоватьКатегорииДанных Тогда
		ПредопределенныеВсеКатегории = Справочники.КатегорииДанных.ВсеКатегории;
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных"); 
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;	
	
	Если ПустаяСтрока(ТипПредмета) Тогда
		Элементы.Предмет.ТолькоПросмотр = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда 
		Элементы.Владелец.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// вывод единицы измерения в заголовки полей
	Если ЗначениеЗаполнено(Объект.ТекущийПланЕдиницаТрудозатрат) Тогда 
		Элементы.ИсполнителиТекущийПланТрудозатраты.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'План (%1)'; en = 'Plan (%1)'"),
				Строка(Объект.ТекущийПланЕдиницаТрудозатрат));
	Иначе		
		Элементы.ИсполнителиТекущийПланТрудозатраты.Заголовок = 
			НСтр("ru = 'План'; en = 'Plan'");
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ЕдиницаТрудозатратФакт) Тогда 
		Элементы.ИсполнителиТрудозатратыФакт.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Факт (%1)'; en = 'Actual (%1)'"),
				Строка(Объект.ЕдиницаТрудозатратФакт));
	Иначе		
		Элементы.ИсполнителиТрудозатратыФакт.Заголовок = 
			НСтр("ru = 'Факт'; en = 'Actual'");
	КонецЕсли;
	
	// Доступность значения ограничения
	Если Объект.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноРаньше
	 Или Объект.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноПозже Тогда 
		Элементы.ДатаОграничения.ТолькоПросмотр = Истина;
	Иначе	
		Элементы.ДатаОграничения.ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
	РаботаСБизнесПроцессамиВызовСервера.ФормаБизнесПроцессаУстановитьТипПредмета(ЭтаФорма);
	
	РодительСсылки = Объект.Ссылка.Родитель;
	ПроектСсылки = Объект.Ссылка.Владелец;
	
	НачалоФактПриОткрытии = НачалоФакт;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияВестиУчетТрудозатрат,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
	    ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);	

	УстановитьТолькоЧтениеДляРедактированияВСтороннейСистеме();
	
	СостояниеПредшественников = ВывестиСостояниеПредшественников(Объект.Предшественники);
	
	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Параметры.Свойство("ОткрытьЗакладкуЗадачи") Тогда
		ОткрытьЗакладкуЗадачи = Параметры.ОткрытьЗакладкуЗадачи;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуТрудозатраты") Тогда
		ОткрытьЗакладкуТрудозатраты = Параметры.ОткрытьЗакладкуТрудозатраты;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуПредшественники") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПредшественники;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуИсполнители") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИсполнители;
	КонецЕсли;
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	ПроверитьОтсутствие = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ДанныеДоступныДляИзменения = Истина;
	Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Владелец).Изменение Тогда 
		ЭтаФорма.ТолькоПросмотр = Истина;
		ДанныеДоступныДляИзменения = Ложь;
	КонецЕсли;
	
	РольПолныеПрава = РольДоступна("ПолныеПрава");
	Если Не РольПолныеПрава И ЗначениеЗаполнено(Объект.Владелец) Тогда 
		РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Владелец,
			"Состояние, РедактируетсяВСтороннейСистеме");
		ПроектЗавершен = РеквизитыПроекта.Состояние = Перечисления.СостоянияПроектов.Завершен;
		
		Если РеквизитыПроекта.РедактируетсяВСтороннейСистеме = Истина Тогда 
			ЭтаФорма.ТолькоПросмотр = Истина;
			Элементы.РедактированиеЗапрещеноПодпись.Видимость = Истина;
			Элементы.РедактированиеЗапрещеноПодпись.Заголовок = 
				НСтр("ru = 'Проект редактируется в сторонней системе. Редактирование плана запрещено.'; en = 'Project is being edited in a thirt-party system. Editing of the plan is forbidden.'");
			
		ИначеЕсли ПроектЗавершен Тогда
			ЭтаФорма.ТолькоПросмотр = Истина;
			Элементы.РедактированиеЗапрещеноПодпись.Видимость = Истина;
			Элементы.РедактированиеЗапрещеноПодпись.Заголовок = 
				НСтр("ru = 'Проект завершен. Редактирование плана запрещено.'; en = 'Project finished. Editing the plan is forbidden.'");
			
		ИначеЕсли Не ДанныеДоступныДляИзменения Тогда 
			Элементы.РедактированиеЗапрещеноПодпись.Видимость = Истина;
			Элементы.РедактированиеЗапрещеноПодпись.Заголовок = 
				НСтр("ru = 'Нет прав на редактирование плана проекта.'; en = 'Not enough permissions to edit the project plan.'");
			
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ФормаГруппаКомандыФормы);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Оповестить("ОбновитьСписокПоследних");
	
	УстановитьДоступность();
	
	Если ОткрытьЗакладкуЗадачи Тогда
		ПодключитьОбработчикОжидания("ПриОткрытииКлиентОткрытьЗадачи", 0.1, Истина);
	КонецЕсли;
	
	Если ОткрытьЗакладкуТрудозатраты Тогда
		ПодключитьОбработчикОжидания("ПриОткрытииКлиентОткрытьТрудозатраты", 0.1, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РедактироваласьКатегория" Тогда
		ОбновитьДанныеОКатегориях(Параметр);
	ИначеЕсли (ИмяСобытия = "БизнесПроцессСтартован" И Параметр.Свойство("ПроектнаяЗадача") И Параметр.ПроектнаяЗадача = Объект.Ссылка) Тогда
		Прочитать();
	ИначеЕсли ИмяСобытия = "Изменение_ФактическиеТрудозатратыПроектнойЗадачи"
		И (Параметр = Объект.Ссылка ИЛИ НЕ ЗначениеЗаполнено(параметр)) Тогда
		ЕдиницаТрудозатратПриИзмененииСервер();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьСрокиПроектнойЗадачи();
	НачальныйТекущийПланОкончание = ТекущийПланОкончание;
	
	РаботаСБизнесПроцессамиВызовСервера.ФормаБизнесПроцессаУстановитьТипПредмета(ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Объект.Ссылка.Пустая());
	
	ИнформацияОбОтсутствии = Неопределено;
	Если Не ОтсутствияКлиент.ПроверитьОтсутствиеПоПроектнойЗадаче(ЭтаФорма, Отказ, ИнформацияОбОтсутствии) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюПослеВопросаОВозможностиОтсутствия",
			ЭтотОбъект, ПараметрыЗаписи);
		ОтсутствияКлиент.ПоказатьПредупреждениеОбОтсутствииПоПроектнойЗадаче(
			ИнформацияОбОтсутствии, ОписаниеОповещения, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ЗаписыватьФактическиеСроки = Истина;	
	
	Если Не Объект.Ссылка.Пустая() Тогда 
		ДанныеИзменены = Ложь;
		Результат = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(Объект.Ссылка);
		СтруктураПриОткрытии = СрокиПриОткрытии[0].Значение;
		
		Для Каждого КлючИЗначение Из Результат Цикл
			Если (КлючИЗначение.Ключ = "НачалоФакт" 
				Или КлючИЗначение.Ключ = "ОкончаниеФакт" 
				Или КлючИЗначение.Ключ = "ДлительностьФакт")
				И КлючИЗначение.Значение <> СтруктураПриОткрытии[КлючИЗначение.Ключ] Тогда
				ДанныеИзменены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеИзменены Тогда 
			Если (НачалоФакт <> СтруктураПриОткрытии.НачалоФакт
				Или ОкончаниеФакт <> СтруктураПриОткрытии.ОкончаниеФакт
				Или ДлительностьФакт <> СтруктураПриОткрытии.ДлительностьФакт) Тогда 
				Отказ = Истина;
			    ВызватьИсключение НСтр("ru = 'Фактические сроки выполнения задачи были изменены процессами!
                                        |Требуется обновить данные формы.';
                                        |en = 'Actual execution dates of tasks were changed by the processes!
                                        |Form data requires updating.'");
			Иначе 
				ЗаписыватьФактическиеСроки = Ложь;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	РассчитатьОбщиеТрудозатраты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПослеВопросаОВозможностиОтсутствия(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьОтсутствие = Ложь;
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") И Не ПараметрыЗаписи.ЗакрытьПослеЗаписи Тогда
			Возврат;
		КонецЕсли;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовыйОбъект = Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка);
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект);
	
	Если ЭтоНовыйОбъект ИЛИ НеобходимоПересчитатьКодСДР Тогда
		// получение кода СДР
		ДанныеКода = РаботаСПроектами.ПолучитьКодСДРИНомерЗадачиВУровне(ТекущийОбъект.Владелец, ТекущийОбъект.Родитель);
		ТекущийОбъект.КодСДР = ДанныеКода.КодСДР;
		ТекущийОбъект.НомерЗадачиВУровне = ДанныеКода.НомерЗадачиВУровне;
	КонецЕсли;
	
	ТекущийРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "Родитель");
	ПараметрыЗаписи.Вставить("ТекущийРодитель", ТекущийРодитель);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверитьПредшественников", Истина);
	
	// Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТекущийПланНачало", ТекущийПланНачало);
	СтруктураДанных.Вставить("ТекущийПланОкончание", ТекущийПланОкончание);
	СтруктураДанных.Вставить("ТекущийПланДлительность", ТекущийПланДлительность);
	СтруктураДанных.Вставить("ТекущийПланЕдиницаДлительности", ТекущийПланЕдиницаДлительности);
	
	Если ЗаписыватьФактическиеСроки Тогда 
		СтруктураДанных.Вставить("НачалоФакт", НачалоФакт);
		СтруктураДанных.Вставить("ОкончаниеФакт", ОкончаниеФакт);
		СтруктураДанных.Вставить("ДлительностьФакт", ДлительностьФакт);
		СтруктураДанных.Вставить("ЕдиницаДлительностиФакт", ЕдиницаДлительностиФакт);
	КонецЕсли;	
	
	РаботаСПроектами.ЗаписатьСрокиПроектнойЗадачи(ТекущийОбъект.Ссылка, СтруктураДанных);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МассивИзмененныхЗадач = Новый Массив;
	МассивИзмененныхЗадач.Добавить(ТекущийОбъект.Ссылка);
	
	Если ЗначениеЗаполнено(ПараметрыЗаписи.ТекущийРодитель) И ПараметрыЗаписи.ТекущийРодитель <> ТекущийОбъект.Родитель Тогда 
		РаботаСПроектами.РассчитатьПланПроекта(ПараметрыЗаписи.ТекущийРодитель, МассивИзмененныхЗадач);
	КонецЕсли;	
	РаботаСПроектами.РассчитатьПланПроекта(ТекущийОбъект.Ссылка, МассивИзмененныхЗадач);
	
	ПараметрыЗаписи.Вставить("МассивИзмененныхЗадач", МассивИзмененныхЗадач);
	
	ПрочитатьСрокиПроектнойЗадачи();
	
	// Категории данных
	Если ИспользоватьКатегорииДанных Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Объект.Ссылка);
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьФактическиеТрудозатратыИсполнителей();
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);

	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
		
	РодительСсылки = Объект.Ссылка.Родитель;
	ПроектСсылки = Объект.Ссылка.Владелец;
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина 
		ИЛИ НеобходимоПересчитатьКодСДР Тогда
		РаботаСПроектами.ЗаполнитьПорядокПроектныхЗадач(ПроектСсылки);
	КонецЕсли;

	НеобходимоПересчитатьКодСДР = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Проект", Объект.Владелец);
	ПараметрОповещения.Вставить("Родитель", Объект.Родитель);
	ПараметрОповещения.Вставить("ПроектнаяЗадача", Объект.Ссылка);
	ПараметрОповещения.Вставить("МассивИзмененныхЗадач", ПараметрыЗаписи.МассивИзмененныхЗадач);
	
	Если ПараметрыЗаписи.ЭтоНовый Тогда 
		Оповестить("СозданаПроектнаяЗадача", ПараметрОповещения, ЭтаФорма);
	Иначе	
		Оповестить("ИзмененаПроектнаяЗадача", ПараметрОповещения, ЭтаФорма);
	КонецЕсли;	
	
	Если Не ПараметрыЗаписи.ЭтоНовый Тогда 
		Если НачальныйТекущийПланОкончание <> ТекущийПланОкончание Тогда
			ПриИзмененииДатыОкончания();
			НачальныйТекущийПланОкончание = ТекущийПланОкончание;
		КонецЕсли;
		
		Если ИзменилисьРеквизитыИсполнителей Тогда
			ПриИзмененииИсполнителейЗадачи();
			ИзменилисьРеквизитыИсполнителей = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Предшественник Из Объект.Предшественники Цикл
		Если ЗначениеЗаполнено(Предшественник.Задержка) 
			И Не ЗначениеЗаполнено(Предшественник.ЕдиницаЗадержки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не указана единица задержки для предшественника ""%1"".'; en = 'Delay measurement unit is not specified for predecessor ""%1"".'"),
					Предшественник.Предшественник),,
					"Объект.Предшественники[" 
					+ Формат(Предшественник.НомерСтроки-1, "ЧН=; ЧГ=")
					+ "].ЕдиницаЗадержки", ,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Родитель) И Не Объект.ПометкаУдаления И Объект.Родитель.ПометкаУдаления Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В качестве вышестоящей задачи указана задача, помеченная на удаление'; en = 'Task marked for deletion is specified as the parent task'"),,
			"Объект.Родитель",,
			Отказ);
	КонецЕсли;	
	
	// Проверка реквизитов текущего плана 
	Если ЗначениеЗаполнено(ТекущийПланНачало) Тогда 
		ПроверяемыеРеквизиты.Добавить("ТекущийПланОкончание");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПланОкончание) Тогда 
		ПроверяемыеРеквизиты.Добавить("ТекущийПланНачало");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТекущийПланТрудозатраты) Тогда 
		ПроверяемыеРеквизиты.Добавить("ТекущийПланЕдиницаТрудозатрат");
	КонецЕсли;	
	
	// Проверка реквизитов факта 
	Если ЗначениеЗаполнено(ОкончаниеФакт) Тогда 
		ПроверяемыеРеквизиты.Добавить("НачалоФакт");
	КонецЕсли;
		
	// веха 
	Если Объект.Веха Тогда 
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ТекущийПланДлительность"));
	КонецЕсли;	
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекущийПланТрудозатратыПриИзменении(Элемент)
	
	РассчитатьОбщиеТрудозатраты();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланНачалоПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	
	Если ЗначениеЗаполнено(ТекущийПланНачало) 
		И ТекущийПланНачало = НачалоДня(ТекущийПланНачало)
		И ИспользоватьГрафикиРаботы Тогда
		
		ГрафикРаботы = ?(ЗначениеЗаполнено(Объект.ГрафикРаботы), Объект.ГрафикРаботы, ГрафикРаботыПроекта);
		
		ТекущийПланНачало = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(ГрафикРаботы,
			ТекущийПланНачало);
			
	КонецЕсли;
	
	Если СпособПланирования = ПредопределенноеЗначение("Перечисление.СпособыПланированияПроекта.ОтДатыОкончанияПроекта") Тогда 
		
		Если Объект.Веха Тогда 
			
			ТекущийПланОкончание = ТекущийПланНачало;
			
		ИначеЕсли Не ЗначениеЗаполнено(ТекущийПланНачало) Тогда 	
			
			ТекущийПланДлительность = 0;
			
		ИначеЕсли ЗначениеЗаполнено(ТекущийПланОкончание) Тогда 
			
			ТекущийПланДлительность = РаботаСПроектами.РассчитатьДлительностьПериода(Объект, 
				ТекущийПланНачало, 
				ТекущийПланОкончание, 
				ТекущийПланЕдиницаДлительности);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущийПланДлительность) Тогда 	
			
			ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
				ТекущийПланНачало, 
				ТекущийПланДлительность, 
				ТекущийПланЕдиницаДлительности);
				
		КонецЕсли;
		
	Иначе	
	
		Если Объект.Веха Тогда 
			
			ТекущийПланОкончание = ТекущийПланНачало;
			
		ИначеЕсли Не ЗначениеЗаполнено(ТекущийПланНачало) Тогда 	
			
			ТекущийПланДлительность = 0;
			
		ИначеЕсли ЗначениеЗаполнено(ТекущийПланДлительность) Тогда 	
			
			ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
				ТекущийПланНачало, 
				ТекущийПланДлительность, 
				ТекущийПланЕдиницаДлительности);
				
		ИначеЕсли ЗначениеЗаполнено(ТекущийПланОкончание) Тогда 
			
			ТекущийПланДлительность = РаботаСПроектами.РассчитатьДлительностьПериода(Объект, 
				ТекущийПланНачало, 
				ТекущийПланОкончание, 
				ТекущийПланЕдиницаДлительности);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПланНачало) 
		И СпособПланирования =
			ПредопределенноеЗначение("Перечисление.СпособыПланированияПроекта.ОтДатыНачалаПроекта") 
		И ТекущийПланНачало <> ДатаНачалаДоРедактирования
		И АвтоматическиРассчитыватьПланПроекта Тогда 
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ТекущийПланНачалоПриИзмененииПродолжение",
			ЭтотОбъект);
			
		Если Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.ФиксированноеНачало")
			Или Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.НачалоНеРанее") Тогда 
			Объект.ДатаОграничения = ТекущийПланНачало;
		Иначе 
			ТекстВопроса = СтрШаблон( 
				НСтр("ru = 'Дата начала проектной задачи рассчитывается автоматически.
	                  |Установить для текущей задачи ограничение ""Фиксированное начало"" %1?';
	                  |en = 'Project task start date is calculated automatically.
	                  |Set for the task restriction ""Fixed start"" %1?'"),
				Формат(ТекущийПланНачало, "ДФ='дд.ММ.гггг ЧЧ:мм'"));
				
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДатаНачалаДоРедактирования = ТекущийПланНачало;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланНачалоПриИзмененииПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.ФиксированноеНачало");
		Объект.ДатаОграничения = ТекущийПланНачало;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда 
		ТекущийПланНачало = ДатаНачалаДоРедактирования;
	КонецЕсли;
	
	ДатаНачалаДоРедактирования = ТекущийПланНачало;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланОкончаниеПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	
	Если ЗначениеЗаполнено(ТекущийПланОкончание) 
		И ТекущийПланОкончание = НачалоДня(ТекущийПланОкончание)
		И ИспользоватьГрафикиРаботы Тогда
		
		ГрафикРаботы = ?(ЗначениеЗаполнено(Объект.ГрафикРаботы), Объект.ГрафикРаботы, ГрафикРаботыПроекта);
		
		ТекущийПланОкончание = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(ГрафикРаботы,
			ТекущийПланОкончание);
			
	КонецЕсли;
	
	Если СпособПланирования = ПредопределенноеЗначение("Перечисление.СпособыПланированияПроекта.ОтДатыОкончанияПроекта") Тогда 
		
		Если Объект.Веха Тогда 
			
			ТекущийПланНачало = ТекущийПланОкончание;
			
		ИначеЕсли Не ЗначениеЗаполнено(ТекущийПланОкончание) Тогда 
			
			ТекущийПланДлительность = 0;	
			
		ИначеЕсли ЗначениеЗаполнено(ТекущийПланДлительность) Тогда 
			
			ТекущийПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(Объект, 
				ТекущийПланОкончание, 
				ТекущийПланДлительность, 
				ТекущийПланЕдиницаДлительности);	
			
		ИначеЕсли ЗначениеЗаполнено(ТекущийПланНачало) Тогда 	
			
			ТекущийПланДлительность = РаботаСПроектами.РассчитатьДлительностьПериода(Объект, 
				ТекущийПланНачало, 
				ТекущийПланОкончание, 
				ТекущийПланЕдиницаДлительности);
			
		КонецЕсли;
		
	Иначе	
		
		Если Объект.Веха Тогда 
			
			ТекущийПланНачало = ТекущийПланОкончание;
			
		ИначеЕсли Не ЗначениеЗаполнено(ТекущийПланОкончание) Тогда 
			
			ТекущийПланДлительность = 0;	
			
		ИначеЕсли ЗначениеЗаполнено(ТекущийПланНачало) Тогда 	
			
			ТекущийПланДлительность = РаботаСПроектами.РассчитатьДлительностьПериода(Объект, 
				ТекущийПланНачало, 
				ТекущийПланОкончание, 
				ТекущийПланЕдиницаДлительности);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущийПланДлительность) Тогда 
			
			ТекущийПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(Объект, 
				ТекущийПланОкончание, 
				ТекущийПланДлительность, 
				ТекущийПланЕдиницаДлительности);	
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланДлительностьПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	
	Если СпособПланирования = ПредопределенноеЗначение("Перечисление.СпособыПланированияПроекта.ОтДатыОкончанияПроекта") Тогда 
		
		Если ЗначениеЗаполнено(ТекущийПланОкончание) Тогда 		
			ТекущийПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(Объект, 
				ТекущийПланОкончание, 
				ТекущийПланДлительность, 
				ТекущийПланЕдиницаДлительности);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущийПланНачало) Тогда 
			ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
				ТекущийПланНачало, 
				ТекущийПланДлительность, 
				ТекущийПланЕдиницаДлительности);
		КонецЕсли;	
		
	Иначе	
		
		Если ЗначениеЗаполнено(ТекущийПланНачало) Тогда 
			ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
				ТекущийПланНачало, 
				ТекущийПланДлительность, 
				ТекущийПланЕдиницаДлительности);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущийПланОкончание) Тогда 		
			ТекущийПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(Объект, 
				ТекущийПланОкончание, 
				ТекущийПланДлительность, 
				ТекущийПланЕдиницаДлительности);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланЕдиницаДлительностиПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	
	Если ЗначениеЗаполнено(ТекущийПланНачало) Тогда 
		ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
			ТекущийПланНачало, 
			ТекущийПланДлительность, 
			ТекущийПланЕдиницаДлительности);
			
	ИначеЕсли ЗначениеЗаполнено(ТекущийПланОкончание) Тогда 		
		ТекущийПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(Объект, 
			ТекущийПланОкончание, 
			ТекущийПланДлительность, 
			ТекущийПланЕдиницаДлительности);		
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланЕдиницаТрудозатратПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТекущийПланЕдиницаТрудозатрат) Тогда 
		Элементы.ИсполнителиТекущийПланТрудозатраты.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'План (%1)'; en = 'Plan (%1)'"),
				Строка(Объект.ТекущийПланЕдиницаТрудозатрат));
	Иначе		
		Элементы.ИсполнителиТекущийПланТрудозатраты.Заголовок = 
			НСтр("ru = 'План'; en = 'Plan'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоФактПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачалоФактПриИзмененииПродолжить", ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(НачалоФактПриОткрытии) И ЗначениеЗаполнено(НачалоФакт) И 
		РаботаСПроектами.ЕстьНезавершенныеПредшественники(Объект.Ссылка) Тогда 
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У проектной задачи ""%1"" есть незавершенные предшественники. 
			|Вы действительно хотите начать выполнение этой задачи?';
			|en = 'Project task ""%1"" has unfinished predecessors.
			|Are you sure you want to start executing it?'"),
			Строка(Объект.Ссылка));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет)
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоФактПриИзмененииПродолжить(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		НачалоФакт = '00010101';
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоФакт) 
		И НачалоФакт = НачалоДня(НачалоФакт)
		И ИспользоватьГрафикиРаботы Тогда
		
		ГрафикРаботы = ?(ЗначениеЗаполнено(Объект.ГрафикРаботы), Объект.ГрафикРаботы, ГрафикРаботыПроекта);
		НачалоФакт = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(
			ГрафикРаботы,
			НачалоФакт);
	КонецЕсли;
	
	Если Объект.Веха Тогда 
		ОкончаниеФакт = НачалоФакт;
		
	ИначеЕсли Не ЗначениеЗаполнено(НачалоФакт) Тогда 	
		ДлительностьФакт = 0;
		ОкончаниеФакт = '00010101';
		
	ИначеЕсли ЗначениеЗаполнено(ДлительностьФакт) Тогда 
		ОкончаниеФакт = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
			НачалоФакт, 
			ДлительностьФакт, 
			ЕдиницаДлительностиФакт);
			
	ИначеЕсли ЗначениеЗаполнено(ОкончаниеФакт) Тогда 		
		ДлительностьФакт = РаботаСПроектами.РассчитатьДлительностьПериода(Объект, 
			НачалоФакт, 
			ОкончаниеФакт, 
			ЕдиницаДлительностиФакт);
		
	КонецЕсли;
	
	НачалоФактПриОткрытии = НачалоФакт;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеФактПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОкончаниеФакт) 
		И ОкончаниеФакт = НачалоДня(ОкончаниеФакт)
		И ИспользоватьГрафикиРаботы Тогда
		ГрафикРаботы = ?(ЗначениеЗаполнено(Объект.ГрафикРаботы), Объект.ГрафикРаботы, ГрафикРаботыПроекта);
		ОкончаниеФакт = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(
			ГрафикРаботы,
			ОкончаниеФакт);
	КонецЕсли;
	
	Если Объект.Веха Тогда 
		НачалоФакт = ОкончаниеФакт;
		
	ИначеЕсли ЗначениеЗаполнено(НачалоФакт) Тогда 	
		ДлительностьФакт = РаботаСПроектами.РассчитатьДлительностьПериода(Объект, 
			НачалоФакт, 
			ОкончаниеФакт, 
			ЕдиницаДлительностиФакт);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьФактПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НачалоФакт) Тогда 
		ОкончаниеФакт = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
			НачалоФакт, 
			ДлительностьФакт, 
			ЕдиницаДлительностиФакт);
			
	ИначеЕсли ЗначениеЗаполнено(ОкончаниеФакт) Тогда 		
		НачалоФакт = РаботаСПроектами.РассчитатьНачалоПериода(Объект, 
			ОкончаниеФакт, 
			ДлительностьФакт, 
			ЕдиницаДлительностиФакт);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаДлительностиФактПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НачалоФакт) Тогда 
		ОкончаниеФакт = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
			НачалоФакт, 
			ДлительностьФакт, 
			ЕдиницаДлительностиФакт);
			
	ИначеЕсли ЗначениеЗаполнено(ОкончаниеФакт) Тогда 		
		НачалоФакт = РаботаСПроектами.РассчитатьНачалоПериода(Объект, 
			ОкончаниеФакт, 
			ДлительностьФакт, 
			ЕдиницаДлительностиФакт);
			
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВехаПриИзменении(Элемент)
	
	УстановитьДоступность();
	
	Если Объект.Веха Тогда 
		ТекущийПланОкончание = ТекущийПланНачало;
		ОкончаниеФакт = НачалоФакт;
		
		ТекущийПланДлительность = 0;
		ДлительностьФакт = 0;
		
		Объект.ТекущийПланТрудозатраты = 0;
		Объект.ТекущийПланТрудозатраты = 0;
		
		Объект.Исполнители.Очистить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	НеобходимоПересчитатьКодСДР = ПроектСсылки <> Объект.Владелец;
	
	// Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();

КонецПроцедуры

&НаКлиенте
Процедура ТипПредметаПриИзменении(Элемент)
	
	Элементы.Предмет.ТолькоПросмотр = ПустаяСтрока(ТипПредмета);
	
	Если Не ЗначениеЗаполнено(Объект.Предмет) Тогда
		Объект.Предмет = Неопределено;
		Возврат;
	КонецЕсли;
	
	ИмяТипаПредмета = Строка(ТипЗнч(Объект.Предмет));
	Для Каждого ЭлементСписка Из Элементы.ТипПредмета.СписокВыбора Цикл
		Если ЭлементСписка.Значение = ТипПредмета И ЭлементСписка.Представление = ИмяТипаПредмета Тогда
			Возврат; // Предмет имеет тот же тип, что ТипПредмета - очищать не надо
		КонецЕсли;	
	КонецЦикла;	

	Объект.Предмет = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйТип = ТипПредмета;
	РаботаСФайламиКлиент.ОбъектВыборСФайлами(Элемент, ВыбранныйТип, Объект.Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаТрудозатратФактПриИзменении(Элемент)
	
	ПолучитьФактическиеТрудозатратыИсполнителей();
	
	Если ЗначениеЗаполнено(Объект.ЕдиницаТрудозатратФакт) Тогда 
		Элементы.ИсполнителиТрудозатратыФакт.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Факт (%1)'; en = 'Actual (%1)'"),
				Строка(Объект.ЕдиницаТрудозатратФакт));
	Иначе		
		Элементы.ИсполнителиТрудозатратыФакт.Заголовок = 
			НСтр("ru = 'Факт'; en = 'Actual'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОграниченияПриИзменении(Элемент)
	
	// Доступность значения ограничения
	Если Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше")
	 Или Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноПозже") Тогда 
		Элементы.ДатаОграничения.ТолькоПросмотр = Истина;
		Объект.ДатаОграничения = '00010101';
	Иначе	
		Элементы.ДатаОграничения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОграниченияПриИзменении(Элемент)
	
	Если Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.НачалоНеРанее") Тогда 
		
		Если ЗначениеЗаполнено(Объект.ДатаОграничения) 
		И Объект.ДатаОграничения = НачалоДня(Объект.ДатаОграничения)
		И ИспользоватьГрафикиРаботы Тогда
		ГрафикРаботы = 
			?(ЗначениеЗаполнено(Объект.ГрафикРаботы),
			Объект.ГрафикРаботы,
			ГрафикРаботыПроекта);
		Объект.ДатаОграничения = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(
			ГрафикРаботы,
			Объект.ДатаОграничения);
		КонецЕсли;
		
	ИначеЕсли Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.НачалоНеПозднее") 
		Или Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.ОкончаниеНеПозднее")  	
		Или Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.ОкончаниеНеРанее") Тогда 
		
		Если ЗначениеЗаполнено(Объект.ДатаОграничения) 
		И Объект.ДатаОграничения = НачалоДня(Объект.ДатаОграничения)
		И ИспользоватьГрафикиРаботы Тогда
		ГрафикРаботы = 
			?(ЗначениеЗаполнено(Объект.ГрафикРаботы),
			Объект.ГрафикРаботы,
			ГрафикРаботыПроекта);
		Объект.ДатаОграничения = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(
			ГрафикРаботы,
			Объект.ДатаОграничения);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	НеобходимоПересчитатьКодСДР = РодительСсылки <> Объект.Родитель;	
	
КонецПроцедуры

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	Отбор = Новый Структура("Владелец", Объект.Владелец);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.Родитель = ВыбранноеЗначение;
	НеобходимоПересчитатьКодСДР = РодительСсылки <> Объект.Родитель;
	
КонецПроцедуры

&НаКлиенте
Процедура РодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораЗадачиПроекта(Текст, Объект.Владелец);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораЗадачиПроекта(Текст, Объект.Владелец);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	
	РассчитатьОбщиеТрудозатраты();	
	ИзменилисьРеквизитыИсполнителей = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		Элементы.Исполнители.ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗаполненаПроектнаяКоманда Тогда 
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораИсполнителя(Объект.Владелец, "");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор исполнителя'; en = 'Performer selection'"));
	
	Если Элементы.Исполнители.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты",
			Элементы.Исполнители.ТекущиеДанные.Исполнитель);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.АдреснаяКнига.ФормаСписка",
		ПараметрыФормы,
		Элементы.ИсполнителиИсполнитель,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		Если ЗаполненаПроектнаяКоманда Тогда 
			ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораИсполнителя(Объект.Владелец, Текст);
		Иначе
			ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
			ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		Если ЗаполненаПроектнаяКоманда Тогда 
			ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораИсполнителя(Объект.Владелец, Текст);
		Иначе
			ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
			ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКатегорийДанных

&НаКлиенте
Процедура СписокКатегорийДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьКатегорииИзСпискаВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПослеУдаления(Элемент)
	
	СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредшественники

&НаКлиенте
Процедура ПредшественникиПриИзменении(Элемент)
	
	СостояниеПредшественников = ВывестиСостояниеПредшественников(Объект.Предшественники);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшественникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Предшественники.ТекущиеДанные;
	Если НоваяСтрока Тогда 
		ТекущиеДанные.ТипЗависимости =
			ПредопределенноеЗначение("Перечисление.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшественникиПредшественникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораЗадачиПроекта(Текст, Объект.Владелец);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшественникиПредшественникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораЗадачиПроекта(Текст, Объект.Владелец);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшественникиЗадержкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Предшественники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Задержка <> 0 
		И Не ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаЗадержки) Тогда 
		ТекущиеДанные.ЕдиницаЗадержки = ТекущийПланЕдиницаДлительности;
		
	ИначеЕсли ТекущиеДанные.Задержка = 0 
		И ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаЗадержки) Тогда 
		ТекущиеДанные.ЕдиницаЗадержки = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", Ложь);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбъектовСВыбраннымиКатегориями(Команда)
	
	Если СписокКатегорийДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКатегорий = Новый Массив();
	УникальныйИдентификаторСпискаКатегорий = "";
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		МассивКатегорий.Добавить(ВыбраннаяКатегория.Значение);
		УникальныйИдентификаторСпискаКатегорий = УникальныйИдентификаторСпискаКатегорий + "," + ВыбраннаяКатегория.ПолноеНаименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокВыбранныхКатегорий", МассивКатегорий);
	
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаСписка", ПараметрыФормы, Элементы.СписокКатегорийДанных, УникальныйИдентификаторСпискаКатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорий(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
	Элементы.Категории.Заголовок = 
		РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
		
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		ПараметрыОповещения = Неопределено;

		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", Строка(Объект.Ссылка));
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект);
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Неопределено Тогда
		ПараметрыОповещения = Неопределено;
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	Если ЗначениеЗаполнено(ОкончаниеФакт) Тогда
		ДатаОтчета = ОкончаниеФакт;
		ЗадачаЗавершена = Истина;
	Иначе
		ДатаОтчета = ТекущаяДата();
		ЗадачаЗавершена = Ложь;
	КонецЕсли;
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЗадачаЗавершена,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФактическиеТрудозатраты(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("ПроектЗадача", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаСпискаПроектаЗадачи", 
		ПараметрыФормы, 
		ЭтаФорма, 
		ЭтаФорма.КлючУникальности, 
		ЭтаФорма.Окно);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы_Отправить

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Исполнение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	ТипыОпераций = Новый Массив;
	ТипыОпераций.Добавить("КомплексныйПроцесс");
	
	ОткрытьПомощникСозданияОсновныхПроцессов(ТипыОпераций);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникСозданияОсновныхПроцессов(ТипыОпераций)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТипыОпераций", ТипыОпераций);
	
	РежимОткрытияФормы = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьПомощникСозданияОсновныхПроцессов_Продолжение", ЭтотОбъект, ДопПараметры);

	ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(Объект.Ссылка);
	ОкончаниеФакт = ДанныеПроектнойЗадачи.ОкончаниеФакт;
	Если ОкончаниеФакт > Дата(1, 1, 1) Тогда
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Проектная задача завершена. При отправке %1 задача вновь перейдет в стадию выполнения. Отправить %1?'; en = 'Project task is finished. Upon sending %1 the task will return to execution . Send %1?'"),
			?(ТипыОпераций = "Исполнение", НСтр("ru = 'на исполнение'; en = 'for performance'"), НСтр("ru = 'в обработку'; en = 'For processing'")));
			
		Режим = Новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Отправить'; en = 'Submit'"));
		Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'; en = 'Cancel'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим, , КодВозвратаДиалога.Нет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникСозданияОсновныхПроцессов_Продолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		ДопПараметры.ТипыОпераций, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок()
	
	СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);	
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОКатегориях(Параметр)
	
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		ВыбраннаяКатегория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбраннаяКатегория.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ВидыРабот,
	ЭтаФорма.Команды.ПереключитьХронометраж,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбщиеТрудозатраты()
	
	Если Объект.Исполнители.Количество() = 0 Тогда 
		Элементы.ТекущийПланТрудозатраты.ТолькоПросмотр = Ложь;
		Возврат;
	КонецЕсли;	
	
	Элементы.ТекущийПланТрудозатраты.ТолькоПросмотр = Истина;
	
	ТекущийПланТрудозатраты = 0;
	Для Каждого Исполнитель Из Объект.Исполнители Цикл
		ТекущийПланТрудозатраты = ТекущийПланТрудозатраты + Исполнитель.ТекущийПланТрудозатраты;
	КонецЦикла;
	
	Объект.ТекущийПланТрудозатраты = ТекущийПланТрудозатраты;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Если Объект.Веха Тогда 
		Элементы.ТекущийПланДлительность.Доступность = Ложь;
		Элементы.ТекущийПланЕдиницаДлительности.Доступность = Ложь;
		
		Элементы.ДлительностьФакт.Доступность = Ложь;
		Элементы.ЕдиницаДлительностиФакт.Доступность = Ложь;
		
		Элементы.ГруппаИсполнители.ТолькоПросмотр = Истина;
	Иначе	
		Элементы.ТекущийПланДлительность.Доступность = Истина;
		Элементы.ТекущийПланЕдиницаДлительности.Доступность = Истина;
		
		Элементы.ДлительностьФакт.Доступность = Истина;
		Элементы.ЕдиницаДлительностиФакт.Доступность = Истина;
		
		Элементы.ГруппаИсполнители.ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
	Если Объект.Исполнители.Количество() = 0 Тогда 
		Элементы.ТекущийПланТрудозатраты.ТолькоПросмотр = Ложь;
	Иначе	
		Элементы.ТекущийПланТрудозатраты.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриИзмененииИсполнителейЗадачи()
	
	МассивОсновныхПроцессов = РаботаСПроектами.ПолучитьОсновныеБизнесПроцессы(Объект.Ссылка, Истина);
	Если МассивОсновныхПроцессов.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'По данной задаче запущено один или несколько основных процессов. Вы можете вручную изменить состав исполнителей в них.'; en = 'One or several main processes are started by the task. You can manually change the performers lists in them.'");
		ПоказатьПредупреждение(, ТекстСообщения,, НСтр("ru = 'Изменение исполнителей задачи'; en = 'Task performers change'"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДатыОкончания()
	
	Если НачальныйТекущийПланОкончание <> ТекущийПланОкончание Тогда
		МассивОсновныхПроцессов = РаботаСПроектами.ПолучитьОсновныеБизнесПроцессы(Объект.Ссылка, Истина);
		Если МассивОсновныхПроцессов.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Изменился плановый срок завершения проектной задачи. Изменить срок исполнения в основном процессе по данной задаче?'; en = 'Planned finish date for project task was changed. Change the due date for the main process of the task?'");
			Режим = Новый СписокЗначений;
			Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Изменить'; en = 'Change'"));
			Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не изменять'; en = 'Do not change'"));
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПриИзмененииДатыОкончанияПродолжение",
				ЭтотОбъект,
				Новый Структура("МассивОсновныхПроцессов", МассивОсновныхПроцессов));

			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим, , КодВозвратаДиалога.Нет);
		ИначеЕсли МассивОсновныхПроцессов.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Изменился плановый срок завершения проектной задачи. Вы можете вручную изменить срок исполнения в основных процессах по данной задаче.'; en = 'Planned finish date for project task was changed. You can change due dates manually in main processes of the task.'");
			ПоказатьПредупреждение(, ТекстСообщения,, НСтр("ru = 'Изменение даты окончания задачи'; en = 'Task finish date change'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииДатыОкончанияПродолжение(Результат, Параметры)Экспорт 

	Если Результат = КодВозвратаДиалога.Да Тогда
	    ИзменитьСрокОсновногоПроцесса(Параметры.МассивОсновныхПроцессов[0]);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьСрокОсновногоПроцесса(ОсновнойПроцессСсылка)
	
	Если ОсновнойПроцессСсылка <> Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(ОсновнойПроцессСсылка);
		
		МетаднныеПроцесса = ОсновнойПроцессСсылка.Метаданные();
		
		ЕстьРеквизит = МетаднныеПроцесса.Реквизиты.Найти("СрокИсполнения") <> Неопределено;
		
		ЕстьТаблицаИсполнители = МетаднныеПроцесса.ТабличныеЧасти.Найти("Исполнители")  <> Неопределено;
		
		ЕстьРеквизитСрокОбработкиРезультатов = 
			МетаднныеПроцесса.Реквизиты.Найти("СрокОбработкиРезультатов") <> Неопределено;
		
		ОсновнойПроцесс = ОсновнойПроцессСсылка.ПолучитьОбъект();
		
		Если ЕстьРеквизит Тогда
			ОсновнойПроцесс.СрокИсполнения = ТекущийПланОкончание;
			ОсновнойПроцесс.ВариантУстановкиСрокаИсполнения =
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		КонецЕсли;
		
		Если ЕстьТаблицаИсполнители Тогда
			Для Каждого СтрИсполнитель Из ОсновнойПроцесс.Исполнители Цикл
				СтрИсполнитель.СрокИсполнения = ТекущийПланОкончание;
				СтрИсполнитель.ВариантУстановкиСрокаИсполнения =
					Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьРеквизитСрокОбработкиРезультатов Тогда
			ОсновнойПроцесс.СрокОбработкиРезультатов = ТекущийПланОкончание;
			ОсновнойПроцесс.ВариантУстановкиСрокаОбработкиРезультатов = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		КонецЕсли;
		
		ОсновнойПроцесс.СрокИсполненияПроцесса = ТекущийПланОкончание;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач") Тогда
			
			ПричинаПереносаСрока = СтрШаблон(
				НСтр("ru = 'Изменение срока завершения проектной задачи ""%1""'; en = 'Changing finish date of project task ""%1""'"),
				Строка(Объект.Ссылка));
			
			ОсновнойПроцесс.ДополнительныеСвойства.Вставить("ПричинаПереносаСрока", ПричинаПереносаСрока);
		КонецЕсли;
		
		Если ТипЗнч(ОсновнойПроцессСсылка) <> Тип("БизнесПроцессСсылка.Согласование") Тогда
			ОсновнойПроцесс.СрокИсполненияПроцесса = ТекущийПланОкончание;
		КонецЕсли;
		ОсновнойПроцесс.Записать();
		
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(ОсновнойПроцесс);
		ОсновнойПроцесс.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьФактическиеТрудозатратыИсполнителей()
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;	
	
	ТаблицаУчастников = РаботаСПроектами.ПолучитьФактическиеТрудозатратыИсполнителейПроектнойЗадачи(
		Объект.Ссылка,
		Объект.ЕдиницаТрудозатратФакт);
		
	Для Каждого Строка Из ТаблицаУчастников Цикл
		Для Каждого Участник Из Объект.Исполнители Цикл
			Если Участник.Исполнитель = Строка.Исполнитель Тогда
				
				Участник.ТрудозатратыФакт = Строка.ТрудозатратыФакт;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ЕдиницаТрудозатратПриИзмененииСервер()
	
	ТрудозатратыФакт = РаботаСПроектами.ПолучитьФактическиеТрудозатратыПроектнойЗадачи(
		Объект.Ссылка,
		Объект.ЕдиницаТрудозатратФакт);
	ПолучитьФактическиеТрудозатратыИсполнителей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоЧтениеДляРедактированияВСтороннейСистеме()
	
	Чтение = Объект.Владелец.РедактируетсяВСтороннейСистеме;
	Элементы.Владелец.ТолькоПросмотр = Чтение;
	Элементы.Родитель.ТолькоПросмотр = Чтение;
	
	Если Не Объект.СуммарнаяЗадача Тогда 
		Элементы.ТекущийПланНачало.ТолькоПросмотр = Чтение;
		Элементы.ТекущийПланОкончание.ТолькоПросмотр = Чтение;
		Элементы.ТекущийПланДлительность.ТолькоПросмотр = Чтение;
		Элементы.ТекущийПланЕдиницаДлительности.ТолькоПросмотр = Чтение;
		Элементы.Веха.ТолькоПросмотр = Чтение;
	КонецЕсли;	
	
	Элементы.ТекущийПланЕдиницаТрудозатрат.ТолькоПросмотр = Чтение;
	Элементы.ГруппаПредшественники.ТолькоПросмотр = Чтение;
	Элементы.ГрафикРаботы.ТолькоПросмотр = Чтение;
	Элементы.Исполнители.ТолькоПросмотр = Чтение;
	Элементы.ЕдиницаТрудозатратФакт.ТолькоПросмотр = Чтение;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСрокиПроектнойЗадачи()
	
	Результат = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(Объект.Ссылка);
		
	ТекущийПланНачало = Результат.ТекущийПланНачало;
	ТекущийПланОкончание = Результат.ТекущийПланОкончание;
	ТекущийПланДлительность = Результат.ТекущийПланДлительность;
	ТекущийПланЕдиницаДлительности = Результат.ТекущийПланЕдиницаДлительности;
		
	НачалоФакт = Результат.НачалоФакт;
	ОкончаниеФакт = Результат.ОкончаниеФакт;
	ДлительностьФакт = Результат.ДлительностьФакт;
	ЕдиницаДлительностиФакт = Результат.ЕдиницаДлительностиФакт;

	СрокиПриОткрытии.Очистить();
	СрокиПриОткрытии.Добавить(Результат);
		
КонецПроцедуры		

&НаКлиенте
Процедура ПриОткрытииКлиентОткрытьЗадачи()
	
	ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
		Новый Структура("Предмет", Объект.Ссылка),
		ЭтаФорма,
		ЭтаФорма.КлючУникальности,
		ЭтаФорма.Окно,
		"e1cib/command/ОбщаяКоманда.ПроцессыИЗадачи");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииКлиентОткрытьТрудозатраты()
	
	ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаСпискаПроектаЗадачи",
		Новый Структура("ПроектЗадача", Объект.Ссылка),
		ЭтаФорма,
		ЭтаФорма.КлючУникальности,
		ЭтаФорма.Окно,
		"e1cib/command/РегистрыСведений.ФактическиеТрудозатраты.Команды.ТрудозатратыПоПроектуЗадаче");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВывестиСостояниеПредшественников(Знач Предшественники)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПредшественники = Предшественники.Выгрузить().ВыгрузитьКолонку("Предшественник");
	Количество = МассивПредшественники.Количество();
	Для Инд = 1 По Количество Цикл
		Если Не ЗначениеЗаполнено(МассивПредшественники[Количество - Инд]) Тогда 
			МассивПредшественники.Удалить(Количество - Инд);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПредшественники.Количество() = 0 Тогда 
		
		СостояниеПредшественников = НСтр("ru = ''");
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СрокиПроектныхЗадач.ПроектнаяЗадача,
		|	СрокиПроектныхЗадач.НачалоФакт,
		|	СрокиПроектныхЗадач.ОкончаниеФакт,
		|	ВЫБОР
		|		КОГДА СрокиПроектныхЗадач.НачалоФакт = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Начата,
		|	ВЫБОР
		|		КОГДА СрокиПроектныхЗадач.НачалоФакт = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеНачата,
		|	ВЫБОР
		|		КОГДА СрокиПроектныхЗадач.ОкончаниеФакт = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Завершена,
		|	ВЫБОР
		|		КОГДА СрокиПроектныхЗадач.ОкончаниеФакт = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗавершена
		|ИЗ
		|	РегистрСведений.СрокиПроектныхЗадач КАК СрокиПроектныхЗадач
		|ГДЕ
		|	СрокиПроектныхЗадач.ПроектнаяЗадача В(&ПроектныеЗадачи)";
		
		Запрос.УстановитьПараметр("ПроектныеЗадачи", МассивПредшественники);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Найти(Истина, "НеЗавершена") = Неопределено Тогда 	
			
			СостояниеПредшественников = НСтр("ru = 'Все предшественники завершены.'; en = 'All the predecessors are completed.'");
			
		ИначеЕсли Результат.Найти(Истина, "Начата") = Неопределено Тогда 
			
			СостояниеПредшественников = НСтр("ru = 'Все предшественники не начаты.'; en = 'All the predecessors have not yet started.'");
			
		ИначеЕсли Результат.Найти(Истина, "НеНачата") <> Неопределено Тогда 	
			
			СостояниеПредшественников = НСтр("ru = 'Некоторые предшественники не начаты.'; en = 'Some predecessors are not yet started.'");
			
		Иначе 	
			
			СостояниеПредшественников = НСтр("ru = 'Некоторые предшественники не завершены.'; en = 'Some predecessors are not finished.'");
			
		КонецЕсли;	
			
	КонецЕсли;	
	
	Возврат СостояниеПредшественников;
		
КонецФункции

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКатегорииИзСпискаВыбранных()
	
	Если Элементы.СписокКатегорийДанных.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = РаботаСКатегориямиДанных.ФильтроватьСписокКатегорийДляУдаления(Объект.Ссылка, СписокКатегорийДанных, Элементы.СписокКатегорийДанных.ВыделенныеСтроки);
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		СписокКатегорийДанных.Удалить(СписокКатегорийДанных.НайтиПоИдентификатору(СтрокаДляУдаления));
	КонецЦикла;
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		Модифицированность = Истина;
		СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	КонецЕсли;
		
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_ПодсистемаСвойств

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
