
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	ИспользоватьСвязиДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьСвязиДокументов");
	
	ЗаполнитьСлужебныеПоля();
	
	ЗаполнитьНезависимуюНумерацию();
	
	ПрочитатьНастройкиНумерации();
	
	Если ЗначениеЗаполнено(Объект.ТипСвязи) Тогда  
		Если Объект.НезависимаяНумерацияПоСвязанномуДокументу Тогда 
			Для Каждого Строка Из НезависимаяНумерация Цикл
				Если Строка.Значение = "НезависимаяНумерацияПоСвязанномуДокументу" Тогда 
					Строка.Представление = Строка.Представление + " (" + Строка(Объект.ТипСвязи) + ")";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ФорматСодержитНомерСвязанного(Объект.ФорматНомера) Тогда 
		
			Для Каждого Строка Из СлужебныеПоля Цикл
				Если Строка.Значение = "[НомерСвязДок]" Тогда 
					Строка.Представление = Строка.Представление + " (" + Строка(Объект.ТипСвязи) + ")";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьПримерНомера();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьЗаголовокДействуетДля();
	
	СформироватьЗаголовокНезависимаяНумерация();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; en = 'Data has been changed. Save changes?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Для Каждого Строка Из НезависимаяНумерация Цикл
		Объект[Строка.Значение] = Строка.Пометка;
	КонецЦикла;
	
	ТекстОшибки = "";
	
	Если Не ПараметрыЗаписи.Свойство("ПоказаноПодтверждениеЗаписиФорматаБезНомера") Тогда
		Если Не НайденТегНомер(Объект.ФорматНомера, ТекстОшибки, Отказ) Тогда 
			Если Отказ Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,,
				"Объект.ФорматНомера",,
				Отказ);
				Возврат;
				
			ИначеЕсли (Найти(Объект.ФорматНомера, "НомерСвязДок") > 0) Тогда 
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПодтвержденияЗаписиФорматаБезНомера",
					ЭтотОбъект,
					ПараметрыЗаписи);
				ТекстВопроса = НСтр("ru = 'Формат номера не содержит служебное поле ""Номер""
					|Продолжить?';
					|en = 'Number format does not contain internal field ""Number"".
					|Do you want to continue?'");
				
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
				Отказ = Истина;
				Возврат;
				
			Иначе 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Формат номера не содержит служебное поле ""Номер""'; en = 'Number format does not contain internal field ""Number"".'"),,
					"Объект.ФорматНомера",,
					Отказ);
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыНумерации = ИзменениеПараметровНумерации();
	
	Если ПараметрыНумерации.ИзмененыПараметрыНумерации Тогда 
		ТекстВопроса = НСтр("ru = 'Для данного нумератора имеются сформированные номера.
			|Вы действительно хотите изменить параметры нумерации?';
			|en = 'This numerator has formed numbers.
			|Do you really want to change current numeration settings?'");
			
		Если Не ПараметрыЗаписи.Свойство("ПоказаноПодтверждениеЗаписи") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеПодтвержденияЗаписи",
				ЭтотОбъект,
				ПараметрыЗаписи);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ПараметрыНумерации.ВключенаНумерацияПоОрганизациям 
			И Не ПараметрыЗаписи.Свойство("ПоказанВыборОрганизаций") Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВыбораОрганизации",
				ЭтотОбъект,
				ПараметрыЗаписи);
			ВыбранноеЗначение = "";
			ПоказатьВводЗначения(
				ОписаниеОповещения,
				ВыбранноеЗначение, 
				НСтр("ru = 'Укажите организацию, к которой отнести существующие номера'; en = 'Specify a company for existing numbers'"), 
				Тип("СправочникСсылка.Организации"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ПараметрыНумерации.ВключенаНумерацияПоВидуДокумента
			И Не ПараметрыЗаписи.Свойство("ПоказанВыборВидаДокумента") Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВыбораВидаДокумента",
				ЭтотОбъект,
				ПараметрыЗаписи);
				
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.ВидыВнутреннихДокументов"));
			Массив.Добавить(Тип("СправочникСсылка.ВидыВходящихДокументов"));
			Массив.Добавить(Тип("СправочникСсылка.ВидыИсходящихДокументов"));
			ОписаниеТипов = Новый ОписаниеТипов(Массив);
			
			ВыбранноеЗначение = "";
			ПоказатьВводЗначения(
				ОписаниеОповещения,
				ВыбранноеЗначение, 
				НСтр("ru = 'Укажите вид документа, к которому отнести существующие номера'; en = 'Specify a document type for existing numbers'"), 
				ОписаниеТипов); 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ПараметрыНумерации.ВключенаНумерацияПоПодразделению
			И Не ПараметрыЗаписи.Свойство("УказаноПодразделение") Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВыбораПодразделения",
				ЭтотОбъект,
				ПараметрыЗаписи);
			ВыбранноеЗначение = "";
			ПоказатьВводЗначения(
				ОписаниеОповещения,
				ВыбранноеЗначение, 
				НСтр("ru = 'Укажите подразделение, к которому отнести существующие номера'; en = 'Specify a department for existing numbers'"), 
				Тип("СправочникСсылка.СтруктураПредприятия"));  
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ПараметрыНумерации.ВключенаНумерацияПоПроекту 
			И Не ПараметрыЗаписи.Свойство("УказанПроект") Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВыбораПроекта",
				ЭтотОбъект,
				ПараметрыЗаписи);
			ВыбранноеЗначение = "";
			ПоказатьВводЗначения(
				ОписаниеОповещения,
				ВыбранноеЗначение, 
				НСтр("ru = 'Укажите проект, к которому отнести существующие номера'; en = 'Specify a project for existing numbers'"), 
				Тип("СправочникСсылка.Проекты"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ПараметрыНумерации.ВключенаНумерацияПоВопросуДеятельности
			И Не ПараметрыЗаписи.Свойство("УказанВопросДеятельности") Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВыбораВопросаДеятельности",
				ЭтотОбъект,
				ПараметрыЗаписи);
			ВыбранноеЗначение = "";
			ПоказатьВводЗначения(
				ОписаниеОповещения,
				ВыбранноеЗначение, 
				НСтр("ru = 'Укажите вопрос деятельности, к которому отнести существующие номера'; en = 'Specify an activity type for existing numbers'"), 
				Тип("СправочникСсылка.ВопросыДеятельности"));  
			Отказ = Истина;
			Возврат;					
		КонецЕсли;
		
		Если ПараметрыНумерации.ПереключенНаНепериодическийНумератор Тогда 
			Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОПереключенииНумератора") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПредупрежденияОПереключенииНумератора",
					ЭтотОбъект,
					ПараметрыЗаписи);
				ТекстСообщения = НСтр("ru = 'Изменена периодичность нумератора на Непериодический.
					|Будет удалена информация о номерах по периодам и установлен последний номер в качестве текущего';
					|en = 'Numerator periodicity has been changed to Nonperiodical.
					|Number information by periods will be deleted and last number will be set as the current one.'");
				ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если Найти(Объект.ФорматНомера, "ИндексНомДел") > 0 
		И Не ПараметрыЗаписи.Свойство("ПоказанВопросОВключенииУчетаПоНоменклатуреДел") Тогда 
		ВидыДокументов = ВидыДокументовБезУчетаПоНоменклатуреДел();
		Если ВидыДокументов.Количество() > 0 Тогда 
			
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ВидыДокументов", ВидыДокументов);
			ПараметрыОбработчика.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВопросаОВключенииУчетаПоНоменклатуреДел",
				ЭтотОбъект,
				ПараметрыОбработчика);
			
			ТекстВопроса = НСтр("ru = 'Текущий нумератор использует индекс номенклатуры дел.
				|Найдены виды документов, для которых не включен учет по номенклатуре дел.
				|Включить учет по номенклатуре дел для найденных видов документов?';
				|en = 'Current numerator uses case files index. 
				|Document types without case file have been found.
				|Enable case files for found document types?'");
				
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПодтвержденияЗаписиФорматаБезНомера(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказаноПодтверждениеЗаписиФорматаБезНомера", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПодтвержденияЗаписи(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	ПараметрыЗаписи.Вставить("ПоказаноПодтверждениеЗаписи", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораОрганизации(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказанВыборОрганизаций", Истина);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") Тогда 
		Организация = ВыбранноеЗначение;
	Иначе 
		Организация = ВыбранноеЗначение.Значение;
	КонецЕсли;
	ЗаполнитьИзмерениеВРегистреНумерация("Организация", Организация);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораВидаДокумента(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказанВыборВидаДокумента", Истина);
	ЗаполнитьИзмерениеВРегистреНумерация("ВидДокумента", ВыбранноеЗначение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораПодразделения(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьИзмерениеВРегистреНумерация("Подразделение", ВыбранноеЗначение);
	ПараметрыЗаписи.Вставить("УказаноПодразделение", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораПроекта(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьИзмерениеВРегистреНумерация("Проект", ВыбранноеЗначение);
	ПараметрыЗаписи.Вставить("УказанПроект", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораВопросаДеятельности(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьИзмерениеВРегистреНумерация("ВопросДеятельности", ВыбранноеЗначение);
	ПараметрыЗаписи.Вставить("УказанВопросДеятельности", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияОПереключенииНумератора(ПараметрыЗаписи) Экспорт
	
	ПереключитьНаНепериодическийНумератор();
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОПереключенииНумератора", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОВключенииУчетаПоНоменклатуреДел(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		УстановитьУчетПоНоменклатуреДел(Параметры.ВидыДокументов);
		ТекстСообщения = НСтр("ru = 'Включен учет по номенклатуре дел для видов документов'; en = 'Case file is enabled for document types'");
		Состояние(ТекстСообщения);
	КонецЕсли;
	Параметры.ПараметрыЗаписи.Вставить("ПоказанВопросОВключенииУчетаПоНоменклатуреДел", Истина);
	Записать(Параметры.ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьНастройкиНумерации(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'; en = 'Changed:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из НастройкиНумерации Цикл
		Если Не ЗначениеЗаполнено(Строка.ТипДокумента) Тогда 
			НомерСтроки = НастройкиНумерации.Индекс(Строка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не указан ""Тип документа""'; en = '""Document class"" is not specified'"),,"НастройкиНумерации["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].ТипДокумента",,Отказ);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФорматНомераПриИзменении(Элемент)
	
	УстановитьДоступностьТипаСвязи(Истина);
	
	СформироватьПримерНомера();
	
КонецПроцедуры

&НаКлиенте
Процедура СлужебныеПоляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПеренестиСлужебноеПоле();
	
КонецПроцедуры

&НаКлиенте
Процедура СлужебныеПоляПриАктивизацииСтроки(Элемент)
	
	Если ИспользоватьСвязиДокументов Тогда 
		ПодключитьОбработчикОжидания("ОбновитьДоступностьКомандыИзмененияТипаСвязиСлужебныеПоля",
			0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НезависимаяНумерацияПриАктивизацииСтроки(Элемент)
	
	Если ИспользоватьСвязиДокументов Тогда 
		ПодключитьОбработчикОжидания("ОбновитьДоступностьКомандыИзмененияТипаСвязиНезависимаяНумерация",
			0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НезависимаяНумерацияПометкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НезависимаяНумерация.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Строка = НезависимаяНумерация.НайтиПоИдентификатору(ТекущаяСтрока);
	Если Строка.Значение = "НезависимаяНумерацияПоСвязанномуДокументу" Тогда 
		УстановитьДоступностьТипаСвязи();
	Иначе 
		СформироватьЗаголовокНезависимаяНумерация();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ТипДокумента) Или ТекущиеДанные.ВидДокумента = Неопределено Тогда 
		
		Список = Новый СписокЗначений;
		Список.Добавить("СправочникСсылка.ВидыВходящихДокументов",   НСтр("ru = 'Вид входящего документа'; en = 'Incoming document type'"));
		Список.Добавить("СправочникСсылка.ВидыИсходящихДокументов",  НСтр("ru = 'Вид исходящего документа'; en = 'Outgoing document type'"));
		Список.Добавить("СправочникСсылка.ВидыВнутреннихДокументов", НСтр("ru = 'Вид внутреннего документа'; en = 'Internal document type'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"НастройкиНумерацииВидДокументаНачалоВыбораПродолжение",
			ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииВидДокументаНачалоВыбораПродолжение(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	ОписаниеТипов = Новый ОписаниеТипов(ВыбранныйЭлемент.Значение);
	ТекущиеДанные.ВидДокумента = ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.ВидДокумента);
	
	Если ВыбранныйЭлемент.Значение = "СправочникСсылка.ВидыВходящихДокументов" Тогда 
		ТекущиеДанные.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ВходящиеДокументы");
	ИначеЕсли ВыбранныйЭлемент.Значение = "СправочникСсылка.ВидыИсходящихДокументов" Тогда 
		ТекущиеДанные.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ИсходящиеДокументы");
	ИначеЕсли ВыбранныйЭлемент.Значение = "СправочникСсылка.ВидыВнутреннихДокументов" Тогда 
		ТекущиеДанные.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ВнутренниеДокументы");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		СформироватьЗаголовокДействуетДля();
	КонецЕсли;	
	
КонецПроцедуры
 
&НаКлиенте
Процедура НастройкиНумерацииПослеУдаления(Элемент)
	
	СформироватьЗаголовокДействуетДля();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииТипДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ТипДокумента = ВыбранноеЗначение;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ВходящиеДокументы") Тогда 
		ИмяТипа = "СправочникСсылка.ВидыВходящихДокументов";
	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ИсходящиеДокументы") Тогда 
		ИмяТипа = "СправочникСсылка.ВидыИсходящихДокументов";
	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ВнутренниеДокументы") Тогда 
		ИмяТипа = "СправочникСсылка.ВидыВнутреннихДокументов";
	КонецЕсли;
	
	ОписаниеТипов = Новый ОписаниеТипов(ИмяТипа);
	ТекущиеДанные.ВидДокумента = ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.ВидДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьСлужебноеПоле(Команда)
	
	ПеренестиСлужебноеПоле();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТипСвязи(Команда)
	
	Если ЗначениеЗаполнено(Объект.ТипСвязи) Тогда 
		СтрокаНумерации = НезависимаяНумерация.НайтиПоЗначению(
			"НезависимаяНумерацияПоСвязанномуДокументу");
		НезависимаяНумерацияПоСвязанномуДокументу = СтрокаНумерации.Пометка;
		ФорматСодержитНомерСвязанного = ФорматСодержитНомерСвязанного(Объект.ФорматНомера);
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("НезависимаяНумерацияПоСвязанномуДокументу", 
			НезависимаяНумерацияПоСвязанномуДокументу);
		СтруктураДанных.Вставить("ФорматСодержитНомерСвязанного", ФорматСодержитНомерСвязанного);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеТипаСвязи", ЭтаФорма,
			СтруктураДанных);
		
		Если ФорматСодержитНомерСвязанного Или НезависимаяНумерацияПоСвязанномуДокументу Тогда
			ПараметрыОткрытияФормы = Новый Структура("Заголовок",
				НСтр("ru = 'Укажите тип связи для настройки нумерации по связанному документу'; en = 'Specify the relationship type for numeration settings by related document'")); 
			ОткрытьФорму("Справочник.ТипыСвязей.ФормаВыбора", ПараметрыОткрытияФормы, ЭтаФорма,,,,
			 	ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФорматСодержитНомерСвязанного(ФорматНомера)
	
	Возврат (Найти(ФорматНомера, НСтр("ru = 'НомерСвязДок'; en = 'НомерСвязДок'")) > 0);
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьТипаСвязи(СлужебноеПоле = Ложь)
	
	Если Не ИспользоватьСвязиДокументов Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаНумерации = НезависимаяНумерация.НайтиПоЗначению(
		"НезависимаяНумерацияПоСвязанномуДокументу");
	НезависимаяНумерацияПоСвязанномуДокументу = СтрокаНумерации.Пометка;
	ФорматСодержитНомерСвязанного = ФорматСодержитНомерСвязанного(Объект.ФорматНомера);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СлужебноеПоле", СлужебноеПоле);
	СтруктураДанных.Вставить("ФорматСодержитНомерСвязанного", ФорматСодержитНомерСвязанного);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВводТипаСвязи", ЭтаФорма,
		СтруктураДанных);
	
	Если ФорматСодержитНомерСвязанного Или НезависимаяНумерацияПоСвязанномуДокументу Тогда
		Если ЗначениеЗаполнено(Объект.ТипСвязи) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Объект.ТипСвязи);
		Иначе 
			ПараметрыОткрытияФормы = Новый Структура("Заголовок",
				НСтр("ru = 'Укажите тип связи для настройки нумерации по связанному документу'; en = 'Specify the relationship type for numeration settings by related document'")); 
			ОткрытьФорму("Справочник.ТипыСвязей.ФормаВыбора", ПараметрыОткрытияФормы, ЭтаФорма,,,,
			 	ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.ТипСвязи) Тогда
			Объект.ТипСвязи = Неопределено;
		КонецЕсли;
		
		СтрокаНумерации.Представление = НСтр("ru = 'Связанному документу'; en = 'Related document'");
		СтрокаСлужебныеПоля = СлужебныеПоля.НайтиПоЗначению("[НомерСвязДок]");
		СтрокаСлужебныеПоля.Представление = НСтр("ru = 'Номер связанного документа'; en = 'Related document number'");
		Элементы.НезависимаяНумерацияКонтекстноеМенюИзменитьТипСвязи.Доступность = Ложь;
		Элементы.СлужебныеПоляКонтекстноеМенюИзменитьТипСвязи.Доступность = Ложь;
		СформироватьЗаголовокНезависимаяНумерация();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводТипаСвязи(Результат, Параметры) Экспорт 
	
	Если Параметры.СлужебноеПоле Тогда 
		Если Результат = Неопределено Тогда
			Объект.ФорматНомера = СтрЗаменить(Объект.ФорматНомера, НСтр("ru = '[НомерСвязДок]'; en = '[НомерСвязДок]'"), "");
			
		ИначеЕсли Результат <> Неопределено Тогда 
			Объект.ТипСвязи = Результат;
			Для Каждого Строка Из СлужебныеПоля Цикл
				Если Строка.Значение = "[НомерСвязДок]" Тогда 
					Если Параметры.ФорматСодержитНомерСвязанного Тогда 
						Строка.Представление = НСтр("ru = 'Номер связанного документа'; en = 'Related document number'") 
							+ " (" + Строка(Объект.ТипСвязи) + ")";
						Элементы.СлужебныеПоляКонтекстноеМенюИзменитьТипСвязи.Доступность = Истина;
					Иначе 
						Строка.Представление = НСтр("ru = 'Номер связанного документа'; en = 'Related document number'");
						Элементы.СлужебныеПоляКонтекстноеМенюИзменитьТипСвязи.Доступность = Ложь;
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе 
		Для Каждого Строка Из НезависимаяНумерация Цикл
			Если Строка.Значение = "НезависимаяНумерацияПоСвязанномуДокументу" Тогда  
				Если Результат = Неопределено Тогда 
					Строка.Пометка = Ложь;
				ИначеЕсли Строка.Пометка Тогда 
					Объект.ТипСвязи = Результат;
					Строка.Представление = НСтр("ru = 'Связанному документу'; en = 'Related document'") + " (" + Строка(Объект.ТипСвязи) + ")";
					Элементы.НезависимаяНумерацияКонтекстноеМенюИзменитьТипСвязи.Доступность = Истина;
				Иначе 
					Строка.Представление = НСтр("ru = 'Связанному документу'; en = 'Related document'");
					Элементы.НезависимаяНумерацияКонтекстноеМенюИзменитьТипСвязи.Доступность = Ложь;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		СформироватьЗаголовокНезависимаяНумерация();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПримерНомера()
	
	ОписаниеОшибки = "";
	Если Не Нумерация.СформироватьПримерНомера(Объект.ФорматНомера, Пример, ОписаниеОшибки) Тогда 
		Пример = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в формате номера: %1'; en = 'Format number error: %1'"), ОписаниеОшибки);
	КонецЕсли;
	
	Если Объект.Пример <> Пример Тогда 
		Объект.Пример = Пример;
	КонецЕсли;
	
	Пример = НСтр( "ru = 'Пример:'; en = 'Example:'") + " " + Пример;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСлужебноеПоле()
	
	Если Не ТолькоПросмотр Тогда 
		ТекущаяСтрока = Элементы.СлужебныеПоля.ТекущаяСтрока;
		ЗначениеПоля  = СлужебныеПоля.Получить(ТекущаяСтрока).Значение;
		Объект.ФорматНомера  = Объект.ФорматНомера + ЗначениеПоля;
		УстановитьДоступностьТипаСвязи(Истина);
		
		СформироватьПримерНомера();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ИзменениеПараметровНумерации()
	
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	ИзмененыПараметрыНумерации = ЗначениеЗаполнено(Объект.Ссылка) 
		И (Объект.ФорматНомера <> Объект.Ссылка.ФорматНомера 
	    Или Объект.Периодичность <> Объект.Ссылка.Периодичность
	    Или Объект.НезависимаяНумерацияПоОрганизациям <> Объект.Ссылка.НезависимаяНумерацияПоОрганизациям
		Или Объект.НезависимаяНумерацияПоВидуДокумента <> Объект.Ссылка.НезависимаяНумерацияПоВидуДокумента
		Или Объект.НезависимаяНумерацияПоПодразделению <> Объект.Ссылка.НезависимаяНумерацияПоПодразделению)
		И НаборЗаписей.Количество() > 0;
		
	ПереключенНаНепериодическийНумератор = ЗначениеЗаполнено(Объект.Ссылка) 
		И Объект.Периодичность <> Объект.Ссылка.Периодичность
		И Объект.Периодичность = Перечисления.ПериодичностьНумераторов.Непериодический
		И НаборЗаписей.Количество() > 0;	
		
	// Включена нумерация по организациям
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка());
	НаборЗаписей.Прочитать();
	
	ВключенаНумерацияПоОрганизациям = ЗначениеЗаполнено(Объект.Ссылка) 
		И Объект.НезависимаяНумерацияПоОрганизациям 
		И (Не Объект.Ссылка.НезависимаяНумерацияПоОрганизациям)
		И НаборЗаписей.Количество() > 0;	
		
	// Включена нумерация по подразделению
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.Подразделение.Установить(Справочники.СтруктураПредприятия.ПустаяСсылка());
	НаборЗаписей.Прочитать();	
		
	ВключенаНумерацияПоПодразделению = ЗначениеЗаполнено(Объект.Ссылка) 
		И Объект.НезависимаяНумерацияПоПодразделению
		И (Не Объект.Ссылка.НезависимаяНумерацияПоПодразделению)
		И НаборЗаписей.Количество() > 0;
		
	// Включена нумерация по проекту
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.Проект.Установить(Справочники.Проекты.ПустаяСсылка());
	НаборЗаписей.Прочитать();	
		
	ВключенаНумерацияПоПроекту = ЗначениеЗаполнено(Объект.Ссылка) 
		И Объект.НезависимаяНумерацияПоПроекту
		И (Не Объект.Ссылка.НезависимаяНумерацияПоПроекту)
		И НаборЗаписей.Количество() > 0;	
		
	// Включена нумерация по вопросу деятельности	
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.ВопросДеятельности.Установить(Справочники.ВопросыДеятельности.ПустаяСсылка());
	НаборЗаписей.Прочитать();	
		
	ВключенаНумерацияПоВопросуДеятельности = ЗначениеЗаполнено(Объект.Ссылка) 
		И Объект.НезависимаяНумерацияПоВопросуДеятельности
		И (Не Объект.Ссылка.НезависимаяНумерацияПоВопросуДеятельности)
		И НаборЗаписей.Количество() > 0;	
		
	// Включена нумерация по виду документа
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.ВидДокумента.Установить(Неопределено);
	НаборЗаписей.Прочитать();
	
	ВключенаНумерацияПоВидуДокумента = ЗначениеЗаполнено(Объект.Ссылка) 
		И Объект.НезависимаяНумерацияПоВидуДокумента
		И (Не Объект.Ссылка.НезависимаяНумерацияПоВидуДокумента)
		И НаборЗаписей.Количество() > 0;
		
	Результат = Новый Структура;
	Результат.Вставить("ИзмененыПараметрыНумерации", 			ИзмененыПараметрыНумерации);
	Результат.Вставить("ПереключенНаНепериодическийНумератор", 	ПереключенНаНепериодическийНумератор);
	Результат.Вставить("ВключенаНумерацияПоОрганизациям", 		ВключенаНумерацияПоОрганизациям);
	Результат.Вставить("ВключенаНумерацияПоПодразделению", 		ВключенаНумерацияПоПодразделению);
	Результат.Вставить("ВключенаНумерацияПоПроекту", 			ВключенаНумерацияПоПроекту);
	Результат.Вставить("ВключенаНумерацияПоВопросуДеятельности",ВключенаНумерацияПоВопросуДеятельности);
	Результат.Вставить("ВключенаНумерацияПоВидуДокумента", 		ВключенаНумерацияПоВидуДокумента);
	
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ВидыДокументовБезУчетаПоНоменклатуреДел()
	
	ВидыДокументов = Новый Массив;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат ВидыДокументов;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиНумерации.ВидДокумента
	|ИЗ
	|	РегистрСведений.НастройкиНумерации КАК НастройкиНумерации
	|ГДЕ
	|	НастройкиНумерации.Нумератор = &Нумератор
	|	И НЕ НастройкиНумерации.ВидДокумента.ВестиУчетПоНоменклатуреДел";
	
	Запрос.УстановитьПараметр("Нумератор", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДокумента");
	
КонецФункции	

&НаСервере
Процедура УстановитьУчетПоНоменклатуреДел(ВидыДокументов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Для Каждого ВидДокумента Из ВидыДокументов Цикл
			ЗаблокироватьДанныеДляРедактирования(ВидДокумента);
			ВидДокументаОбъект = ВидДокумента.ПолучитьОбъект();
			ВидДокументаОбъект.ВестиУчетПоНоменклатуреДел = Истина;
			ВидДокументаОбъект.Записать();
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

&НаСервере
Процедура ПереключитьНаНепериодическийНумератор()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Нумерация.ПериодНумерации,
	|	Нумерация.Нумератор,
	|	Нумерация.Организация,
	|	Нумерация.СвязанныйДокумент,
	|	Нумерация.Подразделение,
	|	Нумерация.Проект,
	|	Нумерация.ВопросДеятельности,
	|	ВЫБОР
	|		КОГДА (Нумерация.ПериодНумерации, Нумерация.Нумератор, Нумерация.Организация, Нумерация.СвязанныйДокумент, Нумерация.Подразделение, Нумерация.Проект, Нумерация.ВопросДеятельности) В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(Нумерация.ПериодНумерации) КАК ПериодНумерации,
	|					Нумерация.Нумератор,
	|					Нумерация.Организация,
	|					Нумерация.СвязанныйДокумент,
	|					Нумерация.Подразделение,
	|					Нумерация.Проект,
	|					Нумерация.ВопросДеятельности
	|				ИЗ
	|					РегистрСведений.Нумерация КАК Нумерация
	|				ГДЕ
	|					Нумерация.Нумератор = &Нумератор
	|				СГРУППИРОВАТЬ ПО
	|					Нумерация.Нумератор,
	|					Нумерация.Организация,
	|					Нумерация.СвязанныйДокумент,
	|					Нумерация.Подразделение,
	|					Нумерация.Проект,
	|					Нумерация.ВопросДеятельности)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МаксЗапись
	|ИЗ
	|	РегистрСведений.Нумерация КАК Нумерация
	|ГДЕ
	|	Нумерация.Нумератор = &Нумератор";
	
	Запрос.УстановитьПараметр("Нумератор", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		
		Если Выборка.МаксЗапись Тогда
			МенеджерЗаписи.ПериодНумерации = '00010101';
			МенеджерЗаписи.Записать();
		Иначе
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайденТегНомер(ФорматНомера, ТекстОшибки, Отказ)
	
	СтруктураФорматаНомера = Неопределено;
	ОписаниеОшибки = "";
	
	Если Не Нумерация.РазобратьФорматНомера(ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в формате номера: %1'; en = 'Format number error: %1'"), ОписаниеОшибки);
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	НайденТегНомер = Ложь;
	Для Каждого Строка Из СтруктураФорматаНомера Цикл
		Если Строка.Ключ = "СлужебноеПоле" И Строка.Значение = "Номер" Тогда 
			НайденТегНомер = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденТегНомер;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНезависимуюНумерацию()
	
	НезависимаяНумерация.Очистить();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		НезависимаяНумерация.Добавить("НезависимаяНумерацияПоОрганизациям", НСтр("ru = 'Организации'; en = 'Companies'"));
	КонецЕсли;
	
	Если ИспользоватьСвязиДокументов Тогда 
		НезависимаяНумерация.Добавить("НезависимаяНумерацияПоСвязанномуДокументу",
			НСтр("ru = 'Связанному документу'; en = 'Related document'"));
	КонецЕсли;
	
	НезависимаяНумерация.Добавить("НезависимаяНумерацияПоПодразделению", НСтр("ru = 'Подразделению'; en = 'Department'"));
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		НезависимаяНумерация.Добавить("НезависимаяНумерацияПоПроекту", НСтр("ru = 'Проекту'; en = 'Project'"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
		НезависимаяНумерация.Добавить("НезависимаяНумерацияПоВопросуДеятельности",
			НСтр("ru = 'Вопросу деятельности'; en = 'Activity type'"));
	КонецЕсли;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов") 
		Или ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов") Тогда
		НезависимаяНумерация.Добавить("НезависимаяНумерацияПоВидуДокумента",
			НСтр("ru = 'Виду документа'; en = 'Document type'"));
	КонецЕсли;

	Для Каждого Строка Из НезависимаяНумерация Цикл
		Если Объект[Строка.Значение] = Истина Тогда 
			Строка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСлужебныеПоля()
	
	СлужебныеПоля.Очистить();
	
	СлужебныеПоля.Добавить(НСтр("ru = '[Номер]'; en = '[Номер]'"),		НСтр("ru = 'Номер'; en = 'Number'"));
	СлужебныеПоля.Добавить(НСтр("ru = '[День]'; en = '[День]'"),		НСтр("ru = 'День месяца'; en = 'Day of the month'"));
	СлужебныеПоля.Добавить(НСтр("ru = '[Месяц]'; en = '[Месяц]'"),		НСтр("ru = 'Номер месяца'; en = 'Month number'"));
	СлужебныеПоля.Добавить(НСтр("ru = '[Квартал]'; en = '[Квартал]'"),	НСтр("ru = 'Номер квартала'; en = 'Quarter number'"));
	СлужебныеПоля.Добавить(НСтр("ru = '[Год2]'; en = '[Год2]'"),		НСтр("ru = 'Год (2 знака)'; en = 'Year (2 digits)'"));
	СлужебныеПоля.Добавить(НСтр("ru = '[Год4]'; en = '[Год4]'"),		НСтр("ru = 'Год (4 знака)'; en = 'Year (4 digits)'"));
	
	Если Делопроизводство.ИспользоватьВидыВходящихДокументов() 
	 Или Делопроизводство.ИспользоватьВидыИсходящихДокументов()  
	 Или Делопроизводство.ИспользоватьВидыВнутреннихДокументов() Тогда
		СлужебныеПоля.Добавить(НСтр("ru = '[ИндексВидаДок]'; en = '[ИндексВидаДок]'"), НСтр("ru = 'Индекс вида документа'; en = 'Document type index'"));
	КонецЕсли;	
	
	СлужебныеПоля.Добавить(НСтр("ru = '[ИндексПодр]'; en = '[ИндексПодр]'"), 	НСтр("ru = 'Индекс подразделения'; en = 'Department index'"));
	СлужебныеПоля.Добавить(НСтр("ru = '[ИндексКонтр]'; en = '[ИндексКонтр]'"), 	НСтр("ru = 'Индекс контрагента'; en = 'The index of the counterparty'"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		СлужебныеПоля.Добавить(НСтр("ru = '[ИндексОрг]'; en = '[ИндексОрг]'"), НСтр("ru = 'Индекс организации'; en = 'Company index'"));
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда 
		СлужебныеПоля.Добавить(НСтр("ru = '[ИндексВопрДеят]'; en = '[ИндексВопрДеят]'"), НСтр("ru = 'Индекс вопроса деятельности'; en = 'Activity type index'"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел") Тогда
		СлужебныеПоля.Добавить(НСтр("ru = '[ИндексНомДел]'; en = '[ИндексНомДел]'"), НСтр("ru = 'Индекс номенклатуры дел'; en = 'Case files index'"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		СлужебныеПоля.Добавить(НСтр("ru = '[ИндексПроекта]'; en = '[ИндексПроекта]'"), НСтр("ru = 'Индекс проекта'; en = 'Project index'"));
	КонецЕсли;

	Если ИспользоватьСвязиДокументов Тогда 
		СлужебныеПоля.Добавить(НСтр("ru = '[НомерСвязДок]'; en = '[НомерСвязДок]'"), НСтр("ru = 'Номер связанного документа'; en = 'Related document number'"));
	КонецЕсли;
	
	СлужебныеПоля.Добавить(НСтр("ru = '[ИндексОтв]'; en = '[ИндексОтв]'"), НСтр("ru = 'Индекс ответственного'; en = 'Responsible index'"));
	
КонецПроцедуры	

&НаКлиенте
Процедура СформироватьЗаголовокДействуетДля()
	
	КоличествоНастроекНумерации = НастройкиНумерации.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокНезависимаяНумерация()
	
	КоличествоПометокНезависимойНумерации = 0;
	
	Для Каждого Строка Из НезависимаяНумерация Цикл
		Если Строка.Пометка Тогда 
			КоличествоПометокНезависимойНумерации = КоличествоПометокНезависимойНумерации + 1
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиНумерации()
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиНумерации.ТипДокумента,
	|	НастройкиНумерации.ВидДокумента,
	|	НастройкиНумерации.Организация,
	|	НастройкиНумерации.Подразделение,
	|	НастройкиНумерации.Контрагент,
	|	НастройкиНумерации.Проект,
	|	НастройкиНумерации.ВопросДеятельности
	|ИЗ
	|	РегистрСведений.НастройкиНумерации КАК НастройкиНумерации
	|ГДЕ
	|	НастройкиНумерации.Нумератор = &Нумератор";
	Запрос.УстановитьПараметр("Нумератор", Объект.Ссылка);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(), "НастройкиНумерации");
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьНастройкиНумерации(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиНумерации.ТипДокумента,
	|	НастройкиНумерации.ВидДокумента,
	|	НастройкиНумерации.Организация,
	|	НастройкиНумерации.Подразделение,
	|	НастройкиНумерации.ВопросДеятельности,
	|	НастройкиНумерации.Контрагент,
	|	НастройкиНумерации.Проект
	|ИЗ
	|	РегистрСведений.НастройкиНумерации КАК НастройкиНумерации
	|ГДЕ
	|	НастройкиНумерации.Нумератор = &Нумератор";
	Запрос.УстановитьПараметр("Нумератор", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;	
	
	Для Каждого Строка Из НастройкиНумерации Цикл
		МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
		МенеджерЗаписи.Нумератор = Ссылка;
		МенеджерЗаписи.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
		МенеджерЗаписи.Записать();
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзмерениеВРегистреНумерация(ИмяИзмерения, ЗначениеИзмерения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Не ЗначениеЗаполнено(Запись[ИмяИзмерения]) Тогда 
			Запись[ИмяИзмерения] = ЗначениеИзмерения;
		КонецЕсли;	
	КонецЦикла;	
	НаборЗаписей.Записать();	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьИзменениеТипаСвязи(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТипСвязи = Результат;
	
	Если Параметры.ФорматСодержитНомерСвязанного Тогда 
		Для Каждого Строка Из СлужебныеПоля Цикл
			Если Строка.Значение = "[НомерСвязДок]" Тогда 
					Строка.Представление = НСтр("ru = 'Номер связанного документа'; en = 'Related document number'") 
						+ " (" + Строка(Объект.ТипСвязи) + ")";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Если Параметры.НезависимаяНумерацияПоСвязанномуДокументу Тогда 
		Для Каждого Строка Из НезависимаяНумерация Цикл
			Если Строка.Значение = "НезависимаяНумерацияПоСвязанномуДокументу" Тогда  
				Строка.Представление = НСтр("ru = 'Связанному документу'; en = 'Related document'") + " (" + Строка(Объект.ТипСвязи) + ")";
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандыИзмененияТипаСвязиНезависимаяНумерация()
	
	ТекущиеДанные = Элементы.НезависимаяНумерация.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Элементы.НезависимаяНумерацияКонтекстноеМенюИзменитьТипСвязи.Доступность = Ложь;
	ИначеЕсли ТекущиеДанные.Значение = "НезависимаяНумерацияПоСвязанномуДокументу" 
		И ТекущиеДанные.Пометка Тогда 
		Элементы.НезависимаяНумерацияКонтекстноеМенюИзменитьТипСвязи.Доступность = Истина;
	Иначе 
		Элементы.НезависимаяНумерацияКонтекстноеМенюИзменитьТипСвязи.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандыИзмененияТипаСвязиСлужебныеПоля()
	
	ТекущиеДанные = Элементы.СлужебныеПоля.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Элементы.СлужебныеПоляКонтекстноеМенюИзменитьТипСвязи.Доступность = Ложь;
	ИначеЕсли ТекущиеДанные.Значение = "[НомерСвязДок]" 
		И ФорматСодержитНомерСвязанного(Объект.ФорматНомера) Тогда 
		Элементы.СлужебныеПоляКонтекстноеМенюИзменитьТипСвязи.Доступность = Истина;
	Иначе 
		Элементы.СлужебныеПоляКонтекстноеМенюИзменитьТипСвязи.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
