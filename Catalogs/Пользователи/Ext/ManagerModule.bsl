#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	НеРедактируемыеРеквизиты.Добавить("Служебный");
	НеРедактируемыеРеквизиты.Добавить("ИдентификаторПользователяИБ");
	НеРедактируемыеРеквизиты.Добавить("ИдентификаторПользователяСервиса");
	НеРедактируемыеРеквизиты.Добавить("СвойстваПользователяИБ");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Возвращает состав пользователей, входящих в указанный контейнер.
//
// Параметры:
//   Контейнер - СправочникСсылка.Пользователи - контейнер пользователей.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.Пользователи - состав контейнера.
//
Функция СоставКонтейнераПользователей(Контейнер) Экспорт
	
	Результат = Новый Массив;
	ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контейнер, "ПометкаУдаления");
	Если ПометкаУдаления <> Истина Тогда
		Результат.Добавить(Контейнер);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает состав контейнеров типа Пользователи, которым принадлежит указанный пользователь.
//
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - проверяемый пользователь.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.Пользователи - контейнеры, которым принадлежит пользователь.
//
Функция КонтейнерыПользователя(Пользователь) Экспорт
	
	Результат = Новый Массив;
	ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ПометкаУдаления");
	Если ПометкаУдаления <> Истина Тогда
		Результат.Добавить(Пользователь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если РольДоступна("ПолныеПрава") Тогда
			ВыбраннаяФорма = "ФормаЭлемента";
		Иначе
			ВыбраннаяФорма = "ФормаПользователя";
		КонецЕсли;
		
	ИначеЕсли ВидФормы = "ФормаВыбора"
		Или (ВидФормы = "ФормаСписка"
			И Параметры.Свойство("РежимВыбора")
			И Параметры.РежимВыбора) Тогда
			
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяФорма = "Справочник.АдреснаяКнига.ФормаСписка";
		
		Параметры.Вставить("РежимРаботыФормы", 1);
		Параметры.Вставить("УпрощенныйИнтерфейс", Истина);
		Параметры.Вставить("ОтображатьСотрудников", Истина);
		Параметры.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор пользователя'; en = 'Select user'"));
		
		Если Параметры.Свойство("ВыборГруппПользователей")
			И Параметры.ВыборГруппПользователей = Истина Тогда
			Параметры.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
		КонецЕсли;
		
		Если Параметры.Свойство("ТекущаяСтрока") Тогда
			Параметры.Вставить("ВыбранныеАдресаты", Параметры.ТекущаяСтрока);
		КонецЕсли;
		
		// ТСК Близнюк С.И.; 04.10.2018; task#1348{
		Если Параметры.Свойство("Отбор")
			И ТипЗнч(Параметры.Отбор) = Тип("Структура")
			И Параметры.Отбор.Свойство("ра_Организация") Тогда
			ВыбраннаяФорма = "Справочник.Пользователи.Форма.ра_ФормаВыбора";
		КонецЕсли;
		// ТСК Близнюк С.И.; 04.10.2018; task#1348}
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Недействителен = Ложь;
	Служебный = Ложь;
	
	Если Параметры.Отбор.Свойство("Недействителен") Тогда
		Недействителен = Параметры.Отбор.Недействителен;
	Иначе
		Параметры.Отбор.Вставить("Недействителен", Ложь);
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Служебный") Тогда
		Служебный = Параметры.Отбор.Служебный;
	Иначе
		Параметры.Отбор.Вставить("Служебный", Ложь);
	КонецЕсли;
	
	Если Параметры.Свойство("Nesootvetstvie") Тогда
		Параметры.Отбор.Вставить("Nesootvetstvie", Параметры.Nesootvetstvie);
	КонецЕсли;
		
	Текст = Параметры.СтрокаПоиска;
	СловаПоиска = ОбщегоНазначенияДокументооборот.СловаПоиска(Текст);
	ДанныеВыбора = Новый СписокЗначений;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	       
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Представление КАК Представление,
	|	Пользователи.ra_Status КАК ra_Status,
	|	ПРЕДСТАВЛЕНИЕ(СведенияОПользователяхДокументооборот.Подразделение) КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(СведенияОПользователяхДокументооборот.Должность) КАК Должность
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
	|		ПО Пользователи.Ссылка = СведенияОПользователяхДокументооборот.Пользователь
	|		%1
	|ГДЕ
	|	Пользователи.Наименование ПОДОБНО &Текст
	|	%2
	|	И (Пользователи.ра_Организация = &ТекущаяОрганизация
	|			ИЛИ Пользователи.ра_ОтветственныйЗаКачествоВыявивший
	|			ИЛИ Пользователи.ра_ОтветственныйЗаКачествоДопустивший)";
	
	Если Параметры.Отбор.Свойство("Nesootvetstvie") Тогда
		ТекстЗапросаСоединение = 
		"		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ra_DostupnyeProekty КАК ДоступныеПроекты
		|		ПО Пользователи.Ссылка = ДоступныеПроекты.Polzovatel
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ra_DostupnyeEtapyZhiznennogoCikla КАК ДоступныеЭтапыЖЦ
		|		ПО Пользователи.Ссылка = ДоступныеЭтапыЖЦ.Polzovatel
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ra_DostupnyePloshchadki КАК ДоступныеПлощадки
		|		ПО Пользователи.Ссылка = ДоступныеПлощадки.Polzovatel";
		
		ТекстЗапросаУсловие = 
		"	И (ДоступныеПроекты.Polzovatel ЕСТЬ NULL ИЛИ ДоступныеПроекты.Proekt = &Проект)
		|	И (ДоступныеЭтапыЖЦ.Polzovatel ЕСТЬ NULL ИЛИ ДоступныеЭтапыЖЦ.EhtapVyyavleniyaNesootvetstvij = &ЭтапЖЦ)
		|	И (ДоступныеПлощадки.Polzovatel ЕСТЬ NULL ИЛИ ДоступныеПлощадки.Ploshchadka = &Площадка)";
		
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, ТекстЗапросаСоединение, ТекстЗапросаУсловие);
	Иначе
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, "", "");
	КонецЕсли;
	
	//Заглушка (Аракелян В.)
	Если Параметры.Отбор.Свойство("Signal") Тогда
		ТекстЗапроса = ТекстЗапроса + " И Пользователи.Ссылка <> &ТекущийПользователь ";
	КонецЕсли;
				
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Оператор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	Если Параметры.Свойство("СтрокаПоиска") Тогда
		Оператор.КоличествоПолучаемыхЗаписей = 10;	
	КонецЕсли;
	
	СхемаЗапроса.ПакетЗапросов[0].Порядок.Добавить("Пользователи.Ссылка");
	СхемаЗапроса.ПакетЗапросов[0].Автопорядок = Истина;
	
	ра_ОбщегоНазначения.ДобавитьУсловияОтбораПоПараметрам(Параметры, Оператор);
	
	Запрос = ра_ОбщегоНазначения.ПолучитьЗапросПоСхемеЗапроса(СхемаЗапроса, Параметры);
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ТекущаяОрганизация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ра_Организация"));
	
	Если Параметры.Отбор.Свойство("Nesootvetstvie") Тогда
		Несоответствие = Параметры.Отбор.Nesootvetstvie;
		Запрос.УстановитьПараметр("Проект", Несоответствие.Proekt);
		Запрос.УстановитьПараметр("Площадка", Несоответствие.Ploshchadka);
		Запрос.УстановитьПараметр("ЭтапЖЦ", Несоответствие.EhtapVyyavleniya);
	КонецЕсли;
	
	//Заглушка (Аракелян В.)
	Если Параметры.Отбор.Свойство("Signal") Тогда
		Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеФорматированнаяСтрока = ОбщегоНазначенияДокументооборот.ФорматированныйРезультатПоиска(
			Выборка.Представление,
			СловаПоиска);
		Если ЗначениеЗаполнено(Выборка.Подразделение) Или ЗначениеЗаполнено(Выборка.Должность) Или ЗначениеЗаполнено(Выборка.ra_Status) Тогда 
			
			ДобавкаТекст = "";
			Если ЗначениеЗаполнено(Выборка.Подразделение) И ЗначениеЗаполнено(Выборка.Должность) Тогда 
				ДобавкаТекст = СтрШаблон(НСтр("ru = ' %1, %2'; en = ' %1, %2'"), Строка(Выборка.Подразделение), Строка(Выборка.Должность));
			ИначеЕсли ЗначениеЗаполнено(Выборка.Подразделение) Тогда 	
				ДобавкаТекст = СтрШаблон(НСтр("ru = ' %1'; en = ' %1'"), Строка(Выборка.Подразделение));
			ИначеЕсли ЗначениеЗаполнено(Выборка.Должность) Тогда 	
				ДобавкаТекст = СтрШаблон(НСтр("ru = ' %1'; en = ' %1'"), Строка(Выборка.Должность));
			КонецЕсли;	
			
					
			ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				ПредставлениеФорматированнаяСтрока,
				?(ЗначениеЗаполнено(Выборка.ra_Status),
					Новый ФорматированнаяСтрока(СтрШаблон(" %1", Выборка.ra_Status)
						, Новый Шрифт(,,Истина,Истина)
						, WebЦвета.Кирпичный),
					""),
				Новый ФорматированнаяСтрока(ДобавкаТекст, 
					, WebЦвета.Серый)
				);
			
			ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
			
		Иначе	
			
			ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

// Вернет Истина, у этого объекта метаданных есть функция ПолучитьАдресФото
Функция ЕстьФункцияПолученияФото() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Прочитать фото и вернуть адрес (навигационную ссылку)
// Параметры:
//  Ссылка - ссылка на справочник, для которого надо показать фото
//  УникальныйИдентификатор - уникальный идентификатор формы, откуда идет вызов
//  ЕстьКартинка - возвращаемое значение - Булево - Истина, если в объекте есть картинка
//
// Возвращаемое значение:
//   Строка - навигационная ссылка - или "", если нет картинки
Функция ПолучитьАдресФото(Ссылка, УникальныйИдентификатор, ЕстьКартинка) Экспорт
	
	АдресКартинки = "";
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ФизЛицо");
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() 
			И Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ФизЛицо).Чтение Тогда
			Возврат АдресКартинки;
		КонецЕсли;
		
		АдресКартинки = РаботаСФотографиями.ПолучитьНавигационнуюСсылкуРеквизита(ФизЛицо, УникальныйИдентификатор, ЕстьКартинка);
		
	КонецЕсли;
	
	Возврат АдресКартинки;
	
КонецФункции

// Возвращает двоичные данные фото пользователя
//
Функция ПолучитьДвоичныеДанныеФото(Пользователь) Экспорт
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизЛицо");
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей()
		И Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ФизЛицо).Чтение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанные = РаботаСФотографиями.ПолучитьДвоичныеДанныеРеквизита(ФизЛицо, "ФайлФотографии");
	Если Не ЗначениеЗаполнено(ДвоичныеДанные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДвоичныеДанные;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияBitrix

Процедура СформироватьМассивДанныхGetList(Результат, ПолноеИмя, ПараметрыЗапросаHTTP) Экспорт
	
	ОбъектМетаданных = Метаданные.Справочники.Пользователи;
	
	ТаблицаРеквизитов = ра_ОбменДанными.ПолучитьТаблицуРеквизитовОбъекта(ОбъектМетаданных);
	
	АктуализироватьТаблицуРеквизитов(ТаблицаРеквизитов);
	
	ТекстЗапросаВложенныеТаблицы = ПолучитьТекстЗапросаВложенныеТаблицы();
	ТекстЗапросаСоединений = ПолучитьТекстЗапросаСоединений();
	
	Запрос = ра_ОбменДанными.ПолучитьЗапрос(ТаблицаРеквизитов, ПараметрыЗапросаHTTP, ПолноеИмя, ТекстЗапросаВложенныеТаблицы, ТекстЗапросаСоединений);
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзЗапроса(Запрос);
	Результат.Вставить("value", МассивДанных);
	
	НастройкаФормы = ПараметрыЗапросаHTTP.Получить("$form_settings");
	Если ЗначениеЗаполнено(НастройкаФормы) И НастройкаФормы Тогда
		МассивКолонок = ПолучитьПолучитьМассивКолонокСписка();
		МассивКнопок = ПолучитьМассивКнопок(Запрос.Параметры);
		МассивФильтров = ПолучитьМассивФильтровСписка();
		Результат.Вставить("form_settings", МассивКолонок);
		Результат.Вставить("button_settings", МассивКнопок);
		Результат.Вставить("filter_settings", МассивФильтров);
	КонецЕсли;
						
КонецПроцедуры

Процедура АктуализироватьТаблицуРеквизитов(ТаблицаРеквизитов)
	
	СтруктураРеквизита = Новый Структура("Имя,Тип,Выражение", "Position", "Справочник.Должности", "ЕСТЬNULL(РС_СведенияОПользователяхДокументооборот.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))");
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуРеквизитов(ТаблицаРеквизитов, СтруктураРеквизита);
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаВложенныеТаблицы() Экспорт
	
	Возврат "";
			
КонецФункции

Функция ПолучитьТекстЗапросаСоединений() Экспорт
	
	ТекстЗапросаСОЕДИНЕНИЕ = " ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователяхДокументооборот КАК РС_СведенияОПользователяхДокументооборот
							|	ПО ОсновнаяТаблица.Ссылка = РС_СведенияОПользователяхДокументооборот.Пользователь ";
	
	Возврат ТекстЗапросаСОЕДИНЕНИЕ;
			
КонецФункции

Функция СформироватьМассивДанныхРолевойМодели(ДокументОбъект, ПараметрыФормирования = Неопределено) Экспорт
	
	ДокументОбъект = ПараметрыСеанса.ТекущийПользователь;	
		
	ТаблицаНастроек = ра_ОбменДанными.ПолучитьТаблицуНастроекПолейПоУмолчанию(Метаданные.Справочники.Пользователи);
	
	//В данную переменную необходимо передавать удаляемые реквизиты. Разделитель - запятая.
	УдаляемыеРеквизиты = "Ссылка,ПометкаУдаления,РазрешенныеВебСерверы,Служебный,Подготовлен,ПредставлениеВПерепискеСРангом,Помещение,СвойстваПользователяИБ,ДополнительныеРеквизиты,КонтактнаяИнформация";
	ра_ОбменДанными.УдалитьСтрокиИзТаблицыНастроек(ТаблицаНастроек, УдаляемыеРеквизиты);
	
	ра_ОбменДанными.ЗаполнитьТаблицуНастроекЗначениямиИзОбъекта(ТаблицаНастроек, ДокументОбъект);
	
	// вначале добавим должность и заполним значение - это вписывается в общую концепцию данных
	АктуализироватьТаблицуНастроек(ТаблицаНастроек, ДокументОбъект, Неопределено, Истина);	
	
	МассивДанных = ра_ОбменДанными.СформироватьМассивДанныхИзТаблицыНастроек(ТаблицаНастроек);
	
	// добавим данные контактной информации
	АктуализироватьТаблицуНастроек(ТаблицаНастроек, ДокументОбъект, МассивДанных);
	 	
	Возврат МассивДанных;
			
КонецФункции

Процедура АктуализироватьТаблицуНастроек(ТаблицаНастроек, ДокументОбъект, МассивДанных, ДобавитьТолькоДолжность = Ложь)
	
	Если ДобавитьТолькоДолжность Тогда  
		ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя, Синоним", "Add_Position", НСтр("ru = 'Должность'; en = 'Position'")), Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
		ТаблицаНастроек.Найти("Add_Position").Значение = "";
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Представление(СведенияОПользователяхДокументооборот.Должность) КАК Должность
			|ИЗ
			|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
			|ГДЕ
			|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", ДокументОбъект);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда 
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ТаблицаНастроек.Найти("Add_Position").Значение = Выборка.Должность;
		Возврат;
		
	КонецЕсли;	
	
	// добавляем новые поля для отправки контактной информации
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя, Синоним", "XDTO_Use", 		 		  НСтр("ru = 'Использовать'; en = 'Use'")), 		  Новый ОписаниеТипов("Булево"));
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя, Синоним", "XDTO_Presentation", 		  НСтр("ru = 'Представление'; en = 'Presentation'")), Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя, Синоним", "XDTO_EMail_Value", 		  НСтр("ru = 'e-mail'; en = 'e-mail'")), 			  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя, Синоним", "XDTO_NumberTel_CodeCountry", НСтр("ru = 'Код страны'; en = 'Code country'")), 	  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя, Синоним", "XDTO_NumberTel_CodeCity", 	  НСтр("ru = 'Код города'; en = 'Code city'")), 	  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя, Синоним", "XDTO_NumberTel_Number",	  НСтр("ru = 'Номер'; en = 'Number'")), 			  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ра_ОбменДанными.ДобавитьСтрокуВТаблицуНастроек(ТаблицаНастроек, Новый Структура("Имя, Синоним", "XDTO_NumberTel_AddNumber",   НСтр("ru = 'Добавочный'; en = 'Add number'")), 	  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
		
	РезультатЗапроса = ПолучитьСпособыУведомленияПользователя_Локально();
	ВыборкаПоСпособуУведомления = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивДанных_Локально  = Новый Массив;
		
	Пока ВыборкаПоСпособуУведомления.Следующий() Цикл 
		
		ВыборкаВидКонтактнойИнформации = ВыборкаПоСпособуУведомления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидКонтактнойИнформации.Следующий() Цикл 
			
			Индекс = 1;
			Структура = Новый Структура("MethodOfNotification, Guid_KindOfContactInformation, Value");
			Структура.MethodOfNotification 			= ОбщегоНазначения.ИмяЗначенияПеречисления(ВыборкаВидКонтактнойИнформации.СпособУведомления);
			Структура.Guid_KindOfContactInformation = Строка(ВыборкаВидКонтактнойИнформации.ВидКонтактнойИнформации.УникальныйИдентификатор());
			
			
			МассивДетЗаписей = Новый Массив;
			
			ВыборкаДетЗаписи = ВыборкаВидКонтактнойИнформации.Выбрать();
			Пока ВыборкаДетЗаписи.Следующий() Цикл 
				
				СтруктураЗначений = Новый Структура;
				
				МассивКонтактнойИнформации  = Новый Массив;
				
				МассивКонтактнойИнформации.Добавить(ПолучитьСтруктуруНастроекРеквизитаКонтактнойИнформации(ТаблицаНастроек.Найти("XDTO_Use"), ВыборкаДетЗаписи.Использовать));
				
				Представление = ВыборкаДетЗаписи.ДанныеСпособа;
				
				ЭтоВидКИ_email = Истина;
				
				Если ВыборкаДетЗаписи.СпособУведомления = Перечисления.СпособыУведомления.ПоSMS Тогда 
					
					ЭтоВидКИ_email = Ложь;
					
					НомерТелефона = ВыборкаДетЗаписи.ДанныеСпособа;
					
					Если ПустаяСтрока(ВыборкаДетЗаписи.ЗначенияПолейXML) Тогда 
						Продолжить;
					КонецЕсли;	
											
					чтениеXML_ = Новый ЧтениеXML;
					чтениеXML_.УстановитьСтроку(ВыборкаДетЗаписи.ЗначенияПолейXML);
					
					Попытка
						обЪектXDTO_ДанныеТелефона = ФабрикаXDTO.ПрочитатьXML(чтениеXML_);
						
						МассивКонтактнойИнформации.Добавить(ПолучитьСтруктуруНастроекРеквизитаКонтактнойИнформации(ТаблицаНастроек.Найти("XDTO_NumberTel_CodeCountry"), обЪектXDTO_ДанныеТелефона.Состав.КодСтраны));
						
						МассивКонтактнойИнформации.Добавить(ПолучитьСтруктуруНастроекРеквизитаКонтактнойИнформации(ТаблицаНастроек.Найти("XDTO_NumberTel_CodeCity"),    обЪектXDTO_ДанныеТелефона.Состав.КодГорода));
						
						НомерТелефона = обЪектXDTO_ДанныеТелефона.Состав.Номер;
						  						
						МассивКонтактнойИнформации.Добавить(ПолучитьСтруктуруНастроекРеквизитаКонтактнойИнформации(ТаблицаНастроек.Найти("XDTO_NumberTel_AddNumber"),   обЪектXDTO_ДанныеТелефона.Состав.Добавочный));
						
						Представление = обЪектXDTO_ДанныеТелефона.Представление;
													
					Исключение
						// ничего не делаем, т.к. до этого уже заполнили структуру
					КонецПопытки;	
					
					МассивКонтактнойИнформации.Добавить(ПолучитьСтруктуруНастроекРеквизитаКонтактнойИнформации(ТаблицаНастроек.Найти("XDTO_NumberTel_Number"), НомерТелефона));
					
				ИначеЕсли не ЗначениеЗаполнено(Представление) Тогда 
					Продолжить;					
				КонецЕсли;		
				
				МассивКонтактнойИнформации.Добавить(ПолучитьСтруктуруНастроекРеквизитаКонтактнойИнформации(ТаблицаНастроек.Найти("XDTO_Presentation"), Представление,, ?(ЭтоВидКИ_email, Ложь, Неопределено)));
				
				СтруктураЗначений.Вставить("Value" + Формат(Индекс, "ЧГ=0"), МассивКонтактнойИнформации);
				МассивДетЗаписей.Добавить(СтруктураЗначений);
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
			//Структура.Value = СтруктураЗначений;
			Структура.Value = МассивДетЗаписей;
			
			МассивДанных_Локально.Добавить(Структура);
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Name", "ContactInfo");
	СтруктураДанных.Вставить("Type", "ContactInfo");
	СтруктураДанных.Вставить("Presentation", "ContactInfo");
	СтруктураДанных.Вставить("Availability", true);
	СтруктураДанных.Вставить("Visibility", true);
	СтруктураДанных.Вставить("Required", false);	
	СтруктураДанных.Вставить("Value", МассивДанных_Локально);
	СтруктураДанных.Вставить("Filters", Новый Массив);
	
	МассивДанных.Добавить(СтруктураДанных);

	
КонецПроцедуры

Функция ПолучитьМассивКнопок(ДокументОбъект) Экспорт
	
	МассивКнопок = Новый Массив;
		
	Возврат МассивКнопок;
	
КонецФункции

Функция ПолучитьСпособыУведомленияПользователя_Локально() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	СпособыУведомленияПользователей.СпособУведомления КАК СпособУведомления,
		|	СпособыУведомленияПользователей.ВидКонтактнойИнформации КАК ВидКонтактнойИнформации,
		|	СпособыУведомленияПользователей.Использовать КАК Использовать
		|ПОМЕСТИТЬ СпособыУведомленияВсеПользователи
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпособыУведомленияПользователей КАК СпособыУведомленияПользователей
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Пользователи.Ссылка = &Пользователь
		|	И СпособыУведомленияПользователей.Пользователь = ЗНАЧЕНИЕ(Справочник.РабочиеГруппы.ВсеПользователи)
		|	И СпособыУведомленияПользователей.Использовать = ИСТИНА
		|	И Пользователи.ПометкаУдаления = ЛОЖЬ
		|	И Пользователи.Недействителен = ЛОЖЬ
		|	И Пользователи.Служебный = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпособыУведомленияВсеПользователи.Пользователь КАК Пользователь,
		|	СпособыУведомленияВсеПользователи.СпособУведомления КАК СпособУведомления,
		|	СпособыУведомленияВсеПользователи.ВидКонтактнойИнформации КАК ВидКонтактнойИнформации,
		|	ЕСТЬNULL(ПользователиКонтактнаяИнформация.Представление, """") КАК ДанныеСпособа,
		|	СпособыУведомленияВсеПользователи.Использовать КАК Использовать,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА СпособыУведомленияВсеПользователи.СпособУведомления = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыУведомления.ПоSMS)
		|				ТОГДА ПОДСТРОКА(ПользователиКонтактнаяИнформация.ЗначенияПолей, 1, 500)
		|			ИНАЧЕ """"
		|		КОНЕЦ, """") КАК ЗначенияПолейXML
		|ПОМЕСТИТЬ КонтактнаяИнформацияПользователей
		|ИЗ
		|	СпособыУведомленияВсеПользователи КАК СпособыУведомленияВсеПользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|		ПО СпособыУведомленияВсеПользователи.Пользователь = ПользователиКонтактнаяИнформация.Ссылка
		|			И СпособыУведомленияВсеПользователи.ВидКонтактнойИнформации = ПользователиКонтактнаяИнформация.Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактнаяИнформацияПользователей.СпособУведомления КАК СпособУведомления,
		|	КонтактнаяИнформацияПользователей.ВидКонтактнойИнформации КАК ВидКонтактнойИнформации,
		|	КонтактнаяИнформацияПользователей.ДанныеСпособа КАК ДанныеСпособа,
		|	ЕСТЬNULL(СпособыУведомленияПользователей.Использовать, ИСТИНА) КАК Использовать,
		|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформацияПользователей.ДанныеСпособа) КАК Представление,
		|	КонтактнаяИнформацияПользователей.ЗначенияПолейXML КАК ЗначенияПолейXML
		|ИЗ
		|	КонтактнаяИнформацияПользователей КАК КонтактнаяИнформацияПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыУведомленияПользователей КАК СпособыУведомленияПользователей
		|		ПО КонтактнаяИнформацияПользователей.Пользователь = СпособыУведомленияПользователей.Пользователь
		|			И КонтактнаяИнформацияПользователей.СпособУведомления = СпособыУведомленияПользователей.СпособУведомления
		|			И КонтактнаяИнформацияПользователей.ДанныеСпособа = СпособыУведомленияПользователей.ДанныеСпособа
		|			И (СпособыУведомленияПользователей.Использовать = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СпособыУведомленияПользователей.СпособУведомления,
		|	СпособыУведомленияПользователей.ВидКонтактнойИнформации,
		|	СпособыУведомленияПользователей.ДанныеСпособа,
		|	СпособыУведомленияПользователей.Использовать,
		|	ПРЕДСТАВЛЕНИЕ(СпособыУведомленияПользователей.ДанныеСпособа),
		|	""""
		|ИЗ
		|	РегистрСведений.СпособыУведомленияПользователей КАК СпособыУведомленияПользователей
		|ГДЕ
		|	СпособыУведомленияПользователей.Пользователь = &Пользователь
		|	И СпособыУведомленияПользователей.ВидКонтактнойИнформации = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
		|	И СпособыУведомленияПользователей.Использовать = ИСТИНА
		|ИТОГИ ПО
		|	СпособУведомления,
		|	ВидКонтактнойИнформации";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьСтруктуруНастроекРеквизитаКонтактнойИнформации(СтрокаНастроек, Значение, ВВидеИдентификатора = Ложь, ДоступностьПоля = Неопределено)
	
	ЗначениеРеквизита	  = ра_ОбменДанными.ПреобразоватьЗначениеВСтроковоеПредставление(Значение, ВВидеИдентификатора);
	ПредставлениеЗначения = ра_ОбменДанными.ПреобразоватьЗначениеВСтроковоеПредставление(Значение, Ложь);
		
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Name", 		 СтрокаНастроек.Имя);
	СтруктураДанных.Вставить("Type", 	     СтрокаНастроек.Тип);
	СтруктураДанных.Вставить("Description",  СтрокаНастроек.Синоним);
	СтруктураДанных.Вставить("Visibility",   СтрокаНастроек.Видимость);
	СтруктураДанных.Вставить("Availability", ?(ДоступностьПоля = Неопределено, СтрокаНастроек.Доступность, ДоступностьПоля));
	СтруктураДанных.Вставить("Required", 	 СтрокаНастроек.ОбязателенДляЗаполнения);
	СтруктураДанных.Вставить("Presentation", ?(ПредставлениеЗначения = Неопределено, "", ПредставлениеЗначения));
	СтруктураДанных.Вставить("Value",        ?(ЗначениеРеквизита = Неопределено, "", ЗначениеРеквизита));
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьПолучитьМассивКолонокСписка() Экспорт
	
	МассивДанных = Новый Массив;
	
	Возврат МассивДанных;
		
КонецФункции

Функция ПолучитьМассивФильтровСписка() Экспорт
	
	МассивДанных = Новый Массив;
	
	Возврат МассивДанных;
		
КонецФункции

// ТСК Ткаченко И.Л.; 17.08.2018; task#971{
Функция ПолучитьМассивЗаголовков(МассивДанных = Неопределено) Экспорт

	МассивЗаголовков = Новый Массив;
	
	Возврат МассивЗаголовков;	
	
КонецФункции	
// ТСК Ткаченко И.Л.; 14.07.2018; task#971}

#КонецОбласти
