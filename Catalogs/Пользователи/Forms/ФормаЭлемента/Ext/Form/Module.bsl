
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ДоступноИзменениеПользователей = Истина;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
			МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
			ДоступноИзменениеПользователей = МодульПользователиСлужебныйВМоделиСервиса.ДоступноИзменениеПользователей();
		КонецЕсли;
		
		Если НЕ ДоступноИзменениеПользователей Тогда
			Если Объект.Ссылка.Пустая() Тогда
				ВызватьИсключение
					НСтр("ru = 'В демонстрационном режиме не поддерживается
					           |создание новых пользователей.'; en = 'In demo mode does not support the creation of new users.'");
			КонецЕсли;
			ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Элементы.ПользовательИБАутентификацияOpenID.Видимость      = Ложь;
		Элементы.ПользовательИБАутентификацияСтандартная.Видимость = Ложь;
		Элементы.ПотребоватьСменуПароляПриВходе.Видимость = Ложь;
		Элементы.ПользовательИБЗапрещеноИзменятьПароль.Видимость = Ложь;
		Элементы.СвойстваАутентификацииОС.Видимость  = Ложь;
		Элементы.ПользовательИБРежимЗапуска.Видимость = Ложь;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоУчебнаяПлатформа() Тогда
		Элементы.СвойстваАутентификацииОС.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Заполнение вспомогательных данных.
	
	// Заполнение списка выбора режимов запуска.
	Для каждого РежимЗапуска Из РежимЗапускаКлиентскогоПриложения Цикл
		ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапуска);
		ИмяЗначения = Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
		Элементы.ПользовательИБРежимЗапуска.СписокВыбора.Добавить(ИмяЗначения, Строка(РежимЗапуска));
	КонецЦикла;
	Элементы.ПользовательИБРежимЗапуска.СписокВыбора.СортироватьПоПредставлению();
	
	// Заполнение списка выбора языка.
	Если Метаданные.Языки.Количество() < 2 Тогда
		Элементы.ПользовательИБЯзык.Видимость = Ложь;
	Иначе
		Для каждого МетаданныеЯзыка Из Метаданные.Языки Цикл
			Элементы.ПользовательИБЯзык.СписокВыбора.Добавить(
				МетаданныеЯзыка.Имя, МетаданныеЯзыка.Синоним);
		КонецЦикла;
	КонецЕсли;
	
	УровеньДоступа = ПользователиСлужебный.УровеньДоступаКСвойствамПользователя(Объект);
	
	// Подготовка к интерактивным действиям с учетом сценариев открытия формы.
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Создание нового элемента.
		Если Параметры.ГруппаНовогоПользователя <> Справочники.РабочиеГруппы.ВсеПользователи Тогда
			ГруппаНовогоПользователя = Параметры.ГруппаНовогоПользователя;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента.
			ЗначениеКопирования = Параметры.ЗначениеКопирования;
			Объект.Наименование = "";
			
			Если Не ПользователиСлужебный.УровеньДоступаПользователяВыше(ЗначениеКопирования, УровеньДоступа) Тогда
				ПрочитатьПользователяИБ(ЗначениеЗаполнено(ЗначениеКопирования.ИдентификаторПользователяИБ));
			Иначе
				ПрочитатьПользователяИБ();
			КонецЕсли;
			
			Если Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
				ВходВПрограммуРазрешен = Ложь;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Ложь;
			КонецЕсли;
		Иначе
			// Добавление элемента.
			
			// Чтение начальных значений свойств пользователя ИБ.
			ПрочитатьПользователяИБ();
			
			ПользовательИБПоказыватьВСпискеВыбора = Ложь;
			ПользовательИБЗапрещеноИзменятьПароль = Истина;
			ПользовательИБАутентификацияОС        = Истина;
			
			Если Не ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
				ПользовательИБАутентификацияСтандартная = Истина;
				
				Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
					ПользовательИБПоказыватьВСпискеВыбора = Ложь;
					ПользовательИБАутентификацияOpenID = Истина;
				КонецЕсли;
				
				Если УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
					ВходВПрограммуРазрешен = Истина;
					ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Открытие существующего элемента.
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриСозданииФормы", ПользовательИБСуществует);
	НачальноеОписаниеПользователяИБ = НачальноеОписаниеПользователяИБ();
	ТребуетсяСинхронизацияССервисом = Объект.Ссылка.Пустая();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "КонтактнаяИнформация");
		ПереопределитьРедактированиеКонтактнойИнформацииВСервисе();
	КонецЕсли;
	
	ОбщаяНастройкаФормы(Истина);
	
	Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Элементы.ОсновныеДанныеИОтступ.ТолькоПросмотр = Истина;
		Элементы.КонтактнаяИнформация.ТолькоПросмотр = Истина;
		Элементы.СтраницаДополнительныеРеквизиты.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация")
		И ДействияСПользователемСервиса <> Неопределено Тогда
			МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
			МодульУправлениеКонтактнойИнформацией.УстановитьДоступностьЭлементовКонтактнойИнформации(ЭтотОбъект,
				ОпределитьДоступностьЭлементовКонтактнойИнформации());
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора();
	
	Если Не ПользователиСлужебныйПовтИсп.Настройки().ОбщиеНастройкиВхода Тогда
		Элементы.ГруппаИзменитьОграничение.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Не Константы.ОграничиватьДоступЧерезВебСерверы.Получить() Тогда
		Элементы.РазрешенныеВебСерверы.Видимость = Ложь;
	КонецЕсли;
	
	Нумерация.ПоказатьИндексНумерации(ЭтаФорма);
	
	// Заполнение реквизитов
	Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		СведенияПользователей = РегистрыСведений.СведенияОПользователяхДокументооборот.Получить(
			Новый Структура("Пользователь", Параметры.ЗначениеКопирования));
		Подразделение = СведенияПользователей.Подразделение;
		Должность = СведенияПользователей.Должность;
		ГрафикРаботы = СведенияПользователей.ГрафикРаботы;
		Ранг = СведенияПользователей.Ранг;
		РангПриОткрытии = Ранг;
	ИначеЕсли ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		Подразделение = Параметры.Подразделение;
	Иначе
		СведенияПользователей = РегистрыСведений.СведенияОПользователяхДокументооборот.Получить(
			Новый Структура("Пользователь", Объект.Ссылка));
		Подразделение = СведенияПользователей.Подразделение;
		Должность = СведенияПользователей.Должность;
		ГрафикРаботы = СведенияПользователей.ГрафикРаботы;
		Ранг = СведенияПользователей.Ранг;
		РангПриОткрытии = Ранг;
	КонецЕсли;
	
	НельзяМенятьПоляСведений = Не ЗначениеЗаполнено(Подразделение);
	Элементы.Должность.ТолькоПросмотр = НельзяМенятьПоляСведений;
	Элементы.Ранг.ТолькоПросмотр = НельзяМенятьПоляСведений;
	Элементы.ГрафикРаботы.ТолькоПросмотр = НельзяМенятьПоляСведений;
	
	Элементы.Ранг.СписокВыбора.Добавить(0, НСтр("ru='Не задан'; en = 'Not set'"));
	Элементы.Ранг.СписокВыбора.Добавить(1, "*");
	Элементы.Ранг.СписокВыбора.Добавить(2, "**");
	Элементы.Ранг.СписокВыбора.Добавить(3, "***");
	Элементы.Ранг.СписокВыбора.Добавить(4, "****");
	
	// Право на редактирование фотографии
	ЕстьПравоРедактирования = Пользователи.ЭтоПолноправныйПользователь()
		// ТСК Близнюк С.И.; 27.12.2018; task#1648{
		Или УровеньДоступа.ра_ДобавлениеИзменениеПользователей 
		// ТСК Близнюк С.И.; 27.12.2018; task#1648}
		// ТСК Близнюк С.И.; 27.12.2018; task#2249{
		Или УровеньДоступа.ра_ДобавлениеИзменениеПользователейПоОрганизации 
		// ТСК Близнюк С.И.; 27.12.2018; task#2249}
		Или (Объект.Ссылка = ПользователиКлиентСервер.ТекущийПользователь());
		
	Если Не Константы.ОграничиватьДоступЧерезВебСерверы.Получить() Тогда
		Элементы.РазрешенныеВебСерверы.Видимость = Ложь;
	КонецЕсли;
	
	// ТСК Близнюк С.И.; 09.01.2019; task#2249{
	// Локальный администратор
	Если УровеньДоступа.НетДоступа И УровеньДоступа.ра_ДобавлениеИзменениеПользователейПоОрганизации Тогда 
		Элементы.ИндексНумерации.Видимость 					= Ложь;
		Элементы.ГруппаНастроек.Видимость 					= Ложь;
		Элементы.ГруппаПодразделениеИРуководитель.Видимость = Ложь;
		Элементы.ГруппаДолжностьИРанг.Видимость 			= Ложь;
		Элементы.ГруппаЛокальныйАдминистратор.Видимость 	= Ложь;
		Элементы.ГрафикРаботы.Видимость 					= Ложь;
		Элементы.ФизическоеЛицо.Видимость 					= Ложь;
		Элементы.ПомещениеТекст.Видимость 					= Ложь;
		Элементы.РазрешенныеВебСерверы.Видимость 			= Ложь;
		Элементы.Комментарий.Видимость						= Ложь;
	КонецЕсли;
	// ТСК Близнюк С.И.; 09.01.2019; task#2249}
	
	НельзяМенятьПоляСведений = Не ЗначениеЗаполнено(Подразделение);
	Элементы.Должность.ТолькоПросмотр = НельзяМенятьПоляСведений;
	Элементы.Ранг.ТолькоПросмотр = НельзяМенятьПоляСведений;
	Элементы.ГрафикРаботы.ТолькоПросмотр = НельзяМенятьПоляСведений;
	Если НельзяМенятьПоляСведений Тогда 
		Руководитель = Неопределено;
		Элементы.ИндексНумерации.ТолькоПросмотр = Истина;
	Иначе 
		Руководитель = ДелопроизводствоКлиентСервер.ПолучитьНепосредственногоРуководителя(
			Подразделение, Объект.Ссылка);
	КонецЕсли;
	
	ОбновитьОтсутствие();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСхемыПомещений")
		И ЗначениеЗаполнено(Объект.Помещение) Тогда
		ПомещениеТекст = ДелопроизводствоКлиентСервер.ПолучитьПолныйПутьКПомещению(
			Объект.Помещение);
	КонецЕсли;
	
	НастройкаПоказаФотографии();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		// Переход к конкретному элементу контактной информации из настройки уведомлений.
		Если ЗначениеЗаполнено(Параметры.ВидКонтактнойИнформации) Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.КонтактнаяИнформация;
			КонтактнаяИнформация = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Вид", Параметры.ВидКонтактнойИнформации);
			ПараметрыОтбора.Вставить("Представление", Параметры.ПредставлениеКонтактнойИнформации);
			СтрокиКонтактнойИнформации = КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиКонтактнойИнформации.Количество() <> 0 Тогда
				Элементы[СтрокиКонтактнойИнформации[0].ИмяРеквизита].АктивизироватьПоУмолчанию = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
	Элементы.ПользовательИБПользовательОС.КнопкаВыбора = Ложь;
	#КонецЕсли
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант")
	   И ВРег(Источник) = ВРег("ИспользоватьВнешнихПользователей") Тогда
		
		ПодключитьОбработчикОжидания("ПриИзмененияИспользованияВнешнихПользователей", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Отсутствие" И Параметр.Сотрудник = Объект.Ссылка Тогда
		ОбновитьОтсутствие();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, "КонтактнаяИнформация");
	КонецЕсли;
	
	Если Не Параметры.Свойство("ТолькоПросмотр") Тогда 
		НастройкаПоказаФотографии();
	КонецЕсли;
	
	ОбщаяНастройкаФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если ВходВПрограммуРазрешен Тогда
		ЗаголовокВопросов = НСтр("ru = 'Запись пользователя информационной базы'; en = 'Save infobase user'");
		
		Если ДействияВФорме.Роли = "Редактирование"
		   И ПользовательИБРоли.Количество() = 0 Тогда
			
			Если НЕ ПараметрыЗаписи.Свойство("СПустымСпискомРолей") Тогда
				Отказ = Истина;
				ПоказатьВопрос(
					Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей", ЭтотОбъект, ПараметрыЗаписи),
					НСтр("ru = 'Пользователю информационной базы не установлено ни одной роли. Продолжить?'; en = 'User infobase does not have any role. Continue?'"),
					РежимДиалогаВопрос.ДаНет,
					,
					,
					ЗаголовокВопросов);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Обработка записи первого администратора.
		Если НЕ ПараметрыЗаписи.Свойство("ССозданиемПервогоАдминистратора") Тогда
			ТекстВопроса = "";
			Если ТребуетсяСоздатьПервогоАдминистратора(ТекстВопроса) Тогда
				Отказ = Истина;
				ПоказатьВопрос(
					Новый ОписаниеОповещения("ПослеПодтвержденияСозданияПервогоАдминистратора", ЭтотОбъект, ПараметрыЗаписи),
					ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопросов);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РазделениеВключено
		И ТребуетсяСинхронизацияССервисом
		И ПарольПользователяСервиса = Неопределено Тогда
		
		Отказ = Истина;
		СтандартныеПодсистемыКлиент.ПриЗапросеПароляДляАутентификацииВСервисе(
			Новый ОписаниеОповещения("ПослеЗапросаПароляДляАутентификацииВСервисеПередЗаписью", ЭтотОбъект, ПараметрыЗаписи),
			ЭтотОбъект,
			ПарольПользователяСервиса);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗначениеКопирования", ЗначениеКопирования);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПарольПользователяСервиса", ПарольПользователяСервиса);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СинхронизироватьССервисом", ТребуетсяСинхронизацияССервисом);
	
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		
		Если ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ) Тогда
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", Объект.ИдентификаторПользователяИБ);
		КонецЕсли;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
				
		Если ПараметрыЗаписи.Свойство("ССозданиемПервогоАдминистратора") Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("СозданиеАдминистратора",
				НСтр("ru = 'Первый пользователь информационной базы назначается администратором.'; en = 'The first infobase user is assigned as the administrator.'"));
		КонецЕсли;
	КонецЕсли;
	// ТСК Близнюк С.И.; 12.09.2018; task#465{
	Если ра_ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		
		ра_ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		
		ра_ОписаниеПользователяИБ.Вставить("Имя", ЭтотОбъект.ра_ПользовательИБИмя);
		ра_ОписаниеПользователяИБ.Вставить("ПользовательОС", ЭтотОбъект.ра_ПользовательИБПользовательОС);
		
		Если ЗначениеЗаполнено(Объект.ра_ИдентификаторПользователяИБ) Тогда
			ра_ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", Объект.ра_ИдентификаторПользователяИБ);
		КонецЕсли;
		ра_ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ра_ОписаниеПользователяИБ", ра_ОписаниеПользователяИБ);
		
	КонецЕсли;
	// ТСК Близнюк С.И.; 12.09.2018; task#465}
	
	Если ДействияВФорме.СвойстваЭлемента <> "Редактирование" Тогда
		ЗаполнитьЗначенияСвойств(ТекущийОбъект, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ТекущийОбъект.Ссылка, "Наименование, ПометкаУдаления"));
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ГруппаНовогоПользователя", ГруппаНовогоПользователя);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		Если НЕ Отказ И ДействияВФорме.КонтактнаяИнформация = "Редактирование" Тогда
			МодульУправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ПредставлениеВДокументах) Тогда
		Попытка
			ТекущийОбъект.ПредставлениеВДокументах = ВычислитьПредставлениеВДокументах(ТекущийОбъект);
		Исключение
			ТекущийОбъект.ПредставлениеВДокументах = ТекущийОбъект.Наименование;
		КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ПредставлениеВПереписке) Тогда
		ТекущийОбъект.ПредставлениеВПереписке = ТекущийОбъект.Наименование;
	КонецЕсли;
	
	РангСтрокой = ПользователиДокументооборот.ПолучитьСтрокуРанга(Ранг);
	ТекущийОбъект.ПредставлениеВПерепискеСРангом = ТекущийОбъект.ПредставлениеВПереписке;
	Если ЗначениеЗаполнено(РангСтрокой) Тогда
		ТекущийОбъект.ПредставлениеВПерепискеСРангом = ТекущийОбъект.ПредставлениеВПереписке + " " + РангСтрокой;
	КонецЕсли;
	
	// Сохраним язык пользователя в ИБ.
	ТекущийОбъект.КодЯзыка = "";
	Если ЗначениеЗаполнено(ПользовательИБЯзык)
		И Метаданные.Языки.Количество() >= 2 Тогда
		ЯзыкМетаданных = Метаданные.Языки.Найти(ПользовательИБЯзык);
		Если ЯзыкМетаданных <> Неопределено Тогда
			ТекущийОбъект.КодЯзыка = ЯзыкМетаданных.КодЯзыка;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийОбъект.Подразделение <> Подразделение Тогда 
		ТекущийОбъект.Подразделение = Подразделение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	ПользователиСлужебный.ЗаписатьСведенияОПользователе(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	ТребуетсяСинхронизацияССервисом = Ложь;
	
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ПараметрыЗаписи.Вставить(
			ТекущийОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ.РезультатДействия);
	КонецЕсли;
	
	ОбщаяНастройкаФормы(, ПараметрыЗаписи);
	
	// Запись подразделения и должности
	Сведения = Новый Структура;
	Сведения.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Сведения.Вставить("Должность", Справочники.Должности.ПустаяСсылка());
	Сведения.Вставить("ГрафикРаботы", Справочники.ГрафикиРаботы.ПустаяСсылка());
	Сведения.Вставить("Ранг", 0);
	
	ЗаписьРегистра = РегистрыСведений.СведенияОПользователяхДокументооборот.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Пользователь = ТекущийОбъект.Ссылка;
	ЗаписьРегистра.Прочитать();
	
	ЕстьЗапись = ЗаписьРегистра.Выбран();
	Если ЕстьЗапись Тогда
		ЗаполнитьЗначенияСвойств(Сведения, ЗаписьРегистра);
	КонецЕсли;
	
	Если Сведения.Подразделение <> Подразделение
		Или Сведения.Должность <> Должность 
		Или Сведения.ГрафикРаботы <> ГрафикРаботы
		Или Сведения.Ранг <> Ранг Тогда
		
		Набор = РегистрыСведений.СведенияОПользователяхДокументооборот.СоздатьНаборЗаписей();
		Набор.Отбор.Пользователь.Установить(ТекущийОбъект.Ссылка);
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			
			НоваяЗапись = Набор.Добавить();
			НоваяЗапись.Пользователь = ТекущийОбъект.Ссылка;
			НоваяЗапись.Подразделение = Подразделение;
			НоваяЗапись.Должность = Должность;
			НоваяЗапись.ГрафикРаботы = ГрафикРаботы;
			НоваяЗапись.Ранг = Ранг;
			
		КонецЕсли;
		
		Набор.Записать();
		
	КонецЕсли;
	
	ИндексНумерации = СокрЛП(ИндексНумерации);
	Если ИндексНумерации <> ИндексНумерацииПриОткрытии Тогда 
		Если ЗначениеЗаполнено(ИндексНумерации) Тогда 
			РегистрыСведений.ИндексыНумерации.ЗаписатьИндексНумерации(Объект.Ссылка, ИндексНумерации);
		Иначе 
			РегистрыСведений.ИндексыНумерации.УдалитьИндексНумерации(Объект.Ссылка);
		КонецЕсли;
		
		ИндексНумерацииПриОткрытии = ИндексНумерации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Пользователи", Новый Структура, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ДобавленПользовательИБ") Тогда
		Оповестить("ДобавленПользовательИБ", ПараметрыЗаписи.ДобавленПользовательИБ, ЭтотОбъект);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ИзмененПользовательИБ") Тогда
		Оповестить("ИзмененПользовательИБ", ПараметрыЗаписи.ИзмененПользовательИБ, ЭтотОбъект);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("УдаленПользовательИБ") Тогда
		Оповестить("УдаленПользовательИБ", ПараметрыЗаписи.УдаленПользовательИБ, ЭтотОбъект);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ОчищеноСопоставлениеСНесуществующимПользователемИБ") Тогда
		Оповестить(
			"ОчищеноСопоставлениеСНесуществующимПользователемИБ",
			ПараметрыЗаписи.ОчищеноСопоставлениеСНесуществующимПользователемИБ,
			ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаНовогоПользователя) Тогда
		ОповеститьОбИзменении(ГруппаНовогоПользователя);
		Оповестить("Запись_РабочиеГруппы", Новый Структура, ГруппаНовогоПользователя);
		ГруппаНовогоПользователя = Неопределено;
	КонецЕсли;
	
	// Изменение подразделения
	Оповестить("ИзмененоПодразделениеПользователя", Объект.Ссылка, ЭтаФорма);
	Оповестить("Запись_Пользователь", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Вставить("ИдентификаторПользователяИБ", Объект.ИдентификаторПользователяИБ);
		ПользователиСлужебный.ПроверитьОписаниеПользователяИБ(ОписаниеПользователяИБ, Отказ);
	КонецЕсли;
	
	Если ВходВПрограммуРазрешен
	   И ЗначениеЗаполнено(СрокДействия)
	   И СрокДействия <= НачалоДня(ТекущаяДатаСеанса()) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ограничение должно быть до завтра или более.'; en = 'Restriction must be till tomorrow or more.'"),, "ВходВПрограммуРазрешен",, Отказ);
	КонецЕсли;
	
	// Проверка наличия ролей в метаданных.
	Если Не Элементы.Роли.ТолькоПросмотр Тогда
		Ошибки = Неопределено;
		ЭлементыДерева = Роли.ПолучитьЭлементы();
		Для Каждого Строка Из ЭлементыДерева Цикл
			Если Не Строка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			Если Строка.ЭтоНесуществующаяРоль Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Роли[%1].РолиСиноним",
					СтрШаблон(НСтр("ru = 'Роль ""%1"" не найдена в метаданных.'; en = 'Role ""%1"" is not found in metadata.'"), Строка.Синоним),
					"Роли",
					ЭлементыДерева.Индекс(Строка),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Роль ""%1"" в строке %%1 не найдена в метаданных.'; en = 'Role ""%1"" in the string %%1 is not found in metadata.'"), Строка.Синоним));
			КонецЕсли;
			Если Строка.ЭтоНедоступнаяРоль Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Роли[%1].РолиСиноним",
					СтрШаблон(НСтр("ru = 'Роль ""%1"" недоступна для пользователей.'; en = 'Role ""%1"" is not available for users.'"), Строка.Синоним),
					"Роли",
					ЭлементыДерева.Индекс(Строка),
					СтрШаблон(НСтр("ru = 'Роль ""%1"" в строке %%1 недоступна для пользователей.'; en = 'Role ""%1"" in the string %%1 is not available for users.'"), Строка.Синоним));
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ПроверитьЗаполнениеEmail(Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Проверка подразделения и должности
	Если ЗначениеЗаполнено(Должность) Тогда 
		ПроверяемыеРеквизиты.Добавить("Подразделение");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриЗагрузкеНастроек", Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаполнитьИзПользователяИБ(Команда)
	
	ЗаполнитьПоляПоПользователюИБНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	// ТСК Близнюк С.И.; 20.12.2018; task#2270{
	//ОбновитьИмяДляВхода(ЭтотОбъект, Истина);
	// ТСК Близнюк С.И.; 20.12.2018; task#2270}
		
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	
	Если Объект.Недействителен Тогда
		ВходВПрограммуРазрешен = Ложь;
	Иначе
		ВходВПрограммуРазрешен = ВходВПрограммуРазрешенЗначениеПрямогоИзменения
			И (ПользовательИБАутентификацияOpenID
			   Или ПользовательИБАутентификацияСтандартная
			   Или ПользовательИБАутентификацияОС);
	КонецЕсли;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходВПрограммуРазрешенПриИзменении(Элемент)
	
	Если Объект.ПометкаУдаления И ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = Ложь;
		ПоказатьПредупреждение(,
			НСтр("ru = 'Чтобы разрешить вход в программу, требуется снять
			           |пометку на удаление с этого пользователя.'; en = 'To allow access to the program you want to unmark for deletion with this user.'"));
		Возврат;
	КонецЕсли;
	
	ОбновитьИмяДляВхода(ЭтотОбъект);
	
	Если ВходВПрограммуРазрешен
	   И НЕ ПользовательИБАутентификацияOpenID
	   И НЕ ПользовательИБАутентификацияСтандартная
	   И НЕ ПользовательИБАутентификацияОС Тогда
	
		ПользовательИБАутентификацияСтандартная = Истина;
	КонецЕсли;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
	Если Не УровеньДоступа.ИзменениеРазрешенияНаВход
	   И Не ВходВПрограммуРазрешен Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'После записи вход в программу сможет разрешить только администратор.'; en = 'After recording input in the program will be able to allow only administrator.'"));
	КонецЕсли;
	
	ВходВПрограммуРазрешенЗначениеПрямогоИзменения = ВходВПрограммуРазрешен;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограмму(Команда)
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ОграничениеНаВходВПрограмму",, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ИзменитьОграничениеНаВходВПрограммуЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияСтандартнаяПриИзменении(Элемент)
	
	АутентификацияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеПриИзменении(Элемент)
	
	Если ПотребоватьСменуПароляПриВходе Тогда
		ПользовательИБЗапрещеноИзменятьПароль = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПоказыватьВСпискеВыбораПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБЗапрещеноИзменятьПарольПриИзменении(Элемент)
	
	Если ПользовательИБЗапрещеноИзменятьПароль Тогда
		ПотребоватьСменуПароляПриВходе = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияOpenIDПриИзменении(Элемент)
	
	АутентификацияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияОСПриИзменении(Элемент)
	
	АутентификацияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПользовательОСПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если НЕ ВебКлиент Тогда
		ОткрытьФорму("Справочник.Пользователи.Форма.ВыборПользователяОперационнойСистемы", , Элемент);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБИмяПриИзменении(Элемент)
	
	ПользовательИБИмя = СокрЛП(ПользовательИБИмя);
	ПользовательИБИмяЗначениеПрямогоИзменения = ПользовательИБИмя;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБЯзыкПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБРежимЗапускаПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБРежимЗапускаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ТекущаяСтраница.Имя = "СтраницаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поддержка контактной информации.

&НаКлиенте
Процедура Подключаемый_EMailПриИзменении(Элемент)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		
	МодульУправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКИ = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	СтрокаEMail = ТаблицаКИ.НайтиСтроки(Новый Структура("Вид",
		ВидКонтактнойИнформацииEmailПользователя()))[0];
	
	Если ЗначениеЗаполнено(ЭтотОбъект[СтрокаEMail.ИмяРеквизита]) Тогда
		ПользовательИБПароль = "" + Новый УникальныйИдентификатор + "qQ";
	КонецЕсли;
	
	УстановитьНаличиеПароля(ЭтотОбъект, ЗначениеЗаполнено(ПользовательИБПароль));
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТелефонПриИзменении(Элемент)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	
	МодульУправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_EMailНачалоВыбора(Элемент)
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РазделениеВключено
	   И ПарольПользователяСервиса = Неопределено Тогда
	
		СтандартныеПодсистемыКлиент.ПриЗапросеПароляДляАутентификацииВСервисе(
			Новый ОписаниеОповещения("Подключаемый_EMailНачалоВыбораЗавершение", ЭтотОбъект),
			ЭтотОбъект,
			ПарольПользователяСервиса);
	Иначе
		Подключаемый_EMailНачалоВыбораЗавершение(Null, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_EMailНачалоВыбораЗавершение(НовыйПарольПользователяСервиса, Неопределен) Экспорт
	
	Если НовыйПарольПользователяСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НовыйПарольПользователяСервиса <> Null Тогда
		ПарольПользователяСервиса = НовыйПарольПользователяСервиса;
	КонецЕсли;
	
	ТаблицаКИ = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформацииEmailПользователя());
	
	СтрокаEMail = ТаблицаКИ.НайтиСтроки(Отбор)[0];
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПарольПользователяСервиса", ПарольПользователяСервиса);
	ПараметрыФормы.Вставить("СтараяПочта",  ЭтотОбъект[СтрокаEMail.ИмяРеквизита]);
	ПараметрыФормы.Вставить("Пользователь", Объект.Ссылка);
	
	Попытка
		ОткрытьФорму("Справочник.Пользователи.Форма.СменаПочты", ПараметрыФормы, ЭтотОбъект);
	Исключение
		ПарольПользователяСервиса = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРоли

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей.

&НаКлиенте
Процедура РолиПометкаПриИзменении(Элемент)
	
	Если Элементы.Роли.ТекущиеДанные <> Неопределено Тогда
		Если Элементы.Роли.ТекущиеДанные.Имя = "ПолныеПрава" Тогда
			УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
		КонецЕсли;
		ОбработатьИнтерфейсРолей("ОбновитьСоставРолей");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СменитьПароль(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВернутьПарольБезУстановки", Истина);
	ДополнительныеПараметры.Вставить("СтарыйПароль", ПользовательИБСтарыйПароль);
	
	ПользователиСлужебныйКлиент.ОткрытьФормуСменыПароля(Объект.Ссылка, Новый ОписаниеОповещения(
		"СменитьПарольПослеПолученияПароля", ЭтотОбъект), ДополнительныеПараметры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей.

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ТолькоВыбранныеРоли");
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаРолейПоПодсистемам(Команда)
	
	ОбработатьИнтерфейсРолей("ГруппировкаПоПодсистемам");
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ВключитьВсе");
	
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ИсключитьВсе");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поддержка дополнительных реквизитов.

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РолиПометка.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Роли.Имя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'ПолныеПрава'; en = 'FullAccess'");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапретИзмененияАдминистративногоДоступа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РолиПометка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РолиСиноним.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Роли.Имя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'ПолныеПрава'; en = 'FullAccess'");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапретИзмененияАдминистративногоДоступа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененияИспользованияВнешнихПользователей()
	
	ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора()
	
	Элементы.ПользовательИБПоказыватьВСпискеВыбора.Видимость =
		  Не ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей")
	
КонецПроцедуры

&НаСервере
Процедура ОбщаяНастройкаФормы(ПриСозданииНаСервере = Ложь, ПараметрыЗаписи = Неопределено)
	
	Если НачальноеОписаниеПользователяИБ = Неопределено Тогда
		Возврат; // Вызов ПриЧтенииНаСервере до вызова ПриСозданииНаСервере.
	КонецЕсли;
	
	Если Не ПриСозданииНаСервере Тогда
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПользователиСлужебный.ПрочитатьСведенияОПользователе(ЭтотОбъект);
	УстановитьПривилегированныйРежим(Ложь);
	
	УровеньДоступа = ПользователиСлужебный.УровеньДоступаКСвойствамПользователя(Объект);
	
	ОпределитьДействияВФорме();
	
	ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи);
	
	ОбработатьИнтерфейсРолей("УстановитьТолькоПросмотрРолей",
		    ПользователиСлужебный.ЗапретРедактированияРолей()
		Или ДействияВФорме.Роли <> "Редактирование"
		Или Не УровеньДоступа.НастройкиДляВхода);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		ДействияСПользователемСервиса = МодульПользователиСлужебныйВМоделиСервиса.ПолучитьДействияСПользователемСервиса(
			Объект.Ссылка);
	КонецЕсли;
	
	// Настройка возможности просмотра.
	Элементы.КонтактнаяИнформация.Видимость   = ЗначениеЗаполнено(ДействияВФорме.КонтактнаяИнформация);
	Элементы.СвойстваПользователяИБ.Видимость = ЗначениеЗаполнено(ДействияВФорме.СвойстваПользователяИБ);
	
	ВыводитьСписокРолей = ЗначениеЗаполнено(ДействияВФорме.Роли);
	Элементы.ОтображениеРолей.Видимость = ВыводитьСписокРолей;
	Элементы.СвойстваАутентификации1СПредприятия.Отображение =
		?(ВыводитьСписокРолей, ОтображениеОбычнойГруппы.Нет, ОтображениеОбычнойГруппы.ОбычноеВыделение);
	
	Элементы.РекомендуетсяПроверитьНастройкиДляВхода.Видимость =
		УровеньДоступа.ИзменениеРазрешенияНаВход И Объект.Подготовлен И Не ПриЧтенииВходВПрограммуРазрешен;
	
	// Настройка возможности изменения.
	Если Объект.Служебный Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	Элементы.ГруппаСлужебныйПользователь.Видимость = Объект.Служебный;
	
	ТолькоПросмотр = ТолькоПросмотр
		ИЛИ ДействияВФорме.Роли                   <> "Редактирование"
		  И ДействияВФорме.СвойстваЭлемента       <> "Редактирование"
		  И ДействияВФорме.КонтактнаяИнформация   <> "Редактирование"
		  И ДействияВФорме.СвойстваПользователяИБ <> "Редактирование";
	
	Элементы.Наименование.ТолькоПросмотр =
		Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);
	
	Элементы.Недействителен.ТолькоПросмотр = Элементы.Наименование.ТолькоПросмотр;
	Элементы.ФизическоеЛицо.ТолькоПросмотр = Элементы.Наименование.ТолькоПросмотр;
	Элементы.Подразделение.ТолькоПросмотр  = Элементы.Наименование.ТолькоПросмотр;
	
	Элементы.ОсновныеСвойства.ТолькоПросмотр =
		Не (  ДействияВФорме.СвойстваПользователяИБ = "Редактирование"
		    И (УровеньДоступа.УправлениеСписком Или УровеньДоступа.ИзменениеТекущего));
	
	Элементы.ПользовательИБИмя1.ТолькоПросмотр                      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБИмя2.ТолькоПросмотр                      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияСтандартная.ТолькоПросмотр = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияOpenID.ТолькоПросмотр      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияОС.ТолькоПросмотр          = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБПользовательОС.ТолькоПросмотр            = Не УровеньДоступа.НастройкиДляВхода;
	
	Элементы.ПользовательИБПоказыватьВСпискеВыбора.ТолькоПросмотр = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПотребоватьСменуПароляПриВходе.ТолькоПросмотр        = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИБЗапрещеноИзменятьПароль.ТолькоПросмотр = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИБРежимЗапуска.ТолькоПросмотр            = Не УровеньДоступа.УправлениеСписком;
	
	Элементы.Комментарий.ТолькоПросмотр =
		Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеОбъекта(ОбъектМетаданных)
	
	Если ЗначениеЗаполнено(ОбъектМетаданных.ПредставлениеОбъекта) Тогда
		Возврат ОбъектМетаданных.ПредставлениеОбъекта;
	КонецЕсли;
	
	Возврат ОбъектМетаданных.Представление();
	
КонецФункции

// Продолжение обработчика события ПередЗаписью.
&НаКлиенте
Процедура ПослеЗапросаПароляДляАутентификацииВСервисеПередЗаписью(НовыйПарольПользователяСервиса, ПараметрыЗаписи) Экспорт
	
	Если НовыйПарольПользователяСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПарольПользователяСервиса = НовыйПарольПользователяСервиса;
	
	Попытка
		Записать(ПараметрыЗаписи);
	Исключение
		ПарольПользователяСервиса = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИмяДляВхода(Форма, ПриИзмененииНаименования = Ложь)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
			
	//Обновление имени пользователя
	Если ЗначениеЗаполнено(Форма.ПользовательИБПользовательОС) Тогда
		
		КраткоеИмя  = СтрЗаменить(Форма.ПользовательИБПользовательОС, "\\", "");
		МассивИмени = СтрРазделить(КраткоеИмя, "\");
		Форма.ПользовательИБИмя = СтрШаблон("%1@%2",?(МассивИмени.Количество(), МассивИмени[1], ""), МассивИмени[0]);
		
		// ТСК Близнюк С.И.; 20.12.2018; task#2270{
		Если НЕ СтрНайти(Форма.ПользовательИБИмя, "inter.interatom.local") И СтрНайти(Форма.ПользовательИБИмя, "inter") Тогда
			Форма.ПользовательИБИмя  = СтрЗаменить(Форма.ПользовательИБИмя, "inter", "inter.interatom.local");
		КонецЕсли;
		// ТСК Близнюк С.И.; 20.12.2018; task#2270}
		
	КонецЕсли;
	//
	
	Если Форма.ПользовательИБСуществует Тогда
		Возврат;
	КонецЕсли;

	
	КраткоеИмя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(Форма.Объект.Наименование);
	
	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = Элементы.ИмяБезОтметкиНезаполненного Тогда
		
		Если Не ЗначениеЗаполнено(Форма.ПользовательИБИмяЗначениеПрямогоИзменения)
		   И Форма.ПользовательИБИмя = КраткоеИмя Тогда
			
			Форма.ПользовательИБИмя = "";
		КонецЕсли;
	Иначе
		Если ПриИзмененииНаименования
		 Или Не ЗначениеЗаполнено(Форма.ПользовательИБИмя) Тогда
			
			Форма.ПользовательИБИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияПриИзменении()
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	Если НЕ ПользовательИБАутентификацияOpenID
	   И НЕ ПользовательИБАутентификацияСтандартная
	   И НЕ ПользовательИБАутентификацияОС Тогда
	
		ВходВПрограммуРазрешен = Ложь;
		
	ИначеЕсли Не ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = ВходВПрограммуРазрешенЗначениеПрямогоИзменения;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры СменитьПароль.
&НаКлиенте
Процедура СменитьПарольПослеПолученияПароля(Результат, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательИБПароль       = Результат.НовыйПароль;
	ПользовательИБСтарыйПароль = Результат.СтарыйПароль;
	
	Если Результат.СтарыйПароль <> Неопределено Тогда
		ПарольПользователяСервиса  = Результат.СтарыйПароль;
	КонецЕсли;
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
	УстановитьНаличиеПароля(ЭтотОбъект, ЗначениеЗаполнено(ПользовательИБПароль));
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНаличиеПароля(Форма, ПарольУстановлен)
	
	ПользователиСлужебныйКлиентСервер.УстановитьНаличиеПароля(Форма, ПарольУстановлен);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДействияВФорме()
	
	ДействияВФорме = Новый Структура;
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("Роли", "");
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("КонтактнаяИнформация", "Просмотр");
	
	// "", "ПросмотрВсех", "Редактирование".
	ДействияВФорме.Вставить("СвойстваПользователяИБ", "");
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("СвойстваЭлемента", "Просмотр");
	
	Если Не УровеньДоступа.АдминистраторСистемы
	   И УровеньДоступа.ПолныеПрава
	   И Пользователи.ЭтоПолноправныйПользователь(Объект.Ссылка, Истина) Тогда
		
		// Администратор системы доступен только на просмотр.
		ДействияВФорме.Роли                   = "Просмотр";
		ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
	
	ИначеЕсли УровеньДоступа.АдминистраторСистемы
	   ИЛИ УровеньДоступа.ПолныеПрава Тогда
		
		ДействияВФорме.Роли                   = "Редактирование";
		ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
	Иначе
		Если УровеньДоступа.ИзменениеТекущего Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
			ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		КонецЕсли;
		
		Если УровеньДоступа.УправлениеСписком Тогда
			// Ответственный за список пользователей и рабочих групп
			// (Исполнитель распоряжений о приеме на работу и переводу,
			//  переназначению, созданию отделов, подразделений и рабочих групп).
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
			ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
			ДействияВФорме.СвойстваЭлемента       = "Редактирование";
			
			Если УровеньДоступа.НастройкиДляВхода Тогда
				ДействияВФорме.Роли = "Редактирование";
			КонецЕсли;
			Если Пользователи.ЭтоПолноправныйПользователь(Объект.Ссылка) Тогда
				ДействияВФорме.Роли = "Просмотр";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	 // ТСК Близнюк С.И.; 27.12.2018; task#1648,2249{
	Если  УровеньДоступа.ра_ДобавлениеИзменениеПользователей
		ИЛИ УровеньДоступа.ра_ДобавлениеИзменениеПользователейПоОрганизации Тогда
		
		ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
	КонецЕсли;
	 // ТСК Близнюк С.И.; 27.12.2018; task#1648,2249{
	
	ПользователиСлужебный.ПриОпределенииДействийВФорме(Объект.Ссылка, ДействияВФорме);
	
	// Проверка имен действий в форме.
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";
		
	ИначеЕсли ДействияВФорме.Роли = "Редактирование"
	        И ПользователиСлужебный.ЗапретРедактированияРолей() Тогда
		
		ДействияВФорме.Роли = "Просмотр";
	КонецЕсли;
	
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.КонтактнаяИнформация + ",") = 0 Тогда
		ДействияВФорме.КонтактнаяИнформация = "";
	КонецЕсли;
	
	Если СтрНайти(", Просмотр, ПросмотрВсех, Редактирование, РедактированиеСвоих, РедактированиеВсех,",
	           ", " + ДействияВФорме.СвойстваПользователяИБ + ",") = 0 Тогда
		
		ДействияВФорме.СвойстваПользователяИБ = "";
		
	Иначе // Поддержка обратной совместимости.
		Если СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Просмотр") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
			
		ИначеЕсли СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Редактирование") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;
	
	Если Объект.Служебный Тогда
		Если ДействияВФорме.Роли = "Редактирование" Тогда
			ДействияВФорме.Роли = "Просмотр";
		КонецЕсли;
		
		Если ДействияВФорме.КонтактнаяИнформация = "Редактирование" Тогда
			ДействияВФорме.КонтактнаяИнформация = "Просмотр";
		КонецЕсли;
		
		Если ДействияВФорме.СвойстваПользователяИБ = "Редактирование" Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
		КонецЕсли;
		
		Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
			ДействияВФорме.СвойстваЭлемента = "Просмотр";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеПользователяИБ(ДляПроверкиПервогоАдминистратора = Ложь)
	
	Если УровеньДоступа.УправлениеСписком
	   И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		
		ПользовательИБПолноеИмя = Объект.Наименование;
	КонецЕсли;
	
	Если УровеньДоступа.АдминистраторСистемы
	 Или УровеньДоступа.ПолныеПрава Тогда
		
		Результат = Пользователи.НовоеОписаниеПользователяИБ();
		Пользователи.СкопироватьСвойстваПользователяИБ(
			Результат,
			ЭтотОбъект,
			,
			"УникальныйИдентификатор,
			|Роли",
			"ПользовательИБ");
		
		Результат.Вставить("ВходВПрограммуРазрешен", ВходВПрограммуРазрешен);
	Иначе
		Результат = Новый Структура;
		
		Если УровеньДоступа.ИзменениеТекущего Тогда
			Результат.Вставить("Пароль", ПользовательИБПароль);
			Результат.Вставить("Язык",   ПользовательИБЯзык);
		КонецЕсли;
		
		Если УровеньДоступа.УправлениеСписком Тогда
			Результат.Вставить("ВходВПрограммуРазрешен",  ВходВПрограммуРазрешен);
			Результат.Вставить("ПоказыватьВСпискеВыбора", ПользовательИБПоказыватьВСпискеВыбора
				И Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"));
			Результат.Вставить("ЗапрещеноИзменятьПароль", ПользовательИБЗапрещеноИзменятьПароль);
			Результат.Вставить("Язык",                    ПользовательИБЯзык);
			Результат.Вставить("РежимЗапуска",            ПользовательИБРежимЗапуска);
			
			Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
				Результат.Вставить("ПолноеИмя", ПользовательИБПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		
		Если УровеньДоступа.НастройкиДляВхода Тогда
			Результат.Вставить("АутентификацияСтандартная", ПользовательИБАутентификацияСтандартная);
			Результат.Вставить("Имя",                       ПользовательИБИмя);
			Результат.Вставить("Пароль",                    ПользовательИБПароль);
			Результат.Вставить("АутентификацияOpenID",      ПользовательИБАутентификацияOpenID);
			Результат.Вставить("АутентификацияОС",          ПользовательИБАутентификацияОС);
			Результат.Вставить("ПользовательОС",            ПользовательИБПользовательОС);
		КонецЕсли;
	КонецЕсли;
	
	Если Не УровеньДоступа.НастройкиДляВхода Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПользователиСлужебный.ЗапретРедактированияРолей() Тогда
		ТекущиеРоли = ПользовательИБРоли.Выгрузить(, "Роль").ВыгрузитьКолонку("Роль");
		Результат.Вставить("Роли", ТекущиеРоли);
	КонецЕсли;
	
	Если ДляПроверкиПервогоАдминистратора Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Добавление ролей требуемых при создании первого администратора.
	Если ПользователиСлужебный.ТребуетсяСоздатьПервогоАдминистратора(Результат) Тогда
		
		Если Результат.Свойство("Роли") И Результат.Роли <> Неопределено Тогда
			РолиАдминистратора = Результат.Роли;
		Иначе
			РолиАдминистратора = Новый Массив;
		КонецЕсли;
		
		Если РолиАдминистратора.Найти("ПолныеПрава") = Неопределено Тогда
			РолиАдминистратора.Добавить("ПолныеПрава");
		КонецЕсли;
		
		ИмяРолиАдминистратораСистемы = Пользователи.РольАдминистратораСистемы().Имя;
		Если РолиАдминистратора.Найти(ИмяРолиАдминистратораСистемы) = Неопределено Тогда
			РолиАдминистратора.Добавить(ИмяРолиАдминистратораСистемы);
		КонецЕсли;
		Результат.Вставить("Роли", РолиАдминистратора);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТребуетсяСоздатьПервогоАдминистратора(ТекстВопроса = Неопределено)
	
	Возврат ПользователиСлужебный.ТребуетсяСоздатьПервогоАдминистратора(
		ОписаниеПользователяИБ(Истина), ТекстВопроса);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНеобходимостьСинхронизацииССервисом(Форма)
	
	Форма.ТребуетсяСинхронизацияССервисом = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("СПустымСпискомРолей");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияСозданияПервогоАдминистратора(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		ПараметрыЗаписи.Вставить("ССозданиемПервогоАдминистратора");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поддержка контактной информации.

&НаСервере
Функция Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	
	МодульУправлениеКонтактнойИнформацией =
		ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	Возврат МодульУправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(
		ЭтотОбъект, Объект, Результат);
	
КонецФункции

&НаСервере
Процедура ПереопределитьРедактированиеКонтактнойИнформацииВСервисе()
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	КонтактнаяИнформация = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	СтрокаEMail = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники["ВидыКонтактнойИнформации"].EmailПользователя))[0];
	ЭлементEMail = Элементы[СтрокаEMail.ИмяРеквизита];
	ЭлементEMail.УстановитьДействие("ПриИзменении", "Подключаемый_EMailПриИзменении");
	ЭлементEMail.АвтоОтметкаНезаполненного = Истина;
	
	ЭлементEMail.КнопкаВыбора = Истина;
	ЭлементEMail.УстановитьДействие("НачалоВыбора", "Подключаемый_EMailНачалоВыбора");
	
	СтрокаТелефон = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники["ВидыКонтактнойИнформации"].ТелефонПользователя))[0];
	ЭлементТелефон = Элементы[СтрокаТелефон.ИмяРеквизита];
	ЭлементТелефон.УстановитьДействие("ПриИзменении", "Подключаемый_ТелефонПриИзменении");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидКонтактнойИнформацииEmailПользователя()
	
	ИмяПредопределенногоЗначения = "Справочник." + "ВидыКонтактнойИнформации" + ".EmailПользователя";
	
	Возврат ПредопределенноеЗначение(ИмяПредопределенногоЗначения);
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеEmail(Отказ)
	
	ТаблицаКИ = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	СтрокаEMail = ТаблицаКИ.НайтиСтроки(Новый Структура("Вид",
		ВидКонтактнойИнформацииEmailПользователя()))[0];
	
	Если ЗначениеЗаполнено(ЭтотОбъект[СтрокаEMail.ИмяРеквизита]) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Не заполнен адрес электронной почты'; en = 'Not filled email address'"),,
		СтрокаEMail.ИмяРеквизита,, Отказ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Поддержка дополнительных реквизитов.

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка пользователя ИБ

&НаСервере
Функция НачальноеОписаниеПользователяИБ()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НачальноеОписаниеПользователяИБ <> Неопределено Тогда
		НачальноеОписаниеПользователяИБ.Роли = Новый Массив;
		Возврат НачальноеОписаниеПользователяИБ;
	КонецЕсли;
	
	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
	Иначе
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора =
			НЕ Константы.ИспользоватьВнешнихПользователей.Получить();
	КонецЕсли;
	ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
	ОписаниеПользователяИБ.Роли = Новый Массив;
	
	Возврат ОписаниеПользователяИБ;
	
КонецФункции

&НаСервере
Процедура ПрочитатьПользователяИБ(ПриКопированииЭлемента = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрочитанныеСвойства      = Неопределено;
	ОписаниеПользователяИБ   = НачальноеОписаниеПользователяИБ();
	ПользовательИБСуществует = Ложь;
	ПользовательИБОсновной   = Ложь;
	ВходВПрограммуРазрешен   = Ложь;
	ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Ложь;
	
	Если ПриКопированииЭлемента Тогда
		
		Если Пользователи.ПрочитатьПользователяИБ(
		         Параметры.ЗначениеКопирования.ИдентификаторПользователяИБ,
		         ПрочитанныеСвойства) Тогда
			
			// Сопоставление пользователя ИБ с пользователем в справочнике.
			Если Пользователи.ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен = Истина;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Истина;
			КонецЕсли;
			
			// Копирование свойств и ролей пользователяИБ.
			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"ЗапрещеноИзменятьПароль,
				|ПоказыватьВСпискеВыбора,
				|РежимЗапуска,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИБЯзык.Видимость, "", ",
				|Язык") + ?(ПользователиСлужебный.ЗапретРедактированияРолей(), "", ",
				|Роли"));
		КонецЕсли;
		Объект.ИдентификаторПользователяИБ = Неопределено;
		УстановитьНаличиеПароля(ЭтотОбъект, Ложь);
	Иначе
		Если Пользователи.ПрочитатьПользователяИБ(
		       Объект.ИдентификаторПользователяИБ, ПрочитанныеСвойства) Тогда
		
			ПользовательИБСуществует = Истина;
			ПользовательИБОсновной = Истина;
		
		ИначеЕсли Параметры.Свойство("ИдентификаторПользователяИБ")
		        И ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
			
			Объект.ИдентификаторПользователяИБ = Параметры.ИдентификаторПользователяИБ;
			
			Если Пользователи.ПрочитатьПользователяИБ(
			       Объект.ИдентификаторПользователяИБ, ПрочитанныеСвойства) Тогда
				
				ПользовательИБСуществует = Истина;
				Если Объект.Наименование <> ПрочитанныеСвойства.ПолноеИмя Тогда
					Объект.Наименование = ПрочитанныеСвойства.ПолноеИмя;
					Модифицированность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПользовательИБСуществует Тогда
			
			Если Пользователи.ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен = Истина;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Истина;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"Имя,
				|ПолноеИмя,
				|АутентификацияOpenID,
				|АутентификацияСтандартная,
				|ПоказыватьВСпискеВыбора,
				|ЗапрещеноИзменятьПароль,
				|АутентификацияОС,
				|ПользовательОС,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИБЯзык.Видимость, "", ",
				|Язык") + ?(ПользователиСлужебный.ЗапретРедактированияРолей(), "", ",
				|Роли"));
		КонецЕсли;
		
		УстановитьНаличиеПароля(ЭтотОбъект, ПрочитанныеСвойства.ПарольУстановлен);
	КонецЕсли;
	
	Пользователи.СкопироватьСвойстваПользователяИБ(
		ЭтотОбъект,
		ОписаниеПользователяИБ,
		,
		"УникальныйИдентификатор,
		|Роли" + ?(ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"), ",
		|ПоказыватьВСпискеВыбора", ""),
		"ПользовательИБ");
	
	Если ПользовательИБОсновной И Не ВходВПрограммуРазрешен Тогда
		ХранимыеСвойства = ПользователиСлужебный.ХранимыеСвойстваПользователяИБ(Объект.Ссылка);
		ПользовательИБАутентификацияOpenID      = ХранимыеСвойства.АутентификацияOpenID;
		ПользовательИБАутентификацияСтандартная = ХранимыеСвойства.АутентификацияСтандартная;
		ПользовательИБАутентификацияОС          = ХранимыеСвойства.АутентификацияОС;
	КонецЕсли;
	
	ОбработатьИнтерфейсРолей("ЗаполнитьРоли", ОписаниеПользователяИБ.Роли);
	
	ПриЧтенииВходВПрограммуРазрешен = ВходВПрограммуРазрешен;
	
	// ТСК Близнюк С.И.; 12.09.2018; task#465{
	ра_ПрочитатьПользователяИБ(ПриКопированииЭлемента);
	// ТСК Близнюк С.И.; 12.09.2018; task#465}
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи = Неопределено)
	
	// Проверка соответствия свойства ПолноеИмя пользователяИБ и
	// реквизита Наименование пользователя.
	
	ПоказатьНесоответствие = Истина;
	ПоказатьКомандыУстраненияРазличий = Ложь;
	
	Если НЕ ПользовательИБСуществует Тогда
		ПоказатьНесоответствие = Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Наименование = ПользовательИБПолноеИмя;
		ПоказатьНесоответствие = Ложь;
		
	ИначеЕсли УровеньДоступа.УправлениеСписком Тогда
		
		УточнениеСвойств = Новый Массив;
		
		Если ПользовательИБПолноеИмя <> Объект.Наименование Тогда
			ПоказатьКомандыУстраненияРазличий =
				    ПоказатьКомандыУстраненияРазличий
				Или ДействияВФорме.СвойстваЭлемента = "Редактирование";
			
			УточнениеСвойств.Вставить(0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Полное имя ""%1""'; en = 'Full name ""%1""'"),
				ПользовательИБПолноеИмя));
		КонецЕсли;
		
		Если УточнениеСвойств.Количество() > 0 Тогда
			СтрокаУточненияСвойств = "";
			ТекущаяСтрока = "";
			Для каждого УточнениеСвойства Из УточнениеСвойств Цикл
				Если СтрДлина(ТекущаяСтрока + УточнениеСвойства) > 90 Тогда
					СтрокаУточненияСвойств = СтрокаУточненияСвойств + СокрП(ТекущаяСтрока) + ", " + Символы.ПС;
					ТекущаяСтрока = "";
				КонецЕсли;
				ТекущаяСтрока = ТекущаяСтрока + ?(ЗначениеЗаполнено(ТекущаяСтрока), ", ", "") + УточнениеСвойства;
			КонецЦикла;
			Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
				СтрокаУточненияСвойств = СтрокаУточненияСвойств + ТекущаяСтрока;
			КонецЕсли;
			Если ПоказатьКомандыУстраненияРазличий Тогда
				Рекомендация = Символы.ПС
					+ НСтр("ru = 'Нажмите ""Записать"", чтобы устранить различия и не выводить это предупреждение.'; en = 'Click ""Save"", to resolve differences and do not show this warning.'");
			
			ИначеЕсли Не Пользователи.ЭтоПолноправныйПользователь() Тогда
				Рекомендация = Символы.ПС
					+ НСтр("ru = 'Обратитесь к администратору, чтобы устранить различия.'; en = 'Contact your administrator to resolve the differences.'");
			Иначе
				Рекомендация = "";
			КонецЕсли;
			Элементы.СвойстваПояснениеНесоответствия.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Следующие свойства пользователя информационной базы отличаются от указанных в этой форме:
				           |%1.';
				           |en = 'The following properties of the infobase user differ from those specified in the form:
				           |%1.'"),
				СтрокаУточненияСвойств) + Рекомендация;
		Иначе
			ПоказатьНесоответствие = Ложь;
		КонецЕсли;
	Иначе
		ПоказатьНесоответствие = Ложь;
	КонецЕсли;
	
	Элементы.СвойстваОбработкаНесоответствия.Видимость   = ПоказатьНесоответствие;
	Элементы.СвойстваКомандыУстраненияРазличий.Видимость = ПоказатьКомандыУстраненияРазличий;
	Элементы.СвойстваПояснениеНесоответствия.ВертикальноеПоложение = ?(ЗначениеЗаполнено(Рекомендация),
		ВертикальноеПоложениеЭлемента.Верх, ВертикальноеПоложениеЭлемента.Центр);
	
	// Определение сопоставление несуществующего пользователя ИБ с пользователем в справочнике.
	ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ
		= НЕ ПользовательИБСуществует
		И ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ);
	
	Если ПараметрыЗаписи <> Неопределено
	   И ЕстьСопоставлениеСНесуществующимПользователемИБ
	   И НЕ ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ Тогда
		
		ПараметрыЗаписи.Вставить("ОчищеноСопоставлениеСНесуществующимПользователемИБ", Объект.Ссылка);
	КонецЕсли;
	ЕстьСопоставлениеСНесуществующимПользователемИБ = ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ;
	
	Если УровеньДоступа.УправлениеСписком Тогда
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = ЕстьСопоставлениеСНесуществующимПользователемИБ;
	Иначе
		// Сопоставление не может быть изменено.
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = Ложь;
	КонецЕсли;
	
	Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		Рекомендация = Символы.ПС
			+ НСтр("ru = 'Нажмите ""Записать"", чтобы устранить проблему и не выводить это предупреждение.'; en = 'Click ""Save"", to fix the problem and do not show this warning.'");
		
	ИначеЕсли Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Рекомендация = Символы.ПС
			+ НСтр("ru = 'Обратитесь к администратору, чтобы устранить различия.'; en = 'Contact your administrator to resolve the differences.'");
	Иначе
		Рекомендация = "";
	КонецЕсли;
	
	Элементы.СопоставлениеПояснениеНесоответствия.Заголовок =
		НСтр("ru = 'Пользователь информационной базы не найден.'; en = 'Infobase user was not found.'") + Рекомендация;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляПоПользователюИБНаСервере()
	
	Если УровеньДоступа.УправлениеСписком
	   И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		
		Объект.Наименование = ПользовательИБПолноеИмя;
	КонецЕсли;
	
	ОпределитьНесоответствияПользователяСПользователемИБ();
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Начальное заполнение, проверка заполнения, доступность свойств.

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСвойств(Форма)
	
	Элементы       = Форма.Элементы;
	Объект         = Форма.Объект;
	ДействияВФорме = Форма.ДействияВФорме;
	УровеньДоступа = Форма.УровеньДоступа;
	ДействияСПользователемСервиса = Форма.ДействияСПользователемСервиса;
	
	// Настройка возможности изменения.
	Элементы.ВходВПрограммуРазрешен.ТолькоПросмотр =
		Не (  Элементы.ОсновныеСвойства.ТолькоПросмотр = Ложь
		    И (    УровеньДоступа.ИзменениеРазрешенияНаВход
		       Или УровеньДоступа.ОтключениеРазрешенияНаВход И Форма.ПриЧтенииВходВПрограммуРазрешен));
	
	Элементы.СменитьПароль.Доступность =
		(    УровеньДоступа.НастройкиДляВхода
		 Или УровеньДоступа.ИзменениеТекущего
		   И Не Форма.ПользовательИБЗапрещеноИзменятьПароль)
		И Не Объект.Служебный;
	
	// Настройка необходимости заполнения.
	Если ТребуетсяЗаписьПользователяИБ(Форма, Ложь) Тогда
		НоваяСтраница = Элементы.ИмяСОтметкойНезаполненного;
	Иначе
		НоваяСтраница = Элементы.ИмяБезОтметкиНезаполненного;
	КонецЕсли;
		
	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница <> НоваяСтраница Тогда
		Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	ОбновитьИмяДляВхода(Форма);
	// ТСК Близнюк С.И.; 12.09.2018; task#465{
	Если ра_ТребуетсяЗаписьПользователяИБ(Форма, Ложь) Тогда
		ра_НоваяСтраница = Элементы.ра_ИмяСОтметкойНезаполненного;
	Иначе
		ра_НоваяСтраница = Элементы.ра_ИмяБезОтметкиНезаполненного;
	КонецЕсли;
	
	Если Элементы.ра_ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница <> ра_НоваяСтраница Тогда
		Элементы.ра_ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = ра_НоваяСтраница;
	КонецЕсли;
	ра_ОбновитьИмяДляВхода(Форма);
	// ТСК Близнюк С.И.; 12.09.2018; task#465}
	
	// Настройка доступности связанных элементов.
	Элементы.ВходВПрограммуРазрешен.Доступность    = Не Объект.Недействителен;
	Элементы.ОсновныеСвойства.Доступность          = Не Объект.Недействителен;
	Элементы.ГруппаИзменитьОграничение.Доступность = Не Объект.Недействителен
	                                               И Не Элементы.Наименование.ТолькоПросмотр;
	
	Элементы.ПараметрыАутентификации1СПредприятия.Доступность = Форма.ПользовательИБАутентификацияСтандартная;
	Элементы.ПользовательИБПользовательОС.Доступность         = Форма.ПользовательИБАутентификацияОС;
	// ТСК Близнюк С.И.; 12.09.2018; task#465{
	Элементы.ра_ПользовательИБПользовательОС.Доступность      = Форма.ПользовательИБАутентификацияОС;
	// ТСК Близнюк С.И.; 12.09.2018; task#465}
	
	// Уточнение настроек в модели сервиса.
	Если ДействияСПользователемСервиса <> Неопределено Тогда
		
		// Доступность редактирования КИ.
		Отбор = Новый Структура("Вид", ВидКонтактнойИнформацииEmailПользователя());
		НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если НайденныеСтроки <> Неопределено Тогда
			ЗаполненEMail = ЗначениеЗаполнено(Форма[НайденныеСтроки[0].ИмяРеквизита]);
		Иначе
			ЗаполненEMail = Ложь;
		КонецЕсли;
		
		Если Объект.Ссылка.Пустая() И ЗаполненEMail Тогда
			МожноИзменятьПароль = Ложь;
		Иначе
			МожноИзменятьПароль = ДействияСПользователемСервиса.ИзменениеПароля;
		КонецЕсли;
		
		Элементы.СменитьПароль.Доступность = Элементы.СменитьПароль.Доступность И МожноИзменятьПароль;
		
		Элементы.ПользовательИБИмя1.ТолькоПросмотр = Элементы.ПользовательИБИмя1.ТолькоПросмотр
			ИЛИ НЕ ДействияСПользователемСервиса.ИзменениеИмени;
		
		Элементы.ПользовательИБИмя2.ТолькоПросмотр = Элементы.ПользовательИБИмя2.ТолькоПросмотр
			ИЛИ НЕ ДействияСПользователемСервиса.ИзменениеИмени;
		
		Элементы.Наименование.ТолькоПросмотр = Элементы.Наименование.ТолькоПросмотр 
			ИЛИ НЕ ДействияСПользователемСервиса.ИзменениеПолногоИмени;
		
		Элементы.ВходВПрограммуРазрешен.Доступность = Элементы.ВходВПрограммуРазрешен.Доступность
			И ДействияСПользователемСервиса.ИзменениеДоступа;
		
		Элементы.Недействителен.Доступность = Элементы.Недействителен.Доступность
			И ДействияСПользователемСервиса.ИзменениеДоступа;
		
		Форма.ЗапретИзмененияАдминистративногоДоступа =
			НЕ ДействияСПользователемСервиса.ИзменениеАдминистративногоДоступа;
	КонецЕсли;
	
	ПользователиСлужебныйКлиентСервер.ОбновитьОграничениеСрокаДействия(Форма);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьДоступностьЭлементовКонтактнойИнформации()
	
	Результат = Новый Соответствие;
	Для Каждого СтрокаКонтактнойИнформации Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		ДействияВидаКонтактнойИнформации = ДействияСПользователемСервиса.КонтактнаяИнформация.Получить(СтрокаКонтактнойИнформации.Вид);
		Если ДействияВидаКонтактнойИнформации = Неопределено Тогда
			// Возможность редактирования этого вида КИ не регулируется менеджером сервиса.
			Продолжить;
		КонецЕсли;
		ЭлементКонтактнойИнформации = Элементы[СтрокаКонтактнойИнформации.ИмяРеквизита];
		Результат.Вставить(СтрокаКонтактнойИнформации.Вид,
			Не ЭлементКонтактнойИнформации.ТолькоПросмотр
			И ДействияВидаКонтактнойИнформации.Изменение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Продолжение процедуры ИзменитьОграничениеНаВходВПрограмму.
&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограммуЗавершение(Результат, Контекст) Экспорт
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаписьПользователяИБ(Форма, УчитыватьСтандартноеИмя = Истина)
	
	Если Форма.ДействияВФорме.СвойстваПользователяИБ <> "Редактирование" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Шаблон = Форма.НачальноеОписаниеПользователяИБ;
	
	ТекущееИмя = "";
	Если Не УчитыватьСтандартноеИмя Тогда
		КраткоеИмя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(
			Форма.Объект.Наименование);
		
		Если Форма.ПользовательИБИмя = КраткоеИмя Тогда
			ТекущееИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ПользовательИБСуществует
	 ИЛИ Форма.ВходВПрограммуРазрешен
	 ИЛИ Форма.ПользовательИБИмя                       <> ТекущееИмя
	 ИЛИ Форма.ПользовательИБАутентификацияСтандартная <> Шаблон.АутентификацияСтандартная
	 ИЛИ Форма.ПользовательИБПоказыватьВСпискеВыбора   <> Шаблон.ПоказыватьВСпискеВыбора
	 ИЛИ Форма.ПользовательИБЗапрещеноИзменятьПароль   <> Шаблон.ЗапрещеноИзменятьПароль
	 ИЛИ Форма.ПользовательИБПароль                    <> Неопределено
	 ИЛИ Форма.ПользовательИБАутентификацияОС          <> Шаблон.АутентификацияОС
	 ИЛИ Форма.ПользовательИБПользовательОС            <> ""
	 ИЛИ Форма.ПользовательИБАутентификацияOpenID      <> Шаблон.АутентификацияOpenID
	 ИЛИ Форма.ПользовательИБРежимЗапуска              <> Шаблон.РежимЗапуска
	 ИЛИ Форма.ПользовательИБЯзык                      <> Шаблон.Язык
	 ИЛИ Форма.ПользовательИБРоли.Количество()         <> 0 Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей.

&НаСервере
Процедура ОбработатьИнтерфейсРолей(Действие, ОсновнойПараметр = Неопределено)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ОсновнойПараметр", ОсновнойПараметр);
	ПараметрыДействия.Вставить("Форма",            ЭтотОбъект);
	ПараметрыДействия.Вставить("КоллекцияРолей",   ПользовательИБРоли);
	ПараметрыДействия.Вставить("ЗапретИзмененияАдминистративногоДоступа",
		ЗапретИзмененияАдминистративногоДоступа);
	
	ПараметрыДействия.Вставить("НазначениеРолей", "ДляАдминистраторов");
	
	БылУстановленАдминистративныйДоступ = ПользовательИБРоли.НайтиСтроки(
		Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
	
	ПользователиСлужебный.ОбработатьИнтерфейсРолей(Действие, ПараметрыДействия);
	
	УстановленАдминистративныйДоступ = ПользовательИБРоли.НайтиСтроки(
		Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
	
	Если УстановленАдминистративныйДоступ <> БылУстановленАдминистративныйДоступ Тогда
		УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавленныеПроцедурыИФункции

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппыИПолномочия(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ГруппыИПолномочия", ПараметрыФормы, ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСинхронизацииСМобильнымКлиентом(Команда)

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ПараметрыФормы = Новый Структура("ТекущийПользователь", Объект.Ссылка);

		Открытьформу("Обработка.НастройкаСинхронизацииСМобильнымКлиентом.Форма.НастройкаПравилСинхронизации", 
			ПараметрыФормы, 
			ЭтаФорма);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВычислитьПредставлениеВДокументах(ТекущийОбъект)
	
	ФИОПользователя = ТекущийОбъект.Наименование;
	Если (Найти(ФИОПользователя, ".") > 0) Тогда
		ПозицияПробела = Найти(ФИОПользователя," ");
		Фамилия = Сред(ФИОПользователя, 1, ПозицияПробела);
		ФИОПользователя = СтрЗаменить(ФИОПользователя, Фамилия, "");
		ПозицияПробела = Найти(ФИОПользователя, " ");
		Инициалы = Сред(ФИОПользователя, 1, ПозицияПробела);
		
		Возврат СтрЗаменить(Инициалы + " " + Фамилия+" ", "  ", " ");
	ИначеЕсли СтрЧислоВхождений(СокрЛП(ФИОПользователя), " ") = 2 Тогда
		ПозицияПробела = Найти(ФИОПользователя, " ");
		Фамилия = Сред(ФИОПользователя, 1, ПозицияПробела);
		ФИОПользователя = СтрЗаменить(ФИОПользователя, Фамилия, "");
		ПозицияПробела = Найти(ФИОПользователя, " ");
		Имя = Сред(ФИОПользователя, 1, ПозицияПробела);
		ФИОПользователя = СтрЗаменить(ФИОПользователя, Имя, "");
		
		Возврат СтрЗаменить(Лев(Имя, 1) + "." + Лев(ФИОПользователя, 1) + ". " + Фамилия + " ", "  ", " ");
	Иначе
		Возврат ФИОПользователя;
	КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаПоУмолчаниюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	ПараметрыОписания = Новый Структура(
		"АдресВременногоХранилищаФайла", 
		"");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьИзображениеНаКлиентеЗавершение", 
		ЭтотОбъект,
		ПараметрыОписания);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Для выбора изображения необходимо записать объект. Записать?'; en = 'You have to save the object to choose an image. Save it?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе 
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьКартинка И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не ЕстьПравоРедактирования Тогда
			ТекстИсключения = НСтр("ru = 'Нарушение прав доступа!'; en = 'Access right violation!'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыборКартинкиПродолжение",
			ЭтотОбъект,
			ДополнительныеПараметры);

		ФайловыеФункцииКлиент.ВыбратьКартинкуИПоместитьВХранилище(
			ОписаниеОповещения, УникальныйИдентификатор,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКартинкиПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФотографиями.ЗаписатьИзображение(Параметры.АдресВременногоХранилищаФайла, 
		УникальныйИдентификатор, 
		Объект.Ссылка, Объект.Наименование);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	РаботаСФотографиями.ОчиститьИзображение(Объект.Ссылка, УникальныйИдентификатор);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	НельзяМенятьПоляСведений = Не ЗначениеЗаполнено(Подразделение);
	Элементы.Должность.ТолькоПросмотр = НельзяМенятьПоляСведений;
	Элементы.Ранг.ТолькоПросмотр = НельзяМенятьПоляСведений;
	Элементы.ГрафикРаботы.ТолькоПросмотр = НельзяМенятьПоляСведений;
	
	Если НельзяМенятьПоляСведений Тогда 
		Руководитель = Неопределено;
	Иначе 
		Руководитель = ДелопроизводствоКлиентСервер.ПолучитьНепосредственногоРуководителя(
			Подразделение, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтсутствие()
	
	Отсутствия.ОбновитьДанныеОтсутствияФормыПользователя(Объект.Ссылка, Отсутствие,
		ОтсутствиеОписание, Элементы.ГруппаОтсутствие);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсутствиеОписаниеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Отсутствие);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаПоказаФотографии()
	
	ОтображатьФотографииПерсональнаяНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы",
		"ОтображатьФотографииПерсональнаяНастройка",
		Истина);
	ОтображатьФотографииОбщаяНастройка = ПолучитьФункциональнуюОпцию("ОтображатьФотографииОбщаяНастройка");
	ПолучатьФотографии = Истина;
	
	Если Не ОтображатьФотографииОбщаяНастройка 
		Или Не ОтображатьФотографииПерсональнаяНастройка
		Или ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ПолучатьФотографии = Ложь;
		Элементы.ГруппаСтраницыФотографии.Видимость = Ложь;
	КонецЕсли;
	Если ПолучатьФотографии Тогда
		ПоказатьФотоПользователя(Объект.Ссылка, УникальныйИдентификатор, Фотография);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьФотоПользователя(Контакт, УникальныйИдентификатор, Фотография)
	
	// фото пользователя
	Если ЭтоАдресВременногоХранилища(Фотография) Тогда
		УдалитьИзВременногоХранилища(Фотография);
	КонецЕсли;	
	
	Фотография = "";
	Если ЗначениеЗаполнено(Контакт) 
		И ТипЗнч(Контакт) <> Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		ЕстьКартинка = Ложь;
		Фотография = РаботаСФотографиями.ПолучитьАдресФото(Контакт, УникальныйИдентификатор, ЕстьКартинка);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Фотография) Тогда
		Фотография = "";
		ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаКартинкаПоУмолчанию;
		ЕстьКартинка = Ложь;
	Иначе	
		ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаФотография;
		ЕстьКартинка = Истина;
	КонецЕсли;
	
	Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
	Элементы.ДекорацияКартинкаПоУмолчаниюКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = ЕстьКартинка;
	
КонецПроцедуры

// Работа с помещением

&НаКлиенте
Процедура ПомещениеТекстПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПомещениеТекст) Тогда 
		Объект.Помещение = Неопределено;
		ПомещениеТекст = Неопределено;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Помещение);
	ОткрытьФорму("Справочник.ТерриторииИПомещения.ФормаВыбора", ПараметрыФормы, 
		Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеТекстОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Помещение = Неопределено;
	ПомещениеТекст = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПомещениеТекст) Тогда
		ПоказатьЗначение(, Объект.Помещение);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ТерриторииИПомещения") Тогда 
		
		СтандартнаяОбработка = Ложь;
		Объект.Помещение = ВыбранноеЗначение;
		Модифицированность = Истина;
		
		Если ЗначениеЗаполнено(Объект.Помещение) Тогда 
			ПомещениеТекст = ДелопроизводствоКлиентСервер.ПолучитьПолныйПутьКПомещению(
				Объект.Помещение);
		Иначе 
			ПомещениеТекст = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПомещения(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПомещения(Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Отправить

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Исполнение", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Ознакомление", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

// ТСК Близнюк С.И.; 12.09.2018; task#465{
&НаКлиентеНаСервереБезКонтекста
Функция ра_ТребуетсяЗаписьПользователяИБ(Форма, УчитыватьСтандартноеИмя = Истина)
	
	Если Форма.ДействияВФорме.СвойстваПользователяИБ <> "Редактирование" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущееИмя = "";
	Если Не УчитыватьСтандартноеИмя Тогда
		КраткоеИмя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(
			Форма.Объект.Наименование);
		
		Если Форма.ПользовательИБИмя = КраткоеИмя Тогда
			ТекущееИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ра_ПользовательИБСуществует
	 ИЛИ Форма.ра_ПользовательИБИмя            <> ТекущееИмя
	 ИЛИ Форма.ра_ПользовательИБПользовательОС <> "" Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ра_ОбновитьИмяДляВхода(Форма, ПриИзмененииНаименования = Ложь)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
			
	//Обновление имени пользователя
	Если ЗначениеЗаполнено(Форма.ра_ПользовательИБПользовательОС) Тогда
		
		КраткоеИмя  = СтрЗаменить(Форма.ра_ПользовательИБПользовательОС, "\\", "");
		МассивИмени = СтрРазделить(КраткоеИмя, "\");
		Форма.ра_ПользовательИБИмя = СтрШаблон("%1@%2",?(МассивИмени.Количество(), МассивИмени[1], ""), МассивИмени[0]);
		
		// ТСК Близнюк С.И.; 20.12.2018; task#2270{
		Если НЕ СтрНайти(Форма.ра_ПользовательИБИмя, "gk.rosatom.local") И СтрНайти(Форма.ра_ПользовательИБИмя, "gk") Тогда
			Форма.ра_ПользовательИБИмя  = СтрЗаменить(Форма.ра_ПользовательИБИмя, "gk", "gk.rosatom.local");
		КонецЕсли;
		// ТСК Близнюк С.И.; 20.12.2018; task#2270}
		
	КонецЕсли;
	//
	
	Если Форма.ра_ПользовательИБСуществует Тогда
		Возврат;
	КонецЕсли;

	
	//КраткоеИмя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(Форма.Объект.Наименование);
	//
	//Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = Элементы.ИмяБезОтметкиНезаполненного Тогда
	//	
	//	Если Не ЗначениеЗаполнено(Форма.ПользовательИБИмяЗначениеПрямогоИзменения)
	//	   И Форма.ПользовательИБИмя2 = КраткоеИмя Тогда
	//		
	//		Форма.ПользовательИБИмя2 = "";
	//	КонецЕсли;
	//Иначе
	//	Если ПриИзмененииНаименования
	//	 Или Не ЗначениеЗаполнено(Форма.ПользовательИБИмя2) Тогда
	//		
	//		Форма.ПользовательИБИмя2 = КраткоеИмя;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ра_ПрочитатьПользователяИБ(ПриКопированииЭлемента = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ра_ПрочитанныеСвойства      = Неопределено;
	ра_ПользовательИБСуществует = Ложь;
		
	Если ПриКопированииЭлемента Тогда
		
		Объект.ра_ИдентификаторПользователяИБ = Неопределено;
		
	Иначе
		Если Пользователи.ПрочитатьПользователяИБ(
		       Объект.ра_ИдентификаторПользователяИБ, ра_ПрочитанныеСвойства) Тогда
		
			ра_ПользовательИБСуществует = Истина;
			
		ИначеЕсли Параметры.Свойство("ИдентификаторПользователяИБ2")
		        И ЗначениеЗаполнено(Параметры.ра_ИдентификаторПользователяИБ) Тогда
			
			Объект.ра_ИдентификаторПользователяИБ = Параметры.ра_ИдентификаторПользователяИБ;
			
			Если Пользователи.ПрочитатьПользователяИБ(
			       Объект.ра_ИдентификаторПользователяИБ, ра_ПрочитанныеСвойства) Тогда
				
				ра_ПользовательИБСуществует = Истина;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ра_ПользовательИБСуществует Тогда
		ЭтотОбъект.ра_ПользовательИБПользовательОС = ра_ПрочитанныеСвойства.ПользовательОС;
		ЭтотОбъект.ра_ПользовательИБИмя = ра_ПрочитанныеСвойства.Имя;
	КонецЕсли;
	
	ЭтотОбъект.ра_ПользовательИБСуществует = ра_ПользовательИБСуществует;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздаватьПодразделениеОрганизацииПриНеобходимости(Знач Организация)
	
	Возврат ЗначениеЗаполнено(Организация) 
		и Не Организация.ра_ОрганизацияОтрасли 
		и Не ЗначениеЗаполнено(Справочники.СтруктураПредприятия.ПолучитьПервоеПодразделениеОрганизации(Организация));
	
КонецФункции
	
&НаСервереБезКонтекста
Функция ПодразделениеОрганизацииПоУмолчанию(Знач Организация)
	
	Возврат Справочники.СтруктураПредприятия.ПодразделениеОрганизацииПоУмолчанию(Организация);
	
КонецФункции

&НаКлиенте
Процедура ра_ОрганизацияПриИзменении(Элемент)
	
	Если СоздаватьПодразделениеОрганизацииПриНеобходимости(Объект.ра_Организация) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаПоПредоставлениюДоступа", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр(СтрШаблон("ru = 'Предоставить доступ организации %1?'", Объект.ра_Организация)), РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		Подразделение = ПодразделениеОрганизацииПоУмолчанию(Объект.ра_Организация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаПоПредоставлениюДоступа(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаОбъекта", Новый Структура("Основание", Объект.ра_Организация), Элементы.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

// ТСК Близнюк С.И.; 12.09.2018; task#465}
