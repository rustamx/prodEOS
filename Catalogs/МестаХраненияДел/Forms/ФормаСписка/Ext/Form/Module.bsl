#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьСхемыПомещений = ПолучитьФункциональнуюОпцию("ИспользоватьСхемыПомещений");	
	МестоХраненияПриОткрытии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"МестаХраненияДел", "МестоХранения", Неопределено);
	
	Если ЗначениеЗаполнено(МестоХраненияПриОткрытии) Тогда  
		Если ИспользоватьСхемыПомещений Тогда 
			ТекущаяТерритория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МестоХраненияПриОткрытии,
				"ТерриторияПомещение");
			Список.Параметры.УстановитьЗначениеПараметра("Территория", ТекущаяТерритория);
			Элементы.СписокТерриторий.ТекущаяСтрока = ТекущаяТерритория;
		КонецЕсли;
		
		Элементы.Список.ТекущаяСтрока = МестоХраненияПриОткрытии;
	КонецЕсли;
	
	СписокДел.Параметры.УстановитьЗначениеПараметра("МестоХранения", Элементы.Список.ТекущаяСтрока);
	ПоказыватьУдаленные = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущееМестоХранения <> Неопределено И МестоХраненияПриОткрытии <> ТекущееМестоХранения Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("МестаХраненияДел", 
			"МестоХранения", ТекущееМестоХранения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(МестоХраненияПриОткрытии) Тогда
		ТекущееМестоХранения = МестоХраненияПриОткрытии;
	КонецЕсли;
	
	ПоказыватьТолькоСМестамиХранения = Настройки["ПоказыватьТолькоСМестамиХранения"];
	Элементы.ПоказыватьТолькоСМестамиХранения.Пометка = ПоказыватьТолькоСМестамиХранения;
	Элементы.КонтекстноеМенюПоказыватьТолькоСМестамиХранения.Пометка = ПоказыватьТолькоСМестамиХранения;
	
	Если ПоказыватьТолькоСМестамиХранения Тогда 
		СписокТерриторий.Параметры.УстановитьЗначениеПараметра("ПоказыватьТолькоСМестамиХранения", Истина);
	КонецЕсли;
	
	ПоказыватьУдаленные = Настройки["ПоказыватьУдаленные"];
	Подразделение = Настройки["Подразделение"];
	Организация = Настройки["Организация"];
	УстановитьОтборСписка(Список, СписокДел, Настройки);
	
	Если Настройки["ПоказыватьУдаленные"] <> Неопределено Тогда
		ИзменитьОтображениеУдаленных(ПоказыватьУдаленные, СписокТерриторий, Список, СписокДел, 
			Элементы.ПоказыватьУдаленные);
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборОрганизация, Организация);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборПодразделение, Подразделение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("Организация", Организация);
	
	УстановитьОтборСписка(Список, СписокДел, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие();
	Параметрыотбора.Вставить("Подразделение", Подразделение);
	
	УстановитьОтборСписка(Список, СписокДел, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Подразделение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТерриторий

&НаКлиенте
Процедура СписокТерриторийПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокТерриторий.ТекущаяСтрока <> Неопределено 
		И ТекущаяТерритория <> Элементы.СписокТерриторий.ТекущаяСтрока Тогда
		ПодключитьОбработчикОжидания("ОбновитьСписки", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТерриторийПослеУдаления(Элемент)
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТерриторийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТерриторийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПеретаскиваемоеЗначение = ПараметрыПеретаскивания.Значение;
	Если Строка = Неопределено Тогда
		Возврат;
	Иначе
		ТерриторияНазначения = Строка;
	КонецЕсли;
	
	НетМестХранения = Истина;
	Для Каждого МестоХранения Из ПеретаскиваемоеЗначение Цикл  
		Если ТипЗнч(МестоХранения) = Тип("СправочникСсылка.МестаХраненияДел") 
			Или ТипЗнч(МестоХранения) = Тип("СправочникСсылка.ТерриторииИПомещения") Тогда 
			НетМестХранения = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Если НетМестХранения Или ТекущаяТерритория = ТерриторияНазначения Тогда 
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	
	Если Не ПереместитьМестаХранения(ПеретаскиваемоеЗначение, ТерриторияНазначения, СообщениеОбОшибке) Тогда
		ПоказатьПредупреждение(, СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ЗначениеЗаполнено(МестоХраненияПриОткрытии) Тогда
		Элементы.Список.ТекущаяСтрока = МестоХраненияПриОткрытии;
		МестоХраненияПриОткрытии = Неопределено;
	КонецЕсли;
	
	Если Элементы.Список.ТекущаяСтрока <> Неопределено 
		И ТекущееМестоХранения <> Элементы.Список.ТекущаяСтрока Тогда
		ПодключитьОбработчикОжидания("ОбновитьСписки", 0.2, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура;
	
	Если Копирование Тогда 
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элементы.Список.ТекущаяСтрока);
	ИначеЕсли ИспользоватьСхемыПомещений Тогда 
		
		ТекущаяСтрока = Элементы.СписокТерриторий.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли; 
		
		ПараметрыФормы.Вставить("СхемаПомещения", ТекущаяСтрока);
	КонецЕсли;
	
	Открытьформу("Справочник.МестаХраненияДел.ФормаОбъекта", ПараметрыФормы,
		Элементы.Список, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПеретаскиваемоеЗначение = ПараметрыПеретаскивания.Значение;
	Если Строка = Неопределено Тогда
		Возврат;
	Иначе
		МестоНазначения = Строка;
	КонецЕсли;
	
	Если ТекущееМестоХранения = МестоНазначения Тогда 
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	
	Если Не Переместить(ПеретаскиваемоеЗначение, МестоНазначения, СообщениеОбОшибке) Тогда
		ПоказатьПредупреждение(, СообщениеОбОшибке);
	Иначе 
		Элементы.СписокДел.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДел

&НаКлиенте
Процедура СписокДелПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущиеДанные.ЗапрещеноРазмещатьНовыеДела Тогда 
		СообщениеОбОшибке = НСтр("ru = 'В указанное место хранения запрещено размещать новые дела.
                                      |Выберите другое место хранения.';
                                      |en = 'It is forbidden to place new cases to the specified storage location.
                                      |Select another storage location.'");
		ПоказатьПредупреждение(, СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Если Копирование Тогда 
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элементы.СписокДел.ТекущаяСтрока);
	Иначе 
		ПараметрыФормы.Вставить("МестоХранения", Элементы.Список.ТекущаяСтрока);
	КонецЕсли;
	
	Открытьформу("Справочник.ДелаХраненияДокументов.ФормаОбъекта", ПараметрыФормы,
		Элементы.Список, Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказыватьТолькоСМестамиХранения(Команда)
	
	ПоказыватьТолькоСМестамиХранения = Не ПоказыватьТолькоСМестамиХранения;
	Элементы.ПоказыватьТолькоСМестамиХранения.Пометка = ПоказыватьТолькоСМестамиХранения;
	Элементы.КонтекстноеМенюПоказыватьТолькоСМестамиХранения.Пометка = ПоказыватьТолькоСМестамиХранения;
	
	Если ПоказыватьТолькоСМестамиХранения Тогда 
		СписокТерриторий.Параметры.УстановитьЗначениеПараметра("ПоказыватьТолькоСМестамиХранения", Истина);
	Иначе 
		СписокТерриторий.Параметры.УстановитьЗначениеПараметра("ПоказыватьТолькоСМестамиХранения", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	ПоказыватьУдаленные = Не ПоказыватьУдаленные;
	ИзменитьОтображениеУдаленных(ПоказыватьУдаленные, СписокТерриторий, Список, СписокДел, 
		Элементы.ПоказыватьУдаленные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДела(Команда)
	
	Дела = Новый Массив;
	ВыделенныеСтроки = Элементы.СписокДел.ВыделенныеСтроки;
	Для Каждого Ссылка Из ВыделенныеСтроки Цикл
		Дела.Добавить(Ссылка);
	КонецЦикла;
	
	Если Дела.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны дела.'; en = 'Cases are not selected.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Дела", Дела);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиДелаЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	ОткрытьФорму("Справочник.МестаХраненияДел.ФормаВыбора",, 
		ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Элементы.СписокТерриторий.Обновить();
	Элементы.Список.Обновить();
	Элементы.СписокДел.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОтображениеУдаленных(ПоказыватьУдаленные, СписокТерриторий, Список, СписокДел, СписокПоказыватьУдаленные)
	
	Если Не ПоказыватьУдаленные Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "ПометкаУдаления", Ложь,
			ВидСравненияКомпоновкиДанных.Равно, , Не ПоказыватьУдаленные);
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДел, "ПометкаУдаления", Ложь,
			ВидСравненияКомпоновкиДанных.Равно, , Не ПоказыватьУдаленные);
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокТерриторий, "ПометкаУдаления", Ложь,
			ВидСравненияКомпоновкиДанных.Равно, , Не ПоказыватьУдаленные);
	Иначе		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ПометкаУдаления");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокДел, "ПометкаУдаления");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокТерриторий, "ПометкаУдаления");
	КонецЕсли;	
	
	СписокПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписки()
	
	Если ИспользоватьСхемыПомещений И ТекущаяТерритория <> Элементы.СписокТерриторий.ТекущаяСтрока Тогда 
		ТекущаяТерритория = Элементы.СписокТерриторий.ТекущаяСтрока;
		Список.Параметры.УстановитьЗначениеПараметра("Территория", ТекущаяТерритория);
	КонецЕсли;
	
	Если ТекущееМестоХранения <> Элементы.Список.ТекущаяСтрока Тогда 
		ТекущееМестоХранения = Элементы.Список.ТекущаяСтрока;
		СписокДел.Параметры.УстановитьЗначениеПараметра("МестоХранения", ТекущееМестоХранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСписка(Список, СписокДел, ПараметрыОтбора)
	
	// Организация 
	Организация = ПараметрыОтбора.Получить("Организация");
	Если Организация <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,
				"Организация");
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокДел,
				"Организация");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
				"Организация",
				Организация);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДел,
				"Организация",
				Организация);
		КонецЕсли;
	КонецЕсли;
	
	// Подразделение 
	Подразделение = ПараметрыОтбора.Получить("Подразделение");
	Если Подразделение <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Подразделение) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,
				"Подразделение");
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокДел,
				"Подразделение");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
				"Подразделение",
				Подразделение);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДел,
				"Подразделение",
				Подразделение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДелаЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		МестоНазначения = Результат;
		СообщениеОбОшибке = "";
		
		Если Не Переместить(Параметры.Дела, МестоНазначения, СообщениеОбОшибке) Тогда
			ПоказатьПредупреждение(, СообщениеОбОшибке);
		Иначе 
			Элементы.СписокДел.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Переместить(МассивДел, МестоНазначения, СообщениеОбОшибке)
	
	РеквизитыМеста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МестоНазначения,
		"ЗапрещеноРазмещатьНовыеДела, Наименование");
	
	Если РеквизитыМеста.ЗапрещеноРазмещатьНовыеДела Тогда 
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В место хранения ""%1"" запрещено размещать дела.
                                      |Выберите другое место хранения.';
                                      |en = 'Transferring cases to storage location ""%1"" is forbidden.
                                      |Select a different storage location.'"), РеквизитыМеста.Наименование);
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Дело Из МассивДел Цикл  
		Если Дело.МестоХраненияДел = МестоНазначения Тогда 
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДелоОбъект = Дело.ПолучитьОбъект();
			ДелоОбъект.Заблокировать();
		Исключение
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Ложь;
		КонецПопытки;
		
		ДелоОбъект.МестоХраненияДел = МестоНазначения;
		
		Попытка
			ДелоОбъект.Записать();
		Исключение
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПереместитьМестаХранения(МассивОбъектов, ТерриторияНазначения, СообщениеОбОшибке)
	
	Для Каждого ОбъектСсылка Из МассивОбъектов Цикл 
		ЭтоМестоХранения = ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.МестаХраненияДел");
		ЭтоТерритория = ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ТерриторииИПомещения");
		
		Если ЭтоМестоХранения
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ТерриторияПомещение") = ТерриторияНазначения Тогда 
			Продолжить;
		ИначеЕсли ЭтоТерритория 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Родитель") = ТерриторияНазначения Тогда 
			Продолжить;
		КонецЕсли;
		
		Попытка
			ОбъектСсылкаОбъект = ОбъектСсылка.ПолучитьОбъект();
			ОбъектСсылкаОбъект.Заблокировать();
		Исключение
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Ложь;
		КонецПопытки;
		
		Если ЭтоМестоХранения Тогда 
			ОбъектСсылкаОбъект.ТерриторияПомещение = ТерриторияНазначения;
		ИначеЕсли ЭтоТерритория Тогда 
			ОбъектСсылкаОбъект.Родитель = ТерриторияНазначения;
		КонецЕсли;
		
		Попытка
			ОбъектСсылкаОбъект.Записать();
		Исключение
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Элементы.Список.Обновить();
	Элементы.СписокТерриторий.Обновить();
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


