#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЕстьПравоНаСозданиеШаблона = ПравоДоступа("Добавление", Метаданные.Справочники.ШаблоныВнутреннихДокументов);
	СписокРасширенийШаблонов = "doc, docx, dot, dotx, odt, txt, html, htm";
	Если Не Объект.Ссылка.Пустая() Тогда 
		ЗаполнитьСписокШаблоновВида();
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтаФорма);
	
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда //Копирование
		ТаблНастройкиНумерации = Нумерация.ПрочитатьНастройкиНумерацииВидаДокумента(Параметры.ЗначениеКопирования);
		ЗначениеВРеквизитФормы(ТаблНастройкиНумерации, "НастройкиНумерации");
	ИначеЕсли Объект.Ссылка.Пустая() Тогда 
		НоваяСтрока = НастройкиНумерации.Добавить();
		НоваяСтрока.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
		НоваяСтрока.Нумератор = Справочники.Нумераторы.ВнутренниеДокументы;
		НоваяСтрока.Нумеровать = Нумерация.СформироватьПолеНумеровать(НоваяСтрока.СпособНумерации, НоваяСтрока.Нумератор);
		Объект.ВестиУчетПоОрганизациям = ИспользоватьУчетПоОрганизациям;
	Иначе	
		ТаблНастройкиНумерации = Нумерация.ПрочитатьНастройкиНумерацииВидаДокумента(Объект.Ссылка);
		ЗначениеВРеквизитФормы(ТаблНастройкиНумерации, "НастройкиНумерации");
	КонецЕсли;
	
	Нумерация.ПоказатьИндексНумерации(ЭтаФорма);
	
	Элементы.НастройкиНумерацииОрганизация.Видимость = ИспользоватьУчетПоОрганизациям;
	
	Элементы.ГруппаЭтапы.Видимость = Объект.ИспользоватьЭтапыОбработкиДокумента;
	Делопроизводство.ПрочитатьНастройкиЭтапов(ЭтаФорма);
	
	ВестиУчетПоОрганизациямНачальноеЗначение = Объект.ВестиУчетПоОрганизациям;
	ОбязательноеУказаниеОтветственногоНачальноеЗначение = Объект.ОбязательноеУказаниеОтветственного;
	
	Делопроизводство.СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(ВсеТовары);
	
	// Видимость команды "Политики доступа".
	Если Элементы.Найти("ФормаПолитикиДоступа") <> Неопределено Тогда
		ОтключенныеРазрезы = ДокументооборотПраваДоступаПовтИсп.ОтключенныеРазрезыДоступа(Ложь);
		Если ОтключенныеРазрезы.Найти(ПланыВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов) <> Неопределено Тогда
			Элементы.ФормаПолитикиДоступа.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	
	// Работа со подписями
	КонтрагентПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
	КонтактноеЛицоПустаяСсылка = Справочники.КонтактныеЛица.ПустаяСсылка();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьЗаголовокЗакладкиНумерация();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанШаблонДокумента" И Параметр.ВидДокумента = Объект.Ссылка Тогда 
		ЗаполнитьСписокШаблоновВида();
		
		Если МногоШаблонов Тогда 
			СтрокаИдентификатор = Неопределено;
			Для Каждого Строка Из ШаблоныВида Цикл
				Если Строка.Шаблон = Параметр.Шаблон Тогда 
					СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаИдентификатор = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			
			Элементы.ШаблоныВида.ТекущаяСтрока = СтрокаИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписаноПравилоАвтозаполнения" И Параметр.ВидДокумента = Объект.Ссылка
		И ЗначениеЗаполнено(Параметр.Правило) Тогда 
		ТребуетсяЗаписатьШаблон = Ложь;
		Для Каждого Строка Из Файлы Цикл
			Если Строка.Ссылка = Параметр.Шаблон Тогда 
				Строка.ПравилоАвтозаполнения = Параметр.Правило;
				Строка.ПравилоАвтозаполненияСтр = НСтр("ru = 'Открыть'; en = 'Open'");
				ТребуетсяЗаписатьШаблон = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТребуетсяЗаписатьШаблон Тогда 
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" Тогда
		
		ЗаполнитьСписокФайлов();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("Файл") И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = ШаблонДокумента.Ссылка Тогда
			ОбновитьСтрокуФайла(ФайлСсылка);
			
			ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
			УстановитьДоступностьКоманд(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Владелец = ШаблонДокумента.Ссылка Тогда 
				ОбновитьСтрокуФайла(Параметр.Файл);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено
			И Параметр.Свойство("Владелец")
			И Параметр.Владелец = ШаблонДокумента.Ссылка Тогда
			
			ЗаполнитьСписокФайлов();
			
			Если Параметр.Свойство("Файл") Тогда
				УстановитьТекущуюСтрокуФайла(Параметр.Файл);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не МногоШаблонов 
		И ((ПараметрыЗаписи.Свойство("ЗаписатьШаблон") И ПараметрыЗаписи.ЗаписатьШаблон)
		Или (ШаблонДокумента.Ссылка.Пустая() И ЕстьЗаполненныеРеквизитыШаблона())
		Или (Не ШаблонДокумента.Ссылка.Пустая() И ШаблонИзменен())
		Или ТребуетсяЗаписатьШаблон) Тогда 
		
		ШаблонДокумента.ЗаполнениеНаименованияПоШаблону = Ложь;
		Если ЗначениеЗаполнено(ШаблонДокумента.Заголовок) Тогда 
			ОписаниеОшибки = "";
			МассивРеквизитов = Новый Массив;
			
			ДелопроизводствоКлиентСервер.ПолучитьПоляШаблонаНаименования(
				ШаблонДокумента.Заголовок, МассивРеквизитов, ОписаниеОшибки);
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ОписаниеОшибки,,
					"ШаблонДокумента.Заголовок",,
					Отказ);
				Возврат;
			КонецЕсли;
			
			Если МассивРеквизитов.Количество() > 0 Тогда 
				Делопроизводство.ПоляШаблонаНаименованияНайдены(
					МассивРеквизитов, ТекущийОбъект.Ссылка, ОписаниеОшибки);
				
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ОписаниеОшибки,,
					"ШаблонДокумента.Заголовок",,
					Отказ);
					Возврат;
				КонецЕсли;
				
				ШаблонДокумента.ЗаполнениеНаименованияПоШаблону = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Рабочая группа
		РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
		Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
			Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
			Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
				РабочаяГруппаТаблица.Удалить(Строка);
			КонецЕсли;	
		КонецЦикла;
		
		НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
		РабочаяГруппаДобавить = Новый Массив;
		РабочаяГруппаУдалить = Новый Массив;
		
		// Формирование списка удаленных участников рабочей группы
		Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
			
			Найден = Ложь;
			
			Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
				Если Эл.Участник = Эл2.Участник 
					И Эл.Изменение = Эл2.Изменение Тогда
					
					Найден = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если Не Найден Тогда
				РабочаяГруппаУдалить.Добавить(
					Новый Структура("Участник, Изменение",
					Эл.Участник,
					Эл.Изменение));
			КонецЕсли;
			
		КонецЦикла;	
		
		// Формирование списка добавленных участников рабочей группы
		Для каждого Эл Из НоваяРабочаяГруппа Цикл
			
			Найден = Ложь;
			
			Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
				Если Эл.Участник = Эл2.Участник 
					И Эл.Изменение = Эл2.Изменение Тогда
					
					Найден = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если Не Найден Тогда
				РабочаяГруппаДобавить.Добавить(
					Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
			КонецЕсли;
			
		КонецЦикла;
		
		ШаблонДокумента.ДополнительныеРеквизиты.Очистить();
		Для Каждого ДопРеквизит Из ДополнительныеРеквизиты Цикл 
			Если ЗначениеЗаполнено(ДопРеквизит.Значение) Тогда 
				НовСтрока = ШаблонДокумента.ДополнительныеРеквизиты.Добавить();
				НовСтрока.Свойство = ДопРеквизит.Свойство;
				НовСтрока.Значение = ДопРеквизит.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ШаблонДокумента.ВидДокумента = ТекущийОбъект.Ссылка;
		ШаблонДокумента.Наименование = ТекущийОбъект.Наименование;
		ШаблонДокумента.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		ШаблонДокумента.КомментарийКШаблону = ТекущийОбъект.Комментарий;
		
		ЕстьАвтозаполнение = Ложь;
		ШаблонДокумента.ПравилаАвтозаполнения.Очистить();
		Для Каждого Строка Из Файлы Цикл
			НоваяСтрока = ШаблонДокумента.ПравилаАвтозаполнения.Добавить();
			НоваяСтрока.ШаблонФайла = Строка.Ссылка;
			НоваяСтрока.ПравилоАвтозаполнения = Строка.ПравилоАвтозаполнения;
			
			Если ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) Тогда
				ЕстьАвтозаполнение = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ШаблонДокумента.Автозаполнение = ЕстьАвтозаполнение;
		
		ШаблонСсылка = РеквизитФормыВЗначение("ШаблонДокумента");
		ШаблонСсылка.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
		ШаблонСсылка.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
		// Обработка рабочей группы
		РаботаСРабочимиГруппами.ОбъектПередЗаписьюНаСервере(ЭтаФорма, ШаблонСсылка, ПараметрыЗаписи);
		
		ШаблонСсылка.Записать();
		
		ИсходнаяРабочаяГруппа.Загрузить(НоваяРабочаяГруппа);
		
		ЗаполнитьСписокШаблоновВида(ТекущийОбъект.Ссылка);
		
		// Категории данных
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
			Для Каждого Категория Из ШаблонДокумента.Категории Цикл
				Категория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Значение);
			КонецЦикла;
		Иначе
			Элементы.СтраницаКатегории.Видимость = Ложь;
		КонецЕсли;
		
		// Рабочая группа
		РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
		ОбновитьВидимостьРеквизитов(ЭтаФорма);
		КоличествоУчастниковРабочейГруппы = РабочаяГруппаТаблица.Количество();
		
		
		// Создание файлов при сохранении нового документа
		Если ФайлыДобавленные.Количество() > 0 Тогда
			
			Индекс = ФайлыДобавленные.Количество() - 1;
			Пока Индекс >= 0 Цикл
				ФайлТаблицы = ФайлыДобавленные[Индекс]; 
				Если Не ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
					Индекс = Индекс - 1;
					Продолжить;
				КонецЕсли;
				
				ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
				ВладелецФайла = ШаблонДокумента.Ссылка;
				Источник = ДанныеФайла.Ссылка;
				
				ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
				
				Если ТипЗнч(ШаблонДокумента.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Или ФайлТаблицы.ДобавленИзШаблона Тогда 
					ХранитьВерсииНовыйФайл = Истина;
				КонецЕсли;	
				
				СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
				СведенияОФайле.Комментарий = Источник.Описание;
				СведенияОФайле.ИмяБезРасширения = Источник.ПолноеНаименование;
				СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;
				
				НачатьТранзакцию();
				Попытка
					Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(ВладелецФайла, СведенияОФайле);
				
					ХранилищеФайла = Неопределено;
					Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
						ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(
							Источник.ТекущаяВерсия);
					КонецЕсли;
					
					СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
					СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
					СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
					СведенияОФайле.АдресВременногоХранилищаТекста = Источник.ТекущаяВерсия.ТекстХранилище;
					СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
					СведенияОФайле.ВремяИзменения = Источник.ТекущаяВерсия.ДатаМодификацииФайла;
					СведенияОФайле.ВремяИзмененияУниверсальное = Источник.ТекущаяВерсия.ДатаМодификацииУниверсальная;
					
					Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
					
					РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, 
						Источник.ТекущаяВерсия.ТекстХранилище);
					
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ВызватьИсключение;
				КонецПопытки;
				
				ФайлыДобавленные.Удалить(Индекс);
				Индекс = Индекс - 1;
				
			КонецЦикла;
		
		КонецЕсли;
		
		// Файлы
		Элементы.Файлы.Видимость = Истина;
		Элементы.ФайлыДобавленные.Видимость = Ложь;
		
		ТребуетсяЗаписатьШаблон = Ложь;
		
	КонецЕсли;
	
	Нумерация.ЗаписатьНастройкиНумерацииВидаДокумента(ТекущийОбъект.Ссылка, НастройкиНумерации);
	
	Делопроизводство.ЗаписатьНастройкиЭтапов(ЭтаФорма, ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из НастройкиНумерации Цикл
		Если Не ЗначениеЗаполнено(Строка.Нумеровать) Тогда 
			НомерСтроки = НастройкиНумерации.Индекс(Строка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено поле ""Нумеровать""'; en = 'Field ""Numeration"" is not filled'"),,
				"НастройкиНумерации["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].Нумеровать",, Отказ);
		КонецЕсли;
	КонецЦикла;	
		
	//Проверка табличной части Настройки нумерации на задвоения
	КоличествоНастроек = НастройкиНумерации.Количество();	
	Если КоличествоНастроек > 1 Тогда	
		Для Инд1 = 0 По КоличествоНастроек - 2 Цикл 			
			Для Инд2 = Инд1 + 1 По КоличествоНастроек - 1 Цикл 			
				Если НастройкиНумерации[Инд1].Организация = НастройкиНумерации[Инд2].Организация 
					И НастройкиНумерации[Инд1].Контрагент = НастройкиНумерации[Инд2].Контрагент 
					И НастройкиНумерации[Инд1].Подразделение = НастройкиНумерации[Инд2].Подразделение
					И НастройкиНумерации[Инд1].Проект = НастройкиНумерации[Инд2].Проект
					И НастройкиНумерации[Инд1].ВопросДеятельности = НастройкиНумерации[Инд2].ВопросДеятельности Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Для указанных полей ""Действует для"" уже задана настройка нумерации'; en = 'For the fields specified in ""Effective for"" numeration settings are already set'"),,
						"НастройкиНумерации["+ Формат(Инд2, "ЧН=0; ЧГ=0") +"].Нумеровать",, Отказ);
				КонецЕсли;				
	        КонецЦикла;			
		КонецЦикла;	
	КонецЕсли;
	
	Делопроизводство.ОбработкаПроверкиЗаполненияНастройкиЭтапов(ЭтаФорма, Отказ);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; en = 'Data has been changed. Save changes?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ТекущийОбъект.ИспользоватьЭтапыОбработкиДокумента Тогда 
		Делопроизводство.ПрочитатьНастройкиЭтапов(ЭтаФорма);
	КонецЕсли;
	
	ЗаполнитьСписокШаблоновВида(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не МногоШаблонов Тогда 
		ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ШаблонДокумента.РабочаяГруппаДокумента, "Участник");
		ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(РабочаяГруппаТаблица, "Участник");
		ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ШаблонДокумента.ИсполнителиСогласования, "Исполнитель");
		ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ШаблонДокумента.Товары, "Номенклатура");
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Если НужноВключитьУчетПоНоменклатуреДел() И Не ПараметрыЗаписи.Свойство("ВключенУчетПоНоменклатуреДел")
		И Не ПоказанВопросПроВключениеНоменклатуры Тогда 
		
		ПоказанВопросПроВключениеНоменклатуры = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеВопросаОВключенииУчетаПоНоменклатуреДел",
			ЭтотОбъект,
			ПараметрыЗаписи);
		ТекстВопроса = НСтр("ru = 'Указанный нумератор использует индекс номенклатуры дел.
							|Включить учет по номенклатуре дел?';
							|en = 'The numerator specified uses index of case files.
							|Enable accounting for case files?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Не ОбязательноеУказаниеОтветственногоНачальноеЗначение 
			И Объект.ОбязательноеУказаниеОтветственного
			И Не ПоказанВопросПроОбязательноеУказаниеОтветственного Тогда 
			
			ТекстСообщенияОбОшибке = "";
			ЧислоДокументов = ПолучитьЧислоДокументовСоЗначениемРеквизита(Объект.Ссылка,
				"Ответственный",
				ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"),,
				ТекстСообщенияОбОшибке);
			
			Если ТекстСообщенияОбОшибке <> "" Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, ТекстСообщенияОбОшибке);
				Возврат;
			КонецЕсли;
			
			Если ЧислоДокументов <> 0 Тогда
				Отказ = Истина;
				ПоказатьДиалогОбязательноеУказаниеОтветственного(ПараметрыЗаписи, ЧислоДокументов);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	
		Если Не ВестиУчетПоОрганизациямНачальноеЗначение 
			И Объект.ВестиУчетПоОрганизациям
			И Не ПоказанВопросНазначитьОрганизацию Тогда 
			
			ТекстСообщенияОбОшибке = "";
			ЧислоДокументов = ПолучитьЧислоДокументовСоЗначениемРеквизита(Объект.Ссылка,
				"Организация",
				ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"),,
				ТекстСообщенияОбОшибке);
			
			Если ТекстСообщенияОбОшибке <> "" Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, ТекстСообщенияОбОшибке);
				Возврат;
			КонецЕсли;
			
			Если ЧислоДокументов <> 0 Тогда
				Отказ = Истина;
				ПоказатьДиалогНазначениеОрганизации(ПараметрыЗаписи, ЧислоДокументов);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	
		Если ВестиУчетПоОрганизациямНачальноеЗначение 
			И Не Объект.ВестиУчетПоОрганизациям
			И Не ПоказанВопросОчиститьОрганизацию Тогда 
			
			ТекстСообщенияОбОшибке = "";
			ЧислоДокументов = ПолучитьЧислоДокументовСоЗначениемРеквизита(Объект.Ссылка,
				"Организация",
				ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"),
				"<>",
				ТекстСообщенияОбОшибке);
				
			Если ТекстСообщенияОбОшибке <> "" Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, ТекстСообщенияОбОшибке);
				Возврат;
			КонецЕсли;
			
			Если ЧислоДокументов <> 0 Тогда
				
				Если ЧислоДокументов >= 100 Тогда
					Отказ = Истина;
					ПоказатьДиалогОчисткаОрганизации(ПараметрыЗаписи, ЧислоДокументов);
					Возврат;
				Иначе
					ПараметрыЗаписи.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОбязательноеУказаниеОтветственного(ПараметрыЗаписи, ЧислоДокументов)
	
	НужноПоказатьДиалогОбязательноеУказаниеОтветственного = Ложь;
	ПоказанВопросПроОбязательноеУказаниеОтветственного = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВопросаОбязательноеУказаниеОтветственного",
		ЭтотОбъект,
		ПараметрыЗаписи);
		
	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'Включено обязательное указание ответственного за документ. 
			|У некоторых документов вида ""%1"" ответственный не указан (%2 шт).
			|Заполнить ответственного из реквизита ""Подготовил""?';
			|en = 'Specifying the responsible for the document of this type is made mandatory. 
			|Some documents of type ""%1"" have no responsible users specified (%2 pcs).
			|Fill in the responsible from field ""Prepared by""?'"),
		Объект.Ссылка, 
		ЧислоДокументов);
		
	Кнопки = Новый СписокЗначений;	
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить'; en = 'Fill'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не заполнять'; en = 'Do not fill'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'; en = 'Cancel'"));
	
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,КодВозвратаДиалога.Да);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОбязательноеУказаниеОтветственного(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да И Результат <> КодВозвратаДиалога.Нет Тогда 
		ПоказанВопросПроОбязательноеУказаниеОтветственного = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ЗаполнитьОтветственногоАвтоматически = Истина;
	КонецЕсли;
	
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
			ЗакрытьПослеЗаписи();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогНазначениеОрганизации(ПараметрыЗаписи, ЧислоДокументов)
	
	НужноПоказатьДиалогНазначениеОрганизации = Ложь;
	ПоказанВопросНазначитьОрганизацию = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВопросаПроНазначениеОрганизации",
		ЭтотОбъект,
		ПараметрыЗаписи);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЧислоДокументовБезОрганизации", ЧислоДокументов);
	
	ОткрытьФорму("Справочник.ВидыВнутреннихДокументов.Форма.НазначениеОрганизации",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаПроНазначениеОрганизации(Результат, ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СправочникСсылка.Организации")
		И Результат <> КодВозвратаДиалога.Нет Тогда 
		ПоказанВопросНазначитьОрганизацию = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Организации") Тогда 
		ПараметрыЗаписи.Вставить("Организация", Результат);
	КонецЕсли;
	
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
			ЗакрытьПослеЗаписи();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОчисткаОрганизации(ПараметрыЗаписи, ЧислоДокументов)
	
	НужноПоказатьДиалогНазначениеОрганизации = Ложь;
	ПоказанВопросОчиститьОрганизацию = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВопросаПроОчисткуОрганизации",
		ЭтотОбъект,
		ПараметрыЗаписи);
		
	Если ЧислоДокументов % 10 = 1
		И ЧислоДокументов <> 11 Тогда
		ЧислоДокументовСтрокой = СтрШаблон(НСтр("ru = '%1 документа'; en = '%1 document'"), ЧислоДокументов);
	Иначе
		ЧислоДокументовСтрокой = СтрШаблон(НСтр("ru = '%1 документов'; en = '%1 documents'"), ЧислоДокументов);
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(НСтр(
		"ru = 'Отключен учет по организациям. У %1 этого вида указана
		|организация, и они попадут в отчеты и отборы по ней.
		|
		|Очистить организацию? Это действие необратимо!';
		|en = 'Accounting for multiple companies is disabled. %1 document(s) of this type 
		|have a company specified, so they will appear in reports and in filters 
		|by these companies. 
		|Clear companies in these documents? This action is irreversible!'"),
		ЧислоДокументовСтрокой);
		
	ПоказатьВопрос(ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаПроОчисткуОрганизации(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		ПоказанВопросОчиститьОрганизацию = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПараметрыЗаписи.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	КонецЕсли;
	
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
			ЗакрытьПослеЗаписи();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОВключенииУчетаПоНоменклатуреДел(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ВестиУчетПоНоменклатуреДел = Истина;
	ПараметрыЗаписи.Вставить("ВключенУчетПоНоменклатуреДел", Истина);
	Если Записать(ПараметрыЗаписи) Тогда
		ПослеЗаписиКлиент(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("НетНастройкиНумерации", Нумерация.НетНастройкиНумерации(ТекущийОбъект.Ссылка));
	
	ИндексНумерации = СокрЛП(ИндексНумерации);
	Если ИндексНумерации <> ИндексНумерацииПриОткрытии Тогда 
		Если ЗначениеЗаполнено(ИндексНумерации) Тогда 
			РегистрыСведений.ИндексыНумерации.ЗаписатьИндексНумерации(Объект.Ссылка, ИндексНумерации);
		Иначе 
			РегистрыСведений.ИндексыНумерации.УдалитьИндексНумерации(Объект.Ссылка);
		КонецЕсли;
		
		ИндексНумерацииПриОткрытии = ИндексНумерации;
	КонецЕсли;
	
	Если ЗаполнитьОтветственногоАвтоматически Тогда
		ЗаполнитьОтветственногоАвтоматически = Ложь;
		ВыполнитьЗаполнениеОтветственного(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Организация") Тогда
		ВыполнитьИзменениеОрганизации(ТекущийОбъект.Ссылка, ПараметрыЗаписи.Организация);
		ПараметрыЗаписи.Удалить("Организация");
	КонецЕсли;
	
	ПоказанВопросПроОбязательноеУказаниеОтветственного = Ложь;
	ПоказанВопросНазначитьОрганизацию = Ложь;
	ПоказанВопросОчиститьОрганизацию = Ложь;
	
	ВестиУчетПоОрганизациямНачальноеЗначение = Объект.ВестиУчетПоОрганизациям;
	ОбязательноеУказаниеОтветственногоНачальноеЗначение = Объект.ОбязательноеУказаниеОтветственного;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОпцияПриИзменении(Элемент)
	
	УстановитьДоступностьОпций(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетПоКонтрагентамПриИзменении(Элемент)
	
	Если Объект.ВестиУчетПоКонтрагентам Тогда
		Объект.ВестиУчетСторон = Ложь;
		Объект.ВариантПодписания = ПредопределенноеЗначение("Перечисление.ВариантыПодписания.НеПодписывается");
		ОбновитьРеквизитыСторон();
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСторонПриИзменении(Элемент)
	
	Если Объект.ВестиУчетСторон Тогда
		Объект.ВестиУчетПоКонтрагентам = Ложь;
		Объект.ИспользоватьУтверждение = Ложь;
		Объект.ИспользоватьПодписание = Истина;
		Объект.ВариантПодписания = ПредопределенноеЗначение("Перечисление.ВариантыПодписания.МыИКонтрагенты");
		ОбновитьРеквизитыСторон();
	Иначе
		Объект.ВариантПодписания = ПредопределенноеЗначение("Перечисление.ВариантыПодписания.НеПодписывается");
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУтверждениеПриИзменении(Элемент)
	
	Если Объект.ИспользоватьУтверждение Тогда
		Объект.ИспользоватьПодписание = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПодписаниеПриИзменении(Элемент)
	
	Если Объект.ИспользоватьПодписание Тогда
		Объект.ИспользоватьУтверждение = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетТоваровИУслугПриИзменении(Элемент)
	
	Если Объект.ВестиУчетТоваровИУслуг И Не Объект.УчитыватьСуммуДокумента Тогда 
		Объект.УчитыватьСуммуДокумента = Истина;
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтаФорма)
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоСтатьямДДСПриИзменении(Элемент)
	
	Если Объект.ВестиУчетПоСтатьямДДС И Не Объект.УчитыватьСуммуДокумента Тогда 
		Объект.УчитыватьСуммуДокумента = Истина;
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтаФорма)
	
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяДоговоромПриИзменении(Элемент)
	
	Если Объект.ЯвляетсяДоговором Тогда
		Объект.ВестиУчетПоКонтрагентам = Ложь;
		Объект.УчитыватьСрокДействия = Истина;
		Объект.УчитыватьСуммуДокумента = Истина;
		Объект.УчитыватьНедействующиеДокументы = Истина;
		Объект.ЯвляетсяКомплектомДокументов = Ложь;
		Объект.ОбязательноеУказаниеОтветственного = Истина;
		Объект.ВестиУчетПоОрганизациям = ИспользоватьУчетПоОрганизациям;
		Объект.ВестиУчетСторон = Истина;
		Объект.ИспользоватьПодписание = Истина;
		Объект.ИспользоватьУтверждение = Ложь;
		Объект.ВариантПодписания = ПредопределенноеЗначение("Перечисление.ВариантыПодписания.МыИКонтрагенты");
		ОбновитьРеквизитыСторон();
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтаФорма)
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоНоменклатуреДелПриИзменении(Элемент)
	
	Если Объект.ВестиУчетПоНоменклатуреДел Тогда
		Объект.ВестиУчетПоОрганизациям = ИспользоватьУчетПоОрганизациям;
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтаФорма)
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭтапыОбработкиДокументаПриИзменении(Элемент)
	
	Элементы.ГруппаЭтапы.Видимость = Объект.ИспользоватьЭтапыОбработкиДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		ШаблонДокумента.Категории, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, ШаблонДокумента.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыЗначениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСШаблонамиДокументовКлиент.ПоказатьФормуВыбораЗначения(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, ШаблонДокумента.Адресат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ШаблонДокумента И КоличествоШаблонов > 0 
		И ЕстьПравоНаСозданиеШаблона И Не Объект.Ссылка.Пустая() Тогда 
		Элементы.ГруппаШаблонВида.Видимость = Истина;
	Иначе 
		Элементы.ГруппаШаблонВида.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Контрагент""'; en = 'Field ""Counterparty"" is not filled in'"),,
			"Объект.Контрагенты["+ Формат(ТекущиеДанные.НомерСтроки-1, "ЧН=0; ЧГ=0") +"].Контрагент",,);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКонтрагентов(Форма)
	
	Форма.Элементы.ГруппаКонтрагент.Видимость = 
		Форма.Объект.ВестиУчетПоКонтрагентам
		И Не Форма.НесколькоКонтрагентов
		И Не Форма.Объект.ВестиУчетСторон;
		
	Форма.Элементы.Контрагенты.Видимость =
		Форма.Объект.ВестиУчетПоКонтрагентам
		И Форма.НесколькоКонтрагентов
		И Не Форма.Объект.ВестиУчетСторон;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКонтрагентаИзРеквизитовВСписок()
	
	ШаблонДокумента.Контрагенты.Очистить();
	
	Строка = ШаблонДокумента.Контрагенты.Добавить();
	Строка.Контрагент = ШаблонДокумента.Контрагент;
	Строка.КонтактноеЛицо = ШаблонДокумента.КонтактноеЛицо;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписантНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаголовокФормы = НСтр("ru = 'Выбор подписанта'; en = 'Select signer'");
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, ШаблонДокумента.Подписант, ЗаголовокФормы);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Работа с номенклатурой дел

&НаКлиенте
Процедура НоменклатураДелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 			ШаблонДокумента.Организация);
	ПараметрыФормы.Вставить("ВидДокумента", 		ШаблонДокумента.ВидДокумента);
	ПараметрыФормы.Вставить("Контрагент", 			ШаблонДокумента.Контрагент);
	ПараметрыФормы.Вставить("ВопросДеятельности", 	ШаблонДокумента.ВопросДеятельности);
	ПараметрыФормы.Вставить("ТекущаяСтрока", 		ШаблонДокумента.НоменклатураДел);
	ПараметрыФормы.Вставить("Подразделение", 		ШаблонДокумента.Подразделение);
	
	ОткрытьФорму("Справочник.НоменклатураДел.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(Текст, ШаблонДокумента.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(Текст, ШаблонДокумента.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаШаблона = Элемент.ТекстРедактирования;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидДокумента", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ШаблонНаименования", СтрокаШаблона);
	ПараметрыОткрытия.Вставить("Шаблон", ШаблонДокумента.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаголовокНачалоВыбораПродолжить", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ШаблонНаименованияДокумента", ПараметрыОткрытия,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокНачалоВыбораПродолжить(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ШаблонДокумента.Заголовок = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждаетТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	Если ШаблонДокумента.ГрифыУтверждения.Количество() > 0 Тогда
		ГрифУтверждения = ШаблонДокумента.ГрифыУтверждения[0];
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ГрифУтверждения.АвторУтверждения);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор утверждающего'; en = 'Select confirming person'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораУтверждающего", ЭтаФорма);
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораУтверждающего(ВыбранныйУтверждающий, ДопПараметры) Экспорт
	
	Если ВыбранныйУтверждающий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УтверждаетТекстОбработкаВыбора(Элементы.УтверждаетТекст, ВыбранныйУтверждающий, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждаетТекстОчистка(Элемент, СтандартнаяОбработка)
	
	ШаблонДокумента.ГрифыУтверждения.Очистить();
	УтверждаетТекст = "";
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждаетТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ШаблонДокумента.ГрифыУтверждения.Количество() > 0 Тогда
		ГрифУтверждения = ШаблонДокумента.ГрифыУтверждения[0];
		ПоказатьЗначение(, ГрифУтверждения.АвторУтверждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждаетТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ШаблонДокумента.ГрифыУтверждения.Очистить();
	ГрифУтверждения = ШаблонДокумента.ГрифыУтверждения.Добавить();
	ГрифУтверждения.АвторУтверждения = ВыбранноеЗначение;
	
	УтверждаетТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1", ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждаетТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждаетТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			СтандартнаяОбработка = Истина;
			УтверждаетТекстОбработкаВыбора(Элемент, ДанныеВыбора[0].Значение, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыНастройкиНумерации

&НаКлиенте
Процедура НастройкиНумерацииПослеУдаления(Элемент)
	
	СформироватьЗаголовокЗакладкиНумерация();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		СформироватьЗаголовокЗакладкиНумерация();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииНумероватьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНумерации.Автоматически"),
		НСтр("ru = 'Автоматически'; en = 'Automatically'"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНумерации.Вручную"),
		НСтр("ru = 'Вручную'; en = 'Manually'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НастройкиНумерацииНумероватьНачалоВыбораПослеВыбораТипаНумерации",
		ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииНумероватьНачалоВыбораПослеВыбораТипаНумерации(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	ТекущиеДанные.СпособНумерации = ВыбранныйЭлемент.Значение;
	
	Если ТекущиеДанные.СпособНумерации = ПредопределенноеЗначение("Перечисление.СпособыНумерации.Автоматически") Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"НастройкиНумерацииНумероватьНачалоВыбораПродолжение",
			ЭтотОбъект);
		ПараметрыФормы =  Новый Структура("ТекущаяСтрока", ТекущиеДанные.Нумератор);
		ОткрытьФорму(
			"Справочник.Нумераторы.ФормаВыбора", 
			ПараметрыФормы, 
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	Иначе	
		ТекущиеДанные.Нумератор = Неопределено;
	КонецЕсли;	
	
	ТекущиеДанные.Нумеровать = Нумерация.СформироватьПолеНумеровать(ТекущиеДанные.СпособНумерации, ТекущиеДанные.Нумератор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииНумероватьНачалоВыбораПродолжение(ВыбранноеЗначение, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	Модифицированность = ТекущиеДанные.Нумератор <> ВыбранноеЗначение;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ТекущиеДанные.Нумератор = ВыбранноеЗначение;
	Иначе	
		ТекущиеДанные.СпособНумерации = Неопределено;
	КонецЕсли;	
	ТекущиеДанные.Нумеровать = Нумерация.СформироватьПолеНумеровать(ТекущиеДанные.СпособНумерации, ТекущиеДанные.Нумератор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииНумероватьОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Нумератор) Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,ТекущиеДанные.Нумератор);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыЭтапыОбработкиДокументов

&НаКлиенте
Процедура ЭтапыОбработкиДокументовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
		ТекущиеДанные.Порядок = КоличествоЭтапов + 1;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОбработкиДокументовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		Если Не ОтменаРедактирования Тогда 
			КоличествоЭтапов = КоличествоЭтапов + 1;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОбработкиДокументовПослеУдаления(Элемент)
	
	Порядок = 1;
	Для Каждого Строка Из ЭтапыОбработкиДокументов Цикл 
		Строка.Порядок = Порядок;
		Порядок = Порядок + 1;
	КонецЦикла;
	
	КоличествоЭтапов = ЭтапыОбработкиДокументов.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппаДокумента

&НаКлиенте
Процедура РабочаяГруппаДокументаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(
		Элемент, // РабочаяГруппаЭлемент
		НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.ШаблонРабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		ШаблонДокумента.РабочаяГруппаДокумента,
		Элементы.РабочаяГруппаДокумента,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ШаблонРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппыДляШаблоновДокументов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппаТаблица

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнителиСогласования

&НаКлиенте
Процедура ИсполнителиСогласованияИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСАдреснойКнигойКлиент.ВыбратьСогласующегоДляШаблонаДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСогласованияИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСогласованияИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСогласованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		Элементы.ИсполнителиСогласования.ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСогласованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ШаблонДокумента.ИсполнителиСогласования.Очистить();
	Для Каждого ВыбранныйИсполнитель Из ВыбранноеЗначение Цикл
		НоваяСтрока = ШаблонДокумента.ИсполнителиСогласования.Добавить();
		НоваяСтрока.Исполнитель = ВыбранныйИсполнитель;
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыШаблоныВида

&НаКлиенте
Процедура ШаблоныВидаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

	ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидДокумента", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
	
	Если Копирование Тогда 
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.Шаблон);
		ОткрытьФорму("Справочник.ШаблоныВнутреннихДокументов.ФормаОбъекта", ПараметрыФормы, Элементы.ШаблоныВида);
	Иначе 
		ОчиститьСообщения();
		ОткрытьФорму("Справочник.ШаблоныВнутреннихДокументов.ФормаОбъекта", ПараметрыФормы,
			Элементы.ШаблоныВида);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныВидаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Шаблон) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Шаблон);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныВидаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ШаблоныВидаПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("Шаблон", ТекущиеДанные.Шаблон));
	ПоказатьВопрос(ОписаниеОповещения, 
		СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"), ТекущиеДанные.Шаблон), 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныВидаПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		УдалитьШаблонДокумента(Параметры.Шаблон);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьШаблонДокумента(Шаблон)
	
	Делопроизводство.ПометитьШаблонНаУдаление(Шаблон, Истина);
	ЗаполнитьСписокШаблоновВида();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	КоличествоФайлов = 0;
	КоличествоФайлов = Файлы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТекущийЗанятыйФайл(ФайлыСтрока, МассивЗахваченныхФайлов) Экспорт
	
	Если ФайлыСтрока.РедактируетТекущийПользователь Тогда
		
		ДанныеФайла = Новый Структура("Ссылка, ПолноеИмяФайлаВРабочемКаталоге,
			|РедактируетТекущийПользователь, ДатаМодификацииУниверсальнаяВБазе, Размер");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, ФайлыСтрока);
		
		МассивЗахваченныхФайлов.Добавить(ДанныеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ПравилоАвтозаполнения 
		И СтрНайти(СписокРасширенийШаблонов, НРег(Строка.Расширение)) > 0 Тогда 
		#Если НЕ ВебКлиент Тогда
			
			ВыполнитьАвтоЗаполнение(Строка);
			
		#Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Настройка заполнения файлов в веб-клиенте не поддерживается.
                                           |Используйте тонкий клиент.';
                                           |en = 'Setting fill files in the Web client is not supported. 
                                           |Use a thin client.'"));
		#КонецЕсли
		
	Иначе
		
		ВыборФайла(Строка.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаФайлыЗанятыWord(РезультатВопроса, ПараметрыВыполнения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ВыполнитьАвтоЗаполнение(ПараметрыВыполнения.Строка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАвтоЗаполнение(Строка)
	
	МассивЗахваченныхФайлов = Новый Массив;
	ДобавитьТекущийЗанятыйФайл(Строка, МассивЗахваченныхФайлов);
	
	СписокЗанятыеWordФайлы = ДелопроизводствоКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(
		ШаблонДокумента.Ссылка,
		УникальныйИдентификатор, 
		МассивЗахваченныхФайлов);
	
	Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда
		
		СтрокаФайлов = "";
		Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
			Если Не ПустаяСтрока(СтрокаФайлов) Тогда
				СтрокаФайлов = СтрокаФайлов + Символы.ВК;
			КонецЕсли;	
			СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
		КонецЦикла;	
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для настройки заполнения закройте файл:  
                  | 
                  |%1.';
                  |en = 'To fill settings close file: 
                  |%1.'"),
			СтрокаФайлов);
			
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
		ПараметрыОбработки = Новый Структура("Строка", Строка);	
		Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWord", ЭтотОбъект, ПараметрыОбработки);
		ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ПродолжитьАвтоЗаполнение(Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьАвтоЗаполнение(Строка)
	
	МассивЗахваченныхФайлов = Новый Массив;
	ДобавитьТекущийЗанятыйФайл(Строка, МассивЗахваченныхФайлов);
	
	ДелопроизводствоКлиент.ПоместитьИзмененияФайлов(ШаблонДокумента.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Строка", Строка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПравилаАвтозаполненияПродолжение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВладелецФайла", ШаблонДокумента.ВидДокумента);
	ЗначенияЗаполнения.Вставить("ШаблонФайла", Строка.Ссылка);
	ЗначенияЗаполнения.Вставить("УникальныйИдентификатор", ЭтаФорма.УникальныйИдентификатор);
	ЗначенияЗаполнения.Вставить("Наименование", Строка.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Строка.ПравилоАвтозаполнения);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", ЭтаФорма.УникальныйИдентификатор);
	
	ПараметрыФормы.Вставить("ШаблонФайла", Строка.Ссылка);
	ПараметрыФормы.Вставить("Организация", ШаблонДокумента.Организация);
	ПараметрыФормы.Вставить("ВестиУчетТоваровИУслуг", Объект.ВестиУчетТоваровИУслуг);
	
	Если Не ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) Тогда 
		ПараметрыФормы.Вставить("РежимСозданияДоговора", Истина);
	КонецЕсли;
	
	Если АвтозаполнениеШаблоновФайловКлиентСервер.ЭтоMSWord(Строка.Расширение) Тогда 
		ОткрытьФорму("Справочник.ПравилаАвтозаполненияФайлов.Форма.КраткаяФормаЭлемента",
			ПараметрыФормы, ЭтаФорма,,,,
			ОписаниеОповещения);
	Иначе 
		ОткрытьФорму("Справочник.ПравилаАвтозаполненияФайлов.ФормаОбъекта",
			ПараметрыФормы, ЭтаФорма,,,,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПравилаАвтозаполненияПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;
	
	Строка = ДополнительныеПараметры.Строка;
	
	Строка.ПравилоАвтозаполнения = Результат;
	Строка.ПравилоАвтозаполненияСтр = НСтр("ru = 'Открыть'; en = 'Open'");
	ТребуетсяЗаписатьШаблон = Истина;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления)
	
	Если Объект.Ссылка.Пустая()Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
	ИначеЕсли ШаблонДокумента.Ссылка.Пустая() Тогда 
		ПараметрыЗаписи = Новый Структура("ЗаписатьШаблон", Истина);
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВладелецФайла = ШаблонДокумента.Ссылка;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 2;
			НеОткрыватьФормуВыбораРежимаСозданияФайла = Истина;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, 
				ЭтаФорма, РежимСоздания, Истина,,,,, НеОткрыватьФормуВыбораРежимаСозданияФайла);
		Исключение
			ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		ФайлОснование = ТекущиеДанные.Ссылка;
		
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Отказ = Истина;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура);
	ДелопроизводствоКлиент.ПометитьФайлыДокументаНаУдаление(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивФайлов = Параметры.МассивФайлов;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления);
		Оповестить("ФайлыДокументаПомеченыНаУдаление", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	МассивФайловДляПеретаскивания = Новый Массив;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);
			МассивФайловДляПеретаскивания.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		МассивФайловДляПеретаскивания.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайловДляПеретаскивания;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийЭлемент = Элементы.Файлы;
	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
	ИначеЕсли ШаблонДокумента.Ссылка.Пустая() Тогда 
		ТребуетсяЗаписатьШаблон = Истина;
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВладелецФайлаСписка = ШаблонДокумента.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	ПараметрыВыполнения = Новый Структура("Файл", Файл);
	
	Обработчик = Новый ОписаниеОповещения("ВыборФайлаПослеУстановкиРасширения", 
		ЭтотОбъект, ПараметрыВыполнения);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВыборФайлаПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	Файл = ПараметрыВыполнения.Файл;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьСтрокуФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыДобавленные

&НаКлиенте
Процедура ФайлыДобавленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ТекущиеДанные.ПолныйПуть) Тогда 
		ТекущийФайлВСпискеДобавленныхДляОткрытия = ПолучитьИзВременногоХранилища(ТекущиеДанные.ПолныйПуть).Ссылка;
		Записать();
	Иначе
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПослеУдаления(Элемент)
	
	КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
	КоличествоФайлов = КоличествоФайловТаблицы;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
&НаКлиенте
Процедура ФайлыДобавленныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ФайлыДобавленные.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
		И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		Файл = ПараметрыПеретаскивания.Значение;
		НоваяСтрока = ФайлыДобавленные.Добавить();
		НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
		НоваяСтрока.ПолныйПуть = Файл.ПолноеИмя;
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
		КоличествоФайлов = КоличествоФайлов + 1;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
		И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Ложь Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите только файлы, но не каталоги.'; en = 'Select only files but not directories.'"));
		Возврат;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() > 0 
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ФайлПринятый.ИмяБезРасширения;
					НоваяСтрока.ПолныйПуть = ФайлПринятый.ПолноеИмя;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(
						ФайлПринятый.Расширение);
					КоличествоФайлов = КоличествоФайлов + 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ФайлыДобавленные.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыСтороны

&НаКлиенте
Процедура СтороныСторонаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ТекущиеДанные.Сторона = КонтрагентПустаяСсылка;
		ТекущиеДанные.КонтактноеЛицо = КонтактноеЛицоПустаяСсылка;
		ТекущиеДанные.Подписант = КонтактноеЛицоПустаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ОтображатьОрганизации", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор стороны'; en = 'Select a party'"));
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Сторона) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ТекущиеДанные.Сторона);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы,
		Элементы.СтороныСторона,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") Тогда
		ТекущиеДанные.Сторона = ВыбранноеЗначение;
		ТекущиеДанные.КонтактноеЛицо = ПользователиПустаяСсылка;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекущиеДанные.Сторона = ВыбранноеЗначение;
		ТекущиеДанные.КонтактноеЛицо = КонтактноеЛицоПустаяСсылка;	
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ (ЗначениеЗаполнено(ТекущиеДанные.Сторона) И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
			ТекущиеДанные.Сторона = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;	
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		ТекущиеДанные.Сторона = Контрагент;
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	КонецЕсли;
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораСтороны(ПараметрыПолученияДанных);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораСтороны(ПараметрыПолученияДанных);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСПодписямиДокументовКлиент.СтороныКонтактноеЛицоНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Элементы.СтороныКонтактноеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда

		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ (ЗначениеЗаполнено(ТекущиеДанные.Сторона) И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
				ТекущиеДанные.Сторона = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;	
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ Контрагент <> ТекущиеДанные.Сторона Тогда
				ТекущиеДанные.Сторона = Контрагент;
		КонецЕсли;
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	КонецЕсли;
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораКонтактногоЛицаСтороны(ПараметрыПолученияДанных);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораКонтактногоЛицаСтороны(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписантНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСПодписямиДокументовКлиент.СтороныПодписалНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Элементы.СтороныПодписант, "Подписант");
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписантОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда

		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ (ЗначениеЗаполнено(ТекущиеДанные.Сторона) И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
				ТекущиеДанные.Сторона = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
		ТекущиеДанные.Подписант = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ Контрагент <> ТекущиеДанные.Сторона Тогда
				ТекущиеДанные.Сторона = Контрагент;
		КонецЕсли;
		ТекущиеДанные.Подписант = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		ТекущиеДанные.Подписант = ВыбранноеЗначение;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписантАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораПодписал(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписантОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораПодписал(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрифыУтверждения

&НаКлиенте
Процедура ГрифыУтвержденияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		Элементы.ГрифыУтверждения.ТекущиеДанные.АвторУтверждения = ПользователиПустаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифыУтвержденияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ШаблонДокумента.ГрифыУтверждения.Очистить();
	Для Каждого ВыбранныйАвтор Из ВыбранноеЗначение Цикл
		НоваяСтрока = ШаблонДокумента.ГрифыУтверждения.Добавить();
		НоваяСтрока.АвторУтверждения = ВыбранныйАвтор;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифыУтвержденияАвторУтвержденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСАдреснойКнигойКлиент.ВыбратьУтверждающегоДляШаблонаДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифыУтвержденияАвторУтвержденияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифыУтвержденияАвторУтвержденияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбора(Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПринятыеЭлементы = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
			ПринятыеЭлементы.Добавить(Строка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПринятыеЭлементы.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Если ПринятыеЭлементы.Количество() > 0 Тогда
		Для Каждого ВыделеннаяСтрока Из ПринятыеЭлементы Цикл
			ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
			Если ТекущиеДанные.ЭтоГруппа Тогда 
				Обработчик = Новый ОписаниеОповещения("ПеренестиНоменклатуруПродолжение", ЭтотОбъект, 
					Новый Структура("Группа", ТекущиеДанные.Ссылка));
				ПоказатьВопрос(Обработчик, 
					НСтр("ru = 'Выбран групповой элемент.
	                     |Добавить все содержимое группы?';
	                     |en = 'A group is selected.
	                     |Add all items of the group?'"), РежимДиалогаВопрос.ДаНет, 60);
				Возврат;
				
			Иначе 
				НайденныеСтроки = ШаблонДокумента.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Ссылка));
				Если НайденныеСтроки.Количество() = 0 Тогда 
					НайденнаяСтрока = ШаблонДокумента.Товары.Добавить();
					НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
					НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
					НайденнаяСтрока.Количество = 1;
				Иначе 
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
						НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонДокументаТоварыНоменклатураПриИзменении(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		РеквизитыКарточки = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
			ТекущиеДанные.Номенклатура, "ЕдиницаИзмерения");
		ТекущиеДанные.ЕдиницаИзмерения = РеквизитыКарточки.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьНоменклатуру(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНаборСвойств(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьНаборСвойствПродолжение",
		ЭтотОбъект);

	Если Объект.Ссылка.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Для перехода к набору свойств элемент необходимо записать.'; en = 'Write element to go to the set of properties'") + Символы.ПС + НСтр("ru = 'Записать?'; en = 'Save?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНаборСвойствПродолжение(Результат, Параметры) Экспорт 

	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;	
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда 
					
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "НаборыДополнительныхРеквизитов");
	
	ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка", ПараметрыФормы);
	
	ПараметрыПерехода = Новый Структура;
	ПараметрыПерехода.Вставить("Набор", Объект.НаборСвойств);
	ПараметрыПерехода.Вставить("Свойство", Неопределено);
	ПараметрыПерехода.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	Оповестить("Переход_НаборыДополнительныхРеквизитовИСведений", ПараметрыПерехода);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВверх(Команда)
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.Порядок = 1 Тогда 
		Возврат;
	КонецЕсли;	
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого Строка Из ЭтапыОбработкиДокументов Цикл
		Если Строка.Порядок = ТекущиеДанные.Порядок - 1 Тогда 
			ПредыдущаяСтрока = Строка;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	ИндексПредыдущаяСтрока = ПредыдущаяСтрока.ПолучитьИдентификатор();
	
	ИменаКолонок = "Наименование, Этап, Срок";
	ДанныеСтроки = Новый Структура(ИменаКолонок);
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ПредыдущаяСтрока, ИменаКолонок);
	ЗаполнитьЗначенияСвойств(ПредыдущаяСтрока, ТекущиеДанные, ИменаКолонок);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки, ИменаКолонок);
	
	Элементы.ЭтапыОбработкиДокументов.ТекущаяСтрока = ИндексПредыдущаяСтрока;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВниз(Команда)
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.Порядок = КоличествоЭтапов Тогда 
		Возврат;
	КонецЕсли;	
	
	СледующаяСтрока = Неопределено;
	Для Каждого Строка Из ЭтапыОбработкиДокументов Цикл
		Если Строка.Порядок = ТекущиеДанные.Порядок + 1 Тогда 
			СледующаяСтрока = Строка;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	ИндексСледующаяСтрока = СледующаяСтрока.ПолучитьИдентификатор();
	
	ИменаКолонок = "Наименование, Этап, Срок";
	ДанныеСтроки = Новый Структура(ИменаКолонок);
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СледующаяСтрока, ИменаКолонок);
	ЗаполнитьЗначенияСвойств(СледующаяСтрока, ТекущиеДанные, ИменаКолонок);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки, ИменаКолонок);
	
	Элементы.ЭтапыОбработкиДокументов.ТекущаяСтрока = ИндексСледующаяСтрока;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинКонтрагент(Команда)
	
	КоличествоКонтрагентов = ШаблонДокумента.Контрагенты.Количество(); 
	Для Инд = 1 По КоличествоКонтрагентов Цикл 
		Строка = ШаблонДокумента.Контрагенты[КоличествоКонтрагентов - Инд]; 
		Если Не ЗначениеЗаполнено(Строка.Контрагент) Тогда 
			ШаблонДокумента.Контрагенты.Удалить(Строка); 
		КонецЕсли; 
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОдинКонтрагентПродолжение",
		ЭтотОбъект);

	Если ШаблонДокумента.Контрагенты.Количество() > 1 Тогда 
		ТекстВопроса = НСтр("ru = 'Все контрагенты, кроме первого, будут удалены. 
			|Продолжить?';
			|en = 'All counterparties except the first one will be deleted. 
			|Сontinue?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинКонтрагентПродолжение(Результат, Параметры)Экспорт 

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		Пока ШаблонДокумента.Контрагенты.Количество() > 1 Цикл
			ШаблонДокумента.Контрагенты.Удалить(1);
		КонецЦикла;
		Модифицированность = Истина;
		
	КонецЕсли;

	Если ШаблонДокумента.Контрагенты.Количество() > 0 Тогда
		Строка = ШаблонДокумента.Контрагенты[0];		
		ШаблонДокумента.Контрагент = Строка.Контрагент;
		ШаблонДокумента.КонтактноеЛицо = Строка.КонтактноеЛицо;
	Иначе	
		ШаблонДокумента.Контрагент = Неопределено;
		ШаблонДокумента.КонтактноеЛицо = Неопределено;
	КонецЕсли;
	
	НесколькоКонтрагентов = Ложь;
	УстановитьВидимостьКонтрагентов(ЭтаФорма);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;

КонецПроцедуры

&НаКлиенте
Процедура МногоКонтрагентов(Команда)
	
	НесколькоКонтрагентов = Истина;
	УстановитьВидимостьКонтрагентов(ЭтаФорма);

	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрагенты;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСогласующих(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьСогласующихДляШаблонаДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппыДокумента(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппыДляШаблоновДокументов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйШаблон(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидДокумента", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
	
	ОткрытьФорму("Справочник.ШаблоныВнутреннихДокументов.ФормаОбъекта", ПараметрыФормы,
		Элементы.ШаблоныВида);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьШаблон(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	Если МногоШаблонов Тогда 
		ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ШаблонДляКопирования = ТекущиеДанные.Шаблон;
		
	ИначеЕсли Не ШаблонДокумента.Ссылка.Пустая() Тогда 
		ШаблонДляКопирования = ШаблонДокумента.Ссылка;
		
	Иначе 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидДокумента", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ЗначениеКопирования", ШаблонДляКопирования);
	
	ОткрытьФорму("Справочник.ШаблоныВнутреннихДокументов.ФормаОбъекта", ПараметрыФормы,
		Элементы.ШаблоныВида);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьШаблонНаУдаление(Команда)
	
	Если МногоШаблонов Тогда 
		ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ШаблонДляУдаления = ТекущиеДанные.Шаблон;
		ИмяШаблона = ТекущиеДанные.Шаблон;
	ИначеЕсли Не ШаблонДокумента.Ссылка.Пустая() Тогда 
		ШаблонДляУдаления = ШаблонДокумента.Ссылка;
		ИмяШаблона = ШаблонДокумента.Наименование;
	Иначе 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ШаблоныВидаПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("Шаблон", ШаблонДляУдаления));
	
	ПоказатьВопрос(ОписаниеОповещения, 
		СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"), ИмяШаблона), 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьКатегории(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		ШаблонДокумента.Категории, ОписаниеОповещения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНоменклатуру(Команда)
	
	ПоказыватьНоменклатуру = Не ПоказыватьНоменклатуру;
	Элементы.ПодобратьНоменклатуру.Пометка = ПоказыватьНоменклатуру;
	Элементы.ВсяНоменклатура.Видимость = ПоказыватьНоменклатуру;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	ВыделенныеСтроки = Элементы.ВсеТовары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущиеДанные.ЭтоГруппа Тогда 
			Обработчик = Новый ОписаниеОповещения("ПеренестиНоменклатуруПродолжение", ЭтотОбъект, 
				Новый Структура("Группа", ТекущиеДанные.Ссылка));
			ПоказатьВопрос(Обработчик, 
				НСтр("ru = 'Выбран групповой элемент.
                     |Добавить все содержимое группы?';
                     |en = 'A group is selected.
                     |Add all items of the group?'"), РежимДиалогаВопрос.ДаНет, 60);
			Возврат;
			
		Иначе 
			НайденныеСтроки = ШаблонДокумента.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Ссылка));
			Если НайденныеСтроки.Количество() = 0 Тогда 
				НайденнаяСтрока = ШаблонДокумента.Товары.Добавить();
				НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
				НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
				НайденнаяСтрока.Количество = 1;
			Иначе 
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУтверждающих(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУтверждающихДляШаблонаДокумента(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		ОткрытьФайл(ФайлСсылка);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	ПараметрыДобавления = Новый Структура;
	
	ФайлыПередНачаломДобавленияКлиент(Элементы.Файлы, Истина, Ложь, Неопределено, Неопределено, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленныхДляРедактирования =
				ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;
	Иначе
		
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		ТекущиеДанные.Ссылка, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	РаботаСФайламиКлиент.ЗанятьСОповещением(Неопределено, ТекущиеДанные.Ссылка);
	ОбновитьСтрокуФайла(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Неопределено, 
		ТекущиеДанные.Ссылка);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			ТекущиеДанные.Ссылка, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'; en = 'Printing files is not supported in web client.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'; en = 'Printing files is only possible in Windows.'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
				МассивФайлов, 
				ЭтаФорма.УникальныйИдентификатор);
				
			КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Ссылка, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравило(Команда)
	
	#Если ВебКлиент Тогда
		Сообщение = НСтр("ru = 'В web-клиенте нельзя осуществлять проверку правил.'; en = 'In web client it is impossible to verify the rules'");
		ПоказатьПредупреждение(,Сообщение);
		Возврат;
	#КонецЕсли
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ПравилоАвтозаполнения) Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПравилоПродолжениеПослеВыбораДокумента",
		ЭтотОбъект,
		Новый Структура("ШаблонФайла, Расширение", 
			ТекущиеДанные.Ссылка,
			ТекущиеДанные.Расширение));
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ВидДокумента", Объект.Ссылка));
	ОткрытьФорму(
		"Справочник.ВнутренниеДокументы.ФормаВыбора", 
		ПараметрыФормы, 
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравилоПродолжениеПослеВыбораДокумента(Результат, Параметры) Экспорт
	
	#Если Не ВебКлиент Тогда
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Возврат;
		КонецЕсли;
		
		Состояние(НСтр("ru = 'Выполняется заполнение шаблона файла. Пожалуйста, подождите...'; en = 'Is populated template file. Please wait...'"));
		РезультатЗаполненияФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
			Истина,
			Параметры.ШаблонФайла,
			Ложь,
			УникальныйИдентификатор,
			Результат);
		Если РезультатЗаполненияФайла.Свойство("ДвоичныеДанныеЗаполненногоФайла")
			И РезультатЗаполненияФайла.ДвоичныеДанныеЗаполненногоФайла <> Неопределено Тогда
			
			Если РезультатЗаполненияФайла.ДвоичныеДанныеЗаполненногоФайла = "Linux" Тогда
				ОписаниеОшибки = НСтр("ru = 'Автозаполнение файлов Microsoft Word 2003 возможно только в Windows. 
	                                   |Обратитесь к администратору.';
	                                   |en = 'Autocomplete files Microsoft Word 2003 is only possible in Windows. 
	                                   |Contact the administrator.'");
				ПоказатьПредупреждение(,ОписаниеОшибки);
				Состояние();
				Возврат;
			КонецЕсли;
			
			ПутьКФайлу = ПолучитьИмяВременногоФайла(Параметры.Расширение);
			РезультатЗаполненияФайла.ДвоичныеДанныеЗаполненногоФайла.Записать(ПутьКФайлу);
			ДелопроизводствоКлиент.ОткрытьФайлПриложением(ПутьКФайлу);
			ПолноеИмяФайлаДляПроверки = ПутьКФайлу;
		КонецЕсли;
		Состояние();
		
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОпций(Форма)
	
	УстановитьДоступностьОпции(Форма, "ЯвляетсяДоговором", Не Форма.Объект.ЯвляетсяКомплектомДокументов);
	УстановитьДоступностьОпции(Форма, "ЯвляетсяКомплектомДокументов",
		Не Форма.Объект.ЯвляетсяДоговором
		И Не Форма.Объект.ВестиУчетПоНоменклатуреДел
		И Не Форма.Объект.УчитыватьСрокДействия
		И Не Форма.Объект.УчитыватьНедействующиеДокументы
		И Не Форма.Объект.УчитыватьСуммуДокумента
		И Не Форма.Объект.ИспользоватьСрокИсполнения
		И Не Форма.Объект.ОбязателенФайлОригинала);
	
	УстановитьДоступностьОпции(Форма, "УчетПоКонтрагентам",
		Не Форма.Объект.ЯвляетсяДоговором);
	УстановитьДоступностьОпции(Форма, "УчетПоОрганизациям",
		Не Форма.Объект.ЯвляетсяДоговором
		И Не Форма.Объект.ВестиУчетПоНоменклатуреДел);
	УстановитьДоступностьОпции(Форма, "УчитыватьСрокДействия",
		Не Форма.Объект.ЯвляетсяДоговором И Не Форма.Объект.ЯвляетсяКомплектомДокументов);
	УстановитьДоступностьОпции(Форма, "УчитыватьСуммуДокумента",
		Не Форма.Объект.ЯвляетсяДоговором И Не Форма.Объект.ЯвляетсяКомплектомДокументов);
	УстановитьДоступностьОпции(Форма, "УчитыватьНедействующиеДокументы",
		Не Форма.Объект.ЯвляетсяДоговором И Не Форма.Объект.ЯвляетсяКомплектомДокументов);
	УстановитьДоступностьОпции(Форма, "ВестиУчетПоНоменклатуреДел",
		Не Форма.Объект.ЯвляетсяКомплектомДокументов);
	УстановитьДоступностьОпции(Форма, "ИспользоватьСрокИсполнения",
		Не Форма.Объект.ЯвляетсяКомплектомДокументов);
	УстановитьДоступностьОпции(Форма, "ОбязателенФайлОригинала",
		Не Форма.Объект.ЯвляетсяКомплектомДокументов);
	
	Если Не Форма.Объект.УчитыватьСуммуДокумента 
		И (Форма.Объект.ВестиУчетТоваровИУслуг
		Или Форма.Объект.ВестиУчетПоСтатьямДДС) Тогда 
		Форма.Объект.ВестиУчетТоваровИУслуг = Ложь;
		Форма.Объект.ВестиУчетПоСтатьямДДС = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьОпции(Форма, "ВариантПодписания",
		Форма.Объект.ВестиУчетСторон
		И Не Форма.Объект.ЯвляетсяДоговором);
		
	УстановитьДоступностьОпции(Форма, "ИспользоватьПодписание",
		Не Форма.Объект.ВестиУчетСторон
		И Не Форма.Объект.ЯвляетсяДоговором);
		
	УстановитьДоступностьОпции(Форма, "ИспользоватьУтверждение",
		Не Форма.Объект.ВестиУчетСторон
		И Не Форма.Объект.ЯвляетсяДоговором);
		
	УстановитьДоступностьОпции(Форма, "ВестиУчетСторон",
		Не Форма.Объект.ЯвляетсяДоговором);
	
	ОбновитьВидимостьРеквизитов(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОпции(Форма, ИмяОпции, Значение)
	
	Если Форма.Элементы[ИмяОпции].Доступность <> Значение Тогда
		Форма.Элементы[ИмяОпции].Доступность = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НужноВключитьУчетПоНоменклатуреДел()
	
	ЕстьИндексНомДел = Ложь;
	Для Каждого Строка Из НастройкиНумерации Цикл
		Если ЗначениеЗаполнено(Строка.Нумератор) И Найти(Строка.Нумератор.ФорматНомера, "ИндексНомДел") > 0 Тогда 
			ЕстьИндексНомДел = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ЕстьИндексНомДел
		И Не Объект.ЯвляетсяКомплектомДокументов
		И Не Объект.ВестиУчетПоНоменклатуреДел;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение")
		И ПараметрыЗаписи.Свойство("НетНастройкиНумерации") И ПараметрыЗаписи.НетНастройкиНумерации = Истина Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеЗаписиКлиентПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
		
		ПоказатьПредупреждение(
			ОписаниеОповещения,
			НСтр("ru = 'Документы с данным видом нельзя будет зарегистрировать, так как отсутствует подходящая настройка нумерации.'; en = 'Documents of this type will be unregistrable because there are no suitable numeration settings.'"));
		Возврат;
	КонецЕсли;	
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ЗакрытьПослеЗаписи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиентПродолжение(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение", Истина);
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокЗакладкиНумерация()
	
	КоличествоНастроекНумерации = НастройкиНумерации.Количество();
	
КонецПроцедуры		

&НаСервереБезКонтекста
Функция ПолучитьЧислоДокументовСоЗначениемРеквизита(ВидДокумента, ИмяРеквизита, ЗначениеРеквизита,
	ОперацияСравнения = "=", ТекстОшибкиПравДоступа = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(СтрШаблон(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ВнутренниеДокументы.Ссылка), 0) КАК ЧислоДокументов
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.ВидДокумента = &ВидДокумента
		|	И ВнутренниеДокументы.%1 %2 &ЗначениеРеквизита",
		ИмяРеквизита,
		ОперацияСравнения));
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЧислоДокументов = Выборка.ЧислоДокументов;
	
	Если ЧислоДокументов = 0 Тогда
		Возврат ЧислоДокументов;
	КонецЕсли;
	
	Если ЧислоДокументов % 10 = 1
		И ЧислоДокументов <> 11 Тогда
		ЧислоДокументовСтрокой = СтрШаблон(НСтр("ru = '%1 документа'; en = '%1 document'"), ЧислоДокументов);
	Иначе
		ЧислоДокументовСтрокой = СтрШаблон(НСтр("ru = '%1 документов'; en = '%1 documents'"), ЧислоДокументов);
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.ВнутренниеДокументы) Тогда
		ТекстОшибкиПравДоступа = СтрШаблон(НСтр(
			"ru = 'Недостаточно прав доступа для изменения %1 этого вида.
			|Обратитесь к администратору.';
			|en = 'Insufficient permissions to modify %1 of this type. 
			|Contact the administrator.'"),
			ЧислоДокументовСтрокой);
		Возврат ЧислоДокументов;
	КонецЕсли;
	
	// Сразу проверим права доступа, если документов немного.
	Если ЧислоДокументов < 500 Тогда
		ЧислоДокументовБезПрав = 0;
		Запрос.Текст = СтрШаблон(
			"ВЫБРАТЬ
			|	ВнутренниеДокументы.Ссылка
			|ИЗ
			|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
			|ГДЕ
			|	ВнутренниеДокументы.ВидДокумента = &ВидДокумента
			|	И ВнутренниеДокументы.%1 %2 &ЗначениеРеквизита",
			ИмяРеквизита,
			ОперацияСравнения);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Выборка.Ссылка).Изменение Тогда
				ЧислоДокументовБезПрав = ЧислоДокументовБезПрав + 1;
			КонецЕсли;
		КонецЦикла;
		Если ЧислоДокументовБезПрав <> 0 Тогда
			Если ЧислоДокументовБезПрав % 10 = 1
				И ЧислоДокументовБезПрав <> 11 Тогда
				ЧислоДокументовБезПрав = СтрШаблон(НСтр("ru = '%1 документа, требующего изменения'; en = '%1 document requiring changes'"),
					ЧислоДокументовБезПрав);
			Иначе
				ЧислоДокументовБезПрав = СтрШаблон(НСтр("ru = '%1 документов, требующих изменения'; en = '%1 documents requiring changes'"),
					ЧислоДокументовБезПрав);
			КонецЕсли;
			ТекстОшибкиПравДоступа = СтрШаблон(НСтр(
				"ru = 'Недостаточно прав доступа для изменения %1 этого вида из %2.
				|Обратитесь к администратору.';
				|en = 'Insufficient permissions to modify %1 this type of %2.
				|Contact the administrator.'"),
				ЧислоДокументовСтрокой,
				ЧислоДокументовБезПрав);
			Возврат ЧислоДокументов;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЧислоДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВыполнитьЗаполнениеОтветственного(ВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка,
		|	ВнутренниеДокументы.Подготовил
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.ВидДокумента = &ВидДокумента
		|	И ВнутренниеДокументы.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ВнутренниеДокументы.Подготовил <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
		
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Ответственный = Выборка.Подготовил;
			
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Заполнение Ответственного в документах.Ошибка'; en = 'Filling Responsible in documents.Error'", 
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ВыполнитьИзменениеОрганизации(ВидДокумента, Организация)
	
	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
		ТекстУсловия = "ИзменяемыеДанные.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Иначе
		ТекстУсловия = "ИзменяемыеДанные.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИзменяемыеДанные.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныВнутреннихДокументов КАК ИзменяемыеДанные
		|ГДЕ
		|	ИзменяемыеДанные.ВидДокумента = &ВидДокумента
		|	И " + ТекстУсловия + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзменяемыеДанные.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ИзменяемыеДанные
		|ГДЕ
		|	ИзменяемыеДанные.ВидДокумента = &ВидДокумента
		|	И " + ТекстУсловия + "
		|");
		
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	НачатьТранзакцию();
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ИзменяемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ИзменяемыйОбъект.Организация = Организация;
			ИзменяемыйОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ТекстСообщенияОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Описание = СтрШаблон(
			НСтр("ru = 'Произошла ошибка при попытке автоматически изменить организацию в документах
			|после изменения флага ""Вести учет по организациям"". Следует повторить попытку,
			|устранив причины, или воспользоваться обработкой ""Групповое изменение реквизитов"".
			|Ошибка:
			|%1';
			|en = 'There was an error while trying to change company in documents after changing flag ""Account 
			|for companies"". It is necessary to eliminate the cause of the error and try again or use data 
			|processor ""Batch modification of attributes"". 
			|Error: 
			|%1'"),
			ТекстСообщенияОбОшибке);
		
		ОтменитьТранзакцию();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПолучателиОповещенийОПроблемахРаботыПрограммы.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.ПолучателиОповещенийОПроблемахРаботыПрограммы КАК ПолучателиОповещенийОПроблемахРаботыПрограммы
			|
			|УПОРЯДОЧИТЬ ПО
			|	Пользователь");
		
		Исполнители = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		Если Исполнители.Количество() = 0 Тогда
			ПользовательАдминистратор = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
			Если ЗначениеЗаполнено(ПользовательАдминистратор) Тогда
				Исполнители.Добавить(ПользовательАдминистратор);
			КонецЕсли;
		КонецЕсли;
		Исполнители.Добавить(ПользователиКлиентСервер.ТекущийПользователь());
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(Исполнители);
		
		БизнесПроцесс = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
		БизнесПроцесс.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		Для Каждого Исполнитель Из Исполнители Цикл
			Строка = БизнесПроцесс.Исполнители.Добавить();
			Строка.Исполнитель = Исполнитель;
		КонецЦикла;
		
		БизнесПроцесс.Наименование = СтрШаблон(
			НСтр("ru ='Не удалось изменить организацию в документах вида ""%1""'; en = 'Failed to change company in documents of type ""%1""'"),
			ВидДокумента);
		
		БизнесПроцесс.Дата = ТекущаяДатаСеанса();
		БизнесПроцесс.Описание = Описание;

		БизнесПроцесс.Записать();
		СтартПроцессовСервер.СтартоватьПроцесс(БизнесПроцесс);
		
		ВызватьИсключение Описание;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПослеЗаписи()

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Изменение:'; en = 'Changed:'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
		
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ШаблонИзменен()
	
	Если ШаблонДокумента.Адресат <> ШаблонДокументаПриОткрытии.Адресат
	Или ШаблонДокумента.ВопросДеятельности <> ШаблонДокументаПриОткрытии.ВопросДеятельности
		Или ШаблонДокумента.ГрифДоступа <> ШаблонДокументаПриОткрытии.ГрифДоступа
		Или ШаблонДокумента.ДлительностьИсполнения <> ШаблонДокументаПриОткрытии.ДлительностьИсполнения
		Или ШаблонДокумента.КомментарийКДокументу <> ШаблонДокументаПриОткрытии.КомментарийКДокументу
		Или ШаблонДокумента.КомментарийКШаблону <> ШаблонДокументаПриОткрытии.КомментарийКШаблону
		Или ШаблонДокумента.КонтактноеЛицо <> ШаблонДокументаПриОткрытии.КонтактноеЛицо
		Или ШаблонДокумента.Контрагент <> ШаблонДокументаПриОткрытии.Контрагент
		Или ШаблонДокумента.Подписант <> ШаблонДокументаПриОткрытии.Подписант
		Или ШаблонДокумента.НоменклатураДел <> ШаблонДокументаПриОткрытии.НоменклатураДел
		Или ШаблонДокумента.Организация <> ШаблонДокументаПриОткрытии.Организация
		Или ШаблонДокумента.Ответственный <> ШаблонДокументаПриОткрытии.Ответственный
		Или ШаблонДокумента.Папка <> ШаблонДокументаПриОткрытии.Папка
		Или ШаблонДокумента.Подразделение <> ШаблонДокументаПриОткрытии.Подразделение
		Или ШаблонДокумента.Проект <> ШаблонДокументаПриОткрытии.Проект
		Или ШаблонДокумента.Содержание <> ШаблонДокументаПриОткрытии.Содержание
		Или ШаблонДокумента.Заголовок <> ШаблонДокументаПриОткрытии.Заголовок
		Или ШаблонДокумента.ЗапретитьИзменятьРеквизитыИзШаблона <> ШаблонДокументаПриОткрытии.ЗапретитьИзменятьРеквизитыИзШаблона
		Или ШаблонДокумента.ЗапретитьРедактироватьФайлы <> ШаблонДокументаПриОткрытии.ЗапретитьРедактироватьФайлы
		Или ШаблонДокумента.ЗапретитьУдалятьФайлы <> ШаблонДокументаПриОткрытии.ЗапретитьУдалятьФайлы
		Или ШаблонДокумента.СтатьяДвиженияДенежныхСредств <> ШаблонДокументаПриОткрытии.СтатьяДвиженияДенежныхСредств
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.РабочаяГруппаДокумента, 
			ШаблонДокумента.РабочаяГруппаДокумента,
			"Участник, Изменение")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.Товары, 
			ШаблонДокумента.Товары,
			"НомерСтроки, Номенклатура, ЕдиницаИзмерения, Количество")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.ИсполнителиСогласования, 
			ШаблонДокумента.ИсполнителиСогласования,
			"Исполнитель")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ИсходнаяРабочаяГруппа, 
			РабочаяГруппаТаблица,
			"Участник, Изменение")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.ГрифыУтверждения, 
			ШаблонДокумента.ГрифыУтверждения,
			"АвторУтверждения")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.Контрагенты, 
			ШаблонДокумента.Контрагенты,
			"Контрагент, КонтактноеЛицо")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.Стороны, 
			ШаблонДокумента.Стороны,
			"Сторона, КонтактноеЛицо, Наименование, Подписант")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.Категории, 
			ШаблонДокумента.Категории,
			"Значение")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ДополнительныеРеквизитыПриОткрытии, 
			ДополнительныеРеквизиты,
			"Свойство, Значение") Тогда 
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьЗаполненныеРеквизитыШаблона()
	
	Если ЗначениеЗаполнено(ШаблонДокумента.Адресат)
		Или ЗначениеЗаполнено(ШаблонДокумента.ВопросДеятельности)
		Или ЗначениеЗаполнено(ШаблонДокумента.ГрифДоступа)
		Или ЗначениеЗаполнено(ШаблонДокумента.Заголовок)
		Или ЗначениеЗаполнено(ШаблонДокумента.ДлительностьИсполнения)
		Или ЗначениеЗаполнено(ШаблонДокумента.Подписант)
		Или ШаблонДокумента.ИсполнителиСогласования.Количество() > 0
		Или ШаблонДокумента.Товары.Количество() > 0
		Или ШаблонДокумента.Категории.Количество() > 0
		Или ШаблонДокумента.Стороны.Количество() > 0
		Или ШаблонДокумента.Контрагенты.Количество() > 0
		Или ШаблонДокумента.ГрифыУтверждения.Количество() > 0
		Или ЗначениеЗаполнено(ШаблонДокумента.КонтактноеЛицо)
		Или ЗначениеЗаполнено(ШаблонДокумента.Контрагент)
		Или ЗначениеЗаполнено(ШаблонДокумента.КомментарийКДокументу)
		Или ЗначениеЗаполнено(ШаблонДокумента.КомментарийКШаблону)
		Или ЗначениеЗаполнено(ШаблонДокумента.НоменклатураДел)
		Или ЗначениеЗаполнено(ШаблонДокумента.Организация)
		Или ЗначениеЗаполнено(ШаблонДокумента.Ответственный)
		Или ЗначениеЗаполнено(ШаблонДокумента.Папка)
		Или ЗначениеЗаполнено(ШаблонДокумента.Подразделение)
		Или ЗначениеЗаполнено(ШаблонДокумента.Проект)
		Или ЗначениеЗаполнено(ШаблонДокумента.Содержание)
		Или ЗначениеЗаполнено(ШаблонДокумента.СтатьяДвиженияДенежныхСредств)
		Или ШаблонДокумента.ЗапретитьИзменятьРеквизитыИзШаблона
		Или ШаблонДокумента.ЗапретитьРедактироватьФайлы
		Или ШаблонДокумента.ЗапретитьУдалятьФайлы
		Или ШаблонДокумента.РабочаяГруппаДокумента.Количество() > 0 Тогда 
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокШаблоновВида(ВидДокумента = Неопределено)
	
	Элементы.ШаблонДокумента.Заголовок = НСтр("ru = 'Шаблон документа'; en = 'Document template'");
	МногоШаблонов = Ложь;
	Элементы.ГруппаШаблонВида.Видимость = Ложь;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Справочники.ВнутренниеДокументы) Тогда
		Элементы.ШаблонДокумента.Видимость = Ложь;
		Элементы.ОсновныеСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Возврат;
	КонецЕсли;
	
	Если ВидДокумента = Неопределено Тогда 
		ВидДокумента = Объект.Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		 |	ШаблоныВнутреннихДокументов.Ссылка
		 |ИЗ
		 |	Справочник.ШаблоныВнутреннихДокументов КАК ШаблоныВнутреннихДокументов
		 |ГДЕ
		 |	ШаблоныВнутреннихДокументов.ВидДокумента = &ВидДокумента
		 |	И НЕ ШаблоныВнутреннихДокументов.ПометкаУдаления";
		 
	Запрос.Параметры.Вставить("ВидДокумента", ВидДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоШаблонов = Выборка.Количество();
	
	Элементы.ФормаСкопироватьШаблон.Доступность = Истина;
	Элементы.ПометитьШаблонНаУдаление.Доступность = Истина;
	
	Если КоличествоШаблонов = 0 Тогда 
		УстановитьПривилегированныйРежим(Истина);
		НовыйШаблон = Справочники.ШаблоныВнутреннихДокументов.СоздатьЭлемент();
		
		ЗначениеВРеквизитФормы(НовыйШаблон, "ШаблонДокумента");
		ЗначениеВРеквизитФормы(НовыйШаблон, "ШаблонДокументаПриОткрытии");
		Элементы.Страницы.Видимость = Истина;
		Элементы.ГруппаМногоШаблонов.Видимость = Ложь;
		УстановитьПривилегированныйРежим(Ложь);
		Элементы.ФормаСкопироватьШаблон.Доступность = Ложь;
		Элементы.ПометитьШаблонНаУдаление.Доступность = Ложь;
		
	ИначеЕсли КоличествоШаблонов = 1 Тогда 
		Выборка.Следующий();
		ЗначениеВРеквизитФормы(Выборка.Ссылка.ПолучитьОбъект(), "ШаблонДокумента");
		ЗначениеВРеквизитФормы(Выборка.Ссылка.ПолучитьОбъект(), "ШаблонДокументаПриОткрытии");
		Элементы.Страницы.Видимость = Истина;
		Элементы.ГруппаМногоШаблонов.Видимость = Ложь;
		
		Если Элементы.ОсновныеСтраницы.ТекущаяСтраница = Элементы.ШаблонДокумента 
			И ЕстьПравоНаСозданиеШаблона И Не ВидДокумента.Ссылка.Пустая() Тогда 
			Элементы.ГруппаШаблонВида.Видимость = Истина;
		КонецЕсли;
		
	Иначе 
		ШаблоныВида.Очистить();
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = ШаблоныВида.Добавить();
			НоваяСтрока.Шаблон = Выборка.Ссылка;
		КонецЦикла;
		
		Элементы.ГруппаМногоШаблонов.Видимость = Истина;
		Элементы.Страницы.Видимость = Ложь;
		
		УстановитьПривилегированныйРежим(Истина);
		НовыйШаблон = Справочники.ШаблоныВнутреннихДокументов.СоздатьЭлемент();
		ЗначениеВРеквизитФормы(НовыйШаблон, "ШаблонДокумента");
		ЗначениеВРеквизитФормы(НовыйШаблон, "ШаблонДокументаПриОткрытии");
		УстановитьПривилегированныйРежим(Ложь);
		
		Элементы.ШаблонДокумента.Заголовок = НСтр("ru = 'Шаблоны документа'; en = 'Document templates'");
		МногоШаблонов = Истина;
		
		Если Элементы.ОсновныеСтраницы.ТекущаяСтраница = Элементы.ШаблонДокумента 
			И ЕстьПравоНаСозданиеШаблона И Не ВидДокумента.Ссылка.Пустая() Тогда 
			Элементы.ГруппаШаблонВида.Видимость = Истина;
		КонецЕсли;
		
		Элементы.ШаблоныВида.ИзменятьСоставСтрок = ЕстьПравоНаСозданиеШаблона;
	КонецЕсли;
	
	Если Не МногоШаблонов Тогда 
		// Рабочие группы
		РаботаСРабочимиГруппами.ДокументПриСозданииНаСервере(ЭтаФорма);
		РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
		РаботаСРабочимиГруппами.ШаблонПриСозданииНаСервере(ЭтаФорма);
		
		// Формирование исходной рабочей группы
		ИсходнаяРабочаяГруппа.Очистить();
		Для каждого Эл Из РабочаяГруппаТаблица Цикл
			Строка = ИсходнаяРабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник; 
			Строка.Изменение = Эл.Изменение;
		КонецЦикла;
		
		// Категории данных
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
			Для Каждого Категория Из ШаблонДокумента.Категории Цикл
				Категория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Значение);
			КонецЦикла;
		Иначе
			Элементы.СтраницаКатегории.Видимость = Ложь;
		КонецЕсли;
		
		// Доп. реквизиты
		СписокДопРеквизитов = РаботаСШаблонамиДокументовСервер.ПолучитьНаборДопРеквизитовДокумента(
			"ВнутренниеДокументы", ВидДокумента, ШаблонДокумента);
		РаботаСШаблонамиДокументовСервер.ПоместитьДопРеквизитыНаФорму(ДополнительныеРеквизиты, СписокДопРеквизитов);
		РаботаСШаблонамиДокументовСервер.ПоместитьДопРеквизитыНаФорму(
			ДополнительныеРеквизитыПриОткрытии, СписокДопРеквизитов);
		КоличествоСвойств = СписокДопРеквизитов.Количество();
		
		Если КоличествоСвойств > 0 Тогда
			Элементы.ДопРеквизиты.Видимость = Истина;
		Иначе 
			Элементы.ДопРеквизиты.Видимость = Ложь;
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
			НазваниеОрганизации = РаботаСОрганизациями.ПолучитьНаименованиеОрганизации(РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию());
			Элементы.ДекорацияОрганизация.Видимость = Истина;
			Элементы.ДекорацияОрганизация.Заголовок = НазваниеОрганизации;
		Иначе	
			Элементы.ДекорацияОрганизация.Видимость = Ложь;
		КонецЕсли;	
		
		НесколькоКонтрагентов = (ШаблонДокумента.Контрагенты.Количество() > 1);
		
		ОбновитьВидимостьРеквизитов(ЭтаФорма);
		
		Для Каждого Строка Из ШаблонДокумента.РабочаяГруппаДокумента Цикл
			Если ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				Строка.Иконка = 1;
				Строка.ЭтоРоль = Истина;
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
				Строка.Иконка = 2;
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				Строка.Иконка = 2;
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
				Строка.Иконка = 3;
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("Строка") Тогда
				Строка.Иконка = 4;
			КонецЕсли;	
		КонецЦикла;
		
		Если КоличествоУчастниковРабочейГруппы > 0 Тогда 
			ЗаголовокРабочейГруппы = СтрШаблон(НСтр("ru = 'Доступен (%1)'; en = 'Available (%1)'"), 
				КоличествоУчастниковРабочейГруппы);
			Элементы.ГруппаРабочаяГруппа.Поведение = ПоведениеОбычнойГруппы.Обычное;
		Иначе 
			ЗаголовокРабочейГруппы = НСтр("ru = 'Доступен всем'; en = 'Available to everyone'");
			Элементы.ГруппаРабочаяГруппа.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		КонецЕсли;
		
		Если НЕ ШаблонДокумента.Ссылка.Пустая()
			И НЕ ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ШаблонДокумента.Ссылка).Изменение Тогда
			
			Элементы.ШаблонДокумента.ТолькоПросмотр = Истина;
			Элементы.ПодобратьУчастниковРабочейГруппы.Доступность = Ложь;
			Элементы.СоздатьФайл.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыСоздать.Доступность = Ложь;
			Элементы.ИсполнителиСогласованияПодобратьСогласующих.Доступность = Ложь;
			Элементы.ПодобратьУчастниковРабочейГруппыДокумента.Доступность = Ложь;
			Элементы.ПодобратьНоменклатуру.Доступность = Ложь;
			
		КонецЕсли;
		
		ЗаполнитьСписокФайлов();
		
		Если ШаблонДокумента.ГрифыУтверждения.Количество() > 0
			И ЗначениеЗаполнено(ШаблонДокумента.ГрифыУтверждения[0].АвторУтверждения) Тогда
				УтверждаетТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1", ШаблонДокумента.ГрифыУтверждения[0].АвторУтверждения);
		КонецЕсли;
		
		УстановитьУсловноеОформление();
		Для Каждого СтрокаСтороны Из ШаблонДокумента.Стороны Цикл
			УстановитьИндексКартинкиСтороны(СтрокаСтороны);
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьРеквизитов(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ШаблонДокумента = Форма.ШаблонДокумента;
	
	Элементы.ГруппаДлительностьИсполнения.Видимость = Объект.ИспользоватьСрокИсполнения;
	
	Элементы.Организация.Видимость = Объект.ВестиУчетПоОрганизациям И Не Объект.ВестиУчетСторон;
	Если Объект.ВестиУчетПоОрганизациям И Не Объект.ВестиУчетСторон Тогда
		Элементы.ГруппаОрганизация.Заголовок = НСтр("ru = 'Наша организация'; en = 'Our company'");
	Иначе
		Элементы.ГруппаОрганизация.Заголовок = НСтр("ru = 'Наше предприятие'; en = 'Our enterprise'");
	КонецЕсли;
	
	Если Объект.ВестиУчетПоНоменклатуреДел Тогда
		Элементы.ГруппаХранение.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаХранение.Видимость = Истина;
	Иначе
		Элементы.ГруппаХранение.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаХранение.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВестиУчетСторон Тогда
		Элементы.ГруппаСтороны.Видимость = Истина;
	Иначе
		Элементы.ГруппаСтороны.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВестиУчетТоваровИУслуг Тогда
		Элементы.СтраницаТовары.Видимость = Истина;
	Иначе
		Элементы.СтраницаТовары.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВестиУчетПоАдресатам Тогда
		Элементы.Адресат.Видимость = Истина;
	Иначе
		Элементы.Адресат.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВестиУчетПоСтатьямДДС Тогда
		Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Истина;
	Иначе
		Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Ложь;
		Если ЗначениеЗаполнено(ШаблонДокумента.СтатьяДвиженияДенежныхСредств) Тогда
			ШаблонДокумента.СтатьяДвиженияДенежныхСредств = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Подписант.Видимость = Объект.ИспользоватьПодписание И Не Объект.ВестиУчетСторон;
	Элементы.УтверждаетТекст.Видимость = Объект.ИспользоватьУтверждение;
	
	УстановитьВидимостьКонтрагентов(Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл)
	
	ДелопроизводствоКлиент.ОбновитьСтрокуФайла(Файлы, Файл,, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокФайлов()
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
		ШаблонДокумента.Ссылка, 
		ПоказыватьУдаленныеФайлы);
		
	ТаблицаФайлы = Делопроизводство.ПолучитьДанныеФайловДляСписка(МассивФайлов,,, Истина);
	ТаблицаФайлы.Колонки.Добавить("ПравилоАвтозаполнения");
	ТаблицаФайлы.Колонки.Добавить("ПравилоАвтозаполненияСтр");
	
	Для Каждого Строка Из ШаблонДокумента.ПравилаАвтозаполнения Цикл
		НайденнаяСтрока = ТаблицаФайлы.Найти(Строка.ШаблонФайла, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НайденнаяСтрока.ПравилоАвтозаполнения = Строка.ПравилоАвтозаполнения;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаФайлы Цикл 
		Если СтрНайти(СписокРасширенийШаблонов, НРег(Строка.Расширение)) > 0 Тогда 
			Если ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) Тогда 
				Строка.ПравилоАвтозаполненияСтр = НСтр("ru = 'Открыть'; en = 'Open'");
			Иначе
				Строка.ПравилоАвтозаполненияСтр = НСтр("ru = 'Не настроено'; en = 'Not configured'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаФайлы, "Файлы");
	КоличествоФайлов = Файлы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФайл(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ПометкаУдаления)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь(); 
	Для Каждого Файл Из МассивФайлов Цикл 
		
		Если Файл.Редактирует = ТекущийПользователь Тогда
			РаботаСФайламиВызовСервера.ОсвободитьФайлПоСсылке(Файл, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;	
		
		ЗаблокироватьДанныеДляРедактирования(Файл);
		ОбъектФайл = Файл.ПолучитьОбъект();
		ОбъектФайл.УстановитьПометкуУдаления(ПометкаУдаления);
		РазблокироватьДанныеДляРедактирования(Файл);
		
	КонецЦикла;
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуФайла(Файл)
	
	СтрокаИдентификатор = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы.Файлы.ТекущаяСтрока = СтрокаИдентификатор;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Управление доступностью полей

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Или ТолькоПросмотр
		Или ТипЗнч(Элементы["Файлы"].ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"], Ложь);
				
		УстановитьДоступностьКоманды(Элементы["Редактировать"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"], Ложь);

		УстановитьДоступностьКоманды(Элементы["Изменить"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Занять"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Удалить"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Освободить"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ПроверитьПравило"], Ложь);
		
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		СозданПоШаблонуДокумента = ТекущиеДанные.СозданПоШаблонуДокумента;
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Редактировать"], НЕ ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"], НЕ ТекущиеДанные.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"], РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"], РедактируетТекущийПользователь);

		УстановитьДоступностьКоманды(Элементы["Изменить"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Занять"], Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"], Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"], РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"], РедактируетТекущийПользователь);

		УстановитьДоступностьКоманды(Элементы["Удалить"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"], Истина);

		УстановитьДоступностьКоманды(Элементы["Освободить"],  Не Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"],  Не Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["ПроверитьПравило"], ЗначениеЗаполнено(ТекущиеДанные.ПравилоАвтозаполнения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНоменклатуруПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПеренестиНоменклатуруИзГруппы(Параметры.Группа);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиНоменклатуруИзГруппы(ГруппаНоменклатуры)
	
	Делопроизводство.ПеренестиНоменклатуруИзГруппы(ЭтаФорма, ГруппаНоменклатуры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с подписями

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИндексКартинкиСтороны(СтрокаТаблицы)
	
	Если ТипЗнч(СтрокаТаблицы.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтрокаТаблицы.ИндексКартинкиСтороны = 1;
	ИначеЕсли ТипЗнч(СтрокаТаблицы.Сторона) = Тип("СправочникСсылка.Организации") Тогда
		СтрокаТаблицы.ИндексКартинкиСтороны = 2;
	Иначе
		СтрокаТаблицы.ИндексКартинкиСтороны = 0;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ДобавитьСторону(Сторона, КонтактноеЛицо = Неопределено)
	
	Если Не ЗначениеЗаполнено(Сторона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбораСторона = Новый Структура("Сторона", Сторона);
	Если ШаблонДокумента.Стороны.НайтиСтроки(ПараметрыОтбораСторона).Количество() = 0 Тогда
		НоваяСтрока = ШаблонДокумента.Стороны.Добавить();
		НоваяСтрока.Сторона = Сторона;
		НоваяСтрока.ИндексКартинкиСтороны = 2;
		
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			НоваяСтрока.КонтактноеЛицо = КонтактноеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыСторон()

	ШаблонДокумента.Стороны.Очистить();
	
	Если Объект.ВестиУчетСторон Тогда
		ШаблонДокумента.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		ДобавитьСторону(ШаблонДокумента.Организация);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
		
КонецПроцедуры 

&НаСервере
Процедура УстановитьУсловноеОформление()

	РаботаСПодписямиДокументов.УстановитьУсловноеСторон(УсловноеОформление, ШаблонДокумента.Организация, Истина);	

КонецПроцедуры

#КонецОбласти
