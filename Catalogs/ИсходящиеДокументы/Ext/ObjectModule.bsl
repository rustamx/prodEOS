#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ПриКопировании(ОбъектКопирования)
	
	РегистрационныйНомер = "";
	ЧисловойНомер 	= 0;
	ДатаРегистрации	= '00010101';
	ДатаСоздания 	= ТекущаяДатаСеанса();
	Зарегистрировал = Справочники.Пользователи.ПустаяСсылка();
	Подготовил 		= ПользователиКлиентСервер.ТекущийПользователь();
	Создал 			= Подготовил;
	Подразделение 	= РаботаСПользователями.ПолучитьПодразделение(Подготовил);
	Подписал		= Справочники.Пользователи.ПустаяСсылка();
	
	Для Каждого Строка Из Получатели Цикл
		Строка.Отправлен 	  = Ложь;
		Строка.ДатаОтправки	  = '00010101';
		Строка.СпособОтправки = Справочники.СпособыДоставки.ПустаяСсылка();
		Строка.ВходящийНомер  = "";
		Строка.ВходящаяДата   = '00010101';
	КонецЦикла;	
	
	КоличествоЭкземпляров = 1;
	КоличествоЛистов 	  = 1;
	КоличествоПриложений  = 0;
	ЛистовВПриложениях 	  = 0;
	Дело = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
	
	ПодписанЭП = Ложь;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт 
	
	Если ЭтоНовый() Тогда 
		
		РегистрационныйНомер = "";
		ЧисловойНомер = 0;
		ДатаРегистрации = '00010101';
		ДатаСоздания = ТекущаяДатаСеанса();
		Зарегистрировал = Справочники.Пользователи.ПустаяСсылка();
		Подготовил = ПользователиКлиентСервер.ТекущийПользователь();
		Создал = Подготовил;
		Подразделение = РаботаСПользователями.ПолучитьПодразделение(Подготовил);
		Подписал = Справочники.Пользователи.ПустаяСсылка();
		СрокИсполнения = '00010101';
		
		Для Каждого Строка Из Получатели Цикл
			Строка.Отправлен = Ложь;
			Строка.ДатаОтправки = '00010101';
			Строка.СпособОтправки = Справочники.СпособыДоставки.ПустаяСсылка();
		КонецЦикла;
		
		КоличествоЭкземпляров = 1;
		КоличествоЛистов = 1;
		КоличествоПриложений = 0;
		ЛистовВПриложениях = 0;
		Дело = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
		
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
			ВидДокумента = Делопроизводство.ПолучитьВидДокументаПоУмолчанию(Ссылка);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
		
		Если Константы.ИспользоватьГрифыДоступа.Получить() Тогда
			ГрифДоступа = Константы.ГрифДоступаПоУмолчанию.Получить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидДокумента) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСуммуВИсходящих", 
				Новый Структура("ВидИсходящегоДокумента", ВидДокумента)) Тогда 
			Валюта = Делопроизводство.ПолучитьВалютуПоУмолчанию();
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	
	КонецЕсли;
	
	ОснованиеЗаполнения = ДанныеЗаполнения;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("Основание") Тогда
		ОснованиеЗаполнения = ДанныеЗаполнения.Основание;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ОснованиеЗаполнения = ДанныеЗаполнения.Контрагент;
		
	КонецЕсли;
	
	// Сначала заполняем данными шаблона - затем документа-основания.
	
	// Создание из шаблона.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("ШаблонДокумента") Тогда
		
		Шаблон = ДанныеЗаполнения.ШаблонДокумента;
		ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(Шаблон, ЭтотОбъект);
		
	КонецЕсли;
	
	// Ввод на основании
	Если ТипЗнч(ОснованиеЗаполнения) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеЗаполнения, 
			"Заголовок, Отправитель, Подписал, ГрифДоступа, ВопросДеятельности, Организация, Проект");
		
		Заголовок = СтрШаблон(НСтр("ru = 'Ответ на ""%1""'; en = 'Reply to ""%1""'"), РеквизитыОснования.Заголовок);
		
		НоваяСтрока = Получатели.Добавить();
		НоваяСтрока.Получатель = РеквизитыОснования.Отправитель;
		НоваяСтрока.Адресат = РеквизитыОснования.Подписал;
		Если РаботаССВД.ДокументПолученПоСВД(ОснованиеЗаполнения) Тогда
			НоваяСтрока.СпособОтправки = Справочники.СпособыДоставки.СВД;
		КонецЕсли;	
		
		ГрифДоступа = РеквизитыОснования.ГрифДоступа;
		ВопросДеятельности = РеквизитыОснования.ВопросДеятельности;
		Организация = РеквизитыОснования.Организация;
		Проект = РеквизитыОснования.Проект;
		
	ИначеЕсли ТипЗнч(ОснованиеЗаполнения) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеЗаполнения, 
			"Заголовок, Утвердил, ГрифДоступа, ВопросДеятельности, Организация, Проект, Контрагент, КонтактноеЛицо,
			| ВидДокумента.ВестиУчетПоКонтрагентам, ВидДокумента.ВестиУчетСторон");
			
		Заголовок = СтрШаблон(НСтр("ru = 'Отправка ""%1""'; en = 'Sending ""%1""'"), РеквизитыОснования.Заголовок);
		Подписал = РеквизитыОснования.Утвердил;
		ГрифДоступа = РеквизитыОснования.ГрифДоступа;
		ВопросДеятельности = РеквизитыОснования.ВопросДеятельности;
		Организация = РеквизитыОснования.Организация;
		Проект = РеквизитыОснования.Проект;
		
		ПолучательЗаполнен = Ложь;
		Для Каждого Строка Из Получатели Цикл 
			Если ЗначениеЗаполнено(Строка.Получатель) Тогда 
				ПолучательЗаполнен = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ЕстьПолучатели = Получатели.Количество() > 0;
		
		Если Не ПолучательЗаполнен Тогда 
			Если РеквизитыОснования.ВидДокументаВестиУчетПоКонтрагентам Тогда
				Для каждого Строка Из ОснованиеЗаполнения.Контрагенты Цикл
					
					Если ЕстьПолучатели Тогда 
						НоваяСтрока = Получатели[0];
						ЕстьПолучатели = Ложь;
					Иначе 
						НоваяСтрока = Получатели.Добавить();
					КонецЕсли;
					
					НоваяСтрока.Получатель = Строка.Контрагент;
					НоваяСтрока.Адресат = Строка.КонтактноеЛицо;
				КонецЦикла;
				
			ИначеЕсли РеквизитыОснования.ВидДокументаВестиУчетСторон Тогда 
				Для каждого Строка Из ОснованиеЗаполнения.Стороны Цикл
					Если ТипЗнч(Строка.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда 
						Если ЕстьПолучатели Тогда 
							НоваяСтрока = Получатели[0];
							ЕстьПолучатели = Ложь;
						Иначе 
							НоваяСтрока = Получатели.Добавить();
						КонецЕсли;
						
						НоваяСтрока.Получатель = Строка.Сторона;
						НоваяСтрока.Адресат = Строка.КонтактноеЛицо;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОснованиеЗаполнения) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		НоваяСтрока = Получатели.Добавить();
		НоваяСтрока.Получатель = ОснованиеЗаполнения;
		
	ИначеЕсли ТипЗнч(ОснованиеЗаполнения) = Тип("Массив")  
		И ОснованиеЗаполнения.Количество() > 0
		И ТипЗнч(ОснованиеЗаполнения[0]) = Тип("СправочникСсылка.Файлы") Тогда 
		
		Если ОснованиеЗаполнения.Количество() = 1 И Не ЗначениеЗаполнено(Заголовок) Тогда			
			Заголовок = ОснованиеЗаполнения[0].ПолноеНаименование;			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") И Не ЗначениеЗаполнено(Проект) Тогда
			Проекты = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОснованиеЗаполнения, "Проект");
			Проект = Проекты.Получить(ОснованиеЗаполнения[0]);
			Для Каждого Строка Из Проекты Цикл
				Если Строка.Значение <> Проект Тогда 
					Проект = Неопределено;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОснованиеЗаполнения) Тогда
		
		ОснованиеЗаполненияОбъект = ОснованиеЗаполнения.ПолучитьОбъект();
		
		Содержание = ОснованиеЗаполненияОбъект.ПолучитьТекстовоеПредставлениеСодержанияПисьма();
		Заголовок = ОснованиеЗаполненияОбъект.Тема;
		Проект = ОснованиеЗаполненияОбъект.Проект;
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ОснованиеЗаполнения) Тогда
			
			СтруктураРезультата = ВстроеннаяПочтаСервер.ПолучитьКонтрагентаИКонтактноеЛицоПоСтрокеАдреса(ОснованиеЗаполненияОбъект.ОтправительАдресат.Адрес);
			Если СтруктураРезультата <> Неопределено Тогда
				НоваяСтрока = Получатели.Добавить();
				НоваяСтрока.Получатель = СтруктураРезультата.Контрагент;
				НоваяСтрока.Адресат = СтруктураРезультата.КонтактноеЛицо;
			КонецЕсли;
			
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ОснованиеЗаполнения) Тогда
			
			ПисьмоОтправлено = ЗначениеЗаполнено(ОснованиеЗаполненияОбъект.ДатаОтправки);
			
			ОбработатьЗаполнениеПолучателей(ОснованиеЗаполненияОбъект.ПолучателиПисьма, ОснованиеЗаполненияОбъект.ДатаОтправки, ПисьмоОтправлено);
			ОбработатьЗаполнениеПолучателей(ОснованиеЗаполненияОбъект.ПолучателиКопий, ОснованиеЗаполненияОбъект.ДатаОтправки, ПисьмоОтправлено);
			ОбработатьЗаполнениеПолучателей(ОснованиеЗаполненияОбъект.ПолучателиСкрытыхКопий, ОснованиеЗаполненияОбъект.ДатаОтправки, ПисьмоОтправлено);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОснованиеЗаполнения) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеЗаполнения,
			"Наименование, ГрифДоступа, Организация, Проект, Организатор, ОрганизаторКонтактноеЛицо");
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отправка ""%1""'; en = 'Sending ""%1""'"), РеквизитыМероприятия.Наименование);
		ГрифДоступа = РеквизитыМероприятия.ГрифДоступа;
		Организация = РеквизитыМероприятия.Организация;
		Проект = РеквизитыМероприятия.Проект;
		
		Если ТипЗнч(РеквизитыМероприятия.Организатор) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если Получатели.Количество() = 0 Тогда
				// Если получатели не заполнены - добавляем нового получателя.
				НоваяСтрока = Получатели.Добавить();
				НоваяСтрока.Получатель = РеквизитыМероприятия.Организатор;
				НоваяСтрока.Адресат = РеквизитыМероприятия.ОрганизаторКонтактноеЛицо;
			Иначе
				// Если получатели заполнены - пытаемся заполнить получателя, возможно есть подходящие.
				Для Каждого СтрокаПолучатель Из Получатели Цикл
					Если ЗначениеЗаполнено(СтрокаПолучатель.Получатель) Или ЗначениеЗаполнено(СтрокаПолучатель.Адресат) Тогда
						Продолжить;
					КонецЕсли;
					СтрокаПолучатель.Получатель = РеквизитыМероприятия.Организатор;
					СтрокаПолучатель.Адресат = РеквизитыМероприятия.ОрганизаторКонтактноеЛицо;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЗаполнениеПолучателей(ПолучателиПисьма, ДатаОтправки, ПисьмоОтправлено)
	
	Для Каждого Получатель Из ПолучателиПисьма Цикл
		
		СтруктураРезультата = ВстроеннаяПочтаСервер.ПолучитьКонтрагентаИКонтактноеЛицоПоСтрокеАдреса(Получатель.Адресат.Адрес);
		Если СтруктураРезультата <> Неопределено Тогда
			
			НоваяСтрока = Получатели.Добавить();
			НоваяСтрока.Получатель = СтруктураРезультата.Контрагент;
			НоваяСтрока.Адресат = СтруктураРезультата.КонтактноеЛицо;
			
			Если ПисьмоОтправлено Тогда
				НоваяСтрока.Отправлен = Истина;
				НоваяСтрока.СпособОтправки = Справочники.СпособыДоставки.НайтиПоНаименованию("Email");
				НоваяСтрока.ДатаОтправки = ДатаОтправки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСуммуВИсходящих", Новый Структура("ВидИсходящегоДокумента", ВидДокумента)) Тогда 
		Если ЗначениеЗаполнено(Сумма) Тогда 
			ПроверяемыеРеквизиты.Добавить("Валюта");
		КонецЕсли;	
	КонецЕсли;
	
	Для Счетчик = 0 По Получатели.Количество() - 1 Цикл
		Получатель = Получатели[Счетчик].Получатель;
		Адресат = Получатели[Счетчик].Адресат;
		Для Счетчик1 = Счетчик + 1 По Получатели.Количество() - 1 Цикл
			Получатель1 = Получатели[Счетчик1].Получатель;
			Адресат1 = Получатели[Счетчик1].Адресат;
			Если Получатель = Получатель1 И Адресат = Адресат1 Тогда
				
				Если ЗначениеЗаполнено(Адресат1) Тогда 
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контрагент %1 и контактное лицо %2 в списке получателей указаны дважды.'; en = 'Counterparty %1 and contact person %2 are specified twice in the recipients list.'"),
						Строка(Получатель1), 
						Строка(Адресат1));
				Иначе 
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контрагент %1 в списке получателей указан дважды.'; en = 'Counterparty %1 is specified twice in the recipient list.'"),
						Строка(Получатель1));
				КонецЕсли;	
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, 
					"Получатели["+Счетчик1+"].Получатель",
					,
					Отказ);
				Прервать;	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Если ЗначениеЗаполнено(РегистрационныйНомер) И ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		Если Не Делопроизводство.РегистрационныйНомерУникален(ЭтотОбъект) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Регистрационный номер не уникален!'; en = 'Registration number is not unique!'"),
				ЭтотОбъект,
				"РегистрационныйНомер",, 
				Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	Делопроизводство.ПроверитьЗаполнениеДела(ЭтотОбъект, Отказ);
	
	Если ЗначениеЗаполнено(Дело) Тогда 
		
		Если (Ссылка.Дело <> Дело Или Ссылка.ВидДокумента <> ВидДокумента)   
			И Не Делопроизводство.ДелоМожетСодержатьДокумент("ВидыДокументов", ВидДокумента, Дело) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Дело не может содержать документы с видом %1.'; en = 'The case cannot contain documents of type %1.'"),
					Строка(ВидДокумента)),
				,
				"ДелоТекст",, 
				Отказ);
		КонецЕсли;
		
		Для Каждого Строка Из Получатели Цикл
			Если (Ссылка.Дело <> Дело Или Ссылка.Получатели <> Получатели)
				И Не Делопроизводство.ДелоМожетСодержатьДокумент("Контрагенты", Строка.Получатель, Дело) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Дело не может содержать документы по контрагенту %1.'; en = 'Case cannot contain documents on counterparty %1.'"),
						Строка(Строка.Получатель)),
					ЭтотОбъект,
					"Дело",, 
					Отказ);
			КонецЕсли;
		КонецЦикла;	
		
		Если (Ссылка.Дело <> Дело Или Ссылка.ВопросДеятельности <> ВопросДеятельности)   
			И Не Делопроизводство.ДелоМожетСодержатьДокумент("ВопросыДеятельности", ВопросДеятельности, Дело) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Дело не может содержать документы по вопросу деятельности %1.'; en = 'The case cannot contain documents on activity type %1.'"),
					Строка(ВопросДеятельности)),
				ЭтотОбъект,
				"Дело",, 
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Делопроизводство.ПроверкаСвязейПриИзмененииВидаДокумента(ЭтотОбъект, Отказ);
	
	Если ВидДокумента.ВестиУчетПоНоменклатуреДел Тогда
		Делопроизводство.ПроверитьСоответствиеНоменклатурыДел(ЭтотОбъект, Отказ);
	КонецЕсли;	

	Если ЗначениеЗаполнено(ВидДокумента) Тогда 
		
		ОбязательноеУказаниеОтветственного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, 
			"ОбязательноеУказаниеОтветственного");
			
		Если ОбязательноеУказаниеОтветственного И Не ЗначениеЗаполнено(Ответственный) Тогда
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У документа вида ""%1"" должен быть обязательно указан ответственный.'; en = 'Responsible user is required for documents of type ""%1""'"),
					Строка(ВидДокумента)),
				ЭтотОбъект,
				"Ответственный",, 
				Отказ);
				
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка
		И ЗначениеЗаполнено(ОбменДанными.Отправитель)
		И ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(ОбменДанными.Отправитель) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
			"РегистрационныйНомер, Ответственный, ПодписанЭП, ПометкаУдаления");
	Иначе
		ПредыдущиеЗначенияРеквизитов = Новый Структура(
			"РегистрационныйНомер, Ответственный, ПодписанЭП, ПометкаУдаления",
			Неопределено,
			Неопределено,
			Ложь,
			Ложь);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПредыдущийРегистрационныйНомер",
		ПредыдущиеЗначенияРеквизитов.РегистрационныйНомер);
	ДополнительныеСвойства.Вставить("ПредыдущийОтветственный",
		ПредыдущиеЗначенияРеквизитов.Ответственный);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьПодписанногоОбъекта = Ложь;
	Если ДополнительныеСвойства.Свойство("ЗаписьПодписанногоОбъекта") Тогда
		ЗаписьПодписанногоОбъекта = ДополнительныеСвойства.ЗаписьПодписанногоОбъекта;
	КонецЕсли;	
	
	Если НЕ ПривилегированныйРежим() И ЗаписьПодписанногоОбъекта <> Истина Тогда
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			Если ПодписанЭП И ПредыдущиеЗначенияРеквизитов.ПодписанЭП Тогда
				// тут проверяем ключевые поля - изменились ли
				МассивИмен = Справочники.ИсходящиеДокументы.ПолучитьИменаКлючевыхРеквизитов();
				РаботаСЭП.ПроверитьИзмененностьКлючевыхПолей(МассивИмен, ЭтотОбъект, Ссылка);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	// Заполним Наименование по шаблону
	Если ЗначениеЗаполнено(Шаблон) Тогда 
		УстановитьПривилегированныйРежим(Истина);
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,
			"ЗаполнениеНаименованияПоШаблону, Заголовок");
		Если РеквизитыШаблона.ЗаполнениеНаименованияПоШаблону Тогда 
			ШаблонЗаголовка = РеквизитыШаблона.Заголовок;
			Заголовок = ШаблоныДокументов.СформироватьНаименованиеПоШаблону(
				ЭтотОбъект, ШаблонЗаголовка);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// Заполним наименование
	Наименование = Делопроизводство.НаименованиеДокумента(ЭтотОбъект);
	
	// Пометка на удаление приложенных файлов.
	Если ПометкаУдаления <> ПредыдущиеЗначенияРеквизитов.ПометкаУдаления Тогда 
		
		Если ПометкаУдаления Тогда
			ДополнительныеСвойства.Вставить("НужноПометитьНаУдалениеБизнесСобытия", Истина);
		КонецЕсли;
		
		РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполним дату начала дела, если не заполнена
	Если ЗначениеЗаполнено(Дело) И Не ЗначениеЗаполнено(Дело.ДатаНачала) И ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		
		ЗаблокироватьДанныеДляРедактирования(Дело);
		ДелоОбъект = Дело.ПолучитьОбъект();
		ДелоОбъект.ДатаНачала = ДатаРегистрации;
		ДелоОбъект.Записать();	
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоступаКПерсональнымДанным") Тогда
		ЭтотОбъект.ДополнительныеСвойства.Вставить(
			"ИзменилсяСписокПерсональныхДанных", ПерсональныеДанные.ИзменилсяСписокПерсональныхДанных(ЭтотОбъект));
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Если Не Ссылка.Пустая() Тогда 
			СсылкаПроект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проект");
			ЭтотОбъект.ДополнительныеСвойства.Вставить("ИзменилсяПроект", СсылкаПроект <> Проект);
		КонецЕсли;	
	КонецЕсли;
	
	// Обработка рабочей группы
	СсылкаОбъекта = Ссылка;
	// Установка ссылки нового
	Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		СсылкаОбъекта = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			СсылкаНового = Справочники.ИсходящиеДокументы.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
	КонецЕсли;
	
	// Определение дескрипторов для проверки прав при записи рабочей группы.
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(ЭтотОбъект);
	КонецЕсли;
	
	// Подготовка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
	
	// Добавление автоматических участников из самого объекта
	Если РаботаСРабочимиГруппами.ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(ЭтотОбъект) Тогда
		
		НовыеУчастникиРГ = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
		ДобавитьУчастниковРабочейГруппыВНабор(НовыеУчастникиРГ);
		РаботаСРабочимиГруппами.ЗаполнитьКолонкуИзменениеПоСтандартнымПравам(СсылкаОбъекта, НовыеУчастникиРГ);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НовыеУчастникиРГ, РабочаяГруппа);
		
	КонецЕсли;
	
	// Добавление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаДобавить") Тогда
		
		Для Каждого Эл Из ДополнительныеСвойства.РабочаяГруппаДобавить Цикл
			
			// Добавление участника в итоговую рабочую группу
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.Изменение = Эл.Изменение;
			
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Удаление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаУдалить") Тогда
		
		Для Каждого Эл Из ДополнительныеСвойства.РабочаяГруппаУдалить Цикл
			
			// Поиск удаляемого участника в итоговой рабочей группе
			Для Каждого Эл2 Из РабочаяГруппа Цикл
				
				Если Эл2.Участник = Эл.Участник 
					И Эл2.Изменение = Эл.Изменение Тогда
					
					// Удаление участника из итоговой рабочей группы
					РабочаяГруппа.Удалить(Эл2);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;	
				
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Обработка обязательного заполнения рабочих групп 
	Если РабочаяГруппа.Количество() = 0 Тогда
	
		Если РаботаСРабочимиГруппами.ОбязательноеЗаполнениеРабочихГруппДокументов(ВидДокумента) Тогда
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = ПользователиКлиентСервер.ТекущийПользователь();
			Строка.Изменение = Истина;
		КонецЕсли;
		
	КонецЕсли;		
	
	// Запись итоговой рабочей группы
	Если Не РаботаСРабочимиГруппами.ПерезаписьРабочейГруппыПредметаПроцессаОтключена(ЭтотОбъект) Тогда
		РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
			СсылкаОбъекта,
			РабочаяГруппа,
			Ложь); //ОбновитьПраваДоступа
	КонецЕсли;
	
	// Установка необходимости обновления прав доступа
	ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ЧисловойНомер > 0 Тогда
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ЭтотОбъект);
		Нумерация.ОсвободитьНомер(СтруктураПараметров);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка
		И ЗначениеЗаполнено(ОбменДанными.Отправитель)
		И ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(ОбменДанными.Отправитель) Тогда
		Возврат;
	КонецЕсли;
	
	// Возможно, выполнена явная регистрация событий при загрузке объекта.
	Если Не ДополнительныеСвойства.Свойство("НеРегистрироватьБизнесСобытия") Тогда
		Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый Тогда
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.СозданиеИсходящегоДокумента);	
			Если ЗначениеЗаполнено(Ответственный) Тогда
				КонтекстСобытия = Новый ХранилищеЗначения(Ответственный);
				БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, 
					Справочники.ВидыБизнесСобытий.НазначениеОтветственного, КонтекстСобытия);
			КонецЕсли;
		Иначе
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ИзменениеИсходящегоДокумента);
			Если ЗначениеЗаполнено(Ответственный)
				И Ответственный <> ДополнительныеСвойства.ПредыдущийОтветственный Тогда
				КонтекстСобытия = Новый ХранилищеЗначения(Ответственный);
				БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, 
					Справочники.ВидыБизнесСобытий.НазначениеОтветственного, КонтекстСобытия);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ДополнительныеСвойства.Свойство("НужноПометитьНаУдалениеБизнесСобытия") Тогда
		БизнесСобытияВызовСервера.ПометитьНаУдалениеСобытияПоИсточнику(Ссылка);
	КонецЕсли;	
	
	// Возможно, выполнена явная регистрация событий при загрузке объекта.
	Если Не ДополнительныеСвойства.Свойство("НеРегистрироватьБизнесСобытия") Тогда
		Если ЗначениеЗаполнено(РегистрационныйНомер) И РегистрационныйНомер <> ДополнительныеСвойства.ПредыдущийРегистрационныйНомер Тогда
			Если ЗначениеЗаполнено(ДополнительныеСвойства.ПредыдущийРегистрационныйНомер) Тогда
				БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ПеререгистрацияИсходящегоДокумента);	
			Иначе	
				БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.РегистрацияИсходящегоДокумента);	
			КонецЕсли;			
		КонецЕсли;		
	КонецЕсли;		
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды")
		И ДополнительныеСвойства.Свойство("ЭтоНовый") 
		И ДополнительныеСвойства.ЭтоНовый Тогда
		
		Штрихкод = ШтрихкодированиеСервер.СформироватьШтрихКод();
		ШтрихкодированиеСервер.ПрисвоитьШтрихКод(Ссылка, Штрихкод);
		
	КонецЕсли;
	
	// Заполняем сведения о персональных данных во всех файлах
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоступаКПерсональнымДанным") Тогда
		
		Если Не ОбменДанными.Загрузка 
			И ЭтотОбъект.ДополнительныеСвойства.Свойство("ИзменилсяСписокПерсональныхДанных") 
			И ЭтотОбъект.ДополнительныеСвойства.ИзменилсяСписокПерсональныхДанных Тогда
			
			ПерсональныеДанные.ЗаполнитьПерсональныеДанныеФайлов(Ссылка);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	// Заполнение проекта в файлах
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ИзменилсяПроект") 
		   И ЭтотОбъект.ДополнительныеСвойства.ИзменилсяПроект Тогда
			РаботаСПроектами.ЗаполнитьПроектПодчиненныхФайлов(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// обновить связи документа
	СвязиДокументов.ОбновитьСвязиДокумента(Ссылка);
	
КонецПроцедуры

Процедура ДобавитьУчастниковРабочейГруппыВНабор(ТаблицаНабора)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ИсходныеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
			"ВидДокумента, Ответственный, Зарегистрировал, Подготовил, Подписал, Создал");
			
		Если ИсходныеРеквизиты.ВидДокумента = ВидДокумента Тогда
			ДобавитьТолькоНовыхУчастниковРабочейГруппыВНабор(ТаблицаНабора, ИсходныеРеквизиты);
		Иначе
			ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора);
		КонецЕсли;	
		
	Иначе	
		
		ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТолькоНовыхУчастниковРабочейГруппыВНабор(ТаблицаНабора, ИсходныеРеквизиты)
	
	// Добавление реквизита Ответственный
	Если ИсходныеРеквизиты.Ответственный <> Ответственный Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Ответственный);
	КонецЕсли;				
	
	// Добавление реквизита Зарегистрировал
	Если ИсходныеРеквизиты.Зарегистрировал <> Зарегистрировал Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Зарегистрировал);
	КонецЕсли;
	
	// Добавление реквизита Подготовил
	Если ИсходныеРеквизиты.Подготовил <> Подготовил Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Подготовил);
	КонецЕсли;
	
	// Добавление реквизита Подписал
	Если ИсходныеРеквизиты.Подписал <> Подписал Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Подписал);
	КонецЕсли;
	
	// Добавление реквизита Создал
	Если ИсходныеРеквизиты.Создал <> Создал Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Создал);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора)
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Ответственный);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Зарегистрировал);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Подготовил);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Подписал);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Создал);
	
	// Добавление авторов виз согласования
	АвторыВиз = Справочники.ВизыСогласования.ПолучитьМассивАвторовВизПоДокументу(Ссылка);
	Для каждого Автор Из АвторыВиз Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, 
			Автор);
	КонецЦикла;
	
	// Добавление контролеров
	Если Не Ссылка.Пустая() Тогда 
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли
