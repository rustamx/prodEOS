#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
		
	ПрочитатьОценкуСервер(Оценка, Элементы.ДекорацияОценкаСветофор, Объект.Ссылка, Объект.Ответственный);
	
	// Заполнение пустого объекта
	Если Объект.Ссылка.Пустая() Тогда
		
		ПоследнийКод = Справочники.КонтрольныеТочки.ПолучитьКодПоследнейКТ(Объект.ОбъектКТ, Объект.ГруппаКТ);
		
		Если ПоследнийКод <> Неопределено Тогда
			ФорматнаяСтрока = СтрЗаменить(
				"ЧЦ=%1; ЧРГ=; ЧГ=0; ЧВН=", "%1", 
				ПоследнийКод.Длина - СтрДлина(ПоследнийКод.Префикс));
			Объект.КодКТ = ПоследнийКод.Префикс + Формат(ПоследнийКод.Число + 1, ФорматнаяСтрока);
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Объект.УровеньКТ) Тогда
			Объект.УровеньКТ = Справочники.УровниКонтроля.УровеньКТПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.Исполнено = Ложь;
		Объект.ФактическийСрок = '00010101';
		Объект.Проверено = Ложь;
		Объект.ДатаПроверки = '00010101'; 
		Объект.Пройдена = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияПройдена.Видимость = Объект.Пройдена;
	
	Если ЗначениеЗаполнено(Объект.УровеньКТ) Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Описание;
	КонецЕсли;
		
	// Настраиваем доступность полей карточки
	Если Не ЕстьПравоНаИзменение(Объект.ОбъектКТ) Тогда
		
		Элементы.ФормаУстановитьПометкуУдаления.Видимость = Ложь;
		
		Для каждого Эл Из Элементы Цикл
			
			Если ТипЗнч(Эл) = Тип("ПолеФормы") ИЛИ ТипЗнч(Эл) = Тип("ТаблицаФормы") Тогда
				Эл.ТолькоПросмотр = Истина;
			КонецЕсли;
			
		КонецЦикла;	
		
		Если Объект.Ответственный = Пользователи.ТекущийПользователь() Тогда
			Элементы.Исполнено.ТолькоПросмотр = Ложь;
			Элементы.ФактическийСрок.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
		Если Объект.Проверяющий = Пользователи.ТекущийПользователь() Тогда
			Элементы.Проверено.ТолькоПросмотр = Ложь;
			Элементы.ДатаПроверки.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	УстановитьДоступность();
	
	// Установка параметров файлов
	Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Файлы.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
	
	// Показ помеченных на удаление файлов
	ПоказатьПомеченныеНаУдаление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭтаФорма.ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		Ложь);
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.Описание = СокрЛП(Объект.Описание);
	Объект.Результат = СокрЛП(Объект.Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ДекорацияПройдена.Видимость = Объект.Пройдена;
	УстановитьДоступность();		
	
	// Файлы
	ЗначениеПараметра = Файлы.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВладелецФайла"));
	Если Не ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда 
		Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_КонтрольнаяТочка", Объект.ОбъектКТ);
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Объект.Ссылка Тогда
		
		Элементы.Файлы.Обновить();
		
		Если Параметр <> Неопределено Тогда
			Элементы.Файлы.ТекущаяСтрока = Параметр;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		ВладелецФайла = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец") Тогда
			ВладелецФайла = Параметр.Владелец;
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
		КонецЕсли;	
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			Элементы.Файлы.Обновить();
			УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
			
		КонецЕсли;	
 	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		Если Параметр <> Неопределено Тогда
			
			ВладелецФайла = Неопределено;
			Если Параметр.Свойство("Владелец", ВладелецФайла) Тогда
				Если ВладелецФайла = Объект.Ссылка Тогда
					Элементы.Файлы.Обновить();
					
					ФайлСозданный = Неопределено;
					Если Параметр.Свойство("Файл", ФайлСозданный) Тогда
						Элементы.Файлы.ТекущаяСтрока = ФайлСозданный;
					КонецЕсли;
					
					ОповеститьОбИзменении(Объект.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияОценкаПодписьНажатие(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;	
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КонтрольнаяТочка", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеОценкиКТПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтрольнаяТочка", Объект.Ссылка);

	ОткрытьФорму("Справочник.КонтрольныеТочки.Форма.ДобавлениеОценкиКТ", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеОценкиКТПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьОценкуСервер(
		Результат.Оценка, 
		Результат.Дата, 
		Результат.Автор, 
		Результат.Комментарий, 
		ДополнительныеПараметры.КонтрольнаяТочка);
		
	ОценкаКонтрольнойТочки = Новый Структура;
	ОценкаКонтрольнойТочки.Вставить("Период", Результат.Дата);
	ОценкаКонтрольнойТочки.Вставить("Автор", Результат.Автор);
	ОценкаКонтрольнойТочки.Вставить("Оценка", Результат.Оценка);
	
	ОбработатьГруппуОценка(
		ОценкаКонтрольнойТочки,
		Оценка,
		Элементы.ДекорацияОценкаСветофор,
		ДополнительныеПараметры.КонтрольнаяТочка,
		Объект.Ответственный);
	
	Оповестить("Запись_ОценкаКТ", Объект.ОбъектКТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполненоПриИзменении(Элемент)
	
	Если Объект.Исполнено Тогда
		Объект.ФактическийСрок = ТекущаяДата();
	Иначе
		Объект.ФактическийСрок = Дата("00010101");
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПровереноПриИзменении(Элемент)
	
	Если Объект.Проверено Тогда
		Объект.ДатаПроверки = ТекущаяДата();
	Иначе
		Объект.ДатаПроверки = Дата("00010101");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкаНажатие(Элемент, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;	
	
	ОткрытьИсториюОценок();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаКТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОбъектКТ", Объект.ОбъектКТ);
	Отбор.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.ГруппаКТ);
	
	ОткрытьФорму("Справочник.ГруппыКонтрольныхТочек.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаКТАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораГруппаКТ(Текст, Объект.ОбъектКТ);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаКТОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораГруппаКТ(Текст, Объект.ОбъектКТ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОценок(Команда)
	
	ОткрытьИсториюОценок();
	
КонецПроцедуры

#Область Файлы

&НаКлиенте
Процедура ПоказатьПомеченныеНаУдаление(Команда)
	
	ПоказатьПомеченныеНаУдаление = Не ПоказатьПомеченныеНаУдаление;
	ПоказатьПомеченныеНаУдалениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка, 
			Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленных = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе			
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;	
	Иначе
		
		Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
			
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
		РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;	
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		Элементы.Файлы.ТекущаяСтрока, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	ПараметрыОбновленияФайла.АвторТекущейВерсии = ТекущиеДанные.Автор;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Обработчик, 
		Элементы.Файлы.ТекущаяСтрока);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		Элементы.Файлы.ТекущаяСтрока, 
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.Файлы.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.Файлы.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Результат, ПараметрыВыполнения) Экспорт
	
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловПослеУстановкиРасширения", ЭтотОбъект);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	Если НЕ ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
		Возврат;
	КонецЕсли;
		
	РаботаСФайламиКлиент.ВыполнитьИмпортФайловСОткрытиемФормыИмпорта(Объект.Ссылка);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ЕстьПравоНаИзменение(ОбъектКТ)
	
	Возврат ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ОбъектКТ).Изменение;
	
КонецФункции	

&НаСервереБезКонтекста
Процедура УстановитьОценкуСервер(Оценка, Дата, Автор, Комментарий, КТ)
	
	РегистрыСведений.ОценкиКонтрольныхТочек.Добавить(Дата, КТ, Автор, Оценка, Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьОценку()
	
	ПрочитатьОценкуСервер(Оценка, Элементы.ДекорацияОценкаСветофор, Объект.Ссылка, Объект.Ответственный);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочитатьОценкуСервер(РеквизитОценка, ДекорацияОценкаСветофор, КонтрольнаяТочка, Ответственный)
	
	ОценкаКонтрольнойТочки = КонтрольныеТочки.ОценкаКонтрольнойТочки(КонтрольнаяТочка);	
	ОбработатьГруппуОценка(ОценкаКонтрольнойТочки, РеквизитОценка, ДекорацияОценкаСветофор, КонтрольнаяТочка, Ответственный);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьГруппуОценка(Знач ОценкаКонтрольнойТочки, РеквизитОценка, ДекорацияОценкаСветофор, КонтрольнаяТочка, Ответственный)

	// выделена в отдельную пр-ру так как нужна тогда когда открывается форма и когда изменяется оценка, кликнув по декарации
	Если ЗначениеЗаполнено(КонтрольнаяТочка) Тогда
		
		Оценка = "";
		ДекорацияОценкаСветофор.Видимость = Истина;
		
		Если ЗначениеЗаполнено(ОценкаКонтрольнойТочки.Оценка) Тогда
			
			РеквизитОценка = Строка(ОценкаКонтрольнойТочки.Оценка) + ", " + 
				Формат(ОценкаКонтрольнойТочки.Период, "ДФ='dd.MM.yyyy'");
			
			Если ОценкаКонтрольнойТочки.Автор <> Ответственный Тогда
				РеквизитОценка = РеквизитОценка + " (" + ОценкаКонтрольнойТочки.Автор + ")";
			КонецЕсли;	
			
			Если ОценкаКонтрольнойТочки.Оценка = ПредопределенноеЗначение("Перечисление.ВероятностиКТ.ВСрок") Тогда
				ДекорацияОценкаСветофор.Картинка = БиблиотекаКартинок.СветофорЗеленый;
			ИначеЕсли ОценкаКонтрольнойТочки.Оценка = ПредопределенноеЗначение("Перечисление.ВероятностиКТ.ЕстьНесущественныеРиски") Тогда
				ДекорацияОценкаСветофор.Картинка = БиблиотекаКартинок.СветофорЖелтый;
			ИначеЕсли ОценкаКонтрольнойТочки.Оценка = ПредопределенноеЗначение("Перечисление.ВероятностиКТ.ПодУгрозой") Тогда
				ДекорацияОценкаСветофор.Картинка = БиблиотекаКартинок.СветофорКрасный;
			ИначеЕсли ОценкаКонтрольнойТочки.Оценка = ПредопределенноеЗначение("Перечисление.ВероятностиКТ.НеОпределено") Тогда
				ДекорацияОценкаСветофор.Картинка = БиблиотекаКартинок.СветофорБелыйВопрос;
			Иначе
				ДекорацияОценкаСветофор.Видимость = Ложь;
			КонецЕсли;
			
		Иначе	
			
			ДекорацияОценкаСветофор.Картинка = БиблиотекаКартинок.СветофорСерый;
			
		КонецЕсли;
		
	Иначе	
		
		ДекорацияОценкаСветофор.Картинка = БиблиотекаКартинок.СветофорСерый;
		
	КонецЕсли;	

КонецПроцедуры // ДекорацияОценка()

&НаКлиенте
Процедура ОткрытьИсториюОценок()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтрольнаяТочка", Объект.Ссылка);
	ОткрытьФорму("Справочник.КонтрольныеТочки.Форма.ИсторияОценок", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьДоступность()
	
	Если Объект.Проверено
		И Объект.Ответственный = Пользователи.ТекущийПользователь()  Тогда
			ЭтаФорма.ТолькоПросмотр = Истина;
			Элементы.ГруппаОценка.Видимость = Ложь;
			Элементы.ФормаУстановитьПометкуУдаления.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗаблокироватьИсполнителюКарточку()

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура;
	СохраняемыеЭлементы.Вставить("ГруппаКТ", Объект.ГруппаКТ);
	
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораГруппаКТ(Текст, ОбъектКТ)
		
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Группы.Ссылка КАК Ссылка,
	|	Группы.Наименование
	|ИЗ
	|	Справочник.ГруппыКонтрольныхТочек КАК Группы
	|ГДЕ
	|	Группы.Наименование ПОДОБНО &Текст
	|	И Группы.ПометкаУдаления = ЛОЖЬ
	|	И Группы.ОбъектКТ = &ОбъектКТ";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ОбъектКТ", ОбъектКТ);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, Строка(Выборка.Наименование));
	КонецЦикла;	
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервере
Процедура НастроитьПоказПомеченныхНаУдалениеФайлов()
	
	Если ПоказатьПомеченныеНаУдаление Тогда
		ПараметрПометкиУдаления = Новый ПараметрКомпоновкиДанных("НеПоказыватьПомеченныеНаУдаление");
		Для Каждого Элемент Из Файлы.Параметры.Элементы Цикл
			Если Элемент.Параметр = ПараметрПометкиУдаления Тогда
				Элемент.Использование = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Файлы.Параметры.УстановитьЗначениеПараметра("НеПоказыватьПомеченныеНаУдаление", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандКлиент(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элементы.Файлы.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОткрытьФайл, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыРедактировать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗакончитьРедактирование, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗанять, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьИзменения, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьКак, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОсвободить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Ложь);
		
	Иначе	
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
		Зашифрован 	= ТекущиеДанные.Зашифрован;
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОткрытьФайл, Истина);
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыРедактировать, НЕ ТекущиеДанные.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗакончитьРедактирование, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗанять, Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьИзменения, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьКак, Истина);
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОсвободить, Не Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПомеченныеНаУдалениеНаСервере()
	
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ЭтаФорма.ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		ПоказатьПомеченныеНаУдаление);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	ФайлОснование = Элементы.Файлы.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 1;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтаФорма, РежимСоздания, Истина);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка создания нового файла: %1'; en = 'Error creating new file: %1'"),
				КраткоеПредставлениеОшибки(Инфо));
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецПопытки;
	Иначе
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ВыбраннаяСтрока, 
		Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти
