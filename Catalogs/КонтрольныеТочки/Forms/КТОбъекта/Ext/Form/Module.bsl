#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектКТ = Параметры.ОбъектКТ;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Контрольные точки (%1)'; en = 'Milestones (%1)'"),
		ОбъектКТ);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
		"ОбъектКТ",
		ОбъектКТ,
		ВидСравненияКомпоновкиДанных.Равно);
		
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
		
	Элементы.ПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "ПометкаУдаления", Ложь,
		ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
	ЗаполнитьТаблицуГрупп();	
	
	ОбновитьСтатистикуСервер();
	
	ИспользоватьВидыПроектов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов");
	ЕстьПравоНаИзменениеПроекта = ЕстьПравоНаИзменение();
	
	// Доступность для изменения
	Если Не ЕстьПравоНаИзменениеПроекта Тогда
		
		Элементы.ФормаСоздать.Видимость = Ложь;
		Элементы.ГруппыКТКонтекстноеМенюДобавитьГруппу.Видимость = Ложь;
		Элементы.ГруппыКТКонтекстноеМенюУдалить.Видимость = Ложь;
		Элементы.ГруппыКТКонтекстноеМенюОбновитьГруппы.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюСоздать.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюСкопировать.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюУстановитьПометкуУдаления.Видимость = Ложь;
		Элементы.ФормаЗапроситьОценки.Видимость = Ложь;
		
		Для каждого Эл Из Элементы Цикл
			
			Если ТипЗнч(Эл) = Тип("ПолеФормы") ИЛИ ТипЗнч(Эл) = Тип("ТаблицаФормы") Тогда
				Эл.ТолькоПросмотр = Истина;
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Если Не ЕстьПравоНаИзменениеПроекта
		ИЛИ Не ИспользоватьВидыПроектов
		ИЛИ КонтрольныеТочки.ОтветственныйОбъектаКТ(ОбъектКТ) <> Пользователи.ТекущийПользователь() Тогда
			Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
	КонецЕсли;
		
	Если ЕстьПравоНаИзменениеПроекта
		И ИспользоватьВидыПроектов
		И КонтрольныеТочки.ОтветственныйОбъектаКТ(ОбъектКТ) = Пользователи.ТекущийПользователь()
		И КонтрольныеТочки.ОтсутствуютГруппыИТочки(ОбъектКТ) Тогда
			ПредложитьЗаполнитьПоШаблону = ЕстьШаблонПоВидуОбъектаКТ(ОбъектКТ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПредложитьЗаполнитьПоШаблону Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПродолжение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Заполнить контрольные точки по шаблону?'; en = 'Fill milestones according to template?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОценкаКТ" И Параметр = ОбъектКТ Тогда
		Элементы.Список.Обновить();
				
	ИначеЕсли ИмяСобытия = "Запись_ГруппаКонтрольныхТочек" И Параметр = ОбъектКТ Тогда
		ПеречитатьТаблицуГрупп();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтборСписка(Список, Настройки);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборУровеньКТ, УровеньКТ);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборОтветственный, Ответственный);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ГруппыКТПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяГруппаКТ <> Элементы.ГруппыКТ.ТекущиеДанные.Группа Тогда 
		
		ТекущаяГруппаКТ = Элементы.ГруппыКТ.ТекущиеДанные.Группа;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыКТВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//ПоказатьЗначение(, Элементы.ГруппыКТ.ТекущиеДанные.Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыКТПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ДобавитьГруппуКлиент();
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыКТПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.ГруппыКТ.ТекущиеДанные = Неопределено Или Элементы.ГруппыКТ.ТекущиеДанные.Группа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Элементы.ГруппыКТ.ТекущиеДанные.Предопределенный Тогда 
		ПоказатьЗначение(, Элементы.ГруппыКТ.ТекущиеДанные.Группа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыКТПередУдалением(Элемент, Отказ)
	
	УдалитьГруппу();
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыКТПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)	
	
	СтандартнаяОбработка = Ложь;	
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	СтрокаГруппыКТ = ГруппыКТ.НайтиПоИдентификатору(Строка);
	Если СтрокаГруппыКТ.Предопределенный Тогда 
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ГруппыКТПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГруппыКТ = ГруппыКТ.НайтиПоИдентификатору(Строка);
	Если СтрокаГруппыКТ = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОбработатьПеретаскиваниеКонтрольныхТочек(ПараметрыПеретаскивания, СтрокаГруппыКТ);	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	СоздатьКТ(Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ПеречитатьТаблицуГрупп();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборУровеньКТПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("УровеньКТ", УровеньКТ);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);		
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, УровеньКТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Ответственный", Ответственный);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);	
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Ответственный);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Оценить(Команда)
	
	ОценитьВыбранныеКТ();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОценок(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектКТ", ОбъектКТ);
	
	ОткрытьФорму("Справочник.КонтрольныеТочки.Форма.АнализОценок", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ЕстьШаблонПоВидуОбъекта = ЕстьШаблонПоВидуОбъектаКТ(ОбъектКТ);
	
	Если Не ЕстьШаблонПоВидуОбъекта Тогда
		Текст =	НСтр("ru = 'Отсутствует шаблон контрольных точек для вида проекта '; en = 'Milestone template for project type is missing '");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Все контрольные точки и группы будут удалены и загружены из шаблона.
		|Удалить и загрузить из шаблона?';
		|en = 'All milestones and groups will be deleted and imported from a template.
		|Delete and import?'");
	
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да'; en = 'Yes'"));
	Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Нет'; en = 'None'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуПродолжение",
		ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
	    Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Идет загрузка шаблона. Пожалуйста подождите...'; en = 'Importing template. Please wait ...'"));
	
	ЗаполнитьПоШаблонуНаСервере();
	ЗаполнитьТаблицуГрупп();
	Элементы.Список.Обновить();
	ТекущаяГруппаКТ = Неопределено;
	
	Состояние(НСтр("ru = 'Шаблон загружен.'; en = 'Template imported.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	СоздатьКТ(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	ПоказыватьУдаленные = Не ПоказыватьУдаленные;
	Элементы.ПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	
	Если Не ПоказыватьУдаленные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "ПометкаУдаления", Ложь,
			ВидСравненияКомпоновкиДанных.Равно, , Истина);
	Иначе		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ПометкаУдаления");
	КонецЕсли;
	
	ЗаполнитьТаблицуГрупп();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	ДобавитьГруппуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = "Выберите файл";
	Диалог.ПолноеИмяФайла = Заголовок + ".xml";
	Диалог.ПредварительныйПросмотр = Истина;
	Диалог.Фильтр = "Файлы XML (*.xml)|*.xml"; 

	Если Диалог.Выбрать() Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Идёт сохранение списка контрольных точек в файл ""%1"". Пожалуйста подождите...'; en = 'Saving milestone list to ""%1"" file. Please wait...'"),
				Диалог.ПолноеИмяФайла);
		Состояние(Текст);
		
		СтрокаXML = ВыгрузитьНаСервере(ОбъектКТ);

		ЗаписьТекста = Новый ЗаписьТекста(Диалог.ПолноеИмяФайла);
		ЗаписьТекста.Записать(СтрокаXML);
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Список контрольных точек сохранен в файл ""%1""'; en = 'Milestone list saved to ""%1"" file'"),
				Диалог.ПолноеИмяФайла);
		Состояние(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ТекстВопроса = НСтр("ru = 'Все контрольные точки и группы будут удалены и загружены из файла.
							|Удалить и загрузить из файла?';
							|en = 'All milestones and groups will be deleted and imported from a file.
							|Delete and import?'");
												
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьКТИзXMLПродолжение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКТИзXMLПродолжение(Ответ, Параметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("Заголовок", НСтр("ru = 'Выберите файл'; en = 'Select file'"));
	ПараметрыДиалога.Вставить("Фильтр", НСтр("ru = 'Файлы XML (*.xml)'; en = 'XML files (*.xml)'") + "|*.xml|");
	
	ПараметрыДиалога.Вставить("ПолноеИмяФайла", "");
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьКТИзXMLЗавершение", ЭтотОбъект);
	ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, ПараметрыДиалога, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКТИзXMLЗавершение(Знач РезультатПомещенияФайлов, Знач ДополнительныеПараметры) Экспорт
	
	АдресПомещенногоФайла = РезультатПомещенияФайлов.Хранение;
	ТекстОшибки           = РезультатПомещенияФайлов.ОписаниеОшибки;
	
	Если ПустаяСтрока(ТекстОшибки) И ПустаяСтрока(АдресПомещенногоФайла) Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка передачи файла на сервер'; en = 'Error transferring file to the server'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идёт загрука списка контрольных точек из файла ""%1"". Пожалуйста подождите...'; en = 'Importing milestone list from ""%1"" file. Please wait...'"),
			РезультатПомещенияФайлов.Имя);
	Состояние(Текст);
	
	ЗагрузитьКТИзXMLНаСервере(АдресПомещенногоФайла, ОбъектКТ);
	
	ЗаполнитьТаблицуГрупп();
	Элементы.Список.Обновить();
	ТекущаяГруппаКТ = Неопределено;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Список контрольных точек загружен из файла ""%1""'; en = 'Milestone list imported from ""%1"" file'"),
			РезультатПомещенияФайлов.Имя);
	Состояние(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГруппыИСписок(Команда)
	
	Элементы.Список.Обновить();
	ПеречитатьТаблицуГрупп();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГруппы(Команда)
	
	ПеречитатьТаблицуГрупп();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОценитьВыбранныеКТ()

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбранныеКТ", Элементы.Список.ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеОценкиКТПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура;

	ОткрытьФорму("Справочник.КонтрольныеТочки.Форма.ДобавлениеОценкиКТ", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеОценкиКТПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Отмена" ИЛИ Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ДополнительныеПараметры.ВыбранныеКТ.Количество() > 5 Тогда
		СтрокаСостояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идет установка оценок контрольных точек (%1). Пожалуйста, подождите'; en = 'Setting estimates for milestones (%1). Please wait'"),
			Строка(ДополнительныеПараметры.ВыбранныеКТ.Количество()));
		Состояние(СтрокаСостояние);
	КонецЕсли;	
	
	УстановитьОценкуСервер(
		Результат.Оценка, 
		Результат.Дата, 
		Результат.Автор, 
		Результат.Комментарий, 
		ДополнительныеПараметры.ВыбранныеКТ);
	
	Если ДополнительныеПараметры.ВыбранныеКТ.Количество() > 5 Тогда
		СтрокаСостояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Установка оценок контрольных точек завершена (%1).'; en = 'Setting estimates for milestones completed (%1).'"),
			Строка(ДополнительныеПараметры.ВыбранныеКТ.Количество()));
		Состояние(СтрокаСостояние);
	КонецЕсли;	
	
	Элементы.Список.Обновить();

	Оповестить("Запись_ОценкаКТ", ОбъектКТ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьОценкуСервер(Оценка, Дата, Автор, Комментарий, СписокКТ)
	
	КонтрольныеТочки.УстановитьОценку(Оценка, Дата, Автор, Комментарий, СписокКТ);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОжидания()
	
	Если ЗначениеЗаполнено(ТекущаяГруппаКТ) Тогда 
		
		Если ТекущаяГруппаКТ = ПредопределенноеЗначение("Справочник.ГруппыКонтрольныхТочек.НеВГруппе") Тогда
			Список.Параметры.УстановитьЗначениеПараметра("ГруппаКТ", 
				ПредопределенноеЗначение("Справочник.ГруппыКонтрольныхТочек.ПустаяСсылка"));
		ИначеЕсли ТекущаяГруппаКТ = ПредопределенноеЗначение("Справочник.ГруппыКонтрольныхТочек.Все") Тогда		
			ОтключитьПараметрОтбора("ГруппаКТ")
		Иначе
			Список.Параметры.УстановитьЗначениеПараметра("ГруппаКТ", 
				ТекущаяГруппаКТ);
		КонецЕсли;			
			
	Иначе
		
		ОтключитьПараметрОтбора("ГруппаКТ")
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПараметрОтбора(ПараметрОтбора)
	
	Параметр = Список.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных(ПараметрОтбора));
	Если Параметр <> Неопределено И Параметр.Использование Тогда 
		Параметр.Использование = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСписка()
	
	РаботаСоСпискамиДокументовКлиент.УстановитьПараметрыСписка(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Функция ЕстьПравоНаИзменение()
	
	Возврат ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ОбъектКТ).Изменение;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьТаблицуГрупп()
	
	ГруппыКТ.Очистить();
	
	Строка = ГруппыКТ.Добавить();
	Строка.Группа = Справочники.ГруппыКонтрольныхТочек.Все;
	Строка.Предопределенный = Истина;
	ЧислоКТ = РегистрыСведений.ЧислоКТВКонтейнерах.ПолучитьЧислоКТПоКонтейнеру(ОбъектКТ);;
	Строка.НаименованиеГруппы = Строка(Строка.Группа) + " (" + Строка(ЧислоКТ) + ")";
	Строка.ОтображатьЖирным = Истина;
	
	Строка = ГруппыКТ.Добавить();
	Строка.Группа = Справочники.ГруппыКонтрольныхТочек.НеВГруппе;
	Строка.Предопределенный = Истина;
	ЧислоКТ = КонтрольныеТочки.ПолучитьЧислоКТБезГруппы(ОбъектКТ);
	Строка.НаименованиеГруппы = Строка(Строка.Группа) + " (" + Строка(ЧислоКТ) + ")";
	Строка.ОтображатьКрасным = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыКонтрольныхТочек.Ссылка,
		|	ВЫБОР 
		|		КОГДА ЧислоКТВКонтейнерах.ЧислоКТ ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ ЧислоКТВКонтейнерах.ЧислоКТ
		|	КОНЕЦ КАК ЧислоКТ,
		|	ГруппыКонтрольныхТочек.ПометкаУдаления
		|ИЗ
		|	Справочник.ГруппыКонтрольныхТочек КАК ГруппыКонтрольныхТочек
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЧислоКТВКонтейнерах КАК ЧислоКТВКонтейнерах
		|		ПО ЧислоКТВКонтейнерах.КонтейнерКТ = ГруппыКонтрольныхТочек.Ссылка";

	Если Не ПоказыватьУдаленные Тогда
		Запрос.Текст = Запрос.Текст +	
			"
			|ГДЕ
			|	ГруппыКонтрольныхТочек.ПометкаУдаления = &ПометкаУдаления
			|	И ГруппыКонтрольныхТочек.ОбъектКТ = &ОбъектКТ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ГруппыКонтрольныхТочек.Наименование";
			
		Запрос.УстановитьПараметр("ПометкаУдаления", ПоказыватьУдаленные);
	Иначе		
		Запрос.Текст = Запрос.Текст +	
			"
			|ГДЕ
			|	ГруппыКонтрольныхТочек.ОбъектКТ = &ОбъектКТ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ГруппыКонтрольныхТочек.Наименование";
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("ОбъектКТ", ОбъектКТ);
	Запрос.УстановитьПараметр("ПометкаУдаления", ПоказыватьУдаленные);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Строка = ГруппыКТ.Добавить();
		Строка.Группа = Выборка.Ссылка;
		Строка.НаименованиеГруппы = Строка(Выборка.Ссылка) + " (" + Строка(Выборка.ЧислоКТ) + ")";
		Строка.ПометкаУдаления = Выборка.ПометкаУдаления;
		
	КонецЦикла;
	
КонецПроцедуры		

&НаКлиенте
Процедура СоздатьКТ(Копирование)

	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ОбъектКТ", ОбъектКТ);

	Если ТекущаяГруппаКТ <> ПредопределенноеЗначение("Справочник.ГруппыКонтрольныхТочек.Все") 
		И ТекущаяГруппаКТ <> ПредопределенноеЗначение("Справочник.ГруппыКонтрольныхТочек.НеВГруппе") Тогда

		ЗначенияЗаполнения.Вставить("ГруппаКТ", ТекущаяГруппаКТ);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);	
	
	Если Копирование Тогда 
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда 
			ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.Ссылка);
		КонецЕсли;	
	КонецЕсли;		

	ОткрытьФорму("Справочник.КонтрольныеТочки.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьТекущиеГруппыИТочки(ОбъектКТ)
	
	// Получаем все текущие группы контрольных точек
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
		"ВЫБРАТЬ
		|	ГруппыКТ.Ссылка
		|ИЗ
		|	Справочник.ГруппыКонтрольныхТочек КАК ГруппыКТ
		|ГДЕ
		|	ГруппыКТ.ПометкаУдаления = Ложь
		|	И ГруппыКТ.ОбъектКТ = &ОбъектКТ";
	
	Запрос1.УстановитьПараметр("ОбъектКТ", ОбъектКТ);
	Выборка1 = Запрос1.Выполнить().Выбрать();
	
	// Получаем все текущие контрольные точки
	Запрос2 = Новый Запрос;
	Запрос2.Текст = 
		"ВЫБРАТЬ
		|	КонтрольныеТочки.Ссылка
		|ИЗ
		|	Справочник.КонтрольныеТочки КАК КонтрольныеТочки
		|ГДЕ
		|	КонтрольныеТочки.ПометкаУдаления = Ложь
		|	И КонтрольныеТочки.ОбъектКТ = &ОбъектКТ";
	
	Запрос2.УстановитьПараметр("ОбъектКТ", ОбъектКТ);
	Выборка2 = Запрос2.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка 
		
		// Удаляем все текущие группы контрольных точек
		Пока Выборка1.Следующий() Цикл
			
			ГруппаКТ = Выборка1.Ссылка.ПолучитьОбъект();
			ГруппаКТ.УстановитьПометкуУдаления(Истина);
			ГруппаКТ.Записать();
			
		КонецЦикла;
		
		// Удаляем все текущие контрольные точки
		Пока Выборка2.Следующий() Цикл
			
			КТ = Выборка2.Ссылка.ПолучитьОбъект();
			КТ.УстановитьПометкуУдаления(Истина);
			КТ.Записать();
			
		КонецЦикла;
		
	Исключение
		
		// Сообщаем о проблеме
		ВызватьИсключение;
		
	КонецПопытки;	
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры	

&НаСервере
Функция ЗагрузитьГруппыКТПоШаблону(ОбъектКТ, ВидОбъектаКТ)
	
	СоответствиеГрупп = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныГруппКТ.Наименование,
		|	ШаблоныГруппКТ.Ответственный,
		|	ШаблоныГруппКТ.Ссылка
		|ИЗ
		|	Справочник.ШаблоныГруппКонтрольныхТочек КАК ШаблоныГруппКТ
		|ГДЕ
		|	ШаблоныГруппКТ.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныГруппКТ.ОбъектКТ = &ОбъектКТ";
	
	Запрос.УстановитьПараметр("ОбъектКТ", ВидОбъектаКТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ГруппаКТ = Справочники.ГруппыКонтрольныхТочек.СоздатьЭлемент();
		ГруппаКТ.ОбъектКТ = ОбъектКТ; 
		ГруппаКТ.Наименование = Выборка.Наименование;
		ГруппаКТ.Ответственный = Выборка.Ответственный;
		ГруппаКТ.Записать();
		
		СоответствиеГрупп.Вставить(Выборка.Ссылка, ГруппаКТ.Ссылка);
		
	КонецЦикла;	
	
	Возврат СоответствиеГрупп;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	УдалитьТекущиеГруппыИТочки(ОбъектКТ);
	
	// Получаем шаблон
	ВидОбъектаКТ = КонтрольныеТочки.ПолучитьВидОбъектаКТ(ОбъектКТ);
	
	Если ВидОбъектаКТ = Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Вид объекта контрольных точек не найден.'; en = 'Milestone object type not found.'");
		
	КонецЕсли;	
	
	// Загружаем группы
	СоответствиеГрупп = ЗагрузитьГруппыКТПоШаблону(ОбъектКТ, ВидОбъектаКТ);
	
	// Загружаем контрольные точки
	График = Неопределено;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда	
		График = КонтрольныеТочки.ПолучитьГрафикОбъектаКТ(ОбъектКТ);
		Если Не ЗначениеЗаполнено(График) Тогда
			График = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
		КонецЕсли;	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныКонтрольныхТочек.КодКТ,
		|	ШаблоныКонтрольныхТочек.Комментарий,
		|	ШаблоныКонтрольныхТочек.Описание,
		|	ШаблоныКонтрольныхТочек.Ответственный,
		|	ШаблоныКонтрольныхТочек.Проверяющий,
		|	ШаблоныКонтрольныхТочек.УровеньКТ,
		|	ШаблоныКонтрольныхТочек.ДлительностьДней,
		|	ШаблоныКонтрольныхТочек.ДлительностьМинут,
		|	ШаблоныКонтрольныхТочек.ДлительностьЧасов,
		|	ШаблоныКонтрольныхТочек.ГруппаКТ,
		|	ШаблоныКонтрольныхТочек.Результат
		|ИЗ
		|	Справочник.ШаблоныКонтрольныхТочек КАК ШаблоныКонтрольныхТочек
		|ГДЕ
		|	ШаблоныКонтрольныхТочек.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныКонтрольныхТочек.ОбъектКТ = &ОбъектКТ";
	
	Запрос.УстановитьПараметр("ОбъектКТ", ВидОбъектаКТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КТ = Справочники.КонтрольныеТочки.СоздатьЭлемент();
		КТ.ОбъектКТ = ОбъектКТ; 
		КТ.КодКТ = Выборка.КодКТ;
		КТ.Комментарий = Выборка.Комментарий;
		КТ.Описание = Выборка.Описание;
		КТ.Описание = Выборка.Описание;
		КТ.Ответственный = Выборка.Ответственный;
		КТ.Проверяющий = Выборка.Проверяющий;
		Если Не ЗначениеЗаполнено(КТ.Проверяющий) Тогда
			КТ.Проверяющий = Пользователи.ТекущийПользователь();
		КонецЕсли;	
		КТ.УровеньКТ = Выборка.УровеньКТ;
		КТ.Результат = Выборка.Результат;
		КТ.ГруппаКТ = СоответствиеГрупп.Получить(Выборка.ГруппаКТ);
		
		ДлительностьВСекундах = Выборка.ДлительностьДней * 60 * 60 * 24 
			+ Выборка.ДлительностьЧасов * 60 * 60 
			+ Выборка.ДлительностьМинут * 60;
		
		Если ДлительностьВСекундах <> 0 Тогда
			
			Если ЗначениеЗаполнено(График) Тогда
				
				КТ.ПлановыйСрок = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
					График,
					ТекущаяДатаСеанса(),
					Выборка.ДлительностьДней,
					Выборка.ДлительностьЧасов) + Выборка.ДлительностьМинут * 60;		
					
			Иначе
					
				КТ.ПлановыйСрок = ТекущаяДатаСеанса() + ДлительностьВСекундах;
					
			КонецЕсли;		
				
		КонецЕсли;		
			
		КТ.Записать();
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьКТИзXMLНаСервере(Знач АдресВременногоХранилища, Знач ОбъектКТ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УдалитьТекущиеГруппыИТочки(ОбъектКТ);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные.Записать(ИмяВременногоФайла);	
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	
	ТекущаяГруппа = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "ГруппаКТ" Тогда
			
			НоваяГруппа = Справочники.ГруппыКонтрольныхТочек.СоздатьЭлемент();
			
			НоваяГруппа.Наименование = ЧтениеXML.ЗначениеАтрибута("Наименование");
			НоваяГруппа.Комментарий = ЧтениеXML.ЗначениеАтрибута("Комментарий");
			ИД = Новый УникальныйИдентификатор(ЧтениеXML.ЗначениеАтрибута("Ответственный"));
			НоваяГруппа.Ответственный = Справочники.Пользователи.ПолучитьСсылку(ИД);
			НоваяГруппа.ОбъектКТ = ОбъектКТ;
			
			НоваяГруппа.Записать();
			
			ТекущаяГруппа = НоваяГруппа.Ссылка;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "КТ" Тогда
			
			НоваяКТ = Справочники.КонтрольныеТочки.СоздатьЭлемент();
			НоваяКТ.ОбъектКТ = ОбъектКТ;
			НоваяКТ.ГруппаКТ = ТекущаяГруппа;
			
			НоваяКТ.Наименование = ЧтениеXML.ЗначениеАтрибута("Наименование");
			НоваяКТ.КодКТ = ЧтениеXML.ЗначениеАтрибута("КодКТ");
			НоваяКТ.Комментарий = ЧтениеXML.ЗначениеАтрибута("Комментарий");
			НоваяКТ.Описание = ЧтениеXML.ЗначениеАтрибута("Описание");
			НоваяКТ.ПлановыйСрок = Дата(ЧтениеXML.ЗначениеАтрибута("ПлановыйСрок"));
			
			ИД = Новый УникальныйИдентификатор(ЧтениеXML.ЗначениеАтрибута("Ответственный"));
			НоваяКТ.Ответственный = Справочники.Пользователи.ПолучитьСсылку(ИД);
			
			ИД = Новый УникальныйИдентификатор(ЧтениеXML.ЗначениеАтрибута("Проверяющий"));
			НоваяКТ.Проверяющий = Справочники.Пользователи.ПолучитьСсылку(ИД);
			
			НоваяКТ.Результат = ЧтениеXML.ЗначениеАтрибута("Результат");
			
			ИД = Новый УникальныйИдентификатор(ЧтениеXML.ЗначениеАтрибута("УровеньКТ"));
			НоваяКТ.УровеньКТ = Справочники.УровниКонтроля.ПолучитьСсылку(ИД);
			
			НоваяКТ.ЧисловойКод = ЧтениеXML.ЗначениеАтрибута("ЧисловойКод");
			
			НоваяКТ.Записать();
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЧтениеXML.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);			
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуКлиент()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектКТ", ОбъектКТ);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьГруппуПродолжение",
		ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.ГруппыКонтрольныхТочек.Форма.ФормаЭлемента", 
		ПараметрыФормы, ЭтаФорма, , , , 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуПродолжение(Результат, Параметры) Экспорт	
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ПеречитатьТаблицуГрупп();
		
		НайденныеСтроки = ГруппыКТ.НайтиСтроки(Новый Структура("Группа", Результат));
		Элементы.ГруппыКТ.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеОценки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектКТ", ОбъектКТ);
	
	ОткрытьФорму("Справочник.КонтрольныеТочки.Форма.ВсеОценкиПоОбъекту", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьОценкиНаСервере(КоличествоЗапрошенныхОценок)
	
	КонтрольныеТочки.ЗапроситьОценки(ОбъектКТ, Неопределено, КоличествоЗапрошенныхОценок);		
	Элементы.Список.Обновить();		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьОценки(Команда)
	
	СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Пожалуйста, подождите!%1Идет запрос оценок...'; en = 'Please, wait!%1Requesting estimates...'"),
		Символы.ПС);
	Состояние(СтрокаСостояния);	
	
	КоличествоЗапрошенныхОценок = 0;
	ЗапроситьОценкиНаСервере(КоличествоЗапрошенныхОценок);
	
	Состояние();	
	
	Если КоличествоЗапрошенныхОценок > 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Оценки запрошены у ответственных за контрольные точки.'; en = 'Estimates requested from the responsible for milestones.'"));
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Нет контрольных точек нуждающихся в оценке ответственными.'; en = 'No milestones to be estimated by responsible employees.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбновитьСтатистикуНажатие(Элемент)
	
	ОбновитьСтатистикуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатистикуСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(1) КАК Всего,
		|	СУММА(ВЫБОР
		|			КОГДА СправочникКонтрольныеТочки.Пройдена = ЛОЖЬ
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НеПройдено,
		|	СУММА(ВЫБОР
		|			КОГДА СправочникКонтрольныеТочки.ПлановыйСрок = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ СправочникКонтрольныеТочки.ПлановыйСрок >= &ТекущаяДата
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Просрочено,
		|	СУММА(ВЫБОР
		|			КОГДА ОценкиКонтрольныхТочекСрезПоследних.Оценка = ЗНАЧЕНИЕ(Перечисление.ВероятностиКТ.ПодУгрозой)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПодУгрозой,
		|	СУММА(ВЫБОР
		|			КОГДА ОценкиКонтрольныхТочекСрезПоследних.Оценка = ЗНАЧЕНИЕ(Перечисление.ВероятностиКТ.ЕстьНесущественныеРиски)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЕстьРиски,
		|	СУММА(ВЫБОР
		|			КОГДА ОценкиКонтрольныхТочекСрезПоследних.Оценка = ЗНАЧЕНИЕ(Перечисление.ВероятностиКТ.ВСрок)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВСрок,
		|	СУММА(ВЫБОР
		|			КОГДА ОценкиКонтрольныхТочекСрезПоследних.Оценка = ЗНАЧЕНИЕ(Перечисление.ВероятностиКТ.НеОпределено)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЖдутОценки
		|ИЗ
		|	Справочник.КонтрольныеТочки КАК СправочникКонтрольныеТочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОценкиКонтрольныхТочек.СрезПоследних КАК ОценкиКонтрольныхТочекСрезПоследних
		|		ПО (ОценкиКонтрольныхТочекСрезПоследних.КонтрольнаяТочка = СправочникКонтрольныеТочки.Ссылка)
		|ГДЕ
		|	СправочникКонтрольныеТочки.ПометкаУдаления = ЛОЖЬ
		|	И СправочникКонтрольныеТочки.ОбъектКТ = &ОбъектКТ";		
	
	Запрос.УстановитьПараметр("ОбъектКТ", ОбъектКТ);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Элементы.ДекорацияВсего.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Всего: %1'; en = 'Total: %1'"), Выборка.Всего);
			
		Если Не ЗначениеЗаполнено(Выборка.НеПройдено) ИЛИ Выборка.НеПройдено = 0 Тогда
			Элементы.ДекорацияНеПройдено.Заголовок = НСтр("ru = 'Не пройдено: -'; en = 'Not passed: -'");
		Иначе				
			Элементы.ДекорацияНеПройдено.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не пройдено: %1 (%2%)'; en = 'Not passed: %1 (%2%)'"), Выборка.НеПройдено, Формат(Выборка.НеПройдено/Выборка.Всего*100, "ЧЦ=3"));
		КонецЕсли;		
			
		Если Не ЗначениеЗаполнено(Выборка.Просрочено) ИЛИ Выборка.Просрочено = 0 Тогда
			Элементы.ДекорацияПросрочено.Заголовок = НСтр("ru = 'Просрочено: -'; en = 'Overdue: -'");
		Иначе				
			Элементы.ДекорацияПросрочено.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Просрочено: %1 (%2%)'; en = 'Overdue: %1 (%2%)'"), Выборка.Просрочено, Формат(Выборка.Просрочено/Выборка.Всего*100, "ЧЦ=3"));
		КонецЕсли;		
			
		Если Не ЗначениеЗаполнено(Выборка.ЖдутОценки) ИЛИ Выборка.ЖдутОценки = 0 Тогда
			Элементы.ДекорацияЖдутОценки.Заголовок = НСтр("ru = 'Ждут оценки: -'; en = 'No estimate: -'");
		Иначе				
			Элементы.ДекорацияЖдутОценки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ждут оценки: %1 (%2%)'; en = 'No estimate: %1 (%2%)'"), Выборка.ЖдутОценки, Формат(Выборка.ЖдутОценки/Выборка.Всего*100, "ЧЦ=3"));
		КонецЕсли;		
			
		Если Не ЗначениеЗаполнено(Выборка.ПодУгрозой) ИЛИ Выборка.ПодУгрозой = 0 Тогда
			Элементы.ДекорацияПодУгрозой.Заголовок = НСтр("ru = 'Под угрозой: -'; en = 'Under threat: -'");
		Иначе				
			Элементы.ДекорацияПодУгрозой.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Под угрозой: %1 (%2%)'; en = 'Under threat: %1 (%2%)'"), Выборка.ПодУгрозой, Формат(Выборка.ПодУгрозой/Выборка.Всего*100, "ЧЦ=3"));
		КонецЕсли;		
			
		Если Не ЗначениеЗаполнено(Выборка.ЕстьРиски) ИЛИ Выборка.ЕстьРиски = 0 Тогда
			Элементы.ДекорацияЕстьРиски.Заголовок = НСтр("ru = 'Есть риски: -'; en = 'Has risks: -'");
		Иначе				
			Элементы.ДекорацияЕстьРиски.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Есть риски: %1 (%2%)'; en = 'Has risks: %1 (%2%)'"), Выборка.ЕстьРиски, Формат(Выборка.ЕстьРиски/Выборка.Всего*100, "ЧЦ=3"));
		КонецЕсли;		
			
		Если Не ЗначениеЗаполнено(Выборка.ВСрок) ИЛИ Выборка.ВСрок = 0 Тогда
			Элементы.ДекорацияВСрок.Заголовок = НСтр("ru = 'В срок: -'; en = 'On time: -'");
		Иначе				
			Элементы.ДекорацияВСрок.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В срок: %1 (%2%)'; en = 'On time: %1 (%2%)'"), Выборка.ВСрок, Формат(Выборка.ВСрок/Выборка.Всего*100, "ЧЦ=3"));
		КонецЕсли;		
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьТаблицуГрупп()

	ЗаполнитьТаблицуГрупп();
	
	НайденныеСтроки = ГруппыКТ.НайтиСтроки(Новый Структура("Группа", ТекущаяГруппаКТ));
	Элементы.ГруппыКТ.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьГруппу()
	
	Если Элементы.ГруппыКТ.ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Пометить на удаление выбранные группы ("
			+ Элементы.ГруппыКТ.ВыделенныеСтроки.Количество()
			+ ") и входящие в них контрольные точки?';
			|en = 'Mark for deletion the selected groups ("
			+ Элементы.ГруппыКТ.ВыделенныеСтроки.Количество()
			+ ") and all their milestones?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Пометить на удаление выбранную группу и входящие в нее контрольные точки?'; en = 'Mark for deletion the selected group and all its milestones?'");
	КонецЕсли;	
	
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'ОК'; en = 'ОК'"));
	Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'; en = 'Cancel'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалениеГруппПродолжение",
		ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеГруппПродолжение(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
	    Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Идет удаление групп и контрольных точек. Пожалуйста подождите...'; en = 'Deleting groups and milestones. Please wait ...'"));
	
	УдалениеГруппПродолжениеСервер();
	
	Состояние(НСтр("ru = 'Группы и контрольные точки удалены.'; en = 'Groups and milestones deleted.'"));
	
КонецПроцедуры

&НаСервере
Процедура УдалениеГруппПродолжениеСервер()
	
	НачатьТранзакцию();
	
	Попытка
		ВыделенныеСтроки = Элементы.ГруппыКТ.ВыделенныеСтроки;
		
		Для Каждого Эл Из ВыделенныеСтроки Цикл
			
			Группа = ГруппыКТ.НайтиПоИдентификатору(Эл).Группа.ПолучитьОбъект();
			Если Не Группа.Предопределенный Тогда
				Группа.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	КонтрольныеТочки.Ссылка
				|ИЗ
				|	Справочник.КонтрольныеТочки КАК КонтрольныеТочки
				|ГДЕ
				|	КонтрольныеТочки.ПометкаУдаления = Ложь
				|	И КонтрольныеТочки.ГруппаКТ = &ГруппаКТ";
			
			Запрос.УстановитьПараметр("ГруппаКТ", Группа.Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				КТ = Выборка.Ссылка.ПолучитьОбъект();
				КТ.УстановитьПометкуУдаления(Истина);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Изменение группы контрольной точки'; en = 'Change milestone group'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;	
	
	ЗаполнитьТаблицуГрупп();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПеретаскиваниеКонтрольныхТочек(ПараметрыПеретаскивания, СтрокаГруппыКТ)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.КонтрольныеТочки") Тогда
		
			МассивКТ = ПараметрыПеретаскивания.Значение; 
			НоваяГруппаКТ = СтрокаГруппыКТ.Группа;
			
			Если ИзменитьГруппуКТ(МассивКТ, СтрокаГруппыКТ.Группа) Тогда
				
				Если МассивКТ.Количество() = 1 Тогда
				
					ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контрольная точка ""%1"" перенесена в группу ""%2""'; en = '""%1"" milestone moved to ""%2"" group'"), МассивКТ[0], НоваяГруппаКТ);
					
					ПоказатьОповещениеПользователя(
						НСтр("ru = 'Контрольная точка перенесена.'; en = 'Milestone moved.'"),
						ПолучитьНавигационнуюСсылку(МассивКТ[0]),
						ПолноеОписание,
						БиблиотекаКартинок.Информация32);
				
				Иначе
				
					ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контрольные точки (%1 шт.) перенесены в группу ""%2""'; en = 'Milestones (%1 pcs.) moved to ""%2"" group'"), МассивКТ.Количество(), НоваяГруппаКТ);
					
					ПоказатьОповещениеПользователя(
						НСтр("ru = 'Контрольные точки перенесены.'; en = 'Milestones moved.'"),
						,
						ПолноеОписание,
						БиблиотекаКартинок.Информация32);
				
				КонецЕсли;
				
				ЗаполнитьТаблицуГрупп();
				
				НайденныеСтроки = ГруппыКТ.НайтиСтроки(Новый Структура("Группа", НоваяГруппаКТ));
				Элементы.ГруппыКТ.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
				
				Элементы.Список.Обновить();
					
			КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьНаСервере(Знач ОбъектКТ)
	
	// Выгружаем контрольные точки
	График = Неопределено;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда	
		График = КонтрольныеТочки.ПолучитьГрафикОбъектаКТ(ОбъектКТ);
		Если Не ЗначениеЗаполнено(График) Тогда
			График = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
		КонецЕсли;	
	КонецЕсли;	
	
	ДатаНачала = ПолучитьДатуНачалаОбъектаКТ(ОбъектКТ);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	//Корневой элемент
	ЗаписьXML.ЗаписатьНачалоЭлемента("Header");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыКонтрольныхТочек.Ссылка,
		|	ГруппыКонтрольныхТочек.Наименование,
		|	ГруппыКонтрольныхТочек.Комментарий,
		|	ГруппыКонтрольныхТочек.Ответственный
		|ИЗ
		|	Справочник.ГруппыКонтрольныхТочек КАК ГруппыКонтрольныхТочек
		|ГДЕ
		|	ГруппыКонтрольныхТочек.ОбъектКТ = &ОбъектКТ
		|	И ГруппыКонтрольныхТочек.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрольныеТочки.Наименование,
		|	КонтрольныеТочки.КодКТ,
		|	КонтрольныеТочки.Комментарий,
		|	КонтрольныеТочки.Описание,
		|	КонтрольныеТочки.Ответственный,
		|	КонтрольныеТочки.ПлановыйСрок,
		|	КонтрольныеТочки.ГруппаКТ,
		|	КонтрольныеТочки.Проверяющий,
		|	КонтрольныеТочки.Результат,
		|	КонтрольныеТочки.Создал,
		|	КонтрольныеТочки.УровеньКТ,
		|	КонтрольныеТочки.ЧисловойКод
		|ИЗ
		|	Справочник.КонтрольныеТочки КАК КонтрольныеТочки
		|ГДЕ
		|	КонтрольныеТочки.ОбъектКТ = &ОбъектКТ
		|	И КонтрольныеТочки.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ОбъектКТ", ОбъектКТ);
	
	НаборРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаГруппаКТ	= НаборРезультатов[0].Выбрать();
	ТаблицаКТ		= НаборРезультатов[1].Выгрузить();
	ТаблицаКТ.Индексы.Добавить("ГруппаКТ");
	
	Пока ВыборкаГруппаКТ.Следующий() Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ГруппаКТ");
		ЗаписьXML.ЗаписатьАтрибут("Наименование", ВыборкаГруппаКТ.Наименование);
		ЗаписьXML.ЗаписатьАтрибут("Комментарий", ВыборкаГруппаКТ.Комментарий);
		ЗаписьXML.ЗаписатьАтрибут("Ответственный", Строка(ВыборкаГруппаКТ.Ответственный.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
				
		Отбор = Новый Структура();
		Отбор.Вставить("ГруппаКТ", ВыборкаГруппаКТ.Ссылка);
		Строки = ТаблицаКТ.НайтиСтроки(Отбор);
		
		Для каждого Строка Из Строки Цикл
		
			ЗаписьXML.ЗаписатьНачалоЭлемента("КТ");
			ЗаписьXML.ЗаписатьАтрибут("Наименование", Строка.Наименование);
			ЗаписьXML.ЗаписатьАтрибут("КодКТ", Строка.КодКТ);
			ЗаписьXML.ЗаписатьАтрибут("Комментарий", Строка.Комментарий);
			ЗаписьXML.ЗаписатьАтрибут("Описание", Строка.Описание);
			ЗаписьXML.ЗаписатьАтрибут("Ответственный", Строка(Строка.Ответственный.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьАтрибут("ПлановыйСрок", Строка(Строка.ПлановыйСрок));
			
			Если ЗначениеЗаполнено(График) Тогда
				РазницаДат = ГрафикиРаботы.ПолучитьДлительностьПериодаСек(График, ДатаНачала, Строка.ПлановыйСрок);
			Иначе	
				РазницаДат = Строка.ПлановыйСрок - ДатаНачала;
			КонецЕсли;	
			ДлительностьДней = Цел(РазницаДат/(60*60*24));
			ДлительностьЧасов = Цел((РазницаДат - ДлительностьДней*24*60*60)/(60*60));
			ДлительностьМинут = Цел((РазницаДат - ДлительностьДней*24*60*60 - ДлительностьЧасов*60*60)/60);
			
			ЗаписьXML.ЗаписатьАтрибут("ДлительностьДней", Строка(ДлительностьДней));
			ЗаписьXML.ЗаписатьАтрибут("ДлительностьЧасов", Строка(ДлительностьЧасов));
			ЗаписьXML.ЗаписатьАтрибут("ДлительностьМинут", Строка(ДлительностьМинут));
			
			ЗаписьXML.ЗаписатьАтрибут("Проверяющий", Строка(Строка.Проверяющий.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьАтрибут("Результат", Строка.Результат);
			ЗаписьXML.ЗаписатьАтрибут("Создал", Строка(Строка.Создал.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьАтрибут("УровеньКТ", Строка(Строка.УровеньКТ.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьАтрибут("ЧисловойКод", Строка(Строка.ЧисловойКод));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
	
	КонецЦикла;
	
	//Корневой элемент
	ЗаписьXML.ЗаписатьКонецЭлемента(); //"Header"
	
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатуНачалаОбъектаКТ(ОбъектКТ)
	
	Если ТипЗнч(ОбъектКТ) = Тип("СправочникСсылка.Проекты") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектКТ, "ТекущийПланНачало");
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСписка(Список, ПараметрыОтбора)
	
	// уровень контрольной точки 
	УровеньКТ = ПараметрыОтбора.Получить("УровеньКТ");
	Если УровеньКТ <> Неопределено Тогда 
		Если ЗначениеЗаполнено(УровеньКТ) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"УровеньКТ",
				УровеньКТ,
				ВидСравненияКомпоновкиДанных.Равно);
		Иначе
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "УровеньКТ");

		КонецЕсли;
	КонецЕсли;	
	
	// Ответственный 
	Ответственный = ПараметрыОтбора.Получить("Ответственный");
	Если Ответственный <> Неопределено Тогда 
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Ответственный",
				Ответственный,
				ВидСравненияКомпоновкиДанных.Равно);
		Иначе
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Ответственный");

		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьШаблонПоВидуОбъектаКТ(Знач ОбъектКТ)

	Результат = Ложь;
	
	ВидОбъектаКТ = КонтрольныеТочки.ПолучитьВидОбъектаКТ(ОбъектКТ); 			
	Если ВидОбъектаКТ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныКонтрольныхТочек.Ссылка
	|ИЗ
	|	Справочник.ШаблоныКонтрольныхТочек КАК ШаблоныКонтрольныхТочек
	|ГДЕ
	|	ШаблоныКонтрольныхТочек.ПометкаУдаления = ЛОЖЬ
	|	И ШаблоныКонтрольныхТочек.ОбъектКТ = &ОбъектКТ";
	
	Запрос.УстановитьПараметр("ОбъектКТ", ВидОбъектаКТ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = Истина;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьГруппуКТ(Знач МассивКТ, Знач НоваяГруппаКТ)

	Результат = Ложь;
	
	Для Каждого КонтрольнаяТочка Из МассивКТ Цикл
		Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(КонтрольнаяТочка).Изменение Тогда 
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У вас нет права на изменение контрольной точки ""%1"".'; en = 'Not enough permissions to modify ""%1"" milestone.'"),
				Строка(КонтрольнаяТочка));
			Результат = Ложь;	
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	Если НоваяГруппаКТ = Справочники.ГруппыКонтрольныхТочек.Все Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого КонтрольнаяТочка Из МассивКТ Цикл
			ЗаблокироватьДанныеДляРедактирования(КонтрольнаяТочка);
			КонтрольнаяТочкаОбъект = КонтрольнаяТочка.ПолучитьОбъект();
			Если НоваяГруппаКТ = Справочники.ГруппыКонтрольныхТочек.НеВГруппе Тогда
				КонтрольнаяТочкаОбъект.ГруппаКТ = Справочники.ГруппыКонтрольныхТочек.ПустаяСсылка();
			Иначе
				КонтрольнаяТочкаОбъект.ГруппаКТ = НоваяГруппаКТ;
			КонецЕсли;
			КонтрольнаяТочкаОбъект.Записать();
		КонецЦикла;
		
		Результат = Истина;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Изменение группы контрольной точки'; en = 'Change milestone group'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОтменитьТранзакцию();
		Результат = Ложь;
		ВызватьИсключение;
		
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
