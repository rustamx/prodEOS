#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПолучитьОписаниеПравила(ПравилоСсылка) Экспорт
	
	ТипыУсловий = Новый Массив;
	ТипыУсловий.Добавить(Тип("ПеречислениеСсылка.ВидыУсловийОтбораВходящихПисем"));
	ТипыУсловий.Добавить(Тип("ПеречислениеСсылка.ВидыУсловийОтбораИсходящихПисем"));
	
	ТипыДействий = Новый Массив;
	ТипыДействий.Добавить(Тип("ПеречислениеСсылка.ВидыДействийПриОбработкеВходящихПисем"));
	ТипыДействий.Добавить(Тип("ПеречислениеСсылка.ВидыДействийПриОбработкеИсходящихПисем"));
	
	ТаблицаУсловия = Новый ТаблицаЗначений;
	ТаблицаУсловия.Колонки.Добавить(
		"ВидУсловия",
		Новый ОписаниеТипов(ТипыУсловий));
	ТаблицаУсловия.Колонки.Добавить(
		"ЗначенияУсловия",
		Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаУсловия.Колонки.Добавить(
		"ПредставлениеЗначенияУсловия",
		Новый ОписаниеТипов("Строка"));
	ТаблицаУсловия.Колонки.Добавить(
		"Используется",
		Новый ОписаниеТипов("Булево"));
		
	ТаблицаДействия = Новый ТаблицаЗначений;
	ТаблицаДействия.Колонки.Добавить(
		"ВидДействия",
		Новый ОписаниеТипов(ТипыДействий));
	ТаблицаДействия.Колонки.Добавить(
		"ЗначенияДействия",
		Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаДействия.Колонки.Добавить(
		"ПредставлениеЗначенияДействия",
		Новый ОписаниеТипов("Строка"));
	ТаблицаДействия.Колонки.Добавить(
		"Используется",
		Новый ОписаниеТипов("Булево"));	
		
	ТаблицаИсключения = Новый ТаблицаЗначений;
	ТаблицаИсключения.Колонки.Добавить(
		"ВидИсключения",
		Новый ОписаниеТипов(ТипыУсловий));
	ТаблицаИсключения.Колонки.Добавить(
		"ЗначенияИсключения",
		Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаИсключения.Колонки.Добавить(
		"ПредставлениеЗначенияИсключения",
		Новый ОписаниеТипов("Строка"));
	ТаблицаИсключения.Колонки.Добавить(
		"Используется",
		Новый ОписаниеТипов("Булево"));
		
	Если ПравилоСсылка.ДляВходящихПисем Тогда
		
		// Заполнение таблицы условий для отбора входящих писем
		ТаблицаУсловия.Очистить();
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийОтбораВходящихПисем Цикл
			НоваяСтрока = ТаблицаУсловия.Добавить();
			НоваяСтрока.Используется = Ложь;
			НоваяСтрока.ВидУсловия = ЗначениеПеречисления;
			НоваяСтрока.ПредставлениеЗначенияУсловия = "";
			НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений();
		КонецЦикла;
		
		// Заполнение таблицы действий
		ТаблицаДействия.Очистить();
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыДействийПриОбработкеВходящихПисем Цикл
			НоваяСтрока = ТаблицаДействия.Добавить();
			НоваяСтрока.Используется = Ложь;
			НоваяСтрока.ВидДействия = ЗначениеПеречисления;
			НоваяСтрока.ПредставлениеЗначенияДействия = "";
			НоваяСтрока.ЗначенияДействия = Новый СписокЗначений();
		КонецЦикла;
		
		// Заполнение таблицы исключений для отбора входящих писем
		ТаблицаИсключения.Очистить();
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийОтбораВходящихПисем Цикл
			НоваяСтрока = ТаблицаИсключения.Добавить();
			НоваяСтрока.Используется = Ложь;
			НоваяСтрока.ВидИсключения = ЗначениеПеречисления;
			НоваяСтрока.ПредставлениеЗначенияИсключения = "";
			НоваяСтрока.ЗначенияИсключения = Новый СписокЗначений();
		КонецЦикла;

	ИначеЕсли ПравилоСсылка.ДляИсходящихПисем Тогда
		
		// Заполнение таблицы условий для отбора входящих писем
		ТаблицаУсловия.Очистить();
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийОтбораИсходящихПисем Цикл
			НоваяСтрока = ТаблицаУсловия.Добавить();
			НоваяСтрока.Используется = Ложь;
			НоваяСтрока.ВидУсловия = ЗначениеПеречисления;
			НоваяСтрока.ПредставлениеЗначенияУсловия = "";
			НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений();
		КонецЦикла;
		
		// Заполнение таблицы действий
		ТаблицаДействия.Очистить();
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыДействийПриОбработкеИсходящихПисем Цикл
			НоваяСтрока = ТаблицаДействия.Добавить();
			НоваяСтрока.Используется = Ложь;
			НоваяСтрока.ВидДействия = ЗначениеПеречисления;
			НоваяСтрока.ПредставлениеЗначенияДействия = "";
			НоваяСтрока.ЗначенияДействия = Новый СписокЗначений();
		КонецЦикла;

		// Заполнение таблицы исключений для отбора входящих писем
		ТаблицаИсключения.Очистить();
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийОтбораИсходящихПисем Цикл
			НоваяСтрока = ТаблицаИсключения.Добавить();
			НоваяСтрока.Используется = Ложь;
			НоваяСтрока.ВидИсключения = ЗначениеПеречисления;
			НоваяСтрока.ПредставлениеЗначенияИсключения = "";
			НоваяСтрока.ЗначенияИсключения = Новый СписокЗначений();
		КонецЦикла;
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияУсловийПриОбработкеПисем.Правило,
		|	ЗначенияУсловийПриОбработкеПисем.ВидУсловия,
		|	ЗначенияУсловийПриОбработкеПисем.ПараметрУсловия,
		|	ЗначенияУсловийПриОбработкеПисем.Порядок КАК Порядок,
		|	ЗначенияУсловийПриОбработкеПисем.ЭтоЗначенияИсключения
		|ИЗ
		|	РегистрСведений.ЗначенияУсловийПриОбработкеПисем КАК ЗначенияУсловийПриОбработкеПисем
		|ГДЕ
		|	ЗначенияУсловийПриОбработкеПисем.Правило = &Правило
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	Запрос.УстановитьПараметр("Правило", ПравилоСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.ЭтоЗначенияИсключения Тогда
				// Загрузка условий
				Для каждого Строка Из ТаблицаУсловия Цикл
					Если Строка.ВидУсловия = Выборка.ВидУсловия Тогда
						Строка.Используется = Истина;
						Строка.ЗначенияУсловия.Добавить(Выборка.ПараметрУсловия);
					КонецЕсли;
				КонецЦикла;
			Иначе
				// Загрузка исключений
				Для каждого Строка Из ТаблицаИсключения Цикл
					Если Строка.ВидИсключения = Выборка.ВидУсловия Тогда
						Строка.Используется = Истина;
						Строка.ЗначенияИсключения.Добавить(Выборка.ПараметрУсловия);
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияДействийПриОбработкеПисем.Правило,
		|	ЗначенияДействийПриОбработкеПисем.ВидДействия,
		|	ЗначенияДействийПриОбработкеПисем.ПараметрДействия,
		|	ЗначенияДействийПриОбработкеПисем.ТекстАвтоответа
		|ИЗ
		|	РегистрСведений.ЗначенияДействийПриОбработкеПисем КАК ЗначенияДействийПриОбработкеПисем
		|ГДЕ
		|	ЗначенияДействийПриОбработкеПисем.Правило = &Правило";
	Запрос.УстановитьПараметр("Правило", ПравилоСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл		
			// Загрузка действий
			Для каждого Строка Из ТаблицаДействия Цикл
				Если Строка.ВидДействия = Выборка.ВидДействия Тогда
					Строка.Используется = Истина;
					Если Строка.ВидДействия = Перечисления.ВидыДействийПриОбработкеВходящихПисем.ОтветитьСУказаннымТекстом Тогда
						Строка.ЗначенияДействия.Добавить(Выборка.ТекстАвтоответа);
					Иначе
						Строка.ЗначенияДействия.Добавить(Выборка.ПараметрДействия);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Строка Из ТаблицаУсловия Цикл
		Если Строка.ЗначенияУсловия.Количество() > 0 Тогда
			Строка.ПредставлениеЗначенияУсловия = 
				ПолучитьПредставлениеСпискаЗначенийДляУсловия(Строка.ВидУсловия, Строка.ЗначенияУсловия);
		КонецЕсли;
	КонецЦикла;
	Для каждого Строка Из ТаблицаДействия Цикл
		Если Строка.ЗначенияДействия.Количество() > 0 Тогда
			Строка.ПредставлениеЗначенияДействия = 
				ПолучитьПредставлениеСпискаЗначенийДляУсловия(Строка.ВидДействия, Строка.ЗначенияДействия);
		КонецЕсли;
	КонецЦикла;
	Для каждого Строка Из ТаблицаИсключения Цикл
		Если Строка.ЗначенияИсключения.Количество() > 0 Тогда
			Строка.ПредставлениеЗначенияИсключения = 
				ПолучитьПредставлениеСпискаЗначенийДляУсловия(Строка.ВидИсключения, Строка.ЗначенияИсключения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СформироватьОписаниеПравила(ПравилоСсылка, ТаблицаУсловия, ТаблицаДействия, ТаблицаИсключения);  

КонецФункции

Функция СформироватьОписаниеПравила(ПравилоСсылка, ТаблицаУсловия, ТаблицаДействия, ТаблицаИсключения)
	
	Результат = "<!DOCTYPE HTML PUBLIC ""-//IETF//DTD HTML 2.0//EN"">
		|<html>
			|<head>
				|<meta http-equiv=""Content-Style-Type"" content=""text/css"">
				|<title></title>
				|<style type=""text/css"">
				|	.TextStyle 	{font-family:MS Sans Serif; font-size:11px;}
   				|</style>
			|</head>
		|<body topmargin=0 bottommargin=0 leftmargin=0 scroll=auto class=""TextStyle"">";
	Если Не (ПравилоСсылка.ДляВходящихПисем Или ПравилоСсылка.ДляИсходящихПисем) Тогда
		Результат = Результат + "</body></html>";
		Возврат Результат;
	КонецЕсли;
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1<div>%2 <font size=2><b>%3</b></font> %4 <font size=2><b>%5</b></font></div>",
		Результат, НСтр("ru = 'Правило для'; en = 'Rule for'"),
		?(ПравилоСсылка.ДляВходящихПисем, НСтр("ru = 'входящих'; en = 'incoming'"), НСтр("ru = 'исходящих'; en = 'outgoing'")),
		НСтр("ru = 'писем учетной записи'; en = 'emails of account'"),
		Строка(ПравилоСсылка.УчетнаяЗапись));
		
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1<p style=""margin-bottom: 1px;""><font size=2><b>%2</b></font></p><ul style=""margin-top: 1px;"">",
		Результат,
		НСтр("ru = 'Если'; en = 'If'"));
			
	ЕстьИспользуемыеУсловия = Ложь;
	БылаСкобкаВУсловиях = Ложь;
	Для Каждого СтрокаУсловие Из ТаблицаУсловия Цикл
		Если СтрокаУсловие.Используется Тогда
			
			МенеджерЗначения = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаУсловие.ВидУсловия);
						
			Если СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоВТечениеУказанногоПериода")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова") 
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТекстСодержитУказанныеСлова")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС") 
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаНачинаетсяС") 
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаСодержитУказанныеСлова") 
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТолькоДляПользователей")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") 
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.НаходитсяВПапке") 
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.Проект") 
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.Проект")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПолучательВходитВГруппы") Тогда
				
				Результат = Результат 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<li type=""disc""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><b>%1</b>%2 <font size=2><b>%3</b></font></li>",
						"",
						Строка(СтрокаУсловие.ВидУсловия),
						?(ЗначениеЗаполнено(СтрокаУсловие.ПредставлениеЗначенияУсловия),
							СтрЗаменить(Строка(СтрокаУсловие.ПредставлениеЗначенияУсловия), ";", НСтр("ru = ' ИЛИ '; en = ' OR '")),
							НСтр("ru = ' (значение не указано)'; en = ' (not specified)'")));
			Иначе
				
				Если СтрокаУсловие.ЗначенияУсловия[0].Значение Тогда
				
					Результат = Результат 
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"<li type=""disc""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><b>%1</b><font size=2><b>%2</b></font></li>",
							"",
							СтрЗаменить(Строка(СтрокаУсловие.ВидУсловия), ":", ""));
						
				Иначе
											
					Результат = Результат 
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<li type=""disc""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><b>%1</b><font size=2><b>%2</b></font></li>",
						"",
						СтрЗаменить(МенеджерЗначения.ОтрицаниеУсловия(СтрокаУсловие.ВидУсловия), ":", ""));
					
				КонецЕсли;
				
			КонецЕсли;
			ЕстьИспользуемыеУсловия = Истина;
		КонецЕсли;		
	КонецЦикла;	
	
	Если БылаСкобкаВУсловиях Тогда
		Результат = Результат + " #)#";
	КонецЕсли;
	
	СчетчикИсключений = 0;
	
	Для Каждого СтрокаИсключения Из ТаблицаИсключения Цикл
		Если СтрокаИсключения.Используется Тогда
			ВыделитьЛогическуюСвязь = Истина;
			СчетчикИсключений = СчетчикИсключений + 1;						
			МенеджерЗначения = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаИсключения.ВидИсключения);
			
			Если ЕстьИспользуемыеУсловия 
				И СчетчикИсключений = 1 Тогда
				СтрокаСвязи = "";
			Иначе
				СтрокаСвязи = "<b>" + Строка(ПравилоСсылка.СвязьИсключений) + " </b>";
			КонецЕсли;
			
			Если СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоВТечениеУказанногоПериода")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова") 
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС") 
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаНачинаетсяС") 
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТекстСодержитУказанныеСлова")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаСодержитУказанныеСлова") 
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТолькоДляПользователей")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПолучательВходитВГруппы")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.НаходитсяВПапке")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.Проект")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.Проект") Тогда
				
				Результат = Результат 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<li type=""circle""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span>%1%2 <font size=2><b>%3</b></font></li>",
						?(ЕстьИспользуемыеУсловия, "", ""),
						МенеджерЗначения.ОтрицаниеУсловия(СтрокаИсключения.ВидИсключения),
						?(ЗначениеЗаполнено(СтрокаИсключения.ПредставлениеЗначенияИсключения),
							СтрЗаменить(Строка(СтрокаИсключения.ПредставлениеЗначенияИсключения), ";", НСтр("ru = ' И '; en = ' AND '")),
							НСтр("ru = ' (значение не указано)'; en = ' (not specified)'")));
			Иначе
				
				Если СтрокаИсключения.ЗначенияИсключения[0].Значение Тогда
				
					Результат = Результат 
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<li type=""circle""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><b>%1</b><font size=2><b>%2</b></font></li>",
						"",
						СтрЗаменить(МенеджерЗначения.ОтрицаниеУсловия(СтрокаИсключения.ВидИсключения), ":", ""));
						
				Иначе
											
					Результат = Результат 
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<li type=""circle""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><b>%1</b><font size=2><b>%2</b></font></li>",
						"",
						СтрЗаменить(Строка(СтрокаИсключения.ВидИсключения), ":", ""));
					
				КонецЕсли;
				
			КонецЕсли;
			ЕстьИспользуемыеУсловия = Истина;
		КонецЕсли;		
	КонецЦикла;
		
	Если Не ЕстьИспользуемыеУсловия Тогда
		Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><font size=2><b>%1</b></font></div>",
			НСтр("ru = 'Правило применяется для всех писем'; en = 'The rule applies for all emails'"));
	КонецЕсли;
	
	Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"</ul><p style=""margin-bottom: 1px;""><font size=2><b>%1</b></font></p><ul style=""margin-top: 1px;"">",
		НСтр("ru = 'Тогда'; en = 'Then'"));
	
	ЕстьИспользуемыеДействия = Ложь;
	Для Каждого СтрокаДействие Из ТаблицаДействия Цикл
		Если СтрокаДействие.Используется Тогда
			ЕстьИспользуемыеДействия = Истина;
			МенеджерЗначения = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаДействие.ВидДействия);

			Если СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ПереместитьВУказаннуюПапку")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйФлаг")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйПроект")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ОтветитьСУказаннымТекстом")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПереместитьВУказаннуюПапку")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПоместитьИсходноеПисьмоВУказаннуюПапку")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйФлаг") 
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйПроект")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПрименитьКИсходномуПисьмуПравила") Тогда
				
				СтрокаЗначение = СтрокаДействие.ПредставлениеЗначенияДействия;
				Если СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ОтветитьСУказаннымТекстом") Тогда
					Если СтрДлина(СтрокаДействие.ПредставлениеЗначенияДействия) > 15 Тогда
						СтрокаЗначение = Сред(СтрокаДействие.ПредставлениеЗначенияДействия, 0, 15) + "...";
					конецЕсли;
					СтрокаЗначение = """" + СтрокаЗначение + """";
				КонецЕсли;
				
				Результат = Результат 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<li type=""square""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span>%1 <font size=2><b>%2</b></font></li>",
						Строка(СтрокаДействие.ВидДействия),
						?(ЗначениеЗаполнено(СтрокаДействие.ПредставлениеЗначенияДействия),
							СтрокаЗначение,
							НСтр("ru = ' (значение не указано)'; en = ' (not specified)'")));
			Иначе
				
				Если СтрокаДействие.ЗначенияДействия[0].Значение Тогда
				
					Результат = Результат 
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<li type=""square""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><font size=2><b>%1</b></font></li>",
						СтрЗаменить(Строка(СтрокаДействие.ВидДействия), ":", ""));
						
				Иначе
												
					Результат = Результат 
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<li type=""square""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><font size=2><b>%1</b></font></li>",
						СтрЗаменить(МенеджерЗначения.ОтрицаниеДействия(СтрокаДействие.ВидДействия), ":", ""));
						
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьИспользуемыеДействия Тогда
		Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><font size=2><b>%1</b></font></div>",
			НСтр("ru = 'Ничего не предпринимать'; en = 'Do nothing'"));
	КонецЕсли;
	
	Результат = Результат + "<ul></body></html>";
	
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьПредставлениеСпискаЗначенийДляУсловия(ВидУсловия, СписокЗначений)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВидУсловия);
	Возврат Менеджер.ВычислитьТекстовоеОписаниеСпискаЗначений(ВидУсловия, СписокЗначений);
	
КонецФункции

Функция ПолучитьПредставлениеСпискаЗначенийДляДействия(ВидДействия, СписокЗначений)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВидДействия);
	Возврат Менеджер.ВычислитьТекстовоеОписаниеСпискаЗначений(ВидДействия, СписокЗначений);
	
КонецФункции

#КонецЕсли
