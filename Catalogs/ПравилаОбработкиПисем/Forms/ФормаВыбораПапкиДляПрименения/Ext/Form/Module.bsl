
//////////////////////////////////////////////////////////////////////////////// 
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СоздатьПапкуКлиент()
	
	ЗначенияЗаполнения = Новый Структура;
	Если Элементы.Папки.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
		Если ЗначениеЗаполнено(Элементы.Папки.ТекущиеДанные.Ссылка)
			И ВстроеннаяПочтаКлиентСервер.ЭтоПапкаПисем(ТекущиеДанные.Ссылка) Тогда
			ЗначенияЗаполнения.Вставить("Родитель", ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.ПапкиПисем.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПапку()
	
	Если Элементы.Папки.ТекущиеДанные <> Неопределено Тогда
		ВыбраннаяПапкаНовая = Элементы.Папки.ТекущиеДанные.Ссылка;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана папка.'; en = 'Folder is not selected.'"));
		Возврат;	
	КонецЕсли;

	Если ВыбраннаяПапкаНовая <> Неопределено Тогда
		
		Если ВыбраннаяПапка <> ВыбраннаяПапкаНовая ИЛИ ИзмененоСостояниеДерева Тогда
			СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
			ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(ЭтаФорма.ИмяФормы, "СостояниеДерева", СостояниеДерева);			
		КонецЕсли;
		
		Если Не ЭтоФайловаяБаза Тогда
			
			ТолькоПросмотр = Истина;
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(Правило);
			МассивПараметров.Добавить(ВыбраннаяПапкаНовая);
			МассивПараметров.Добавить(ВключатьПодпапки);
			МассивПараметров.Добавить(ВариантПрименения);
			МассивПараметров.Добавить(Истина);
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ИмяФункции", "РаботаСПравиламиОбработкиПисем.ПрименитьПравилоКПапке");
			ПараметрыФормы.Вставить("ПараметрыФункции", МассивПараметров);
			ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Обработка писем'; en = 'Processing emails'"));
			
			ОткрытьФорму("ОбщаяФорма.ВыполнениеДлительнойОперации", ПараметрыФормы);
			
		Иначе
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется применение правила к папке ""%1"". Пожалуйста, подождите...'; en = 'Applying rule to the folder ""%1"". Please wait ...'"),
				ВыбраннаяПапкаНовая);
			Состояние(Текст);
			
			РаботаСПравиламиОбработкиПисем.ПрименитьПравилоКПапке(
				Правило, 
				ВыбраннаяПапкаНовая, 
				ВключатьПодпапки,
				ВариантПрименения,
				Ложь);
			
			Состояние();
			ПоказатьПредупреждение(,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Применение правила ""%1"" завершено.'; en = 'Application of rule ""%1"" is completed.'"), 
					Строка(Правило)));
			Оповестить("ПримененоПравило");		
			Закрыть();
		КонецЕсли;
				
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана папка.'; en = 'Folder is not selected.'"));
		Возврат;		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ - РАБОТА С ДЕРЕВОМ ПАПОК

&НаКлиенте
Процедура ОбойтиДерево(ДеревоЭлементы, Контекст, ИмяПроцедуры)
	
	Для каждого Элемент Из ДеревоЭлементы Цикл
		// Рекурсивный вызов
		ОбойтиДерево(Элемент.ПолучитьЭлементы(), Контекст, ИмяПроцедуры);
		Результат = Вычислить(ИмяПроцедуры + "(Элемент, Контекст)");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗапомнитьСостояниеДереваПапок()
	
	Состояние = Новый Структура;
	Состояние.Вставить("ТекСсылка", Неопределено);
	Если Элементы.Папки.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			Состояние.ТекСсылка = ТекущиеДанные.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", Папки);
	Контекст.Вставить("ФормаДерево", Элементы.Папки);
	Контекст.Вставить("Состояние", Новый Соответствие);
	ОбойтиДерево(Папки.ПолучитьЭлементы(), Контекст, "ЗапомнитьСостояниеРазвернут");
	Состояние.Вставить("Развернут", Контекст.Состояние);
	
	Возврат Состояние;
	
КонецФункции

&НаКлиенте
Функция ЗапомнитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Контекст.Состояние.Вставить(ТекДанные.Ссылка, Контекст.ФормаДерево.Развернут(ИдентификаторСтроки));
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьСостояниеДереваПапок(Состояние)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", Папки);
	Контекст.Вставить("ФормаДерево", Элементы.Папки);
	Контекст.Вставить("Состояние", Состояние.Развернут);
	Контекст.Вставить("ТекСсылка", Состояние.ТекСсылка);
	ОбойтиДерево(Папки.ПолучитьЭлементы(), Контекст, "УстановитьСостояниеРазвернут");
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Контекст.Состояние.Получить(ТекДанные.Ссылка) = Истина Тогда
		Контекст.ФормаДерево.Развернуть(ИдентификаторСтроки);
	Иначе
		Контекст.ФормаДерево.Свернуть(ИдентификаторСтроки);
	КонецЕсли;
	Если ТекДанные.Ссылка = Контекст.ТекСсылка Тогда
		Контекст.ФормаДерево.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоПапок()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиПисем.Ссылка КАК Папка,
		|	ПапкиПисем.ПометкаУдаления КАК ПапкаПометкаУдаления,
		|	ПапкиПисем.Представление КАК ПредставлениеПапки,
		|	ПапкиПисем.ВидПапки КАК ВидПапки,
		|	ВЫБОР
		|		КОГДА ПапкиПисем.ПометкаУдаления
		|			ТОГДА 1
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Черновики)
		|			ТОГДА 2
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Корзина)
		|			ТОГДА 4
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерКартинки,
		|	ВЫБОР
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Входящие)
		|			ТОГДА 1
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Исходящие)
		|			ТОГДА 2
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Отправленные)
		|			ТОГДА 3
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Корзина)
		|			ТОГДА 5
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Черновики)
		|			ТОГДА 6
		|		ИНАЧЕ 7
		|	КОНЕЦ КАК Порядок,
		|	ПапкиПисем.ВариантОтображенияКоличестваПисем,");
		
	Если РежимМоиПапки Тогда
		Запрос.Текст = Запрос.Текст +
			"
			|	ЛОЖЬ КАК ПапкаБыстрогоДоступа";
	Иначе
		Запрос.Текст = Запрос.Текст +
			"
			|ВЫБОР
			|	КОГДА ПапкиПисемБыстрогоДоступа.Папка ЕСТЬ NULL 
			|		ТОГДА ЛОЖЬ
			|	ИНАЧЕ ИСТИНА
			|КОНЕЦ КАК ПапкаБыстрогоДоступа"
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
		"
		|ИЗ
		|	Справочник.ПапкиПисем КАК ПапкиПисем
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПапкиПисемБыстрогоДоступа КАК ПапкиПисемБыстрогоДоступа
		|	ПО (ПапкиПисемБыстрогоДоступа.Папка = ПапкиПисем.Ссылка И ПапкиПисемБыстрогоДоступа.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	((НЕ ПапкиПисем.ПометкаУдаления)
		|			ИЛИ &ОтображатьУдаленные)";
		
	Если РежимМоиПапки Тогда
		Запрос.Текст = Запрос.Текст +
			"
			|	И ПапкиПисем.Ссылка В ИЕРАРХИИ
			|		(ВЫБРАТЬ
			|			ПапкиПисемБыстрогоДоступа.Папка
			|		ИЗ
			|			РегистрСведений.ПапкиПисемБыстрогоДоступа КАК ПапкиПисемБыстрогоДоступа
			|		ГДЕ
			|			ПапкиПисемБыстрогоДоступа.Пользователь = &ТекущийПользователь)";
	КонецЕсли;
		
	Запрос.Текст = Запрос.Текст +
		"
		|УПОРЯДОЧИТЬ ПО
		|	Папка ИЕРАРХИЯ";
		
	Запрос.УстановитьПараметр("ОтображатьУдаленные", ОтображатьУдаленные);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТекУчетнаяЗапись = Неопределено;
	СтрокаУчетнаяЗапись = Неопределено;
	
	ДеревоПапок = РеквизитФормыВЗначение("Папки");
	ДеревоПапок.Строки.Очистить();
	ДобавитьПапкиВДерево(ДеревоПапок.Строки, Дерево.Строки);
	СортироватьИерархически(ДеревоПапок.Строки, "Порядок, Представление");
	ЗначениеВДанныеФормы(ДеревоПапок, Папки);
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьПапкиВДерево(ДеревоСтроки, ИсточникСтроки)
	
	Для каждого ПапкаИнфо Из ИсточникСтроки Цикл
		Представление = ПапкаИнфо.ПредставлениеПапки;
		СтрокаПапка = ДеревоСтроки.Добавить();
		СтрокаПапка.Ссылка = ПапкаИнфо.Папка;
		СтрокаПапка.НомерКартинки = ПапкаИнфо.НомерКартинки;
		СтрокаПапка.Наименование = Представление;
		СтрокаПапка.Представление = Представление;
		СтрокаПапка.ВидПапки = ПапкаИнфо.ВидПапки;
		СтрокаПапка.Порядок = ПапкаИнфо.Порядок;
		СтрокаПапка.ВариантОтображенияКоличестваПисем = ПапкаИнфо.ВариантОтображенияКоличестваПисем;
		ДобавитьПапкиВДерево(СтрокаПапка.Строки, ПапкаИнфо.Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьИерархически(СтрокиДерева, Знач Колонки)
	
	СтрокиДерева.Сортировать(Колонки);
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			СортироватьИерархически(СтрокаДерева.Строки, Колонки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкиПросмотраПапок()
	
	Если РежимМоиПапки Тогда
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Мои папки'; en = 'My folders'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Истина;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Ложь;
	Иначе	
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Все папки'; en = 'All folders'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Ложь;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимМоиПапки(НовыйРежимМоиПапки)
	
	Если РежимМоиПапки = НовыйРежимМоиПапки Тогда
		Возврат;
	КонецЕсли;
	
	Если НовыйРежимМоиПапки Тогда
		РежимМоиПапки = Истина;
		ЗаполнитьДеревоПапок();
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Мои папки'; en = 'My folders'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Истина;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Ложь;
	Иначе
		РежимМоиПапки = Ложь;
		ЗаполнитьДеревоПапок();
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Все папки'; en = 'All folders'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Ложь;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОтображатьУдаленные =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтображатьУдаленныеПисьмаИПапки");
	
	РежимМоиПапки =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("РежимМоиПапки");
	
	Если Параметры.Свойство("КоличествоПисем") Тогда
		ПредставлениеКоличествоПисем = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = ' (%1 шт)'; en = ' (%1 pcs)'"),
			Параметры.КоличествоПисем);
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ПредставлениеКоличествоПисем;
	КонецЕсли;
		
	Если Параметры.Свойство("ЗаголовокКнопкиГотово") Тогда
		Элементы.Перенести.Заголовок = Параметры.ЗаголовокКнопкиГотово;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗаголовокФормы") Тогда
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;
		
	УстановитьПометкиПросмотраПапок();
	
	ЗаполнитьДеревоПапок();
	
	СостояниеДереваПапок = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭтаФорма.ИмяФормы, 
		"СостояниеДерева", 
		Неопределено);
	Если СостояниеДереваПапок = Неопределено И Параметры.Свойство("СостояниеДереваПапок") Тогда
		СостояниеДереваПапок = Параметры.СостояниеДереваПапок;
	КонецЕсли;
	
	// Предназначена для заполнения дерева переноса при первом открытии формы пользователем
	ДеревоПереносаИнициализировано =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ПереносПисем",
			"ДеревоПереносаИнициализировано",
			Ложь);
			
	Если Не ДеревоПереносаИнициализировано Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			ЭтаФорма.ИмяФормы, 
			"СостояниеДерева", 
			СостояниеДереваПапок);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ПереносПисем", 
			"ДеревоПереносаИнициализировано", 
			Истина);	
	КонецЕсли;
		
	Если СостояниеДереваПапок <> Неопределено Тогда
		ВыбраннаяПапка = СостояниеДереваПапок.ТекСсылка;	
	КонецЕсли;
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
		
	ВариантПрименения = ПредопределенноеЗначение(
		"Перечисление.ВариантыПримененияПравилаПисем.КоВсемПисьмам");
		
	Правило = Параметры.Правило;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СостояниеДереваПапок <> Неопределено Тогда
		ВосстановитьСостояниеДереваПапок(СостояниеДереваПапок);
	КонецЕсли;
	
	ИзмененоСостояниеДерева = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПапкаПисемСохранена" Тогда
		СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
		ЗаполнитьДеревоПапок();
		СостояниеДерева.ТекСсылка = Параметр;
		ВосстановитьСостояниеДереваПапок(СостояниеДерева);
	ИначеЕсли ИмяСобытия = "ФоновоеВыполнениеЗавершено_РаботаСПравиламиОбработкиПисем.ПрименитьПравилоКПапке" Тогда	
		Оповестить("ПримененоПравило");
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ПапкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СоздатьПапкуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПапкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимМоиПапки(Команда)
	
	УстановитьРежимМоиПапки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВсеПапки(Команда)
	
	УстановитьРежимМоиПапки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
	
	ВыбратьПапку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбратьПапку();

КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПередРазворачиванием(Элемент, Строка, Отказ)
	
	ИзмененоСостояниеДерева = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПередСворачиванием(Элемент, Строка, Отказ)
	
	ИзмененоСостояниеДерева = Истина;
	
КонецПроцедуры

