//////////////////////////////////////////////////
// ОБЩАЯ РАБОТА С ФОРМОЙ 

&НаКлиенте
Процедура Далее(Команда)
	
	Элементы.ТаблицаУсловия.ЗакончитьРедактированиеСтроки(Ложь);
	Элементы.ТаблицаДействия.ЗакончитьРедактированиеСтроки(Ложь);
	Элементы.ТаблицаИсключения.ЗакончитьРедактированиеСтроки(Ложь);
	
	ПереключитьШаг(Шаг, 1, КоличествоШагов, Элементы, ТекущийЭлемент);
	
	Если Элементы.СтраницыЭтапыЗаполнения.ТекущаяСтраница = Элементы.ЭтапЗавершение Тогда
		Элементы.Далее.Доступность = Ложь;
		Описание = СформироватьОписаниеПравила();
	Иначе
		Элементы.Далее.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Для Каждого Строка Из ТаблицаДействия Цикл
			Если Строка.Используется Тогда
				Объект.Наименование = Строка.ПредставлениеЗначенияДействия;
				прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Элементы.ТаблицаУсловия.ЗакончитьРедактированиеСтроки(Ложь);
	Элементы.ТаблицаДействия.ЗакончитьРедактированиеСтроки(Ложь);
	Элементы.ТаблицаИсключения.ЗакончитьРедактированиеСтроки(Ложь);
	
	ПереключитьШаг(Шаг, -1, КоличествоШагов, Элементы, ТекущийЭлемент);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьШаг(Шаг, Изменение, ШаговВсего, Элементы, ТекущийЭлемент)
	
	Шаг = Шаг + Изменение;
	Элементы.СтраницыЭтапыЗаполнения.ТекущаяСтраница = 
	Элементы.СтраницыЭтапыЗаполнения.ПодчиненныеЭлементы[Шаг];
	Элементы.Назад.Доступность = Истина;
	Элементы.Далее.Доступность = Истина;
	Если Шаг = 0 Тогда
		Элементы.Назад.Доступность = Ложь;
	КонецЕсли;
	
	Если Элементы.СтраницыЭтапыЗаполнения.ТекущаяСтраница = Элементы.ЭтапУсловия Тогда
		ТекущийЭлемент = Элементы.ТаблицаУсловия;
	ИначеЕсли Элементы.СтраницыЭтапыЗаполнения.ТекущаяСтраница = Элементы.ЭтапДействия Тогда
		ТекущийЭлемент = Элементы.ТаблицаДействия;
	ИначеЕсли Элементы.СтраницыЭтапыЗаполнения.ТекущаяСтраница = Элементы.ЭтапЗавершение Тогда
		ТекущийЭлемент = Элементы.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	БазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КоличествоШагов = 4;
	Шаг = 0;
	Элементы.ДекорацияЗаголовокШаг1.Заголовок = НСтр("ru = 'Шаг 1 из 4. Условия отбора писем'; en = 'Step 1 of 4. Email selection conditions'");
	Элементы.ДекорацияЗаголовокШаг2.Заголовок = НСтр("ru = 'Шаг 2 из 4. Действия с письмами'; en = 'Step 2 of 4. Actions with emails'");
	Элементы.ДекорацияЗаголовокШаг3.Заголовок = НСтр("ru = 'Шаг 3 из 4. Исключения при отборе писем'; en = 'Step 3 of 4. Exceptions when selecting emails'");
	Элементы.ДекорацияЗаголовокШаг4.Заголовок = НСтр("ru = 'Шаг 4 из 4. Завершение настройки'; en = 'Step 4 of 4. Completing the configuration'");
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Используется = Истина;
		Если Параметры.Свойство("УчетнаяЗапись") Тогда
			Объект.УчетнаяЗапись = Параметры.УчетнаяЗапись;
		КонецЕсли;
		Объект.ДляВходящихПисем = Истина;
		Объект.ДляИсходящихПисем = Ложь;
		
		Если Параметры.Свойство("ДляВходящихПисем") Тогда
			Объект.ДляВходящихПисем = Параметры.ДляВходящихПисем;
		КонецЕсли;
		Если Параметры.Свойство("ДляИсходящихПисем") Тогда
			Объект.ДляИсходящихПисем = Параметры.ДляИсходящихПисем;
		КонецЕсли;
		Если Параметры.Свойство("СвязьУсловий") Тогда
			Объект.СвязьУсловий = Параметры.СвязьУсловий;
		КонецЕсли;
		Если Параметры.Свойство("СвязьИсключений") Тогда
			Объект.СвязьИсключений = Параметры.СвязьИсключений;
		КонецЕсли;
		
		Если Параметры.Свойство("ПравилоОснование") Тогда
			ЗаполнитьЗначенияСвойств(
				Объект, 
				Параметры.ПравилоОснование,
				,
				"Ссылка, Порядок, Код");
		КонецЕсли;
	КонецЕсли;
	ЗагрузитьПравило(Параметры);
	ПереключитьШаг(Шаг, 0, КоличествоШагов, Элементы, ТекущийЭлемент);
	
	ОтображатьУдаленныеПисьмаИПапки =
	ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтображатьУдаленныеПисьмаИПапки");
	
	НастройкаРежимМоиПапки =
	ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("РежимМоиПапки");
	
	Если Не ЗначениеЗаполнено(Объект.СвязьУсловий) Тогда
		Объект.СвязьУсловий = Перечисления.ТипыЛогическойСвязи.И;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СвязьИсключений) Тогда
		Объект.СвязьИсключений = Перечисления.ТипыЛогическойСвязи.И;
	КонецЕсли;
	
	Если Объект.ДляВходящихПисем Тогда
		Заголовок = НСтр("ru = 'Правило обработки входящих писем'; en = 'Rule for processing incoming emails'");
	КонецЕсли;
	
	Если Объект.ДляИсходящихПисем Тогда
		Заголовок = НСтр("ru = 'Правило обработки исходящих писем'; en = 'Rule for processing outgoing emails'");
	КонецЕсли;
	
	// Заполнение на основании отсутствия
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.Основание)
		И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.Отсутствие") Тогда
		НастроитьВыборУчетныхЗаписей();
		Основание = Параметры.Основание;
	Иначе
		Элементы.УчетнаяЗапись.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	Если Записать() Тогда
		Если Не ЗначениеЗаполнено(ПапкаПрименения) Тогда
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПравило(Параметры = Неопределено)
	
	Если Объект.ДляВходящихПисем Тогда
		
		// Заполнение таблицы условий для отбора входящих писем
		ТаблицаУсловия.Очистить();
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийОтбораВходящихПисем Цикл
			НоваяСтрока = ТаблицаУсловия.Добавить();
			НоваяСтрока.Используется = Ложь;
			НоваяСтрока.ВидУсловия = ЗначениеПеречисления;
			НоваяСтрока.ПредставлениеЗначенияУсловия = "";
			НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений();
		КонецЦикла;
		
		// Заполнение таблицы действий
		ТаблицаДействия.Очистить();
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыДействийПриОбработкеВходящихПисем Цикл
			
			НоваяСтрока = ТаблицаДействия.Добавить();
			НоваяСтрока.Используется = Ложь;
			НоваяСтрока.ВидДействия = ЗначениеПеречисления;
			НоваяСтрока.ПредставлениеЗначенияДействия = "";
			НоваяСтрока.ЗначенияДействия = Новый СписокЗначений();
		КонецЦикла;
		
		// Заполнение таблицы исключений для отбора входящих писем
		ТаблицаИсключения.Очистить();
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийОтбораВходящихПисем Цикл
			НоваяСтрока = ТаблицаИсключения.Добавить();
			НоваяСтрока.Используется = Ложь;
			НоваяСтрока.ВидИсключения = ЗначениеПеречисления;
			НоваяСтрока.ПредставлениеЗначенияИсключения = "";
			НоваяСтрока.ЗначенияИсключения = Новый СписокЗначений();
		КонецЦикла;
		
		
	ИначеЕсли Объект.ДляИсходящихПисем Тогда
		
		// Заполнение таблицы условий для отбора входящих писем
		ТаблицаУсловия.Очистить();
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийОтбораИсходящихПисем Цикл
			НоваяСтрока = ТаблицаУсловия.Добавить();
			НоваяСтрока.Используется = Ложь;
			НоваяСтрока.ВидУсловия = ЗначениеПеречисления;
			НоваяСтрока.ПредставлениеЗначенияУсловия = "";
			НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений();
		КонецЦикла;
		
		// Заполнение таблицы действий
		ТаблицаДействия.Очистить();
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыДействийПриОбработкеИсходящихПисем Цикл
			НоваяСтрока = ТаблицаДействия.Добавить();
			НоваяСтрока.Используется = Ложь;
			НоваяСтрока.ВидДействия = ЗначениеПеречисления;
			НоваяСтрока.ПредставлениеЗначенияДействия = "";
			НоваяСтрока.ЗначенияДействия = Новый СписокЗначений();
		КонецЦикла;
		
		// Заполнение таблицы исключений для отбора входящих писем
		ТаблицаИсключения.Очистить();
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийОтбораИсходящихПисем Цикл
			НоваяСтрока = ТаблицаИсключения.Добавить();
			НоваяСтрока.Используется = Ложь;
			НоваяСтрока.ВидИсключения = ЗначениеПеречисления;
			НоваяСтрока.ПредставлениеЗначенияИсключения = "";
			НоваяСтрока.ЗначенияИсключения = Новый СписокЗначений();
		КонецЦикла;
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияУсловийПриОбработкеПисем.Правило,
	|	ЗначенияУсловийПриОбработкеПисем.ВидУсловия,
	|	ЗначенияУсловийПриОбработкеПисем.ПараметрУсловия,
	|	ЗначенияУсловийПриОбработкеПисем.Порядок КАК Порядок,
	|	ЗначенияУсловийПриОбработкеПисем.ЭтоЗначенияИсключения
	|ИЗ
	|	РегистрСведений.ЗначенияУсловийПриОбработкеПисем КАК ЗначенияУсловийПриОбработкеПисем
	|ГДЕ
	|	ЗначенияУсловийПриОбработкеПисем.Правило = &Правило
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Если Объект.Ссылка.Пустая() И Параметры.Свойство("ПравилоОснование") Тогда
		Запрос.УстановитьПараметр("Правило", Параметры.ПравилоОснование);
	Иначе
		Запрос.УстановитьПараметр("Правило", Объект.Ссылка);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Загрузка условий
			Если Не Выборка.ЭтоЗначенияИсключения Тогда
				Для каждого Строка Из ТаблицаУсловия Цикл
					Если Строка.ВидУсловия = Выборка.ВидУсловия Тогда
						Строка.Используется = Истина;
						Строка.ЗначенияУсловия.Добавить(Выборка.ПараметрУсловия);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для каждого Строка Из ТаблицаИсключения Цикл
					Если Строка.ВидИсключения = Выборка.ВидУсловия Тогда
						Строка.Используется = Истина;
						Строка.ЗначенияИсключения.Добавить(Выборка.ПараметрУсловия);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияДействийПриОбработкеПисем.Правило,
	|	ЗначенияДействийПриОбработкеПисем.ВидДействия,
	|	ЗначенияДействийПриОбработкеПисем.ПараметрДействия,
	|	ЗначенияДействийПриОбработкеПисем.ТекстАвтоответа
	|ИЗ
	|	РегистрСведений.ЗначенияДействийПриОбработкеПисем КАК ЗначенияДействийПриОбработкеПисем
	|ГДЕ
	|	ЗначенияДействийПриОбработкеПисем.Правило = &Правило";
	
	Если Объект.Ссылка.Пустая() И Параметры.Свойство("ПравилоОснование") Тогда
		Запрос.УстановитьПараметр("Правило", Параметры.ПравилоОснование);
	Иначе
		Запрос.УстановитьПараметр("Правило", Объект.Ссылка);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл			
			// Загрузка действий
			Для каждого Строка Из ТаблицаДействия Цикл
				Если Строка.ВидДействия = Выборка.ВидДействия Тогда
					Строка.Используется = Истина;
					Если Строка.ВидДействия = Перечисления.ВидыДействийПриОбработкеВходящихПисем.ОтветитьСУказаннымТекстом Тогда
						Строка.ЗначенияДействия.Добавить(Выборка.ТекстАвтоответа);
					Иначе
						Строка.ЗначенияДействия.Добавить(Выборка.ПараметрДействия);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Если Параметры <> Неопределено И ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
				
		Если Параметры.Свойство("Условия") Тогда
			Для Каждого Элемент Из Параметры.Условия Цикл
				Найдена = Ложь;
				Для каждого Строка Из ТаблицаУсловия Цикл
					Если Строка.ВидУсловия = Элемент.Значение.Вид Тогда
						Найдена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не Найдена Тогда
					Строка = ТаблицаУсловия.Добавить();
					Строка.ВидУсловия = Элемент.Значение.Вид;
				КонецЕсли;
				Строка.ЗначенияУсловия.Добавить(Элемент.Значение.Значение);
				Строка.Используется = Ложь;
				Для Каждого ЭлементЗначение Из Строка.ЗначенияУсловия Цикл
					Если ЗначениеЗаполнено(ЭлементЗначение.Значение) Тогда
						Строка.Используется = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если Параметры.Свойство("Действия") Тогда
			Для Каждого Элемент Из Параметры.Действия Цикл
				Найдена = Ложь;
				Для каждого Строка Из ТаблицаДействия Цикл
					Если Строка.ВидДействия = Элемент.Значение.Вид Тогда
						Найдена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не Найдена Тогда
					Строка = ТаблицаДействия.Добавить();
					Строка.ВидДействия = Элемент.Значение.Вид;
				КонецЕсли;
				Строка.ЗначенияДействия.Добавить(Элемент.Значение.Значение);
				Строка.Используется = Ложь;
				Для Каждого ЭлементЗначение Из Строка.ЗначенияДействия Цикл
					Если ЗначениеЗаполнено(ЭлементЗначение.Значение) Тогда
						Строка.Используется = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение на основании отсутствия
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.Основание)
		И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.Отсутствие") Тогда
		
		Отсутствие = Параметры.Основание;
		ТекстовоеПредставлениеОтсутствия = Отсутствия.ПолучитьПредставлениеОтсутствияДляТекстаПисьма(Отсутствие);
		
		// Дата с
		ВидУсловия = Перечисления.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода;
		Для Каждого Строка Из ТаблицаУсловия Цикл
			Если Строка.ВидУсловия = ВидУсловия Тогда
				Строка.Используется = Истина;
				Строка.ЗначенияУсловия.Добавить(Отсутствие.ДатаНачала);
			КонецЕсли;
		КонецЦикла;
		
		// Дата по
		ВидУсловия = Перечисления.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода;
		Для Каждого Строка Из ТаблицаУсловия Цикл
			Если Строка.ВидУсловия = ВидУсловия Тогда
				Строка.Используется = Истина;
				Строка.ЗначенияУсловия.Добавить(Отсутствие.ДатаОкончания);
			КонецЕсли;
		КонецЦикла;
		
		// Текст автоответа
		ВидДействия =  Перечисления.ВидыДействийПриОбработкеВходящихПисем.ОтветитьСУказаннымТекстом;
		Для каждого Строка Из ТаблицаДействия Цикл
			Если Строка.ВидДействия = ВидДействия Тогда
				Строка.Используется = Истина;
				Строка.ЗначенияДействия.Добавить(ТекстовоеПредставлениеОтсутствия);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Строка Из ТаблицаУсловия Цикл
		Если Строка.ЗначенияУсловия.Количество() > 0 Тогда
			Строка.ПредставлениеЗначенияУсловия = 
			ПолучитьПредставлениеСпискаЗначенийДляУсловия(Строка.ВидУсловия, Строка.ЗначенияУсловия);
		КонецЕсли;
	КонецЦикла;
	Для каждого Строка Из ТаблицаДействия Цикл
		Если Строка.ЗначенияДействия.Количество() > 0 Тогда
			Строка.ПредставлениеЗначенияДействия = 
			ПолучитьПредставлениеСпискаЗначенийДляУсловия(Строка.ВидДействия, Строка.ЗначенияДействия);
		КонецЕсли;
	КонецЦикла;
	Для каждого Строка Из ТаблицаИсключения Цикл
		Если Строка.ЗначенияИсключения.Количество() > 0 Тогда
			Строка.ПредставлениеЗначенияИсключения = 
			ПолучитьПредставлениеСпискаЗначенийДляУсловия(Строка.ВидИсключения, Строка.ЗначенияИсключения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//Очистка всего, что связано с данным правилом
	НаборЗаписей = РегистрыСведений.ЗначенияУсловийПриОбработкеПисем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Правило.Установить(Объект.Ссылка);
	НаборЗаписей.Записать();

	НаборЗаписей = РегистрыСведений.ЗначенияДействийПриОбработкеПисем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Правило.Установить(Объект.Ссылка);
	НаборЗаписей.Записать();
	
	//Запись условий
	Порядок = 0;
	Для каждого Строка Из ТаблицаУсловия Цикл
		Если Строка.Используется Тогда
			Если Строка.ЗначенияУсловия.Количество() > 0 Тогда
				Для Каждого ЗначениеЭлемента Из Строка.ЗначенияУсловия Цикл
					Порядок = Порядок + 1;
					МенеджерЗаписиРегистра = 
						РегистрыСведений.ЗначенияУсловийПриОбработкеПисем.СоздатьМенеджерЗаписи();
					МенеджерЗаписиРегистра.Правило = Объект.Ссылка;
					МенеджерЗаписиРегистра.ВидУсловия = Строка.ВидУсловия;
					МенеджерЗаписиРегистра.ПараметрУсловия = ЗначениеЭлемента.Значение;
					МенеджерЗаписиРегистра.Порядок = Порядок;
					МенеджерЗаписиРегистра.ЭтоЗначенияИсключения = Ложь;
					МенеджерЗаписиРегистра.Записать();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Запись действий
	Порядок = 0;
	Для каждого Строка Из ТаблицаДействия Цикл
		Если Строка.Используется Тогда
			Если Строка.ЗначенияДействия.Количество() > 0 Тогда
				Для Каждого ЗначениеЭлемента Из Строка.ЗначенияДействия Цикл
					МенеджерЗаписиРегистра = 
						РегистрыСведений.ЗначенияДействийПриОбработкеПисем.СоздатьМенеджерЗаписи();
					МенеджерЗаписиРегистра.Правило = Объект.Ссылка;
					МенеджерЗаписиРегистра.ВидДействия = Строка.ВидДействия;
					Если Строка.ВидДействия = Перечисления.ВидыДействийПриОбработкеВходящихПисем.ОтветитьСУказаннымТекстом Тогда
						МенеджерЗаписиРегистра.ТекстАвтоответа = ЗначениеЭлемента.Значение;
					Иначе
						МенеджерЗаписиРегистра.ПараметрДействия = ЗначениеЭлемента.Значение;
					КонецЕсли;
					МенеджерЗаписиРегистра.Записать();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Запись исключений
	Порядок = 0;
	Для каждого Строка Из ТаблицаИсключения Цикл
		Если Строка.Используется Тогда
			Если Строка.ЗначенияИсключения.Количество() > 0 Тогда
				Для Каждого ЗначениеЭлемента Из Строка.ЗначенияИсключения Цикл
					Порядок = Порядок + 1;
					МенеджерЗаписиРегистра = 
					РегистрыСведений.ЗначенияУсловийПриОбработкеПисем.СоздатьМенеджерЗаписи();
					МенеджерЗаписиРегистра.Правило = Объект.Ссылка;
					МенеджерЗаписиРегистра.ВидУсловия = Строка.ВидИсключения;
					МенеджерЗаписиРегистра.ПараметрУсловия = ЗначениеЭлемента.Значение;
					МенеджерЗаписиРегистра.Порядок = Порядок;
					МенеджерЗаписиРегистра.ЭтоЗначенияИсключения = Истина;
					МенеджерЗаписиРегистра.Записать();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеПравила()
	
	Результат = "<!DOCTYPE HTML PUBLIC ""-//IETF//DTD HTML 2.0//EN"">
	|<html>
	|<head>
	|<meta http-equiv=""Content-Style-Type"" content=""text/css"">
	|<title></title>
	|<style type=""text/css"">
	|	.TextStyle 	{font-family:MS Sans Serif; font-size:11px;}
	|</style>
	|</head>
	|<body topmargin=0 bottommargin=0 leftmargin=0 scroll=auto class=""TextStyle"">";
	Если Не (Объект.ДляВходящихПисем Или Объект.ДляИсходящихПисем) Тогда
		Результат = Результат + "</body></html>";
		Возврат Результат;
	КонецЕсли;
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1<div>%2 <font size=2><b>%3</b></font> %4 <font size=2><b>%5</b></font></div>",
		Результат,
		НСтр("ru = 'Правило для'; en = 'Rule for'"),
		?(Объект.ДляВходящихПисем, НСтр("ru = 'входящих'; en = 'incoming'"), НСтр("ru = 'исходящих'; en = 'outgoing'")),
		НСтр("ru = 'писем учетной записи'; en = 'emails of account'"),
		Строка(Объект.УчетнаяЗапись));
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1<p style=""margin-bottom: 1px;""><font size=2><b>%2</b></font></p><ul style=""margin-top: 1px;"">",
		Результат,
		НСтр("ru = 'Если'; en = 'If'"));
	
	ЕстьИспользуемыеУсловия = Ложь;
	Для Каждого СтрокаУсловие Из ТаблицаУсловия Цикл
		Если СтрокаУсловие.Используется 
			И ЗначениеЗаполнено(СтрокаУсловие.ПредставлениеЗначенияУсловия) Тогда
			
			МенеджерЗначения = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаУсловие.ВидУсловия);
					
			Если СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоВТечениеУказанногоПериода")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова") 
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова") 
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТекстСодержитУказанныеСлова")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаСодержитУказанныеСлова")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаНачинаетсяС") 
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС") 
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТолькоДляПользователей")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПолучательВходитВГруппы")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке")
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.НаходитсяВПапке") 
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.Проект") 
				ИЛИ СтрокаУсловие.ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.Проект")Тогда
				
				
				Результат = Результат 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<li type=""disc""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><b>%1</b>%2 <font size=2><b>%3</b></font></li>",
						"",
						Строка(СтрокаУсловие.ВидУсловия),
						?(ЗначениеЗаполнено(СтрокаУсловие.ПредставлениеЗначенияУсловия),
							СтрЗаменить(Строка(СтрокаУсловие.ПредставлениеЗначенияУсловия), ";", НСтр("ru = ' ИЛИ '; en = ' OR '")),
							НСтр("ru = ' (значение не указано)'; en = ' (not specified)'")));
			Иначе
				
				Если СтрокаУсловие.ЗначенияУсловия[0].Значение Тогда
					
					Результат = Результат 
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"<li type=""disc""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><b>%1</b><font size=2><b>%2</b></font></li>",
							"",
							СтрЗаменить(Строка(СтрокаУсловие.ВидУсловия), ":", ""));
					
				Иначе
					
					Результат = Результат 
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<li type=""disc""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><b>%1</b><font size=2><b>%2</b></font></li>",
						"",
						СтрЗаменить(МенеджерЗначения.ОтрицаниеУсловия(СтрокаУсловие.ВидУсловия), ":", ""));
					
				КонецЕсли;
				
			КонецЕсли;
			ЕстьИспользуемыеУсловия = Истина;
		КонецЕсли;		
	КонецЦикла;	
	
	СчетчикИсключений = 0;
	Для Каждого СтрокаИсключения Из ТаблицаИсключения Цикл
		Если СтрокаИсключения.Используется 
			И ЗначениеЗаполнено(СтрокаИсключения.ПредставлениеЗначенияИсключения)  Тогда
			
			СчетчикИсключений = СчетчикИсключений + 1;			
			МенеджерЗначения = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаИсключения.ВидИсключения);
			
			Если ЕстьИспользуемыеУсловия 
				И СчетчикИсключений = 1 Тогда
				СтрокаСвязи = "";
			Иначе
				СтрокаСвязи = "<b>" + Строка(Объект.СвязьИсключений) + " </b>";
			КонецЕсли;
			
			Если СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоВТечениеУказанногоПериода")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова") 
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова") 
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТекстСодержитУказанныеСлова")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаСодержитУказанныеСлова")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаНачинаетсяС") 
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС") 
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТолькоДляПользователей") 
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПолучательВходитВГруппы")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.НаходитсяВПапке")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.Проект")
				ИЛИ СтрокаИсключения.ВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.Проект")Тогда
				
				Результат = Результат 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<li type=""circle""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span>%1%2 <font size=2><b>%3</b></font></li>",
						"",
						МенеджерЗначения.ОтрицаниеУсловия(СтрокаИсключения.ВидИсключения),
						?(ЗначениеЗаполнено(СтрокаИсключения.ПредставлениеЗначенияИсключения),
							СтрЗаменить(Строка(СтрокаИсключения.ПредставлениеЗначенияИсключения), ";", НСтр("ru = ' И '; en = ' AND '")),
							НСтр("ru = ' (значение не указано)'; en = ' (not specified)'")));
			Иначе
				
				Если СтрокаИсключения.ЗначенияИсключения[0].Значение Тогда
					
					Результат = Результат 
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<li type=""circle""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span>%1<font size=2><b>%2</b></font></li>",
						"",
						СтрЗаменить(МенеджерЗначения.ОтрицаниеУсловия(СтрокаИсключения.ВидИсключения), ":", ""));
					
				Иначе
					
					Результат = Результат 
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<li type=""circle""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><font size=2>%1<b>%2</b></font></li>",
						"",
						СтрЗаменить(Строка(СтрокаИсключения.ВидИсключения), ":", ""));
					
				КонецЕсли;
				
			КонецЕсли;
			ЕстьИспользуемыеУсловия = Истина;
		КонецЕсли;		
	КонецЦикла;
		
	Если Не ЕстьИспользуемыеУсловия Тогда
		Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
			"<div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><font size=2><b>%1</b></font></div>",
			НСтр("ru = 'Правило применяется для всех писем'; en = 'The rule applies for all emails'"));
	КонецЕсли;
		
	Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"</ul><p style=""margin-bottom: 1px;""><font size=2><b>%1</b></font></p><ul style=""margin-top: 1px;"">",
		НСтр("ru = 'Тогда'; en = 'Then'"));
	
	ЕстьИспользуемыеДействия = Ложь;
	Для Каждого СтрокаДействие Из ТаблицаДействия Цикл
		
		Если СтрокаДействие.Используется 
			И ЗначениеЗаполнено(СтрокаДействие.ПредставлениеЗначенияДействия) Тогда
			
			ЕстьИспользуемыеДействия = Истина;
			МенеджерЗначения = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаДействие.ВидДействия);
			
			Если СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ПереместитьВУказаннуюПапку")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйФлаг")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ОтветитьСУказаннымТекстом")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПереместитьВУказаннуюПапку")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПоместитьИсходноеПисьмоВУказаннуюПапку")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйФлаг")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПрименитьКИсходномуПисьмуПравила")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйПроект")
				ИЛИ СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйПроект")Тогда
				
				СтрокаЗначение = СтрокаДействие.ПредставлениеЗначенияДействия;
				Если СтрокаДействие.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ОтветитьСУказаннымТекстом") Тогда
					Если СтрДлина(СтрокаДействие.ПредставлениеЗначенияДействия) > 15 Тогда
						СтрокаЗначение = Сред(СтрокаДействие.ПредставлениеЗначенияДействия, 0, 15) + "...";
					конецЕсли;
					СтрокаЗначение = """" + СтрокаЗначение + """";
				КонецЕсли;
				
				Результат = Результат 
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<li type=""square""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span>%1 <font size=2><b>%2</b></font></li>",
				Строка(СтрокаДействие.ВидДействия),
				?(ЗначениеЗаполнено(СтрокаДействие.ПредставлениеЗначенияДействия),
				СтрокаЗначение,
				НСтр("ru = ' (значение не указано)'; en = ' (not specified)'")));
			Иначе
				
				Если СтрокаДействие.ЗначенияДействия[0].Значение Тогда
					
					Результат = Результат 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<li type=""square""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><font size=2><b>%1</b></font></li>",
					СтрЗаменить(Строка(СтрокаДействие.ВидДействия), ":", ""));
					
				Иначе
					
					Результат = Результат 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<li type=""square""><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><font size=2><b>%1</b></font></li>",
					СтрЗаменить(МенеджерЗначения.ОтрицаниеДействия(СтрокаДействие.ВидДействия), ":", ""));
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьИспользуемыеДействия Тогда
		Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
			"<div><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><font size=2><b>%1</b></font></div>",
			НСтр("ru = 'Ничего не предпринимать'; en = 'Do nothing'"));
	КонецЕсли;
	
	Результат = Результат + "<ul></body></html>";
	
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Описание = СформироватьОписаниеПравила();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ПравилаОбработкиПисем.Порядок), 0) КАК Порядок
		|ИЗ
		|	Справочник.ПравилаОбработкиПисем КАК ПравилаОбработкиПисем
		|ГДЕ
		|	ПравилаОбработкиПисем.УчетнаяЗапись = &УчетнаяЗапись
		|	И ПравилаОбработкиПисем.ДляВходящихПисем = &ДляВходящихПисем
		|	И ПравилаОбработкиПисем.ДляИсходящихПисем = &ДляИсходящихПисем";
		Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.УчетнаяЗапись);
		Запрос.УстановитьПараметр("ДляВходящихПисем", Объект.ДляВходящихПисем);
		Запрос.УстановитьПараметр("ДляИсходящихПисем", Объект.ДляИсходящихПисем);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекущийОбъект.Порядок = Выборка.Порядок + 1;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Модифицированность = Ложь;
	Оповестить("Запись_ПравилоОбработкиПисем");
	Если ЗначениеЗаполнено(Основание) Тогда
		Оповестить("СозданиеНаОсновании_ПравилоОбработкиПисем", Основание);
		Основание = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПапкаПрименения) Тогда
		
		Если Не БазаФайловая Тогда
			ТолькоПросмотр = Истина;
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(Объект.Ссылка);
			МассивПараметров.Добавить(ПапкаПрименения);
			МассивПараметров.Добавить(ВключатьПодпапки);
			МассивПараметров.Добавить(ВариантПрименения);
			МассивПараметров.Добавить(Истина);
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ИмяФункции", "РаботаСПравиламиОбработкиПисем.ПрименитьПравилоКПапке");
			ПараметрыФормы.Вставить("ПараметрыФункции", МассивПараметров);
			ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Обработка писем'; en = 'Processing emails'"));
			
			ОткрытьФорму("ОбщаяФорма.ВыполнениеДлительнойОперации", ПараметрыФормы);		
			
		Иначе
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется применение правила к папке ""%1"". Пожалуйста, подождите...'; en = 'Applying rule to the folder ""%1"". Please wait ...'"),
			ПапкаПрименения);
			Состояние(Текст);
			
			РаботаСПравиламиОбработкиПисем.ПрименитьПравилоКПапке(
				Объект.Ссылка, 
				ПапкаПрименения, 
				ВключатьПодпапки,
				ВариантПрименения,
				Ложь);
			
			Состояние();
			Оповестить("ПримененоПравило");
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Для Каждого Строка Из ТаблицаДействия Цикл
			Если Строка.Используется Тогда
				Объект.Наименование = Строка.ПредставлениеЗначенияДействия;
				прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаПримененияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПапкаПримененияНачалоВыбораПродолжение",
		ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.ПапкиПисем.Форма.ФормаВыбора",
		,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	ВариантПрименения = ПредопределенноеЗначение(
		"Перечисление.ВариантыПримененияПравилаПисем.КоВсемПисьмам");		
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаПримененияНачалоВыбораПродолжение(Результат, Параметры) Экспорт
	
	ПапкаПрименения = Результат;
	
КонецПроцедуры

//////////////////////////////////////////////////
// РАБОТА С УСЛОВИЯМИ ОТБОРА

&НаКлиенте
Процедура ЗначенияУсловияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова") 
		ИЛИ ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса") 
		ИЛИ ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса")
		ИЛИ ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			ТекущиеДанные.ЗначенияУсловия.Очистить();
			ТекущиеДанные.ЗначенияУсловия.Добавить(ВыбранноеЗначение.Представление);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = 
			ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущиеДанные.ВидУсловия, ТекущиеДанные.ЗначенияУсловия);
			Описание = СформироватьОписаниеПравила();	
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СпискиАдресовЭлектроннойПочты") Тогда	
			
			ТекущиеДанные.ЗначенияУсловия.Очистить();
			ТекущиеДанные.ЗначенияУсловия.Добавить(ВыбранноеЗначение);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = Строка(ВыбранноеЗначение);
			Описание = СформироватьОписаниеПравила();	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	Если ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова") 
		ИЛИ ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса") 
		ИЛИ ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса") Тогда	 
		
		Если СтрДлина(Текст) < 2 Тогда
			Возврат;
		КонецЕсли;
		ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, 
		ТекущийПользователь, ЭтоВебКлиент);
		ВстроеннаяПочтаКлиент.ЗаполнитьКартинкиВСпискеВыбора(ДанныеВыбора);	
		
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда	 
		
		Если СтрДлина(Текст) < 2 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьСпискиАдресовДляАвтоподбора(Текст, Объект.УчетнаяЗапись);
		
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУсловияПриАктивизацииСтроки(Элемент)
	
	УстановитьРежимРедактированияЗначенияУсловия();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаТекста(РезультатФормы, Параметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияУсловия = 
	ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущийВидУсловия, РезультатФормы.Список);
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	Для Каждого ЗначениеСписка Из РезультатФормы.Список Цикл
		ТекущиеДанные.ЗначенияУсловия.Добавить(ЗначениеСписка.Значение);	
	КонецЦикла;
	Модифицированность = Истина;
	Описание = СформироватьОписаниеПравила();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаАдресов(РезультатФормы, Параметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияУсловия = 
	ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущийВидУсловия, РезультатФормы.Список);
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	Для Каждого ЗначениеСписка Из РезультатФормы.Список Цикл
		ТекущиеДанные.ЗначенияУсловия.Добавить(ЗначениеСписка.Значение);	
	КонецЦикла;
	Модифицированность = Истина;
	Описание = СформироватьОписаниеПравила();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаДат(РезультатФормы, Параметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияУсловия = 
	ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущийВидУсловия, РезультатФормы.Список);
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	Для Каждого ЗначениеСписка Из РезультатФормы.Список Цикл
		ТекущиеДанные.ЗначенияУсловия.Добавить(ЗначениеСписка.Значение);	
	КонецЦикла;
	Модифицированность = Истина;
	Описание = СформироватьОписаниеПравила();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаЗначенияСправочника(РезультатФормы, Параметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияУсловия = 
		ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущийВидУсловия, РезультатФормы.Список);
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	Для Каждого ЗначениеСписка Из РезультатФормы.Список Цикл
		ТекущиеДанные.ЗначенияУсловия.Добавить(ЗначениеСписка.Значение);	
	КонецЦикла;
	Модифицированность = Истина;
	Описание = СформироватьОписаниеПравила();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаСпискаАдресатов(РезультатФормы, Параметры) Экспорт
	
	Если РезультатФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияУсловия = Строка(РезультатФормы);
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	ТекущиеДанные.ЗначенияУсловия.Добавить(РезультатФормы);	
	Модифицированность = Истина;
	Описание = СформироватьОписаниеПравила();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВыбораПапки(РезультатФормы, Параметры) Экспорт
	
	Если РезультатФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияУсловия = Строка(РезультатФормы);
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	ТекущиеДанные.ЗначенияУсловия.Добавить(РезультатФормы);	
	Модифицированность = Истина;
	Описание = СформироватьОписаниеПравила();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбораПродолжениеПослеВыбораПроекта(РезультатФормы, Параметры) Экспорт
	
	Если РезультатФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияУсловия = Строка(РезультатФормы);
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	ТекущиеДанные.ЗначенияУсловия.Добавить(РезультатФормы);	
	Модифицированность = Истина;
	Описание = СформироватьОписаниеПравила();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС")
		ИЛИ ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаНачинаетсяС")
		ИЛИ ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаСодержитУказанныеСлова") Тогда
		
		ПараметрыФормы = Новый Структура("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаТекста",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.ПравилаОбработкиПисем.Форма.ПоискТекста",
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		
	ИначеЕсли ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса") 
		ИЛИ ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса") Тогда
		
		ПараметрыФормы = Новый Структура("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаАдресов",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.ПравилаОбработкиПисем.Форма.ВводАдресов",
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода")
		Или ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоВТечениеУказанногоПериода") Тогда
		
		Если ТекущиеДанные.ЗначенияУсловия.Количество() = 0 Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(Дата(1,1,1));
			ТекущиеДанные.ЗначенияУсловия.Добавить(Дата(1,1,1));
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаДат",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.ПравилаОбработкиПисем.Форма.ПоискДат", 
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТолькоДляПользователей") Тогда
		
		ВыбранныеАдресаты = Новый Массив;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияУсловия Цикл
			ОписаниеЗначения = Новый Структура("Контакт", ЭлементСписка.Значение);
			ВыбранныеАдресаты.Добавить(ОписаниеЗначения);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор пользователей'; en = 'User selection'"));
		ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные пользователи:'; en = 'Selected users:'"));
		ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все пользователи:'; en = 'All users:'"));
		ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеАдресаты);
		ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораПользователей", ЭтотОбъект);
		
		РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПолучательВходитВГруппы") Тогда
		
		МассивВыбранные = Новый Массив;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияУсловия Цикл
			МассивВыбранные.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТипСправочника", "РабочиеГруппы");
		ПараметрыФормы.Вставить("СписокЗначений", ТекущиеДанные.ЗначенияУсловия);
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Подбор рабочих групп'; en = 'Fill working groups'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаЗначенияСправочника",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.ПравилаОбработкиПисем.Форма.ПоискПоСправочнику", 
			ПараметрыФормы, 
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда
		
		МассивВыбранные = Новый Массив;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияУсловия Цикл
			МассивВыбранные.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВводаСпискаАдресатов",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.НаходитсяВПапке") Тогда
		
		ТекущаяПапка = Неопределено;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияУсловия Цикл
			ТекущаяПапка = ЭлементСписка.Значение;
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущаяПапка);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВыбораПапки",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.ПапкиПисем.ФормаВыбора",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.Проект")
		Или ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.Проект") Тогда
		
		ТекущийПроект = Неопределено;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияУсловия Цикл
			ТекущийПроект = ЭлементСписка.Значение;
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущийПроект);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияУсловияНачалоВыбораПродолжениеПослеВыбораПроекта",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.Проекты.ФормаВыбора",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова") 
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаНачинаетсяС")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС")	
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса") 
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса") 
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПолучательВходитВГруппы")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ТекущиеДанные.ПредставлениеЗначенияУсловия, 
		";");
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		Для Каждого Подстрока Из МассивПодстрок Цикл
			ТекущиеДанные.ЗначенияУсловия.Добавить(Подстрока);	
		КонецЦикла;
		
	КонецЕсли;
	Модифицированность = Истина;
	Описание = СформироватьОписаниеПравила();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУсловияИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия; 
	
	Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоМне")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоТолькоМне")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ИмеетВложения")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ИмеетВложения")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ЯвляетсяОтветомНаПисьмо") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПересылаетВходящееПисьмо") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПересылаетИсходящееПисьмо") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.БылНаправленОтвет")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.БылоПереслано")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.БылНаправленОтвет") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.БылоПереслано") Тогда
		
		Если ТекущиеДанные.Используется Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(Истина);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Да'; en = 'Yes'");
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьРежимРедактированияЗначенияУсловия();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаЗначенийДляУсловия(ВидУсловия, СписокЗначений)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВидУсловия);
	Возврат Менеджер.ВычислитьТекстовоеОписаниеСпискаЗначений(ВидУсловия, СписокЗначений);
	
КонецФункции

&НаКлиенте
Процедура ТаблицаУсловияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если Поле.Имя <> "ЗначенияУсловия" ИЛИ ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия;
	
	Если ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоМне")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоТолькоМне")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ИмеетВложения")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ИмеетВложения")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ЯвляетсяОтветомНаПисьмо") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПересылаетВходящееПисьмо")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПересылаетИсходящееПисьмо")
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.БылНаправленОтвет") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.БылоПереслано") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.БылНаправленОтвет") 
		ИЛИ ТекущийВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.БылоПереслано") Тогда
		
		ТекущееЗначение = Неопределено;
		Если ТекущиеДанные.ЗначенияУсловия.Количество() > 0 Тогда
			ТекущееЗначение = ТекущиеДанные.ЗначенияУсловия[0].Значение;
		КонецЕсли;
		Если Не ТекущиеДанные.Используется Тогда
			ТекущиеДанные.Используется = Истина;
		КонецЕсли;
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		ТекущиеДанные.ПредставлениеЗначенияУсловия = "";
		Если ТекущееЗначение = Истина Тогда
			ТекущиеДанные.ЗначенияУсловия.Добавить(Ложь);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Нет'; en = 'No'");
		Иначе
			ТекущиеДанные.ЗначенияУсловия.Добавить(Истина);
			ТекущиеДанные.ПредставлениеЗначенияУсловия = НСтр("ru = 'Да'; en = 'Yes'");		
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРедактированияЗначенияУсловия()
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия;
	
	Элементы.ЗначенияУсловия.Доступность = Истина;
	Элементы.ЗначенияУсловия.РедактированиеТекста = Ложь;
	Элементы.ЗначенияУсловия.КнопкаВыбора = Ложь;
	Элементы.ЗначенияУсловия.КнопкаОчистки = Истина;
	Элементы.ЗначенияУсловия.ТолькоПросмотр = Ложь;	
	Элементы.ЗначенияУсловия.РежимРедактирования = РежимРедактированияКолонки.Вход;
	
	Если Не ТекущиеДанные.Используется Тогда
		ТекущиеДанные.ПредставлениеЗначенияУсловия = "";
		ТекущиеДанные.ЗначенияУсловия.Очистить();
	КонецЕсли;
	
	Если ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаСодержитУказанныеСлова") 
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаНачинаетсяС")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС")	
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда
		
		Элементы.ЗначенияУсловия.ТолькоПросмотр = Ложь;
		Элементы.ЗначенияУсловия.РедактированиеТекста = Истина;
		Элементы.ЗначенияУсловия.КнопкаВыбора = Истина;
		Элементы.ЗначенияУсловия.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		
	ИначеЕсли ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода")
		Или ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоВТечениеУказанногоПериода") Тогда
		
		Элементы.ЗначенияУсловия.ТолькоПросмотр = Ложь;
		Элементы.ЗначенияУсловия.КнопкаВыбора = Истина;
		Элементы.ЗначенияУсловия.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		Элементы.ТаблицаУсловия.ЗакончитьРедактированиеСтроки(Истина);
		
	ИначеЕсли ТекущийВидУсловия = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТолькоДляПользователей")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы") 
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПолучательВходитВГруппы")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.НаходитсяВПапке") 
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.Проект") 
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.Проект") Тогда
		
		Элементы.ЗначенияУсловия.ТолькоПросмотр = Ложь;
		Элементы.ЗначенияУсловия.КнопкаВыбора = Истина;
		Элементы.ЗначенияУсловия.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		
	Иначе
		
		Элементы.ЗначенияУсловия.ТолькоПросмотр = ТекущиеДанные.Используется;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияУсловияОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЗначенияУсловия.Очистить();
	ТекущиеДанные.ПредставлениеЗначенияУсловия = "";
	
	ТекущийВидУсловия = ТекущиеДанные.ВидУсловия;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУсловияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Используется Тогда
		ТекущиеДанные.Используется = Истина;
		УстановитьРежимРедактированияЗначенияУсловия();
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////
// РАБОТА С ДЕЙСТВИЯМИ

&НаКлиенте
Процедура ЗначенияДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидДействия = 	
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ПереместитьВУказаннуюПапку") 
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПереместитьВУказаннуюПапку")
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПоместитьИсходноеПисьмоВУказаннуюПапку") Тогда
		ДанныеВыбора = ПолучитьДанныеВыбораПапокПисем(Текст);	
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйФлаг")
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйФлаг") Тогда
		
		ДанныеВыбора = ПолучитьДанныеВыбораФлаговПисем(Текст);	
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйПроект")
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйПроект") Тогда
		
		Если ЗначениеЗаполнено(Текст) Тогда 
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДействияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ПереместитьВУказаннуюПапку") 
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПереместитьВУказаннуюПапку")
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПоместитьИсходноеПисьмоВУказаннуюПапку")
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйФлаг")
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйФлаг")
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйПроект")
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйПроект") Тогда	
		
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.ЗначенияДействия.Очистить();
		
		Если ТекущиеДанные.ВидДействия = 
				ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйПроект")
			ИЛИ ТекущиеДанные.ВидДействия = 
				ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйПроект")Тогда 
			ТекущиеДанные.ЗначенияДействия.Добавить(ВыбранноеЗначение.Проект);
		Иначе 
			ТекущиеДанные.ЗначенияДействия.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
		ТекущиеДанные.ПредставлениеЗначенияДействия = 
		ПолучитьПредставлениеСпискаЗначенийДляДействия(ТекущиеДанные.ВидДействия, ТекущиеДанные.ЗначенияДействия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ПереместитьВУказаннуюПапку") 
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПереместитьВУказаннуюПапку")
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПоместитьИсходноеПисьмоВУказаннуюПапку") Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораПапокПисем(Текст);	
		Если ДанныеВыбора.Количество() <> 0 Тогда
			ТекущиеДанные.ЗначенияДействия.Очистить();
			ТекущиеДанные.ЗначенияДействия.Добавить(ДанныеВыбора[0].Значение);
			ТекущиеДанные.ПредставлениеЗначенияДействия = 
			ПолучитьПредставлениеСпискаЗначенийДляДействия(ТекущиеДанные.ВидДействия, ТекущиеДанные.ЗначенияДействия);
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйФлаг")
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйФлаг") Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораФлаговПисем(Текст);	
		Если ДанныеВыбора.Количество() <> 0 Тогда
			ТекущиеДанные.ЗначенияДействия.Очистить();
			ТекущиеДанные.ЗначенияДействия.Добавить(ДанныеВыбора[0].Значение);
			ТекущиеДанные.ПредставлениеЗначенияДействия = 
			ПолучитьПредставлениеСпискаЗначенийДляДействия(ТекущиеДанные.ВидДействия, ТекущиеДанные.ЗначенияДействия);
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйПроект")
		ИЛИ ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйПроект") Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		
		Если ДанныеВыбора.Количество() <> 0 Тогда
			ТекущиеДанные.ЗначенияДействия.Очистить();
			ТекущиеДанные.ЗначенияДействия.Добавить(ДанныеВыбора[0].Значение);
			ТекущиеДанные.ПредставлениеЗначенияДействия = 
			ПолучитьПредставлениеСпискаЗначенийДляДействия(ТекущиеДанные.ВидДействия, ТекущиеДанные.ЗначенияДействия);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораПапокПисем(Текст) 
	
	СписокВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПапкиПисем.Ссылка
	|ИЗ
	|	Справочник.ПапкиПисем КАК ПапкиПисем
	|ГДЕ
	|	ПапкиПисем.Наименование ПОДОБНО &Наименование";
	Запрос.УстановитьПараметр("Наименование", Текст + "%");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПолныйПуть = Справочники.ПапкиПисем.ПолучитьПолныйПутьПапки(Выборка.Ссылка);
		СписокВыбора.Добавить(Выборка.Ссылка, ПолныйПуть);		
	КонецЦикла;
	Возврат СписокВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораФлаговПисем(Текст)
	
	СписокВыбора = Новый СписокЗначений;
	
	Для Каждого ЗначениеПеречисления Из Перечисления.ФлагиОбъектов Цикл
		Если Найти(НРег(Строка(ЗначениеПеречисления)), НРег(Текст)) > 0 Тогда
			ИмяЗначенияПеречисления = ОбщегоНазначения.ИмяЗначенияПеречисления(ЗначениеПеречисления);
			СписокВыбора.Добавить(
			ЗначениеПеречисления, 
			ИмяЗначенияПеречисления,
			, 
			БиблиотекаКартинок[ИмяЗначенияПеречисления + "Флаг"]);		
		КонецЕсли;
	КонецЦикла;
	Возврат СписокВыбора;		
	
КонецФункции

&НаКлиенте
Процедура ЗначенияДействияНачалоВыбораПродолжениеПослеВыбораПапки(Папка, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Если Папка <> Неопределено И ТипЗнч(Папка) = Тип("СправочникСсылка.ПапкиПисем") Тогда
		ТекущиеДанные.ЗначенияДействия.Очистить();
		ТекущиеДанные.ЗначенияДействия.Добавить(Папка);
		ТекущиеДанные.ПредставлениеЗначенияДействия = 
		ПолучитьПредставлениеСпискаЗначенийДляДействия(ТекущийВидДействия, ТекущиеДанные.ЗначенияДействия);
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДействияНачалоВыбораПродолжениеПослеВыбораФлага(РезультатФормы, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Если РезультатФормы <> Неопределено И ТипЗнч(РезультатФормы) = Тип("ПеречислениеСсылка.ФлагиОбъектов") Тогда
		ТекущиеДанные.ЗначенияДействия.Очистить();
		ТекущиеДанные.ЗначенияДействия.Добавить(РезультатФормы);
		ТекущиеДанные.ПредставлениеЗначенияДействия = 
		ПолучитьПредставлениеСпискаЗначенийДляДействия(ТекущийВидДействия, ТекущиеДанные.ЗначенияДействия);
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДействияНачалоВыбораПродолжениеПослеВыбораПроекта(РезультатФормы, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Если РезультатФормы <> Неопределено И ТипЗнч(РезультатФормы) = Тип("СправочникСсылка.Проекты") Тогда
		ТекущиеДанные.ЗначенияДействия.Очистить();
		ТекущиеДанные.ЗначенияДействия.Добавить(РезультатФормы);
		ТекущиеДанные.ПредставлениеЗначенияДействия = 
		ПолучитьПредставлениеСпискаЗначенийДляДействия(ТекущийВидДействия, ТекущиеДанные.ЗначенияДействия);
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДействияНачалоВыбораПродолжениеПослеВводаТекста(Текст, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Если Текст <> Неопределено Тогда
		ТекущиеДанные.ЗначенияДействия.Очистить();
		ТекущиеДанные.ЗначенияДействия.Добавить(Текст);
		ТекущиеДанные.ПредставлениеЗначенияДействия = Текст;
		Модифицированность = Истина;
	КонецЕсли;
		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДействияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	
	Если ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ПереместитьВУказаннуюПапку") 
		ИЛИ ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПереместитьВУказаннуюПапку")
		ИЛИ ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПоместитьИсходноеПисьмоВУказаннуюПапку") Тогда
		
		Папка = Неопределено;
		Если ТекущиеДанные.ЗначенияДействия.Количество() > 0 Тогда
			Папка = ТекущиеДанные.ЗначенияДействия[0].Значение;
		КонецЕсли;
		
		ПоказатьЗначение(, Папка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	
	Если ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ПереместитьВУказаннуюПапку") 
		ИЛИ ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПереместитьВУказаннуюПапку")
		ИЛИ ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПоместитьИсходноеПисьмоВУказаннуюПапку") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияДействияНачалоВыбораПродолжениеПослеВыбораПапки",
			ЭтотОбъект);
			
		ОткрытьФорму(
			"Справочник.ПапкиПисем.Форма.ФормаВыбора",
			,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
		
	ИначеЕсли ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйФлаг")
		ИЛИ ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйФлаг") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияДействияНачалоВыбораПродолжениеПослеВыбораФлага",
			ЭтотОбъект);
		ОткрытьФорму(
			"Перечисление.ФлагиОбъектов.ФормаВыбора",,,,,, 
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ОтветитьСУказаннымТекстом") Тогда
		
		Текст = "";
		Если ТекущиеДанные.ЗначенияДействия.Количество() > 0 Тогда
			Текст = ТекущиеДанные.ЗначенияДействия[0].Значение;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияДействияНачалоВыбораПродолжениеПослеВводаТекста",
			ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, Текст, НСтр("ru = 'Введите текст'; en = 'Enter text'"),, Истина);
		
	ИначеЕсли ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйПроект")
		ИЛИ ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйПроект") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияДействияНачалоВыбораПродолжениеПослеВыбораПроекта",
			ЭтотОбъект);
			
		ПараметрыФормы = Новый Структура;
		Если ТекущиеДанные.ЗначенияДействия.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗначенияДействия[0].Значение);
		КонецЕсли;
		
		ОткрытьФорму(
			"Справочник.Проекты.ФормаВыбора",,,,,, 
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПрименитьКИсходномуПисьмуПравила") Тогда	
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыФормы.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
		ПараметрыФормы.Вставить("ВыбранныеЗначения", ТекущиеДанные.ЗначенияДействия.ВыгрузитьЗначения());
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияДействияНачалоВыбораПродолжениеПослеВыбораИзСправочника",
			ЭтотОбъект);
		Результат = ОткрытьФорму(
			"Справочник.ПравилаОбработкиПисем.Форма.ПодборПравил", 
			ПараметрыФормы,,,,, 
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДействияНачалоВыбораПродолжениеПослеВыбораИзСправочника(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Если Результат <> Неопределено Тогда
		ТекущиеДанные.ЗначенияДействия.ЗагрузитьЗначения(Результат);	
		Модифицированность = Истина;
	КонецЕсли;
	ТекущиеДанные.ПредставлениеЗначенияДействия = 
		ПолучитьПредставлениеСпискаЗначенийДляДействия(ТекущийВидДействия, ТекущиеДанные.ЗначенияДействия);		
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаЗначенийДляДействия(ВидДействия, СписокЗначений)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВидДействия);
	Возврат Менеджер.ВычислитьТекстовоеОписаниеСпискаЗначений(ВидДействия, СписокЗначений);
	
КонецФункции

&НаКлиенте
Процедура ТаблицаДействияПриАктивизацииСтроки(Элемент)
	
	УстановитьРежимРедактированияЗначенияДействия();	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРедактированияЗначенияДействия()
	
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидДействия = ТекущиеДанные.ВидДействия;
	
	Элементы.ЗначенияДействия.Доступность = Истина;
	Элементы.ЗначенияДействия.ТолькоПросмотр = Ложь;
	Элементы.ЗначенияДействия.РедактированиеТекста = Ложь;
	Элементы.ЗначенияДействия.КнопкаВыбора = Ложь;
	Элементы.ЗначенияДействия.КнопкаОчистки = Истина;
	Элементы.ЗначенияУсловия.РежимРедактирования = РежимРедактированияКолонки.Вход;
	
	Если Не ТекущиеДанные.Используется Тогда
		Элементы.ЗначенияДействия.РежимРедактирования = РежимРедактированияКолонки.Вход;
		ТекущиеДанные.ПредставлениеЗначенияДействия = "";
		ТекущиеДанные.ЗначенияДействия.Очистить();
	КонецЕсли;
	
	Если ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ПереместитьВУказаннуюПапку")
		ИЛИ ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПереместитьВУказаннуюПапку")
		ИЛИ ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ОтветитьСУказаннымТекстом")
		ИЛИ ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПоместитьИсходноеПисьмоВУказаннуюПапку") 
		ИЛИ ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйФлаг") 
		ИЛИ ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйФлаг")
		ИЛИ ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйПроект") 
		ИЛИ ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйПроект") Тогда
		
		Элементы.ЗначенияДействия.ТолькоПросмотр = Ложь;
		Элементы.ЗначенияДействия.КнопкаВыбора = Истина;
		Элементы.ЗначенияДействия.РедактированиеТекста = Истина;
		Элементы.ЗначенияДействия.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		
	ИначеЕсли ТекущийВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПрименитьКИсходномуПисьмуПравила") Тогда
		
		Элементы.ЗначенияДействия.ТолькоПросмотр = Ложь;
		Элементы.ЗначенияДействия.КнопкаВыбора = Истина;
		Элементы.ЗначенияДействия.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		
	Иначе
		
		Элементы.ЗначенияДействия.ТолькоПросмотр = ТекущиеДанные.Используется;		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДействияИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ТекущийВидДействия = ТекущиеДанные.ВидДействия; 
	
	Если ТекущийВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ОстановитьПроверкуДругихПравил")
		ИЛИ ТекущийВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьПометкуПрочтения") 
		ИЛИ ТекущийВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ПометитьНаУдаление") 
		ИЛИ ТекущийВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПереместитьВПапкуИсходногоПисьма")
		ИЛИ ТекущийВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ОстановитьПроверкуДругихПравил") Тогда
		
		Если ТекущиеДанные.Используется Тогда
			ТекущиеДанные.ЗначенияДействия.Добавить(Истина);
			ТекущиеДанные.ПредставлениеЗначенияДействия = НСтр("ru = 'Да'; en = 'Yes'");
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьРежимРедактированияЗначенияДействия();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДействияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Модифицированность = Истина;
	
	Если ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ОтветитьСУказаннымТекстом") Тогда
		ТекущиеДанные.ЗначенияДействия.Очистить();
		Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеЗначенияДействия) Тогда
			ТекущиеДанные.ЗначенияДействия.Добавить(ТекущиеДанные.ПредставлениеЗначенияДействия);
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьУказанныйПроект")
		Или ТекущиеДанные.ВидДействия = 
		ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.УстановитьУказанныйПроект") Тогда
		
		Если ПустаяСтрока(Элементы.ТаблицаДействия.ПодчиненныеЭлементы.ЗначенияДействия.ТекстРедактирования) Тогда
			
			ТекущиеДанные.ЗначенияДействия.Очистить();
			ТекущиеДанные.ПредставлениеЗначенияДействия = "";
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДействияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Используется Тогда
		ТекущиеДанные.Используется = Истина;
		УстановитьРежимРедактированияЗначенияДействия();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДействияОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТекущиеДанные.ЗначенияДействия.Очистить();
	ТекущиеДанные.ПредставлениеЗначенияДействия = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДействияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	Если Поле.Имя <> "ЗначенияДействия" ИЛИ ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидДействия = ТекущиеДанные.ВидДействия;
	
	Если ТекущийВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ОстановитьПроверкуДругихПравил")
		ИЛИ ТекущийВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.УстановитьПометкуПрочтения") 
		ИЛИ ТекущийВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеВходящихПисем.ПометитьНаУдаление") 
		ИЛИ ТекущийВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ОстановитьПроверкуДругихПравил")
		ИЛИ ТекущийВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействийПриОбработкеИсходящихПисем.ПереместитьВПапкуИсходногоПисьма") Тогда
		
		ТекущееЗначение = Неопределено;
		Если ТекущиеДанные.ЗначенияДействия.Количество() > 0 Тогда
			ТекущееЗначение = ТекущиеДанные.ЗначенияДействия[0].Значение;
		КонецЕсли;
		Если Не ТекущиеДанные.Используется Тогда
			ТекущиеДанные.Используется = Истина;
		КонецЕсли;
		ТекущиеДанные.ЗначенияДействия.Очистить();
		ТекущиеДанные.ПредставлениеЗначенияДействия = "";
		Если ТекущееЗначение = Неопределено Тогда
			ТекущиеДанные.ЗначенияДействия.Добавить(Истина);
			ТекущиеДанные.ПредставлениеЗначенияДействия = НСтр("ru = 'Да'; en = 'Yes'");
		Иначе
			ТекущиеДанные.Используется = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

//////////////////////////////////////////////////
// РАБОТА С ИСКЛЮЧЕНИЯМИ ОТБОРА

&НаКлиенте
Процедура ЗначенияИсключенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова") 
		ИЛИ ТекущиеДанные.ВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса") 
		ИЛИ ТекущиеДанные.ВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			ТекущиеДанные.ЗначенияИсключения.Очистить();
			ТекущиеДанные.ЗначенияИсключения.Добавить(ВыбранноеЗначение.Представление);
			ТекущиеДанные.ПредставлениеЗначенияИсключения = 
			ПолучитьПредставлениеСпискаЗначенийДляИсключения(ТекущиеДанные.ВидИсключения, ТекущиеДанные.ЗначенияИсключения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	Если ТекущиеДанные.ВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова") 
		ИЛИ ТекущиеДанные.ВидИсключения = 	
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса") 
		ИЛИ ТекущиеДанные.ВидИсключения = 	
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса") Тогда	 
		
		Если СтрДлина(Текст) < 2 Тогда
			Возврат;
		КонецЕсли;
		ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, 
		ТекущийПользователь, ЭтоВебКлиент);
		ВстроеннаяПочтаКлиент.ЗаполнитьКартинкиВСпискеВыбора(ДанныеВыбора);	
		
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда	 
		
		Если СтрДлина(Текст) < 2 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьСпискиАдресовДляАвтоподбора(Текст, Объект.УчетнаяЗапись);
		
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсключенияПриАктивизацииСтроки(Элемент)
	
	УстановитьРежимРедактированияЗначенияИсключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияНачалоВыбораПродолжениеПослеВводаТекста(РезультатФормы, Параметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияИсключения = 
		ПолучитьПредставлениеСпискаЗначенийДляИсключения(ТекущийВидИсключения, РезультатФормы.Список);
	ТекущиеДанные.ЗначенияИсключения.Очистить();
	Для Каждого ЗначениеСписка Из РезультатФормы.Список Цикл
		ТекущиеДанные.ЗначенияИсключения.Добавить(ЗначениеСписка.Значение);	
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияНачалоВыбораПродолжениеПослеВводаАдресов(РезультатФормы, Параметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияИсключения = 
		ПолучитьПредставлениеСпискаЗначенийДляИсключения(ТекущийВидИсключения, РезультатФормы.Список);
	ТекущиеДанные.ЗначенияИсключения.Очистить();
	Для Каждого ЗначениеСписка Из РезультатФормы.Список Цикл
		ТекущиеДанные.ЗначенияИсключения.Добавить(ЗначениеСписка.Значение);	
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияНачалоВыбораПродолжениеПослеВводаДат(РезультатФормы, Параметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияИсключения = 
		ПолучитьПредставлениеСпискаЗначенийДляИсключения(ТекущийВидИсключения, РезультатФормы.Список);
	ТекущиеДанные.ЗначенияИсключения.Очистить();
	Для Каждого ЗначениеСписка Из РезультатФормы.Список Цикл
		ТекущиеДанные.ЗначенияИсключения.Добавить(ЗначениеСписка.Значение);	
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияНачалоВыбораПродолжениеПослеВводаЗначенияСправочника(РезультатФормы, Параметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияИсключения = 
		ПолучитьПредставлениеСпискаЗначенийДляИсключения(ТекущийВидИсключения, РезультатФормы.Список);
	ТекущиеДанные.ЗначенияИсключения.Очистить();
	Для Каждого ЗначениеСписка Из РезультатФормы.Список Цикл
		ТекущиеДанные.ЗначенияИсключения.Добавить(ЗначениеСписка.Значение);	
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияНачалоВыбораПродолжениеПослеВводаСпискаАдресов(РезультатФормы, Параметры) Экспорт
	
	Если РезультатФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияИсключения = 
		Строка(РезультатФормы);
	ТекущиеДанные.ЗначенияИсключения.Очистить();
	ТекущиеДанные.ЗначенияИсключения.Добавить(РезультатФормы);	
	
КонецПроцедуры  

&НаКлиенте
Процедура ЗначенияИсключенияНачалоВыбораПродолжениеПослеВыбораПапки(РезультатФормы, Параметры) Экспорт
	
	Если РезультатФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияИсключения = 
		Строка(РезультатФормы);
	ТекущиеДанные.ЗначенияИсключения.Очистить();
	ТекущиеДанные.ЗначенияИсключения.Добавить(РезультатФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияНачалоВыбораПродолжениеПослеВыбораПроекта(РезультатФормы, Параметры) Экспорт
	
	Если РезультатФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеЗначенияИсключения = 
		Строка(РезультатФормы);
	ТекущиеДанные.ЗначенияИсключения.Очистить();
	ТекущиеДанные.ЗначенияИсключения.Добавить(РезультатФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущийВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаСодержитУказанныеСлова") 
		ИЛИ ТекущийВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаНачинаетсяС") 
		ИЛИ ТекущийВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС") Тогда
		
		ПараметрыФормы = Новый Структура("СписокЗначений", ТекущиеДанные.ЗначенияИсключения);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияИсключенияНачалоВыбораПродолжениеПослеВводаТекста",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.ПравилаОбработкиПисем.Форма.ПоискТекста",
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ИначеЕсли ТекущийВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова")
		ИЛИ ТекущийВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса") 
		ИЛИ ТекущийВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса") Тогда
		
		ПараметрыФормы = Новый Структура("СписокЗначений", ТекущиеДанные.ЗначенияИсключения);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияИсключенияНачалоВыбораПродолжениеПослеВводаАдресов",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.ПравилаОбработкиПисем.Форма.ВводАдресов",
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТекущийВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода")
		Или ТекущийВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоВТечениеУказанногоПериода")Тогда
		
		Если ТекущиеДанные.ЗначенияИсключения.Количество() = 0 Тогда
			ТекущиеДанные.ЗначенияИсключения.Добавить(Дата(1,1,1));
			ТекущиеДанные.ЗначенияИсключения.Добавить(Дата(1,1,1));
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("СписокЗначений", ТекущиеДанные.ЗначенияИсключения);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияИсключенияНачалоВыбораПродолжениеПослеВводаДат",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.ПравилаОбработкиПисем.Форма.ПоискДат",
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТолькоДляПользователей") Тогда
		
		ВыбранныеАдресаты = Новый Массив;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияИсключения Цикл
			ОписаниеЗначения = Новый Структура("Контакт", ЭлементСписка.Значение);
			ВыбранныеАдресаты.Добавить(ОписаниеЗначения);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор пользователей'; en = 'User selection'"));
		ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные пользователи:'; en = 'Selected users:'"));
		ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все пользователи:'; en = 'All users:'"));
		ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеАдресаты);
		ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораПользователей", ЭтотОбъект);
		
		РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
		
	ИначеЕсли ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы") 
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПолучательВходитВГруппы") Тогда
				
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТипСправочника", "РабочиеГруппы");
		ПараметрыФормы.Вставить("СписокЗначений", ТекущиеДанные.ЗначенияИсключения);
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Подбор рабочих групп'; en = 'Fill working groups'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияИсключенияНачалоВыбораПродолжениеПослеВводаЗначенияСправочника",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.ПравилаОбработкиПисем.Форма.ПоискПоСправочнику", 
			ПараметрыФормы, 
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда
		
		МассивВыбранные = Новый Массив;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияИсключения Цикл
			МассивВыбранные.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияИсключенияНачалоВыбораПродолжениеПослеВводаСпискаАдресов",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", 
			ПараметрыФормы, 
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.НаходитсяВПапке") Тогда
		
		ТекущаяПапка = Неопределено;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияИсключения Цикл
			ТекущаяПапка = ЭлементСписка.Значение;
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущаяПапка);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияИсключенияНачалоВыбораПродолжениеПослеВыбораПапки",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.ПапкиПисем.ФормаВыбора",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.Проект")
		Или ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.Проект") Тогда
		
		ТекущийПроект = Неопределено;
		Для Каждого ЭлементСписка Из ТекущиеДанные.ЗначенияИсключения Цикл
			ТекущийПроект = ЭлементСписка.Значение;
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущийПроект);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗначенияИсключенияНачалоВыбораПродолжениеПослеВыбораПроекта",
			ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.Проекты.ФормаВыбора",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораПользователей(ВыбранныеПользователи, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеПользователи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СтраницыЭтапыЗаполнения.ТекущаяСтраница = Элементы.ЭтапУсловия Тогда
		ТекущиеДанные = Элементы.ТаблицаУсловия.ТекущиеДанные;
		ТекущиеДанные.ЗначенияУсловия.Очистить();
		Для Каждого ЭлементМассива Из ВыбранныеПользователи Цикл
			ТекущиеДанные.ЗначенияУсловия.Добавить(ЭлементМассива.Контакт);
		КонецЦикла;
		ТекущиеДанные.ПредставлениеЗначенияУсловия = 
			ПолучитьПредставлениеСпискаЗначенийДляУсловия(ТекущийВидУсловия, ТекущиеДанные.ЗначенияУсловия);
			
		Модифицированность = Истина;
		Описание = СформироватьОписаниеПравила();
	ИначеЕсли Элементы.СтраницыЭтапыЗаполнения.ТекущаяСтраница = Элементы.ЭтапИсключения Тогда
		ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
		ТекущиеДанные.ЗначенияИсключения.Очистить();
		Для Каждого ЭлементМассива Из ВыбранныеПользователи Цикл
			ТекущиеДанные.ЗначенияИсключения.Добавить(ЭлементМассива.Контакт);
		КонецЦикла;
		ТекущиеДанные.ПредставлениеЗначенияИсключения = 
			ПолучитьПредставлениеСпискаЗначенийДляИсключения(ТекущийВидИсключения, ТекущиеДанные.ЗначенияИсключения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТекстСодержитУказанныеСлова")	
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова") 
		ИЛИ ТекущийВидИсключения =
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса") 
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса") 
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПолучательВходитВГруппы") 
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаНачинаетсяС") 
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС")
		ИЛИ ТекущийВидУсловия = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке") Тогда
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ТекущиеДанные.ПредставлениеЗначенияИсключения, 
		";");
		ТекущиеДанные.ЗначенияИсключения.Очистить();
		Для Каждого Подстрока Из МассивПодстрок Цикл
			ТекущиеДанные.ЗначенияИсключения.Добавить(Подстрока);	
		КонецЦикла;
		
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсключенияИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ТекущийВидИсключения = ТекущиеДанные.ВидИсключения; 
	
	Если ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоМне")
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоТолькоМне")
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ИмеетВложения") 
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ИмеетВложения")
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ЯвляетсяОтветомНаПисьмо") 
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПересылаетВходящееПисьмо") 
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПересылаетИсходящееПисьмо") Тогда
		
		Если ТекущиеДанные.Используется Тогда
			ТекущиеДанные.ЗначенияИсключения.Добавить(Истина);
			ТекущиеДанные.ПредставлениеЗначенияИсключения = НСтр("ru = 'Да'; en = 'Yes'");
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьРежимРедактированияЗначенияИсключения();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаЗначенийДляИсключения(ВидИсключения, СписокЗначений)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВидИсключения);
	Возврат Менеджер.ВычислитьТекстовоеОписаниеСпискаЗначений(ВидИсключения, СписокЗначений);
	
КонецФункции

&НаКлиенте
Процедура УстановитьРежимРедактированияЗначенияИсключения()
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидИсключения = ТекущиеДанные.ВидИсключения;
	
	Элементы.ЗначенияИсключения.Доступность = Истина;
	Элементы.ЗначенияИсключения.РедактированиеТекста = Ложь;
	Элементы.ЗначенияИсключения.КнопкаВыбора = Ложь;
	Элементы.ЗначенияИсключения.КнопкаОчистки = Истина;
	Элементы.ЗначенияИсключения.ТолькоПросмотр = Ложь;	
	Элементы.ЗначенияИсключения.РежимРедактирования = РежимРедактированияКолонки.Вход;
	
	Если Не ТекущиеДанные.Используется Тогда
		Элементы.ЗначенияИсключения.РежимРедактирования = РежимРедактированияКолонки.Вход;
		ТекущиеДанные.ПредставлениеЗначенияИсключения = "";
		ТекущиеДанные.ЗначенияИсключения.Очистить();
	Иначе
		Элементы.ЗначенияИсключения.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	КонецЕсли;
	
	Если ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТекстСодержитУказанныеСлова")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТекстСодержитУказанныеСлова")	
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправительВходитВГруппы")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолучательВходитВГруппы")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяСодержитУказанныеСлова")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоНаУказанныеАдреса")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТемаНачинаетсяС") 
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ТемаНачинаетсяС") 	
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ОтправленоНаУказанныеАдреса")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПолучательВходитВГруппы")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресОтправителяВСписке")
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.НаходитсяВПапке") 
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.Проект") 
		ИЛИ ТекущийВидИсключения = 
			ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.Проект") Тогда
		
		Элементы.ЗначенияИсключения.ТолькоПросмотр = Ложь;
		Элементы.ЗначенияИсключения.РедактированиеТекста = Истина;
		Элементы.ЗначенияИсключения.КнопкаВыбора = Истина;
		Элементы.ЗначенияИсключения.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		
	ИначеЕсли ТекущийВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ПолученоВТечениеУказанногоПериода")
		Или ТекущийВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ОтправленоВТечениеУказанногоПериода") Тогда
		
		Элементы.ЗначенияИсключения.ТолькоПросмотр = Ложь;
		Элементы.ЗначенияИсключения.КнопкаВыбора = Истина;
		Элементы.ЗначенияИсключения.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		Элементы.ТаблицаИсключения.ЗакончитьРедактированиеСтроки(Истина);
		
	ИначеЕсли ТекущийВидИсключения = 
		ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ТолькоДляПользователей") Тогда
		
		Элементы.ЗначенияИсключения.ТолькоПросмотр = Ложь;
		Элементы.ЗначенияИсключения.КнопкаВыбора = Истина;
		Элементы.ЗначенияИсключения.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		
	Иначе
		
		Элементы.ЗначенияИсключения.ТолькоПросмотр = ТекущиеДанные.Используется;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияИсключенияОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЗначенияИсключения.Очистить();
	ТекущиеДанные.ПредставлениеЗначенияИсключения = "";
	ТекущийВидИсключения = ТекущиеДанные.ВидИсключения;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсключенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Используется Тогда
		ТекущиеДанные.Используется = Истина;
		УстановитьРежимРедактированияЗначенияИсключения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсключенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаИсключения.ТекущиеДанные;
	Если Поле.Имя <> "ЗначенияИсключения" ИЛИ ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидИсключения = ТекущиеДанные.ВидИсключения;
	
	Если ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоМне")
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.АдресованоТолькоМне")
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.ИмеетВложения") 
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ИмеетВложения")
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ЯвляетсяОтветомНаПисьмо") 
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПересылаетВходящееПисьмо") 
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.ПересылаетИсходящееПисьмо")
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.БылНаправленОтвет") 
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораВходящихПисем.БылоПереслано") 
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.БылНаправленОтвет") 
		ИЛИ ТекущийВидИсключения = ПредопределенноеЗначение("Перечисление.ВидыУсловийОтбораИсходящихПисем.БылоПереслано") Тогда
		
		ТекущееЗначение = Неопределено;
		Если ТекущиеДанные.ЗначенияИсключения.Количество() > 0 Тогда
			ТекущееЗначение = ТекущиеДанные.ЗначенияИсключения[0].Значение;
		КонецЕсли;
		Если Не ТекущиеДанные.Используется Тогда
			ТекущиеДанные.Используется = Истина;
		КонецЕсли;
		ТекущиеДанные.ЗначенияИсключения.Очистить();
		ТекущиеДанные.ПредставлениеЗначенияИсключения = "";
		Если ТекущееЗначение = Истина Тогда
			ТекущиеДанные.ЗначенияИсключения.Добавить(Ложь);
			ТекущиеДанные.ПредставлениеЗначенияИсключения = НСтр("ru = 'Нет'; en = 'No'");
		Иначе
			ТекущиеДанные.ЗначенияИсключения.Добавить(Истина);
			ТекущиеДанные.ПредставлениеЗначенияИсключения = НСтр("ru = 'Да'; en = 'Yes'");		
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаПримененияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПапкаПрименения) Тогда
		ВключатьПодпапки = Ложь;
		ВариантПрименения = ПредопределенноеЗначение(
		"Перечисление.ВариантыПримененияПравилаПисем.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыЭтапыЗаполненияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Элементы.ТаблицаУсловия.ЗакончитьРедактированиеСтроки(Ложь);
	Элементы.ТаблицаДействия.ЗакончитьРедактированиеСтроки(Ложь);
	Элементы.ТаблицаИсключения.ЗакончитьРедактированиеСтроки(Ложь);
	
	ТекущаяСтраница = Элементы.СтраницыЭтапыЗаполнения.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.ЭтапУсловия Тогда
		Шаг = 0;
	ИначеЕсли ТекущаяСтраница = Элементы.ЭтапДействия Тогда
		Шаг = 1;
	ИначеЕсли ТекущаяСтраница = Элементы.ЭтапИсключения Тогда
		Шаг = 2;
	ИначеЕсли ТекущаяСтраница = Элементы.ЭтапЗавершение Тогда
		Шаг = 3;
		Описание = СформироватьОписаниеПравила();
	КонецЕсли;
	
	Элементы.Назад.Доступность = Истина;
	Элементы.Далее.Доступность = Истина;
	Если Элементы.СтраницыЭтапыЗаполнения.ТекущаяСтраница = Элементы.ЭтапЗавершение Тогда
		Элементы.Далее.Доступность = Ложь;
	Иначе
		Элементы.Далее.Доступность = Истина;
	КонецЕсли;
	
	Если Шаг = 0 Тогда
		Элементы.Назад.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Для Каждого Строка Из ТаблицаДействия Цикл
			Если Строка.Используется Тогда
				Объект.Наименование = Строка.ПредставлениеЗначенияДействия;
				прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ФоновоеВыполнениеЗавершено_РаботаСПравиламиОбработкиПисем.ПрименитьПравилоКПапке" Тогда	
		Оповестить("ПримененоПравило");
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВыборУчетныхЗаписей()
	
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.УчетнаяЗапись.Видимость = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникУчетныеЗаписиЭлектроннойПочты.Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК СправочникУчетныеЗаписиЭлектроннойПочты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			МоиУчетныеЗаписи.Ссылка КАК Ссылка
		|		ИЗ
		|			Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК МоиУчетныеЗаписи
		|		ГДЕ
		|			МоиУчетныеЗаписи.Пользователь = &Пользователь) КАК МоиУчетныеЗаписи
		|		ПО (МоиУчетныеЗаписи.Ссылка = СправочникУчетныеЗаписиЭлектроннойПочты.Ссылка)
		|ГДЕ
		|	СправочникУчетныеЗаписиЭлектроннойПочты.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|	И СправочникУчетныеЗаписиЭлектроннойПочты.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Объект.УчетнаяЗапись = Выборка.Ссылка;
			Элементы.УчетнаяЗапись.Видимость = Ложь;
		Иначе
			ОсновнаяУчетнаяЗапись =
				ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОсновнаяУчетнаяЗапись");
			Пока Выборка.Следующий() Цикл
				Если Выборка.Ссылка = ОсновнаяУчетнаяЗапись Тогда
					Объект.УчетнаяЗапись = Выборка.Ссылка;
				КонецЕсли;
				Элементы.УчетнаяЗапись.СписокВыбора.Добавить(Выборка.Ссылка);
			КонецЦикла;
		КонецЕсли;
	Иначе
		Текст = НСтр("ru = 'Нет ни одной учетной записи, для которой можно настроить правила обработки писем.
			|Обратитесь к аминистратору.';
			|en = 'There is no account, for which you can configure rules to process messages. 
			|Refer to administrator.'");
		ВызватьИсключение(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	
	Описание = СформироватьОписаниеПравила();
	
КонецПроцедуры


