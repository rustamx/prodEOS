#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру полей ВнутреннегоДокумента
//
// Возвращаемое значение:
//   Структура
//
Функция ПолучитьСтруктуруВнутреннегоДокумента() Экспорт
	
	СтруктуруВнутреннегоДокумента = Новый Структура;
	СтруктуруВнутреннегоДокумента.Вставить("ВидДокумента");
	СтруктуруВнутреннегоДокумента.Вставить("Заголовок");
	СтруктуруВнутреннегоДокумента.Вставить("Содержание");
	СтруктуруВнутреннегоДокумента.Вставить("Папка");
	СтруктуруВнутреннегоДокумента.Вставить("Организация");
	СтруктуруВнутреннегоДокумента.Вставить("ВопросДеятельности");
	СтруктуруВнутреннегоДокумента.Вставить("НоменклатураДел");
	СтруктуруВнутреннегоДокумента.Вставить("КоличествоЭкземпляров");
	СтруктуруВнутреннегоДокумента.Вставить("КоличествоЛистов");
	СтруктуруВнутреннегоДокумента.Вставить("Подразделение");
	
	Возврат СтруктуруВнутреннегоДокумента;
	
КонецФункции

// Создает и записывает в БД внутренний документ
//
// Параметры:
//   СтруктуруВнутреннегоДокумента - Структура - структура полей внутреннего документа.
//
Функция СоздатьВнутреннийДокумент(СтруктуруВнутреннегоДокумента) Экспорт
	
	НачатьТранзакцию();
	Попытка
		НовыйВнутреннийДокумент = СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйВнутреннийДокумент, СтруктуруВнутреннегоДокумента);
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		НовыйВнутреннийДокумент.ДатаСоздания = ТекущаяДатаСеанса;
		
		НовыйВнутреннийДокумент.Записать();
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			НовыйВнутреннийДокумент.Ссылка,
			ТекущаяДатаСеанса,
			Перечисления.СостоянияДокументов.Проект,
			Пользователи.ТекущийПользователь());
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось создать внутренний документ'; en = 'Unable to create internal document'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НовыйВнутреннийДокумент.Ссылка;
	
КонецФункции

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Ссылка,
		|ВидДокумента,
		|ВопросДеятельности,
		|ГрифДоступа,
		|Организация,
		|Подразделение,
		|Папка,
		|Контрагент,
		|Контрагенты";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ВидОбъекта = ОбъектДоступа.ВидДокумента;
	ДескрипторДоступа.ВопросДеятельности = ОбъектДоступа.ВопросДеятельности;
	ДескрипторДоступа.ГрифДоступа = ОбъектДоступа.ГрифДоступа;
	ДескрипторДоступа.Организация = ОбъектДоступа.Организация;
	ДескрипторДоступа.Подразделение = ОбъектДоступа.Подразделение;
	
	// Папка
	ДокументооборотПраваДоступа.ЗаполнитьПапкуДескриптораОбъекта(ОбъектДоступа, ДескрипторДоступа);
	
	// Контрагенты
	ВсеКонтрагенты = ОбъектДоступа.Контрагенты.Выгрузить().ВыгрузитьКолонку("Контрагент");
	ЗначенияГруппыДоступа = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеКонтрагенты, "ГруппаДоступа");
	
	ДобавленныеГруппы = Новый Соответствие;
	Для Каждого КлючИЗначение Из ЗначенияГруппыДоступа Цикл
		ГруппаДоступа = КлючИЗначение.Значение;
		Если ЗначениеЗаполнено(ГруппаДоступа) И ДобавленныеГруппы.Получить(ГруппаДоступа) = Неопределено Тогда
			Строка = ДескрипторДоступа.Контрагенты.Добавить();
			Строка.ГруппаДоступа = ГруппаДоступа;
			ДобавленныеГруппы.Вставить(ГруппаДоступа, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьМетодПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает таблицу значений с правилами обработки настроек прав папки,
// которые следует применять для расчета прав объекта
// 
Функция ПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	ТаблицаПравил = ДокументооборотПраваДоступа.ТаблицаПравилОбработкиНастроекПапки();
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ЧтениеПапокИВнутреннихДокументов";
	Стр.Чтение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ДобавлениеПапокИВнутреннихДокументов";
	Стр.Добавление = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ИзменениеПапокИВнутреннихДокументов";
	Стр.Изменение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ПометкаУдаленияПапокИВнутреннихДокументов";
	Стр.Удаление = Истина;
	
	Возврат ТаблицаПравил;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПодсистемаПечать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Карточка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ВнутренниеДокументы";
	КомандаПечати.Идентификатор = "Карточка";
	КомандаПечати.Представление = НСтр("ru = 'Карточка документа'; en = 'Document form'");
	КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьКарточкиДокумента";
	
	// Напечатать файлы
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ВнутренниеДокументы";
	КомандаПечати.Идентификатор = "НапечататьФайлы";
	КомандаПечати.Представление = НСтр("ru = 'Напечатать файлы'; en = 'Print files'");
	КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.НапечататьФайлы";
	
	// Регистрационный штамп
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ВнутренниеДокументы";
	КомандаПечати.Идентификатор = "РегистрационныйШтамп";
	КомандаПечати.Представление = НСтр("ru = 'Регистрационный штамп'; en = 'Registration stamp'");
	КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьРегистрационногоШтампа";
    
    Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда
        // Штрихкод на наклейке
        КомандаПечати = КомандыПечати.Добавить();
        КомандаПечати.МенеджерПечати = "Справочник.ВнутренниеДокументы";
        КомандаПечати.Идентификатор = "ШтрихкодНаНаклейке";
        КомандаПечати.Представление = НСтр("ru = 'Штрихкод на наклейке'; en = 'Barcode on label'");
        КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьШтрихкодаНаНаклейке";
        
        // Штрихкод на странице
        КомандаПечати = КомандыПечати.Добавить();
        КомандаПечати.МенеджерПечати = "Справочник.ВнутренниеДокументы";
        КомандаПечати.Идентификатор = "ШтрихкодНаСтранице";
        КомандаПечати.Представление = НСтр("ru = 'Штрихкод на странице'; en = 'Barcode on page'");
        КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьШтрихкодаНаСтранице";
    КонецЕсли;	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
    // Устанавливаем признак доступности печати по-комплектно
    ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда

        // Формируем табличный документ и добавляем его в коллекцию печатных форм
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
            "Карточка",
			"Карточка внутреннего документа",
			ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			,
			"Справочник.ВнутренниеДокументы.ПФ_MXL_Карточка");

	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистСогласования") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЛистСогласования",
			"Лист согласования",
			ЛистСогласования(МассивОбъектов, ОбъектыПечати),
			,
			"БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласования");
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистСогласованияСИсторией") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЛистСогласованияСИсторией",
			"Лист согласования с историей",
			ЛистСогласованияСИсторией(МассивОбъектов, ОбъектыПечати),
			,
			"БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласованияСИсторией");
		
	КонецЕсли;
		
КонецПроцедуры

// Формирует печатную форму карточки документа
//
// Параметры:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ОбъектыПечати   - СписокЗначений - список объектов печати;
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// Возвращаемое значение:
//  ТабличныйДокумент - ТабличныйДокумент - печатная форма
//
Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_КарточкаВнутреннегоДокумента";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ВнутренниеДокументы.ПФ_MXL_Карточка");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьРеквизитыШапка = Макет.ПолучитьОбласть("РеквизитыШапка");
	
	ОбластьФайлыШапка = Макет.ПолучитьОбласть("ФайлыШапка");
	ОбластьФайлыСтрока = Макет.ПолучитьОбласть("ФайлыСтрока");
	
	ОбластьВерсииШапка = Макет.ПолучитьОбласть("ВерсииШапка");
	ОбластьВерсииСтрока = Макет.ПолучитьОбласть("ВерсииСтрока");
	ОбластьВерсииСтрокаФайл = Макет.ПолучитьОбласть("ВерсииСтрокаФайл");
	
	ОбластьЭПШапка = Макет.ПолучитьОбласть("ЭПШапка");
	ОбластьЭПСтрока = Макет.ПолучитьОбласть("ЭПСтрока");
	ОбластьЭПОбъект = Макет.ПолучитьОбласть("ЭПОбъект");
	
	ОбластьСоставКомплектаШапка = Макет.ПолучитьОбласть("СоставКомплектаШапка");
	ОбластьСоставКомплектаСтрока = Макет.ПолучитьОбласть("СоставКомплектаСтрока");
	
	ОбластьСвязанныеДокументыШапка = Макет.ПолучитьОбласть("СвязанныеДокументыШапка");
	ОбластьСвязанныеДокументыСтрока = Макет.ПолучитьОбласть("СвязанныеДокументыСтрока");
	ОбластьСвязанныеДокументыТипСвязи = Макет.ПолучитьОбласть("СвязанныеДокументыТипСвязи");
	
	ОбластьЖурналПередачиШапка = Макет.ПолучитьОбласть("ЖурналПередачиШапка");
	ОбластьЖурналПередачиСтрока = Макет.ПолучитьОбласть("ЖурналПередачиСтрока");
	
	ОбластьРезолюцииШапка = Макет.ПолучитьОбласть("РезолюцииШапка");
	ОбластьРезолюцииСтрока = Макет.ПолучитьОбласть("РезолюцииСтрока");
	
	ОбластьСогласованиеШапка = Макет.ПолучитьОбласть("СогласованиеШапка");
	ОбластьСогласованиеСтрока = Макет.ПолучитьОбласть("СогласованиеСтрока");
	ОбластьСогласованиеГруппа = Макет.ПолучитьОбласть("СогласованиеГруппа");
	
	ОбластьУтверждениеШапка = Макет.ПолучитьОбласть("УтверждениеШапка");
	ОбластьУтверждениеСтрока = Макет.ПолучитьОбласть("УтверждениеСтрока");
	ОбластьУтверждениеГруппа = Макет.ПолучитьОбласть("УтверждениеГруппа");
	
	ОбластьРассмотрениеШапка = Макет.ПолучитьОбласть("РассмотрениеШапка");
	ОбластьРассмотрениеСтрока = Макет.ПолучитьОбласть("РассмотрениеСтрока");
	
	ОбластьИсполнениеШапка = Макет.ПолучитьОбласть("ИсполнениеШапка");
	ОбластьИсполнениеСтрока = Макет.ПолучитьОбласть("ИсполнениеСтрока");
	ОбластьИсполнениеГруппа = Макет.ПолучитьОбласть("ИсполнениеГруппа");
	
	ОбластьОзнакомлениеШапка = Макет.ПолучитьОбласть("ОзнакомлениеШапка");
	ОбластьОзнакомлениеСтрока = Макет.ПолучитьОбласть("ОзнакомлениеСтрока");
	ОбластьОзнакомлениеГруппа = Макет.ПолучитьОбласть("ОзнакомлениеГруппа");
	
	ОбластьПорученияШапка = Макет.ПолучитьОбласть("ПорученияШапка");
	ОбластьПорученияСтрока = Макет.ПолучитьОбласть("ПорученияСтрока");
	ОбластьПорученияГруппа = Макет.ПолучитьОбласть("ПорученияГруппа");
	
	ОбластьЗадачиШапка = Макет.ПолучитьОбласть("ЗадачиШапка");
	ОбластьЗадачиСтрока = Макет.ПолучитьОбласть("ЗадачиСтрока");
	
	ОбластьИсторияСроковДействияШапка = Макет.ПолучитьОбласть("ИсторияСроковДействияШапка");
	ОбластьИсторияСроковДействияСтрока = Макет.ПолучитьОбласть("ИсторияСроковДействияСтрока");
	
	ОбластьДопРеквизитыШапка = Макет.ПолучитьОбласть("ДопРеквизитыШапка");
	ОбластьДопРеквизитыСтрока = Макет.ПолучитьОбласть("ДопРеквизитыСтрока");
	ОбластьДопРеквизитыПодвал = Макет.ПолучитьОбласть("ДопРеквизитыПодвал");
	
	ОбластьПрочиеШапка = Макет.ПолучитьОбласть("ПрочиеШапка");
	ОбластьПрочиеСтрока = Макет.ПолучитьОбласть("ПрочиеСтрока");
	ОбластьПрочиеПодвал = Макет.ПолучитьОбласть("ПрочиеПодвал");
	
	ОбластьЭтапыШапка = Макет.ПолучитьОбласть("ЭтапыШапка");
	ОбластьЭтапыСтрока = Макет.ПолучитьОбласть("ЭтапыСтрока");
	
	ОбластьСтороныШапка = Макет.ПолучитьОбласть("СтороныШапка");
	ОбластьСтороныСтрока = Макет.ПолучитьОбласть("СтороныСтрока");	
	
	ОбластьТоварыШапка = Макет.ПолучитьОбласть("ТоварыШапка");
	ОбластьТоварыСтрока = Макет.ПолучитьОбласть("ТоварыСтрока");
	ОбластьТоварыИтог = Макет.ПолучитьОбласть("ТоварыИтог");
	
	// Получаем запросом необходимые данные
	Индекс = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВнутреннийДокумент.Ссылка,
		|	ВнутреннийДокумент.Представление,
		|	ВЫБОР
		|		КОГДА ВнутреннийДокумент.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ВнутреннийДокумент.ДатаРегистрации
		|		ИНАЧЕ ВнутреннийДокумент.ДатаСоздания
		|	КОНЕЦ КАК ДатаСортировки
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутреннийДокумент
		|ГДЕ
		|	ВнутреннийДокумент.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСортировки; ";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ИндексВыборкаЗаголовок = Индекс;

	Если ПараметрыПечати.Свойство("РеквизитыКарточки") И ПараметрыПечати.РеквизитыКарточки Тогда
		Индекс = Индекс + 4;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТекущиеСостоянияДокументов.Документ КАК Документ,
		|	ТекущиеСостоянияДокументов.ДатаУстановки КАК Период
		|ПОМЕСТИТЬ СостоянияДокументовУтверждение
		|ИЗ
		|	РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|ГДЕ
		|	ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Утвержден)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТекущиеСостоянияДокументов.Документ КАК Документ,
		|	ТекущиеСостоянияДокументов.ДатаУстановки КАК Период
		|ПОМЕСТИТЬ СостоянияДокументовИсполнен
		|ИЗ
		|	РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|ГДЕ
		|	ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВнутренниеДокументыКонтрагенты.Контрагент) КАК КоличествоКонтрагентов,
		|	ВнутренниеДокументыКонтрагенты.Ссылка
		|ПОМЕСТИТЬ КонтрагентыДокументов
		|ИЗ
		|	Справочник.ВнутренниеДокументы.Контрагенты КАК ВнутренниеДокументыКонтрагенты
		|ГДЕ
		|	ВнутренниеДокументыКонтрагенты.Ссылка В (&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВнутренниеДокументыКонтрагенты.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВнутреннийДокумент.ДатаРегистрации КАК ДатаРегистрации,
		|	ВнутреннийДокумент.ВидДокумента.Представление КАК ВидДокумента,
		|	ВнутреннийДокумент.ВидДокумента.УчитыватьСуммуДокумента КАК УчитыватьСуммуДокумента,
		|	ВнутреннийДокумент.ВидДокумента.ВестиУчетПоСтатьямДДС КАК ВестиУчетПоСтатьямДДС,
		|	ВнутреннийДокумент.ВидДокумента.УчитыватьСрокДействия КАК УчитыватьСрокДействия,
		|	ВнутреннийДокумент.ВидДокумента.ВестиУчетПоКонтрагентам КАК ВестиУчетПоКонтрагентам,
		|	ВнутреннийДокумент.ВидДокумента.ВестиУчетПоАдресатам КАК ВестиУчетПоАдресатам,
		|	ВнутреннийДокумент.ВидДокумента.ВестиУчетПоОрганизациям КАК ВестиУчетПоОрганизациям,
		|	ВнутреннийДокумент.Адресат.Представление КАК Адресат,
		|	ВнутреннийДокумент.Дело.Представление КАК Дело,
		|	ВнутреннийДокумент.Зарегистрировал.Представление КАК Зарегистрировал,
		|	ВнутреннийДокумент.Заголовок КАК Наименование,
		|	ВнутреннийДокумент.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ВнутреннийДокумент.Папка.Представление КАК Папка,
		|	ВнутреннийДокумент.СрокИсполнения КАК ПлановыйСрокИсполнения,
		|	ВнутреннийДокумент.Подготовил.Представление КАК Подготовил,
		|	ВнутреннийДокумент.Содержание КАК Содержание,
		|	ВнутреннийДокумент.КоличествоЛистов КАК КоличествоЛистов,
		|	ВнутреннийДокумент.КоличествоПриложений КАК КоличествоПриложений,
		|	ВнутреннийДокумент.ЛистовВПриложениях КАК ЛистовВПриложениях,
		|	ВнутреннийДокумент.КоличествоЭкземпляров КАК КоличествоЭкземпляров,
		|	ВнутреннийДокумент.Подразделение.Представление КАК Подразделение,
		|	ВнутреннийДокумент.Утвердил.Представление КАК Утвердил,
		|	ВнутреннийДокумент.Представление КАК Представление,
		|	ВнутреннийДокумент.Ссылка КАК Ссылка,
		|	ВнутреннийДокумент.ГрифДоступа.Представление КАК ГрифДоступа,
		|	ВнутреннийДокумент.ВопросДеятельности.Представление КАК ВопросДеятельности,
		|	ВнутреннийДокумент.Организация.Представление КАК Организация,
		|	ВнутреннийДокумент.Организация КАК ОрганизацияСсылка,
		|	ВнутреннийДокумент.Сумма КАК Сумма,
		|	ВнутреннийДокумент.СуммаНДС КАК СуммаНДС,
		|	ВнутреннийДокумент.Валюта.Представление КАК Валюта,
		|	ВнутреннийДокумент.ДатаНачалаДействия,
		|	ВнутреннийДокумент.ДатаОкончанияДействия,
		|	ВнутреннийДокумент.Ответственный,
		|	ОбщиеРеквизитыДокументов.КонтрагентыДляСписков КАК Контрагенты,
		|	ЕСТЬNULL(СостоянияДокументовУтверждение.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУтверждения,
		|	ЕСТЬNULL(СостоянияДокументовИсполнен.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ФактическийСрокИсполнения,
		|	ВЫБОР
		|		КОГДА СостоянияДокументовИсполнен.Период ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Исполнен,
		|	ЕСТЬNULL(КонтрагентыДокументов.КоличествоКонтрагентов, 0) КАК КоличествоКонтрагентов
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутреннийДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияДокументовУтверждение КАК СостоянияДокументовУтверждение
		|		ПО (СостоянияДокументовУтверждение.Документ = ВнутреннийДокумент.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияДокументовИсполнен КАК СостоянияДокументовИсполнен
		|		ПО (СостоянияДокументовИсполнен.Документ = ВнутреннийДокумент.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ КонтрагентыДокументов КАК КонтрагентыДокументов
		|		ПО ВнутреннийДокумент.Ссылка = КонтрагентыДокументов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
		|		ПО ВнутреннийДокумент.Ссылка = ОбщиеРеквизитыДокументов.Документ
		|ГДЕ
		|	ВнутреннийДокумент.Ссылка В (&МассивОбъектов);";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаРеквизиты = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ДопРеквизиты") И ПараметрыПечати.ДопРеквизиты Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизиты.Свойство,
		|	ДополнительныеРеквизиты.Значение,
		|	ДополнительныеРеквизиты.ТекстоваяСтрока,
		|	ДополнительныеРеквизиты.Ссылка,
		|	ДополнительныеРеквизиты.Свойство.ФорматСвойства КАК ФорматСвойства
		|ИЗ
		|	Справочник.ВнутренниеДокументы.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДополнительныеРеквизиты.Свойство.Наименование;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаДопРеквизиты = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ИсторияСрокаДействия") И ПараметрыПечати.ИсторияСрокаДействия Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияСроковДействияДокументов.Документ КАК Документ,
		|	ИсторияСроковДействияДокументов.ДатаИзменения КАК ДатаИзменения,
		|	ИсторияСроковДействияДокументов.ДатаНачалаДействия КАК ДействуетС,
		|	ВЫБОР КОГДА ИсторияСроковДействияДокументов.Бессрочный = ИСТИНА
		|	ТОГДА ""Бессрочный""
		|	ИНАЧЕ ИсторияСроковДействияДокументов.ДатаОкончанияДействия
		|	КОНЕЦ КАК ДействуетПо,
		|	ИсторияСроковДействияДокументов.ПорядокПродления КАК ПорядокПродления,
		|	ИсторияСроковДействияДокументов.Изменил КАК Изменил,
		|	ИсторияСроковДействияДокументов.ДокументИсточникИзменения КАК ИзмененДокументом,
		|	ИсторияСроковДействияДокументов.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.ИсторияСроковДействияДокументов КАК ИсторияСроковДействияДокументов
		|ГДЕ
		|	ИсторияСроковДействияДокументов.Документ В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИзменения;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаИсторияСроковДействия = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ПриложенныеФайлы") И ПараметрыПечати.ПриложенныеФайлы Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.ПолноеНаименование КАК Наименование,
		|	Файлы.Автор.Представление КАК Автор,
		|	Файлы.Описание,
		|	Файлы.ДатаСоздания КАК Создан,
		|	Файлы.ТекущаяВерсия.Автор КАК Отредактировал,
		|	Файлы.ТекущаяВерсия.ДатаСоздания КАК Отредактирован,
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаФайлы = Индекс;
	КонецЕсли;	
	
	Если ПараметрыПечати.Свойство("ВерсииФайлов") И ПараметрыПечати.ВерсииФайлов Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
		|	ВерсииФайлов.Размер / 1024 КАК Размер,
		|	ВерсииФайлов.Автор.Представление КАК Автор,
		|	ВерсииФайлов.ДатаСоздания,
		|	ВерсииФайлов.Владелец КАК Файл,
		|	ВерсииФайлов.Владелец.ВладелецФайла КАК ВладелецФайла,
		|	ВерсииФайлов.Ссылка,
		|	ВерсииФайлов.Комментарий
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Владелец.ВладелецФайла В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Файл,
		|	НомерВерсии УБЫВ
		|ИТОГИ ПО
		|	ВладелецФайла,
		|	Файл;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаВерсии = Индекс;
	КонецЕсли;	
	
	Если ПараметрыПечати.Свойство("ЭП") 
		И ПараметрыПечати.ЭП 
		И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭП.КомуВыданСертификат,
		|	ЭП.ДатаПодписи,
		|	ЭП.Комментарий,
		|	ЭП.Подпись,
		|	ЭП.Отпечаток,
		|	ЭП.УстановившийПодпись,
		|	ЭП.Сертификат,
		|	ЭП.Объект КАК Документ,
		|	ЭП.Объект КАК ОбъектЭП
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.Объект.ПодписанЭП
		|	И ЭП.Объект В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭП.КомуВыданСертификат,
		|	ЭП.ДатаПодписи,
		|	ЭП.Комментарий,
		|	ЭП.Подпись,
		|	ЭП.Отпечаток,
		|	ЭП.УстановившийПодпись,
		|	ЭП.Сертификат,
		|	Файлы.ВладелецФайла,
		|	Файлы.Ссылка
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО (Файлы.ТекущаяВерсия = ЭП.Объект)
		|ГДЕ
		|	ЭП.Объект.ПодписанЭП
		|	И Файлы.ВладелецФайла В(&МассивОбъектов)
		|ИТОГИ ПО
		|	Документ,
		|	ОбъектЭП;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаЭП = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("СоставКомплекта") И ПараметрыПечати.СоставКомплекта Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиДокументов.ТипСвязи.Представление КАК ТипСвязи,
		|	СвязиДокументов.Документ КАК Документ,
		|	ВЫБОР
		|		КОГДА СвязиДокументов.СвязанныйДокумент ССЫЛКА Справочник.Файлы
		|			ТОГДА СвязиДокументов.СвязанныйДокумент.ПолноеНаименование
		|		ИНАЧЕ СвязиДокументов.СвязанныйДокумент.Заголовок
		|	КОНЕЦ КАК Заголовок,
		|	СвязиДокументов.СвязанныйДокумент.ДатаРегистрации КАК ДатаРегистрации,
		|	СвязиДокументов.СвязанныйДокумент.РегистрационныйНомер КАК РегистрационныйНомер,
		|	СвязиДокументов.СвязанныйДокумент,
		|	СвязиДокументов.Комментарий
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ В(&МассивОбъектов)
		|	И СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.Содержит)
		|ИТОГИ ПО
		|	Документ;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаСоставКомплекта = Индекс;
	КонецЕсли;	
	
	Если ПараметрыПечати.Свойство("СвязанныеДокументы") И ПараметрыПечати.СвязанныеДокументы Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиДокументов.ТипСвязи.Представление КАК ТипСвязи,
		|	СвязиДокументов.Документ КАК Документ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СвязиДокументов.СвязаннаяСтрока, """") <> """"
		|			ТОГДА СвязиДокументов.СвязаннаяСтрока
		|		ИНАЧЕ СвязиДокументов.СвязанныйДокумент
		|	КОНЕЦ КАК Заголовок,
		|	ВЫБОР
		|		КОГДА СвязиДокументов.СвязанныйДокумент <> НЕОПРЕДЕЛЕНО
		|			ТОГДА СвязиДокументов.СвязанныйДокумент
		|		ИНАЧЕ СвязиДокументов.СвязаннаяСтрока
		|	КОНЕЦ КАК СвязанныйДокумент,
		|	СвязиДокументов.Комментарий
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ В(&МассивОбъектов)
		|	И СвязиДокументов.ТипСвязи <> ЗНАЧЕНИЕ(Справочник.ТипыСвязей.Содержит)
		|ИТОГИ ПО
		|	Документ,
		|	ТипСвязи;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаСвязи = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ЖурналПередачи") И ПараметрыПечати.ЖурналПередачи Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналПередачиДокументов.Документ КАК Ссылка,
		|	ЖурналПередачиДокументов.Период,
		|	ЖурналПередачиДокументов.НомерЭкземпляра,
		|	ЖурналПередачиДокументов.ТипЭкземпляра,
		|	ЖурналПередачиДокументов.Комментарий,
		|	ЖурналПередачиДокументов.Пользователь.Представление КАК Пользователь
		|ИЗ
		|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
		|ГДЕ
		|	(НЕ ЖурналПередачиДокументов.Возвращен)
		|	И ЖурналПередачиДокументов.Документ В(&МассивОбъектов);";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаЖурналПередачи = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Резолюции") И ПараметрыПечати.Резолюции Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Резолюции.Документ,
		|	Резолюции.АвторРезолюции,
		|	Резолюции.ДатаРезолюции,
		|	Резолюции.ТекстРезолюции,
		|	Резолюции.Подписана,
		|	ЭП.ДатаПодписи КАК ДатаПодписания
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|	ПО ЭП.Объект = Резолюции.Ссылка
		|ГДЕ
		|	Резолюции.Документ В(&МассивОбъектов)
		|	И НЕ Резолюции.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	Резолюции.ДатаРезолюции УБЫВ;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаРезолюции = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Согласование") И ПараметрыПечати.Согласование Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РезультатыСогласования.ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
		|	РезультатыСогласования.ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
		|	РезультатыСогласования.ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
		|	РезультатыСогласования.ЗадачаИсполнителя.Исполнитель.Представление КАК Исполнитель,
		|	РезультатыСогласования.ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
		|	РезультатыСогласования.РезультатСогласования КАК РезультатСогласования,
		|	РезультатыСогласования.Ссылка КАК БизнесПроцесс
		|ИЗ
		|	БизнесПроцесс.Согласование.РезультатыСогласования КАК РезультатыСогласования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО РезультатыСогласования.ЗадачаИсполнителя = ЗадачаИсполнителяПредметы.Ссылка
		|			И (ЗадачаИсполнителяПредметы.Предмет В (&МассивОбъектов))
		|ГДЕ
		|	РезультатыСогласования.НомерИтерации = РезультатыСогласования.Ссылка.НомерИтерации
		|	И РезультатыСогласования.ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаСогласовать
		|	И НЕ РезультатыСогласования.Ссылка.ПометкаУдаления
		|	И РезультатыСогласования.Ссылка.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|ИТОГИ ПО
		|	Предмет,
		|	БизнесПроцесс;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.УстановитьПараметр("ТочкаМаршрутаСогласовать", 
			БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать);
		ИндексВыборкаСогласование = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Утверждение") И ПараметрыПечати.Утверждение Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РезультатыУтверждения.ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
		|	РезультатыУтверждения.ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
		|	РезультатыУтверждения.ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
		|	РезультатыУтверждения.ЗадачаИсполнителя.Исполнитель.Представление КАК Исполнитель,
		|	РезультатыУтверждения.ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
		|	РезультатыУтверждения.РезультатУтверждения КАК РезультатУтверждения,
		|	РезультатыУтверждения.Ссылка КАК БизнесПроцесс
		|ИЗ
		|	БизнесПроцесс.Утверждение.РезультатыУтверждения КАК РезультатыУтверждения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО РезультатыУтверждения.ЗадачаИсполнителя = ЗадачаИсполнителяПредметы.Ссылка
		|			И (ЗадачаИсполнителяПредметы.Предмет В (&МассивОбъектов))
		|ГДЕ
		|	РезультатыУтверждения.НомерИтерации = РезультатыУтверждения.Ссылка.НомерИтерации
		|	И РезультатыУтверждения.ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаУтвердить
		|	И НЕ РезультатыУтверждения.Ссылка.ПометкаУдаления
		|	И РезультатыУтверждения.Ссылка.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|ИТОГИ ПО
		|	Предмет,
		|	БизнесПроцесс;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.УстановитьПараметр("ТочкаМаршрутаУтвердить",
			БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить);
		ИндексВыборкаУтверждение = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Рассмотрение") И ПараметрыПечати.Рассмотрение Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.РезультатВыполнения,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.Исполнитель.Представление КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителяПредметы.Предмет,
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|			И (ЗадачаИсполнителяПредметы.Предмет В (&МассивОбъектов))
		|ГДЕ
		|	ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаРассмотреть
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И ЗадачаИсполнителя.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван);";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.УстановитьПараметр("ТочкаМаршрутаРассмотреть",
			БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
		ИндексВыборкаРассмотрение = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Исполнение") И ПараметрыПечати.Исполнение Тогда
	    Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
		|	РезультатыИсполнения.ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	РезультатыИсполнения.ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
		|	РезультатыИсполнения.ЗадачаИсполнителя.Исполнитель.Представление КАК Исполнитель,
		|	РезультатыИсполнения.ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
		|	РезультатыИсполнения.ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
		|	РезультатыИсполнения.ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
		|	РезультатыИсполнения.ЗадачаИсполнителя.Выполнена КАК Выполнена,
		|	РезультатыПроверки.ОтправленоНаДоработку КАК ОтправленоНаДоработку
		|ИЗ
		|	БизнесПроцесс.Исполнение.РезультатыИсполнения КАК РезультатыИсполнения
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение.РезультатыПроверки КАК РезультатыПроверки
		|		ПО РезультатыИсполнения.ЗадачаИсполнителя = РезультатыПроверки.ЗадачаИсполнителя
		|			И РезультатыИсполнения.НомерИтерации = РезультатыПроверки.НомерИтерации
		|			И РезультатыИсполнения.Ссылка = РезультатыПроверки.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО РезультатыИсполнения.ЗадачаИсполнителя = ЗадачаИсполнителяПредметы.Ссылка
		|			И (ЗадачаИсполнителяПредметы.Предмет В (&МассивОбъектов))
		|ГДЕ
		|	РезультатыИсполнения.НомерИтерации В
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(МаксРезультатыИсполнения.НомерИтерации) КАК МаксНомерИтерации
		|			ИЗ
		|				БизнесПроцесс.Исполнение.РезультатыИсполнения КАК МаксРезультатыИсполнения
		|			ГДЕ
		|				МаксРезультатыИсполнения.Ссылка = РезультатыИсполнения.Ссылка
		|			СГРУППИРОВАТЬ ПО
		|						МаксРезультатыИсполнения.ЗадачаИсполнителя)
		|	И НЕ РезультатыИсполнения.Ссылка.ПометкаУдаления
		|	И РезультатыИсполнения.Ссылка.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|ИТОГИ ПО
		|	Предмет,
		|	БизнесПроцесс;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаИсполнение = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Ознакомление") И ПараметрыПечати.Ознакомление Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
		|	ЗадачаИсполнителя.Исполнитель.Представление КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.РезультатВыполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|			И (ЗадачаИсполнителяПредметы.Предмет В (&МассивОбъектов))
		|ГДЕ
		|	ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаОзнакомиться
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И ЗадачаИсполнителя.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|ИТОГИ ПО
		|	Предмет,
		|	БизнесПроцесс;";
		Запрос.УстановитьПараметр("ТочкаМаршрутаОзнакомиться",
			БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться);
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаОзнакомление = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Поручения") И ПараметрыПечати.Поручения Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
		|	ЗадачаИсполнителя.Исполнитель.Представление КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.РезультатВыполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|			И (ЗадачаИсполнителяПредметы.Предмет В (&МассивОбъектов))
		|ГДЕ
		|	ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаВыполнить
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И ЗадачаИсполнителя.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|ИТОГИ ПО
		|	Предмет,
		|	БизнесПроцесс;";
		Запрос.УстановитьПараметр("ТочкаМаршрутаВыполнить",
			БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить);
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаПоручения = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Задачи") И ПараметрыПечати.Задачи Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
		|	ЗадачаИсполнителя.Исполнитель.Представление КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.РезультатВыполнения,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.Дата КАК Дата,
		|	ЗадачаИсполнителя.Автор.Представление КАК Автор
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|			И (ЗадачаИсполнителяПредметы.Предмет В (&МассивОбъектов))
		|ГДЕ
		|	НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И ЗадачаИсполнителя.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|ИТОГИ ПО
		|	Предмет;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаЗадачи = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Этапы") И ПараметрыПечати.Этапы Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВнутренниеДокументы.Ссылка КАК Документ,
		|	НастройкиЭтаповОбработкиДокументов.Порядок,
		|	НастройкиЭтаповОбработкиДокументов.Этап,
		|	ЕСТЬNULL(ЭтапыОбработкиДокументов.Пройден, ЛОЖЬ) КАК Пройден,
		|	ЭтапыОбработкиДокументов.ДатаПрохождения КАК ДатаПрохождения,
		|	ЭтапыОбработкиДокументов.Срок КАК Срок,
		|	ЭтапыОбработкиДокументов.Комментарий КАК Комментарий
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЭтаповОбработкиДокументов КАК НастройкиЭтаповОбработкиДокументов
		|		ПО ВнутренниеДокументы.ВидДокумента = НастройкиЭтаповОбработкиДокументов.ВидДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтапыОбработкиДокументов КАК ЭтапыОбработкиДокументов
		|		ПО (НастройкиЭтаповОбработкиДокументов.Этап = ЭтапыОбработкиДокументов.Этап)
		|			И ВнутренниеДокументы.Ссылка = ЭтапыОбработкиДокументов.Документ
		|ГДЕ
		|	ВнутренниеДокументы.Ссылка В(&МассивОбъектов)
		|	И НЕ НастройкиЭтаповОбработкиДокументов.Этап.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НастройкиЭтаповОбработкиДокументов.Порядок
		|ИТОГИ ПО
		|	Документ;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаЭтапы = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ВестиУчетТоваровИУслуг") И ПараметрыПечати.ВестиУчетТоваровИУслуг Тогда
		Индекс = Индекс + 1;
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВнутреннийДокументТовары.Ссылка,
		|	ВЫБОР
		|		КОГДА ВнутреннийДокументТовары.Ссылка.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ВнутреннийДокументТовары.Ссылка.ДатаРегистрации
		|		ИНАЧЕ ВнутреннийДокументТовары.Ссылка.ДатаСоздания
		|	КОНЕЦ КАК ДатаСортировки,
		|	ВнутреннийДокументТовары.Номер КАК Номер,
		|	ВнутреннийДокументТовары.Номенклатура,
		|	ВнутреннийДокументТовары.Количество,
		|	ВнутреннийДокументТовары.ЕдиницаИзмерения КАК Единица,
		|	ВнутреннийДокументТовары.Цена,
		|	ВнутреннийДокументТовары.СтавкаНДС,
		|	ВнутреннийДокументТовары.СуммаНДС,
		|	ВнутреннийДокументТовары.Сумма,
		|	ВнутреннийДокументТовары.Ссылка.Организация КАК Организация
		|ИЗ
		|	Справочник.ВнутренниеДокументы.Товары КАК ВнутреннийДокументТовары
		|ГДЕ
		|	ВнутреннийДокументТовары.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСортировки,
		|	Номер;";
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаТовары = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Стороны") И ПараметрыПечати.Стороны Тогда
		Индекс = Индекс + 1;
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Стороны.Ссылка,
		|	Стороны.Сторона,
		|	Стороны.КонтактноеЛицо,
		|	Стороны.Подписал,
		|	Стороны.Наименование,
		|	Стороны.Подписан,
		|	Стороны.ДатаПодписи
		|ИЗ
		|	Справочник.ВнутренниеДокументы.Стороны КАК Стороны
		|ГДЕ
		|	Стороны.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаСторон = Индекс;
	КонецЕсли;	
	
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ИспользоватьГрифыДоступа = ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа");
	ИспользоватьВопросыДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности");
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	ИспользоватьСостоянияДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов");
	ИспользоватьБизнесПроцессыИЗадачи = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	ИспользоватьРезолюцииВДокументах = ПолучитьФункциональнуюОпцию("ИспользоватьРезолюцииВДокументах");
	ИспользоватьСвязиДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьСвязиДокументов");
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	ВыборкаЗаголовок = Результат[ИндексВыборкаЗаголовок].Выбрать();
	
	ПервыйДокумент = Истина;
	Пока ВыборкаЗаголовок.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ВывестиПодвалРеквизитов = Ложь;
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаЗаголовок.Ссылка, "ВидДокумента");
		
		// Реквизиты карточки
		Если ПараметрыПечати.Свойство("РеквизитыКарточки") И ПараметрыПечати.РеквизитыКарточки Тогда 
			
			ВыборкаРеквизиты = Результат[ИндексВыборкаРеквизиты].Выбрать();
			Если ВыборкаРеквизиты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда

				ОбластьРеквизитыШапка.Параметры.Заполнить(ВыборкаРеквизиты);
				
				СоставСтрока = ?(ВыборкаРеквизиты.КоличествоЛистов > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'листов %1,'; en = 'sheets %1,'") + " ", ВыборкаРеквизиты.КоличествоЛистов),"");
				СоставСтрока = СоставСтрока+?(ВыборкаРеквизиты.КоличествоПриложений > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'приложений %1,'; en = 'annexes %1,'") + " ", ВыборкаРеквизиты.КоличествоПриложений),"");
				СоставСтрока = СоставСтрока+?(ВыборкаРеквизиты.КоличествоЭкземпляров > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'экземпляров %1,'; en = 'instances %1,'") + " ", ВыборкаРеквизиты.КоличествоЭкземпляров),"");
				СоставСтрока = СоставСтрока+?(ВыборкаРеквизиты.ЛистовВПриложениях > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'листов в приложениях %1,'; en = 'sheets in annexes %1,'") + " ", ВыборкаРеквизиты.ЛистовВПриложениях),"");
				СоставСтрока = ВРег(Лев(СоставСтрока,1))+Прав(СоставСтрока, СтрДлина(СоставСтрока) - 1);
				Если Прав(СоставСтрока, 2) = ", " Тогда
					СоставСтрока = Лев(СоставСтрока, СтрДлина(СоставСтрока) - 2);
				КонецЕсли;

				ОбластьРеквизитыШапка.Параметры.Состав = СоставСтрока;
				ТабличныйДокумент.Вывести(ОбластьРеквизитыШапка);
				
				// Прочие реквизиты
				Если ВыборкаРеквизиты.УчитыватьСуммуДокумента 
					Или ВыборкаРеквизиты.УчитыватьСрокДействия
					Или ВыборкаРеквизиты.ВестиУчетПоКонтрагентам
					Или ВыборкаРеквизиты.ВестиУчетПоАдресатам
					Или ИспользоватьГрифыДоступа 
					Или (ИспользоватьУчетПоОрганизациям И ВыборкаРеквизиты.ВестиУчетПоОрганизациям)
					Или ИспользоватьВопросыДеятельности 
					Или ИспользоватьСостоянияДокументов
					Или ЗначениеЗаполнено(ВыборкаРеквизиты.Ответственный) Тогда 
					
					ТабличныйДокумент.Вывести(ОбластьПрочиеШапка);
					
					Если ВыборкаРеквизиты.ВестиУчетПоАдресатам Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Адресат'; en = 'Addressee'");
						ОбластьПрочиеСтрока.Параметры.Значение = Строка(ВыборкаРеквизиты.Адресат);
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ИспользоватьГрифыДоступа Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Гриф доступа'; en = 'Security level'");
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.ГрифДоступа;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ИспользоватьУчетПоОрганизациям И ВыборкаРеквизиты.ВестиУчетПоОрганизациям Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Организация'; en = 'Company'");
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.Организация;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ИспользоватьВопросыДеятельности Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Вопрос деятельности'; en = 'Activity type'");
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.ВопросДеятельности;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ВыборкаРеквизиты.ВестиУчетПоКонтрагентам Тогда 
						Если ВыборкаРеквизиты.КоличествоКонтрагентов > 1 Тогда 
							ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Контрагенты'; en = 'Counterparties'");
						Иначе 
							ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Контрагент'; en = 'Counterparty'");
						КонецЕсли;
						
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.Контрагенты;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ИспользоватьСостоянияДокументов Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Состояние'; en = 'State'");
						ОбластьПрочиеСтрока.Параметры.Значение = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(ВыборкаРеквизиты.Ссылка);
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);	
					КонецЕсли;
					
					Если ВыборкаРеквизиты.УчитыватьСуммуДокумента Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Сумма'; en = 'Amount'");
						ОбластьПрочиеСтрока.Параметры.Значение = Строка(ВыборкаРеквизиты.Сумма) + " " + Строка(ВыборкаРеквизиты.Валюта);
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
						
						Если Делопроизводство.УчитыватьНДС(ВыборкаРеквизиты.ОрганизацияСсылка) Тогда 
							ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Сумма НДС'; en = 'VAT amount'");
							ОбластьПрочиеСтрока.Параметры.Значение = Строка(ВыборкаРеквизиты.СуммаНДС) + " " + Строка(ВыборкаРеквизиты.Валюта);
							ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
						КонецЕсли;
						
						Если ВыборкаРеквизиты.ВестиУчетПоСтатьямДДС Тогда
							
							СтатьиДДС = Новый ТаблицаЗначений;
							СтатьиДДС.Колонки.Добавить("СтатьяДвиженияДенежныхСредств");
							СтатьиДДС.Колонки.Добавить("Сумма");
							СтатьиДДС.Колонки.Добавить("СуммаНДС");
							РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
								ВыборкаРеквизиты.Ссылка, СтатьиДДС);
								
							Если СтатьиДДС.Количество() > 1 Тогда
								ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Статьи ДДС'; en = 'Cash flow items'");
							Иначе
								ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Статья ДДС'; en = 'Cash flow item'");
							КонецЕсли;
							
							Для Каждого СтрокаСтатьи из СтатьиДДС Цикл
								ОбластьПрочиеСтрока.Параметры.Значение = Строка(СтрокаСтатьи.СтатьяДвиженияДенежныхСредств);
								ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
								ОбластьПрочиеСтрока.Параметры.Реквизит = "";
							КонецЦикла;
							
						КонецЕсли;
					КонецЕсли;
					
					Если ВыборкаРеквизиты.УчитыватьСрокДействия И ВидДокумента.УчитыватьСрокДействия Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Срок действия'; en = 'Period of validity'");
						ОбластьПрочиеСтрока.Параметры.Значение = 
							Формат(ВыборкаРеквизиты.ДатаНачалаДействия, "ДЛФ=D") 
							+ " - " 
							+ Формат(ВыборкаРеквизиты.ДатаОкончанияДействия, "ДЛФ=D");
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаРеквизиты.Ответственный) Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Ответственный'; en = 'Responsible'");
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.Ответственный;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					ВывестиПодвалРеквизитов = Истина;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		// Дополнительные реквизиты
		Если ИспользоватьДополнительныеРеквизитыИСведения 
			И ПараметрыПечати.Свойство("ДопРеквизиты") 
			И ПараметрыПечати.ДопРеквизиты Тогда 
			
			ВыборкаДопРеквизиты = Результат[ИндексВыборкаДопРеквизиты].Выбрать();
			Если ВыборкаДопРеквизиты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда
				ТабличныйДокумент.Вывести(ОбластьДопРеквизитыШапка);
				
				ВыборкаДопРеквизиты.Сбросить();
				Пока ВыборкаДопРеквизиты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
					ОбластьДопРеквизитыСтрока.Параметры.Свойство = ВыборкаДопРеквизиты.Свойство;
					
					Если ЗначениеЗаполнено(ВыборкаДопРеквизиты.ТекстоваяСтрока) Тогда 
						ЗначениеСвойства = ВыборкаДопРеквизиты.ТекстоваяСтрока;
					Иначе
						ЗначениеСвойства = ВыборкаДопРеквизиты.Значение;
					КонецЕсли;	
					
					Если ЗначениеЗаполнено(ВыборкаДопРеквизиты.ФорматСвойства) Тогда
						ЗначениеСвойства = Формат(ЗначениеСвойства, ВыборкаДопРеквизиты.ФорматСвойства);
					КонецЕсли;
					
					ОбластьДопРеквизитыСтрока.Параметры.Значение = ЗначениеСвойства;
					
					ТабличныйДокумент.Вывести(ОбластьДопРеквизитыСтрока);
				КонецЦикла;	
				ВыборкаДопРеквизиты.Сбросить();
				
				ВывестиПодвалРеквизитов = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ВывестиПодвалРеквизитов Тогда 
			ТабличныйДокумент.Вывести(ОбластьПрочиеПодвал);
		КонецЕсли;
		
		// История сроков действия документа
		Если ПараметрыПечати.Свойство("ИсторияСрокаДействия") 
			И ПараметрыПечати.ИсторияСрокаДействия 
			И ВидДокумента.УчитыватьСрокДействия Тогда
			ВыборкаИсторияСроковДействия = Результат[ИндексВыборкаИсторияСроковДействия].Выбрать();
			
			ТабличныйДокумент.Вывести(ОбластьИсторияСроковДействияШапка);
			ВыборкаИсторияСроковДействия.Сбросить();
			Пока ВыборкаИсторияСроковДействия.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Цикл
				ОбластьИсторияСроковДействияСтрока.Параметры.Заполнить(ВыборкаИсторияСроковДействия);
				ТабличныйДокумент.Вывести(ОбластьИсторияСроковДействияСтрока);
			КонецЦикла;	
			ВыборкаИсторияСроковДействия.Сбросить();
		КонецЕсли;
		
		// Товары и услуги
		Если ПараметрыПечати.Свойство("ВестиУчетТоваровИУслуг") И ПараметрыПечати.ВестиУчетТоваровИУслуг Тогда 
			
			ВыборкаТовары = Результат[ИндексВыборкаТовары].Выбрать();
			Если ВыборкаТовары.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда
				
				ТабличныйДокумент.Вывести(ОбластьТоварыШапка);
				ИтогСуммы = 0; ИтогСуммыНДС = 0; Организация = Справочники.Организации.ПустаяСсылка();
				
				ВыборкаТовары.Сбросить();
				Пока ВыборкаТовары.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл 
					ОбластьТоварыСтрока.Параметры.Заполнить(ВыборкаТовары);
					ТабличныйДокумент.Вывести(ОбластьТоварыСтрока);
					ИтогСуммы = ИтогСуммы + ВыборкаТовары.Сумма;
					ИтогСуммыНДС = ИтогСуммыНДС + ВыборкаТовары.СуммаНДС;
					Организация = ВыборкаТовары.Организация;
				КонецЦикла;
				
				Если ИтогСуммы > 0 Тогда 
					ОбластьТоварыИтог.Параметры.Заголовок = НСтр("ru = 'Итого:'; en = 'Total:'");
					ОбластьТоварыИтог.Параметры.Итог = ИтогСуммы;
					ТабличныйДокумент.Вывести(ОбластьТоварыИтог);
				КонецЕсли;
				
				Если Делопроизводство.УчитыватьНДС(Организация) И ИтогСуммыНДС > 0 Тогда 
					ОбластьТоварыИтог.Параметры.Заголовок = НСтр("ru = 'В том числе НДС:'; en = 'Including VAT:'");
					ОбластьТоварыИтог.Параметры.Итог = ИтогСуммыНДС;
					ТабличныйДокумент.Вывести(ОбластьТоварыИтог);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Стороны
		Если ПараметрыПечати.Свойство("Стороны") И ПараметрыПечати.Стороны Тогда 
			
			ВыборкаСторон = Результат[ИндексВыборкаСторон].Выбрать();
			Если ВыборкаСторон.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда
				
				ТабличныйДокумент.Вывести(ОбластьСтороныШапка);
				
				ВыборкаСторон.Сбросить();
				Пока ВыборкаСторон.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл 
					ОбластьСтороныСтрока.Параметры.Заполнить(ВыборкаСторон);
					ТабличныйДокумент.Вывести(ОбластьСтороныСтрока);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		// Приложенные файлы
		Если ПараметрыПечати.Свойство("ПриложенныеФайлы") И ПараметрыПечати.ПриложенныеФайлы Тогда 
			
			ВыборкаФайлы = Результат[ИндексВыборкаФайлы].Выбрать(); 
			Если ВыборкаФайлы.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "ВладелецФайла") Тогда
				ТабличныйДокумент.Вывести(ОбластьФайлыШапка);
				
				ВыборкаФайлы.Сбросить();
				Пока ВыборкаФайлы.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "ВладелецФайла") Цикл
					ОбластьФайлыСтрока.Параметры.Заполнить(ВыборкаФайлы);
					ТабличныйДокумент.Вывести(ОбластьФайлыСтрока);
				КонецЦикла;	
				ВыборкаФайлы.Сбросить();
			КонецЕсли;
			
		КонецЕсли;
		
		// Версии файлов
		Если ПараметрыПечати.Свойство("ВерсииФайлов") И ПараметрыПечати.ВерсииФайлов Тогда 
			
			ВыборкаВерсии = Результат[ИндексВыборкаВерсии].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаВерсии.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "ВладелецФайла") Тогда
				ТабличныйДокумент.Вывести(ОбластьВерсииШапка);
				
				ВыборкаВерсии.Сбросить();
				Пока ВыборкаВерсии.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "ВладелецФайла") Цикл
					
					ВыборкаГруппировкаФайлы = ВыборкаВерсии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаГруппировкаФайлы.Следующий() Цикл
						ОбластьВерсииСтрокаФайл.Параметры.Заполнить(ВыборкаГруппировкаФайлы);
						ТабличныйДокумент.Вывести(ОбластьВерсииСтрокаФайл);
						
						ВыборкаДетали = ВыборкаГруппировкаФайлы.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							ОбластьВерсииСтрока.Параметры.Заполнить(ВыборкаДетали);
							ТабличныйДокумент.Вывести(ОбластьВерсииСтрока);
						КонецЦикла;	
					КонецЦикла;	
					
				КонецЦикла;	
				ВыборкаВерсии.Сбросить();
				
			КонецЕсли;
		КонецЕсли;
		
		
		// ЭП
		Если ПараметрыПечати.Свойство("ЭП") 
			И ПараметрыПечати.ЭП 
			И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда 
			
			ВыборкаЭП = Результат[ИндексВыборкаЭП].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаЭП.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
				ТабличныйДокумент.Вывести(ОбластьЭПШапка);
				
				ВыборкаЭП.Сбросить();
				Если ВыборкаЭП.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
					
					ВыборкаОбъектЭП = ВыборкаЭП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаОбъектЭП.Следующий() Цикл
						ОбластьЭПОбъект.Параметры.ОбъектЭП = Строка(ТипЗнч(ВыборкаОбъектЭП.ОбъектЭП))
							+ " """ + Строка(ВыборкаОбъектЭП.ОбъектЭП) + """";
						ТабличныйДокумент.Вывести(ОбластьЭПОбъект);
						
						ВыборкаДетали = ВыборкаОбъектЭП.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							ОбластьЭПСтрока.Параметры.Заполнить(ВыборкаДетали);
							ТабличныйДокумент.Вывести(ОбластьЭПСтрока);
						КонецЦикла;	
					КонецЦикла;	
				КонецЕсли;
				ВыборкаЭП.Сбросить();
				
			КонецЕсли;
		КонецЕсли;
		
		// Состав комплекта
		Если ПараметрыПечати.Свойство("СоставКомплекта") 
			И ПараметрыПечати.СоставКомплекта Тогда 
			
			ВыборкаСоставКомплекта = Результат[ИндексВыборкаСоставКомплекта].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаСоставКомплекта.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
				ТабличныйДокумент.Вывести(ОбластьСоставКомплектаШапка);
				ВыборкаДетали = ВыборкаСоставКомплекта.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					ОбластьСоставКомплектаСтрока.Параметры.Заполнить(ВыборкаДетали);
					ТабличныйДокумент.Вывести(ОбластьСоставКомплектаСтрока);
				КонецЦикла;	
				ВыборкаСоставКомплекта.Сбросить();
			КонецЕсли;
			
		КонецЕсли;	
		
		// Связанные документы
		Если ИспользоватьСвязиДокументов 
			И ПараметрыПечати.Свойство("СвязанныеДокументы")
			И ПараметрыПечати.СвязанныеДокументы  Тогда 
			
			ВыборкаСвязи = Результат[ИндексВыборкаСвязи].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаСвязи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
				ТабличныйДокумент.Вывести(ОбластьСвязанныеДокументыШапка);
				
				ВыборкаСвязи.Сбросить();
				Если ВыборкаСвязи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
					
					ВыборкаТипСвязи = ВыборкаСвязи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаТипСвязи.Следующий() Цикл
						ОбластьСвязанныеДокументыТипСвязи.Параметры.Заполнить(ВыборкаТипСвязи);
						ТабличныйДокумент.Вывести(ОбластьСвязанныеДокументыТипСвязи);
						
						ВыборкаДетали = ВыборкаТипСвязи.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							Если ТипЗнч(ВыборкаДетали.СвязанныйДокумент) = Тип("Строка") Тогда 
								Тип = НСтр("ru = 'Внешняя ссылка'; en = 'External link'");
							Иначе
								Тип = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
									ВыборкаДетали.СвязанныйДокумент);
							КонецЕсли;
							
							ОбластьСвязанныеДокументыСтрока.Параметры.Заполнить(ВыборкаДетали);
							ОбластьСвязанныеДокументыСтрока.Параметры.Тип = Тип;
							ТабличныйДокумент.Вывести(ОбластьСвязанныеДокументыСтрока);
						КонецЦикла;	
					КонецЦикла;	
					
				КонецЕсли;
				ВыборкаСвязи.Сбросить();
				
			КонецЕсли;
			
		КонецЕсли;	
		
		// Журнал передачи
		Если ПараметрыПечати.Свойство("ЖурналПередачи") И ПараметрыПечати.ЖурналПередачи Тогда 
			
			ВыборкаЖурналПередачи = Результат[ИндексВыборкаЖурналПередачи].Выбрать();
			Если ВыборкаЖурналПередачи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда
				ТабличныйДокумент.Вывести(ОбластьЖурналПередачиШапка);
				
				ВыборкаЖурналПередачи.Сбросить();
				Пока ВыборкаЖурналПередачи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
					ОбластьЖурналПередачиСтрока.Параметры.Заполнить(ВыборкаЖурналПередачи);
					ТабличныйДокумент.Вывести(ОбластьЖурналПередачиСтрока);
				КонецЦикла;	
				ВыборкаЖурналПередачи.Сбросить();
			КонецЕсли;
			
		КонецЕсли;
		
		// резолюции
		Если ИспользоватьРезолюцииВДокументах
			И ПараметрыПечати.Свойство("Резолюции")
			И ПараметрыПечати.Резолюции Тогда 
			
			ВыборкаРезолюции = Результат[ИндексВыборкаРезолюции].Выбрать();
			Если ВыборкаРезолюции.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
				ТабличныйДокумент.Вывести(ОбластьРезолюцииШапка);
				
				ВыборкаРезолюции.Сбросить();
				Пока ВыборкаРезолюции.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Цикл
					
					ОбластьРезолюцииСтрока.Параметры.АвторРезолюции = ВыборкаРезолюции.АвторРезолюции;
					ОбластьРезолюцииСтрока.Параметры.ДатаРезолюции = ВыборкаРезолюции.ДатаРезолюции;
					Если ПараметрыПечати.Свойство("ЭП")
						И ПараметрыПечати.ЭП И ВыборкаРезолюции.Подписана
						И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда
						ОбластьРезолюцииСтрока.Параметры.ДатаПодписания = ВыборкаРезолюции.ДатаПодписания;
					КонецЕсли;
					ОбластьРезолюцииСтрока.Параметры.Текст = ВыборкаРезолюции.ТекстРезолюции;
					
					ТабличныйДокумент.Вывести(ОбластьРезолюцииСтрока);
				КонецЦикла;	
				ВыборкаРезолюции.Сбросить();
				
			КонецЕсли;
		КонецЕсли;
		
		// Этапы
		Если ПараметрыПечати.Свойство("Этапы")
			И ПараметрыПечати.Этапы
			И ВидДокумента.ИспользоватьЭтапыОбработкиДокумента Тогда 
			
			ВыборкаЭтапы = Результат[ИндексВыборкаЭтапы].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаЭтапы.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
				ТабличныйДокумент.Вывести(ОбластьЭтапыШапка);
				
				ВыборкаДетали = ВыборкаЭтапы.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					ОбластьЭтапыСтрока.Параметры.Заполнить(ВыборкаДетали);
					ТабличныйДокумент.Вывести(ОбластьЭтапыСтрока);
				КонецЦикла;
				ВыборкаЭтапы.Сбросить();
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьБизнесПроцессыИЗадачи Тогда
			// Согласование
			Если ПараметрыПечати.Свойство("Согласование") И ПараметрыПечати.Согласование Тогда 
				
				ВыборкаСогласование = Результат[ИндексВыборкаСогласование].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаСогласование.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Тогда
					ТабличныйДокумент.Вывести(ОбластьСогласованиеШапка);
					
					ВыборкаСогласование.Сбросить();
					Пока ВыборкаСогласование.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Цикл
						ВыборкаСогласованиеГруппа = ВыборкаСогласование.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаСогласованиеГруппа.Следующий() Цикл
							ОбластьСогласованиеГруппа.Параметры.Заполнить(ВыборкаСогласованиеГруппа);
							ТабличныйДокумент.Вывести(ОбластьСогласованиеГруппа);
							
							ВыборкаДетали = ВыборкаСогласованиеГруппа.Выбрать();
							Пока ВыборкаДетали.Следующий() Цикл
								ОбластьСогласованиеСтрока.Параметры.Заполнить(ВыборкаДетали);
								
								Если ЗначениеЗаполнено(ВыборкаДетали.Исполнитель) Тогда
									ОбластьСогласованиеСтрока.Параметры.Исполнитель = ВыборкаДетали.Исполнитель;
								Иначе
									СтрокаИсполнитель = Строка(ВыборкаДетали.РольИсполнителя);
									ОбластьСогласованиеСтрока.Параметры.Исполнитель = СтрокаИсполнитель;
								КонецЕсли;	
								
								ТабличныйДокумент.Вывести(ОбластьСогласованиеСтрока);
							КонецЦикла;	
						КонецЦикла;	
					КонецЦикла;
					ВыборкаСогласование.Сбросить();
					
				КонецЕсли;
			КонецЕсли;
			
			// Утверждение
			Если ПараметрыПечати.Свойство("Утверждение") И ПараметрыПечати.Утверждение Тогда 
				
				ВыборкаУтверждение = Результат[ИндексВыборкаУтверждение].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаУтверждение.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Тогда
					ТабличныйДокумент.Вывести(ОбластьУтверждениеШапка);
					
					ВыборкаУтверждение.Сбросить();
					Пока ВыборкаУтверждение.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Цикл
						ВыборкаУтверждениеГруппа = ВыборкаУтверждение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаУтверждениеГруппа.Следующий() Цикл
							ОбластьУтверждениеГруппа.Параметры.Заполнить(ВыборкаУтверждениеГруппа);
							ТабличныйДокумент.Вывести(ОбластьУтверждениеГруппа);
							
							ВыборкаДетали = ВыборкаУтверждениеГруппа.Выбрать();
							Пока ВыборкаДетали.Следующий() Цикл
								ОбластьУтверждениеСтрока.Параметры.Заполнить(ВыборкаДетали);
								
								Если ЗначениеЗаполнено(ВыборкаДетали.Исполнитель) Тогда
									ОбластьУтверждениеСтрока.Параметры.Исполнитель = ВыборкаДетали.Исполнитель;
								Иначе
									СтрокаИсполнитель = Строка(ВыборкаДетали.РольИсполнителя);
									ОбластьУтверждениеСтрока.Параметры.Исполнитель = СтрокаИсполнитель;
								КонецЕсли;	
								
								ТабличныйДокумент.Вывести(ОбластьУтверждениеСтрока);
							КонецЦикла;	
						КонецЦикла;	
					КонецЦикла;
					ВыборкаУтверждение.Сбросить();
					
				КонецЕсли;
			КонецЕсли;
			
			// Рассмотрение
			Если ПараметрыПечати.Свойство("Рассмотрение") И ПараметрыПечати.Рассмотрение Тогда 
				
				ВыборкаРассмотрение = Результат[ИндексВыборкаРассмотрение].Выбрать();
				Если ВыборкаРассмотрение.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Тогда
					ТабличныйДокумент.Вывести(ОбластьРассмотрениеШапка);
					
					ВыборкаРассмотрение.Сбросить();
					Пока ВыборкаРассмотрение.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Цикл
						
						Если ЗначениеЗаполнено(ВыборкаРассмотрение.Исполнитель) Тогда
							ОбластьРассмотрениеСтрока.Параметры.Исполнитель = ВыборкаРассмотрение.Исполнитель;
						Иначе
							СтрокаИсполнитель = Строка(ВыборкаРассмотрение.РольИсполнителя);
							ОбластьРассмотрениеСтрока.Параметры.Исполнитель = СтрокаИсполнитель;
						КонецЕсли;
						
						ОбластьРассмотрениеСтрока.Параметры.Выполнена = ВыборкаРассмотрение.Выполнена;
						ОбластьРассмотрениеСтрока.Параметры.ДатаИсполнения = ВыборкаРассмотрение.ДатаИсполнения;
						ОбластьРассмотрениеСтрока.Параметры.РезультатВыполнения = ВыборкаРассмотрение.РезультатВыполнения;
						
						ТабличныйДокумент.Вывести(ОбластьРассмотрениеСтрока);
					КонецЦикла;	
					ВыборкаРассмотрение.Сбросить();
					
				КонецЕсли;
			КонецЕсли;
			
			// Исполнение
			Если ПараметрыПечати.Свойство("Исполнение") И ПараметрыПечати.Исполнение Тогда 
				
				ВыборкаИсполнение = Результат[ИндексВыборкаИсполнение].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаИсполнение.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Тогда
					ТабличныйДокумент.Вывести(ОбластьИсполнениеШапка);
					
					ВыборкаИсполнение.Сбросить();
					Пока ВыборкаИсполнение.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Цикл
						ВыборкаИсполнениеГруппа = ВыборкаИсполнение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаИсполнениеГруппа.Следующий() Цикл
							Проверяющий = ВыборкаИсполнениеГруппа.БизнесПроцесс.Проверяющий;
							Контролер = ВыборкаИсполнениеГруппа.БизнесПроцесс.Контролер;
							
							ОбластьИсполнениеГруппа.Параметры.Исполнение = ВыборкаИсполнениеГруппа.БизнесПроцесс;
							ОбластьИсполнениеГруппа.Параметры.Проверяющий = ?(ЗначениеЗаполнено(Проверяющий), Проверяющий, НСтр("ru = 'нет'; en = 'no'"));
							ОбластьИсполнениеГруппа.Параметры.Контролер = ?(ЗначениеЗаполнено(Контролер), Контролер, НСтр("ru = 'нет'; en = 'no'"));
							
							ТабличныйДокумент.Вывести(ОбластьИсполнениеГруппа);
							
							ВыборкаДетали = ВыборкаИсполнениеГруппа.Выбрать();
							Пока ВыборкаДетали.Следующий() Цикл
								
								Если ЗначениеЗаполнено(ВыборкаДетали.Исполнитель) Тогда
									ОбластьИсполнениеСтрока.Параметры.Исполнитель = ВыборкаДетали.Исполнитель;
								Иначе
									СтрокаИсполнитель = Строка(ВыборкаДетали.РольИсполнителя);
									ОбластьИсполнениеСтрока.Параметры.Исполнитель = СтрокаИсполнитель;
								КонецЕсли;
								
								ОбластьИсполнениеСтрока.Параметры.СрокИсполнения = ВыборкаДетали.СрокИсполнения;
								ОбластьИсполнениеСтрока.Параметры.Выполнена = ВыборкаДетали.Выполнена;
								ОбластьИсполнениеСтрока.Параметры.ДатаИсполнения = ВыборкаДетали.ДатаИсполнения;
								ОбластьИсполнениеСтрока.Параметры.РезультатВыполнения = ВыборкаДетали.РезультатВыполнения;
								
								ТабличныйДокумент.Вывести(ОбластьИсполнениеСтрока);
							КонецЦикла;	
						КонецЦикла;	
					КонецЦикла;	
					ВыборкаИсполнение.Сбросить();
					
				КонецЕсли;
			КонецЕсли;
			
			// Ознакомление
			Если ПараметрыПечати.Свойство("Ознакомление") И ПараметрыПечати.Ознакомление Тогда 
				
				ВыборкаОзнакомление = Результат[ИндексВыборкаОзнакомление].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаОзнакомление.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Тогда
					ТабличныйДокумент.Вывести(ОбластьОзнакомлениеШапка);
					
					ВыборкаОзнакомление.Сбросить();
					Пока ВыборкаОзнакомление.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Цикл
						ВыборкаОзнакомлениеГруппа = ВыборкаОзнакомление.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаОзнакомлениеГруппа.Следующий() Цикл
							ОбластьОзнакомлениеГруппа.Параметры.Заполнить(ВыборкаОзнакомлениеГруппа);
							ТабличныйДокумент.Вывести(ОбластьОзнакомлениеГруппа);
							
							ВыборкаДетали = ВыборкаОзнакомлениеГруппа.Выбрать();
							Пока ВыборкаДетали.Следующий() Цикл
								ОбластьОзнакомлениеСтрока.Параметры.Заполнить(ВыборкаДетали);
								
								Если ЗначениеЗаполнено(ВыборкаДетали.Исполнитель) Тогда
									ОбластьОзнакомлениеСтрока.Параметры.Исполнитель = ВыборкаДетали.Исполнитель;
								Иначе
									СтрокаИсполнитель = Строка(ВыборкаДетали.РольИсполнителя);
									ОбластьОзнакомлениеСтрока.Параметры.Исполнитель = СтрокаИсполнитель;
								КонецЕсли;	
								
								ТабличныйДокумент.Вывести(ОбластьОзнакомлениеСтрока);
							КонецЦикла;	
						КонецЦикла;	
					КонецЦикла;
					ВыборкаОзнакомление.Сбросить();
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Поручения
			Если ПараметрыПечати.Свойство("Поручения") И ПараметрыПечати.Поручения Тогда 
				
				ВыборкаПоручения = Результат[ИндексВыборкаПоручения].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаПоручения.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Тогда
					ТабличныйДокумент.Вывести(ОбластьПорученияШапка);
					
					ВыборкаПоручения.Сбросить();
					Пока ВыборкаПоручения.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Цикл
						ВыборкаПорученияГруппа = ВыборкаПоручения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаПорученияГруппа.Следующий() Цикл
							Проверяющий = ВыборкаПорученияГруппа.БизнесПроцесс.Проверяющий;
							Контролер = ВыборкаПорученияГруппа.БизнесПроцесс.Контролер;
							
							ОбластьПорученияГруппа.Параметры.Поручение = ВыборкаПорученияГруппа.БизнесПроцесс;
							ОбластьПорученияГруппа.Параметры.Проверяющий = ?(ЗначениеЗаполнено(Проверяющий), Проверяющий, НСтр("ru = 'нет'; en = 'no'"));
							ОбластьПорученияГруппа.Параметры.Контролер = ?(ЗначениеЗаполнено(Контролер), Контролер, НСтр("ru = 'нет'; en = 'no'"));
							
							ТабличныйДокумент.Вывести(ОбластьПорученияГруппа);
							
							ВыборкаДетали = ВыборкаПорученияГруппа.Выбрать();
							Пока ВыборкаДетали.Следующий() Цикл
								
								Если ЗначениеЗаполнено(ВыборкаДетали.Исполнитель) Тогда
									ОбластьПорученияСтрока.Параметры.Исполнитель = ВыборкаДетали.Исполнитель;
								Иначе
									СтрокаИсполнитель = Строка(ВыборкаДетали.РольИсполнителя);
									ОбластьПорученияСтрока.Параметры.Исполнитель = СтрокаИсполнитель;
								КонецЕсли;
								
								ОбластьПорученияСтрока.Параметры.СрокИсполнения = ВыборкаДетали.СрокИсполнения;
								ОбластьПорученияСтрока.Параметры.Выполнена = ВыборкаДетали.Выполнена;
								ОбластьПорученияСтрока.Параметры.ДатаИсполнения = ВыборкаДетали.ДатаИсполнения;
								ОбластьПорученияСтрока.Параметры.РезультатВыполнения = ВыборкаДетали.РезультатВыполнения;
								
								ТабличныйДокумент.Вывести(ОбластьПорученияСтрока);
							КонецЦикла;	
						КонецЦикла;	
					КонецЦикла;	
					ВыборкаПоручения.Сбросить();
				КонецЕсли;
				
			КонецЕсли;
			
			// Задачи
			Если ПараметрыПечати.Свойство("Задачи") И ПараметрыПечати.Задачи Тогда 
				
				ВыборкаЗадачи = Результат[ИндексВыборкаЗадачи].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаЗадачи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Тогда
					ТабличныйДокумент.Вывести(ОбластьЗадачиШапка);
					
					ВыборкаЗадачи.Сбросить();
					Пока ВыборкаЗадачи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Цикл
						
						ВыборкаДетали = ВыборкаЗадачи.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							
							Если ЗначениеЗаполнено(ВыборкаДетали.Исполнитель) Тогда
								ОбластьЗадачиСтрока.Параметры.Исполнитель = ВыборкаДетали.Исполнитель;
							Иначе
								СтрокаИсполнитель = Строка(ВыборкаДетали.РольИсполнителя);
								ОбластьЗадачиСтрока.Параметры.Исполнитель = СтрокаИсполнитель;
							КонецЕсли;
							
							ОбластьЗадачиСтрока.Параметры.Наименование = ВыборкаДетали.Наименование;
							ОбластьЗадачиСтрока.Параметры.СрокИсполнения = ВыборкаДетали.СрокИсполнения;
							ОбластьЗадачиСтрока.Параметры.Выполнена = ВыборкаДетали.Выполнена;
							ОбластьЗадачиСтрока.Параметры.ДатаИсполнения = ВыборкаДетали.ДатаИсполнения;
							ОбластьЗадачиСтрока.Параметры.Автор = ВыборкаДетали.Автор;
							ОбластьЗадачиСтрока.Параметры.Ссылка = ВыборкаДетали.Ссылка;
							
							ТабличныйДокумент.Вывести(ОбластьЗадачиСтрока);
						КонецЦикла;	
						
					КонецЦикла;	
					ВыборкаЗадачи.Сбросить();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаЗаголовок.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция получает данные для формирования печатной формы "Лист согласования"
//
// Параметры:
//  МассивОбъектов - Массив - Массив ссылок на документы, по которым необходимо получить данные;
//  ОбъектыПечати  - СписокЗначений - список объектов печати;
//
// Возвращаемое значение:
//  ТабличныйДокумент - ТабличныйДокумент - печатная форма
//
Функция ЛистСогласования(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = РаботаСВизамиСогласования.ПечатьЛистаСогласованияИзДокумента(МассивОбъектов, ОбъектыПечати);
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция получает данные для формирования печатной формы "Лист согласования с историей"
//
// Параметры:
//  МассивОбъектов - Массив - Массив ссылок на документы, по которым необходимо получить данные;
//  ОбъектыПечати  - СписокЗначений - список объектов печати;
//
// Возвращаемое значение:
//  ТабличныйДокумент - ТабличныйДокумент - печатная форма
//
Функция ЛистСогласованияСИсторией(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = РаботаСВизамиСогласования.ПечатьЛистаСогласованияИзДокумента(МассивОбъектов, ОбъектыПечати, Истина);
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив имен ключевых реквизитов согласно версии
//
// Параметры:
//	Версия - версия набора ключевых реквизитов. По умолчанию Неопределено - значит последняя.
//
// Возвращаемое значение:
//	Массив
// 
Функция ПолучитьИменаКлючевыхРеквизитов(Версия = Неопределено) Экспорт
	
	МассивИмен = Новый Массив;
	
	// Здесь указываем наборы предыдущих версий
	Если Версия = 1 Тогда
		МассивИмен.Добавить("Заголовок");
		МассивИмен.Добавить("Содержание");
	Иначе
		// Здесь указываем набор последней версии
		Если Версия <> 5 Тогда
			МассивИмен.Добавить("Заголовок");
			МассивИмен.Добавить("Содержание");
		КонецЕсли;
		МассивИмен.Добавить("Организация");
		МассивИмен.Добавить("Контрагент");
		МассивИмен.Добавить("Стороны.Сторона");
		МассивИмен.Добавить("Сумма");
		МассивИмен.Добавить("Валюта");
		МассивИмен.Добавить("Файлы");
		Если Версия = 3 Тогда
			МассивИмен.Добавить("Стороны.Подписал");
			МассивИмен.Добавить("Стороны.ДатаПодписи");
		ИначеЕсли Версия = 4 Или Версия = 5 Тогда
			МассивИмен.Добавить("Стороны.Подписан");
			МассивИмен.Добавить("Стороны.Подписал");
			МассивИмен.Добавить("Стороны.ДатаПодписи");
		КонецЕсли; 
	КонецЕсли;
	
	Возврат МассивИмен;
	
КонецФункции

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	Возврат Истина;
КонецФункции

// Добавляет участников документа в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, Документ) Экспорт
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, 
			"Ссылка, Ответственный, Зарегистрировал, Подготовил, Подписал, Адресат, Создал, ГрифыУтверждения, Стороны");
	Иначе 
		РеквизитыДокумента = Документ;
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыДокумента.Ответственный);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыДокумента.Зарегистрировал);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыДокумента.Подготовил);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыДокумента.Подписал);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыДокумента.Адресат);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыДокумента.Создал);
	
	ПодписантыСторон = РаботаСПодписямиДокументов.ПодписантыСторонДокумента(РеквизитыДокумента.Стороны.Выгрузить());
	Для каждого Подписант Из ПодписантыСторон Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Подписант);
	КонецЦикла;
		
	АвторыУтверждения = РаботаСГрифамиУтверждений.АвторыУтвержденийДокумента(РеквизитыДокумента.ГрифыУтверждения.Выгрузить());
	Для каждого Автор Из АвторыУтверждения Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Автор);
	КонецЦикла;	
	
	ЭП = РаботаСЭП.ПолучитьЭлектронныеПодписи(РеквизитыДокумента.Ссылка);
	Пока ЭП.Следующий() Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, ЭП.УстановившийПодпись);
	КонецЦикла;
	
	Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(РеквизитыДокумента.Ссылка);
	Для Каждого РезолюцииСтрока Из Резолюции Цикл
		Если ТипЗнч(РезолюцииСтрока.АвторРезолюции) = Тип("СправочникСсылка.Пользователи") Тогда
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РезолюцииСтрока.АвторРезолюции);
		КонецЕсли;
		Если ТипЗнч(РезолюцииСтрока.ВнесРезолюцию) = Тип("СправочникСсылка.Пользователи") Тогда
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РезолюцииСтрока.ВнесРезолюцию);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, РеквизитыДокумента.Ссылка);
	
КонецПроцедуры

Функция ИмеетСрокДействия(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВнутренниеДокументы.ВидДокумента.УчитыватьСрокДействия КАК ИмеетСрокДействия
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить()[0].ИмеетСрокДействия;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат БизнесСобытияВызовСервера.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоДокументу(ШаблонСсылка, 
		ПредметСсылка, Подписчик, ВидСобытия, Условие);
	
КонецФункции

// Возвращает Имя предмета процесса по умолчанию
//
Функция ПолучитьИмяПредметаПоУмолчанию(Ссылка) Экспорт
	
	ИмяПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидДокумента");
	
	Если Не ЗначениеЗаполнено(ИмяПредмета) Тогда
		ИмяПредмета =  НСтр("ru='Внутренний документ'; en = 'Internal document'")
	КонецЕсли;
	
	Возврат Строка(ИмяПредмета);
	
КонецФункции

// ВерсионированиеОбъектов
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры


#КонецОбласти

#КонецЕсли
