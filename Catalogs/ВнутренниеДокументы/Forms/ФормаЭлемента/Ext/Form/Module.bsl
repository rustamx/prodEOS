// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Кэшируемые значения
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ЭтоПолноправныйПользователь = ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ();
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ИмяФормы + "/ТекущиеДанные", "");
	ИспользоватьВизыСогласования = ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования");
	ИспользоватьРезолюцииВДокументах = ПолучитьФункциональнуюОпцию("ИспользоватьРезолюцииВДокументах");
	ИспользоватьШК = ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	ОграничиватьДоступностьПолейПоСостоянию = 
		ПолучитьФункциональнуюОпцию("ОграничиватьДоступностьПолейПоСостоянию") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов")
		И Не Пользователи.ЭтоПолноправныйПользователь();
	ВестиУчетСканКопийОригиналовДокументов = 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
		
	// Категории данных
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных = 
		ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	
	НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	НачальныйЧисловойНомер = Объект.ЧисловойНомер;
	
	ЭтоДелопроизводитель = РольДоступна("РегистрацияВнутреннихДокументов") Или РольДоступна("ПолныеПрава");
	РольПолныеПрава = РольДоступна("ПолныеПрава");
	
	Если ТипЗнч(Параметры.Основание) = Тип("Структура")
		И ТипЗнч(Параметры.Основание.Основание) <> Тип("Массив")Тогда		
		Основание = Параметры.Основание.Основание;
	ИначеЕсли ТипЗнч(Параметры.Основание) <> Тип("Массив") Тогда
		Основание = Параметры.Основание;
	КонецЕсли;

	Если ЗначениеЗаполнено(Основание) И
		ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		ОснованиеВидДокументаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидДокумента.Родитель");
	КонецЕсли;
	
	// Ввод нового
	Если Объект.Ссылка.Пустая() Тогда 
		СостояниеТекст = Строка(Перечисления.СостоянияДокументов.Проект);
		
		НеДействуетВСоответствии = Справочники.ВнутренниеДокументы.ПустаяСсылка();
		НачальныйНеДействуетВСоответствии = НеДействуетВСоответствии;
		
		ПерепискаПоПредмету = Неопределено;
		НачальныйПерепискаПоПредмету = ПерепискаПоПредмету;
		
		Элементы.Обзор.Видимость = Ложь;
		Элементы.СтраницаФайлы.Видимость = Истина;
		
	Иначе
		СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
		
		ПерепискаПоПредмету = Неопределено;
		НачальныйПерепискаПоПредмету = ПерепискаПоПредмету;
		
		ПрочитатьСвязи();
		
		ЭтаФорма.Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
		ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(Объект.Ссылка);
		
		НастройкаИспользоватьОбзорДокументов = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьОбзорДокументов");
		Если НастройкаИспользоватьОбзорДокументов = Неопределено Тогда 
			ИспользоватьОбзорДокументов = Истина;
		Иначе
			ИспользоватьОбзорДокументов = НастройкаИспользоватьОбзорДокументов;
		КонецЕсли;	
	
		Если ИспользоватьОбзорДокументов Тогда 
			Элементы.Обзор.Видимость = Истина;
			Элементы.СтраницаФайлы.Видимость = Ложь;
		Иначе	
			Элементы.Обзор.Видимость = Ложь;
			Элементы.СтраницаФайлы.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Файлы
	ЗаполнитьСписокФайлов(Истина);
	
	ПоказыватьКолонкуРазмер = РаботаСФайламиВызовСервера.ПолучитьПоказыватьКолонкуРазмер();
	Если ПоказыватьКолонкуРазмер = Ложь Тогда
		Элементы.ТекущаяВерсияРазмер.Видимость = Ложь;
		Элементы.ТекущаяВерсияРазмерСоздание.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		Параметры.ДокументОснование = Параметры.ЗначениеКопирования;
		ДокументОснованиеПодписан = Параметры.ДокументОснование.ПодписанЭП;
		
		ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
			Параметры.ЗначениеКопирования, Ложь);

		Если ПодчиненныеФайлы.Количество() > 0 Тогда 
			Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
				Если Делопроизводство.ФайлЯвляетсяОригиналом(ПодчиненныйФайл) Тогда 
					Продолжить;
				КонецЕсли;
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ШаблонОснованиеДляСоздания = ПодчиненныйФайл.ШаблонОснованиеДляСоздания;
				НоваяСтрока.ДобавленИзШаблона = ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания);
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайловТаблицы);
		КонецЕсли;
		
		// Копирование категорий данных
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(Параметры.ЗначениеКопирования);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Основание) Тогда // Ввод на основании
		
		Если ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
			ОснованиеДокумента = Параметры.Основание.Основание;
		Иначе
			ОснованиеДокумента = Параметры.Основание;
		КонецЕсли;
		
		Если ТипЗнч(ОснованиеДокумента) = Тип("Массив")
			И ОснованиеДокумента.Количество() > 0
			И ТипЗнч(ОснованиеДокумента[0]) = Тип("СправочникСсылка.Файлы") Тогда 			
			
			Для Каждого Файл Из ОснованиеДокумента Цикл  
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
				Если АвтозаполнениеШаблоновФайловСервер.ФайлНаходитсяВИерархииПапокШаблонов(Файл) Тогда				
					НоваяСтрока.ШаблонОснованиеДляСоздания = Файл;
					НоваяСтрока.ДобавленИзШаблона = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;	
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;	
	
		ИначеЕсли ТипЗнч(ОснованиеДокумента) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			
			ПерепискаПоПредмету = ОснованиеДокумента;
			
			ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				ОснованиеДокумента, Ложь);

			Если ПодчиненныеФайлы.Количество() > 0 Тогда 
				Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл

					ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
					
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
					НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
					НоваяСтрока.ДобавленИзШаблона = Ложь;
				КонецЦикла;
				
				Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
				КоличествоФайловТаблицы = ПодчиненныеФайлы.Количество();
				КоличествоФайлов = КоличествоФайловТаблицы;
				Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(
					КоличествоФайловТаблицы);
			КонецЕсли;
			
			Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОснованиеДокумента) Тогда
				
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("ИмяСобытия", "СозданВнутреннийДокументНаОснованииПисьма");
				ПараметрыОповещения.Вставить("ПараметрСобытия", ОснованиеДокумента);
				Параметры.ПисьмоОснование = ОснованиеДокумента;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("МассивФайлов") Тогда
		МассивФайлов = Параметры.МассивФайлов;
		Если МассивФайлов.Количество() <> 0 Тогда
			Для Каждого ФайлПринятый Из МассивФайлов Цикл
				Файл = Новый Файл(ФайлПринятый);
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
				НоваяСтрока.ПолныйПуть = ФайлПринятый;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = МассивФайлов.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(
				КоличествоФайловТаблицы);
			
			Если МассивФайлов.Количество() = 1 Тогда
				Файл = Новый Файл(МассивФайлов[0]);
				Объект.Заголовок = Файл.ИмяБезРасширения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Выбор вида документа
	БыстрыйВыборВидаДокумента = Делопроизводство.ПолучитьРежимВыбораВидаДокумента("ВнутреннийДокумент");
	Элементы.ВидДокумента.БыстрыйВыбор = БыстрыйВыборВидаДокумента;
	
	КомуПереданДокумент = Делопроизводство.СтрокаКомуПереданДокумент(Объект.Ссылка);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаСвойства");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ОбновитьПолныйПуть();
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Элементы.ФайлыПодписанЗашифрован.Видимость = Ложь;
	Иначе
		ЗаполнитьСписокПодписей();
	КонецЕсли;
	
	// Список резолюций
	Элементы.ГруппаРезолюции.Видимость = ИспользоватьРезолюцииВДокументах;
	Если НастройкиФормы = Неопределено Или НастройкиФормы.Получить("ПоказыватьУдаленныеРезолюции") = Неопределено Тогда
		ПоказыватьУдаленныеРезолюции = Ложь;
		Элементы.КПРезолюцийПоказыватьУдаленные.Пометка = Ложь;
		ЗаполнитьСписокРезолюций();
	КонецЕсли;
	
	// Статьи ДДС.
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы")
		И ЗначениеЗаполнено(Основание) Тогда
		ПрочитатьСтатьиДДС(Основание);
	Иначе
		ПрочитатьСтатьиДДС(Параметры.ДокументОснование);
	КонецЕсли;
	
	// Срок действия
	СрокДействияПриСозданииНаСервере();
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидДокумента, 
			"УчитыватьНедействующиеДокументы, ЯвляетсяДоговором, ВестиУчетТоваровИУслуг");
		Если РеквизитыВидаДокумента.УчитыватьНедействующиеДокументы
		   И РеквизитыВидаДокумента.ЯвляетсяДоговором Тогда
			Элементы.НеДействует.Заголовок = НСтр("ru = 'Расторгнут'; en = 'Terminated'");
		КонецЕсли;
	КонецЕсли;
	Элементы.НеДействуетВСоответствии.Доступность = Объект.НеДействует;
	
	// Визы согласования
	Элементы.ГруппаВизыСогласования.Видимость = ИспользоватьВизыСогласования;
	Если НастройкиФормы = Неопределено Или НастройкиФормы.Получить("ПоказыватьУдаленныеВизы") = Неопределено Тогда
		ПоказыватьУдаленныеВизы = Ложь;
		Элементы.ВизыСогласованияПоказыватьУдаленныеВизы.Пометка = Ложь;
		ЗаполнитьСписокВиз();
	КонецЕсли;
	
	// Чтение категорий данных	
	Если ИспользоватьКатегорииДанных Тогда
		ПредопределенныеВсеКатегории = Справочники.КатегорииДанных.ВсеКатегории;
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных"); 
		Если РольДоступна(Метаданные.Роли.ПроверкаКатегорий) Тогда
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
				Если АвтоматическаяКатегоризацияВыполнена Тогда
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияВыполнена;
				Иначе
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияНеВыполнена;
				КонецЕсли;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			КонецЕсли;
			Если ИспользоватьПроверкуКатегорий Тогда
				КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
				Если КатегорииПроверены Тогда
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
				Иначе
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
				КонецЕсли;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;
	
	ПараметрШаблонДокумента = Параметры.ШаблонДокумента;
	Если Не ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
		ПараметрШаблонДокумента = Объект.Шаблон;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПараметрШаблонДокумента) И Не РольДоступна("ПолныеПрава") Тогда 
		
		РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			ПараметрШаблонДокумента, "ЗапретитьРедактироватьФайлы, ЗапретитьУдалятьФайлы");
		ЗапретитьРедактироватьФайлы = РеквизитыШаблона.ЗапретитьРедактироватьФайлы; 
		ЗапретитьУдалятьФайлы  = РеквизитыШаблона.ЗапретитьУдалятьФайлы;
		
		Если ЗапретитьУдалятьФайлы Тогда
			Элементы.ФайлыДобавленныеУдалить.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ВестиУчетПоКонтрагентам = Ложь;
	ВестиУчетПоОрганизациям = Ложь;
	ИспользоватьУтверждение = Ложь;
	ИспользоватьПодписание = Ложь;
	ВестиУчетСторон = Ложь;
	ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается;
	
	Если Параметры.ШаблонДокумента <> Неопределено
		И Параметры.ШаблонДокумента <> "СоздатьПустойДокумент" Тогда
		
		ШаблоныДокументов.ЗаполнитьФайлыДокументаПоШаблону(Параметры.ШаблонДокумента, ФайлыДобавленные, Ложь);
		КоличествоФайлов = ФайлыДобавленные.Количество();
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
		Элементы.НаименованиеФайла.Заголовок = 
			ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);
		
		ИзменениеВидаДокументаОбработано = Ложь;
		
		Если Не Параметры.ЗаполнятьРеквизитыДоСоздания Тогда
			
			ДокументОбъект = РеквизитФормыВЗначение("Объект");
			ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(Параметры.ШаблонДокумента, ДокументОбъект);
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			
			ПриИзмененииВидаДокумента();
			ИзменениеВидаДокументаОбработано = Истина;
			
			Если ВестиУчетСторон
				И Параметры.ЗначенияЗаполнения.Свойство("Контрагент") Тогда
					ДобавитьСторону(Параметры.ЗначенияЗаполнения.Контрагент,,1);
			КонецЕсли;
			
			УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтаФорма);
			
		КонецЕсли;
		
		Если СтатьиДвиженияДенежныхСредств.Количество() = 0 Тогда
			ШаблоныДокументов.ЗаполнитьСтатьиДДСДокументаПоШаблону(Параметры.ШаблонДокумента,
				СтатьиДвиженияДенежныхСредств, Объект.Сумма, Объект.СуммаНДС);
		КонецЕсли;
		
		Если Не ИзменениеВидаДокументаОбработано Тогда
			ПриИзмененииВидаДокумента();
		КонецЕсли;
		
		Элементы.РедактироватьДобавленныйФайл.Видимость = Истина;
		Элементы.РедактироватьДобавленныйФайлКонтекст.Видимость = Истина;
		
		// Рабочие группы
		Объект.Шаблон = Параметры.ШаблонДокумента;
		РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(ЭтаФорма);
		
		// Визы согласования
		Если ИспользоватьВизыСогласования Тогда
			ШаблоныДокументов.ЗаполнитьВизыДокументаПоШаблону(Параметры.ШаблонДокумента, ВизыСогласования);
			КоличествоВиз = ВизыСогласования.Количество();
			Элементы.ГруппаНетВизСогласования.Видимость = (КоличествоВиз = 0);
			Элементы.ГруппаЕстьВизы.Видимость = (КоличествоВиз > 0);
			Элементы.ВизыСогласования.Видимость = (КоличествоВиз > 0);
		КонецЕсли;
		
	Иначе
		
		//Копирование дополнительных реквизитов основания 
		Если ЗначениеЗаполнено(Основание) 
			И ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы")
			И ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
			
			Для Каждого Реквизит Из Основание.ДополнительныеРеквизиты Цикл
				СтруктураПоиска = Новый Структура("Свойство", Реквизит.Свойство);
				МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрок.Количество() > 0 Тогда
					НоваяСтрока = МассивСтрок[0];
					ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение] = Реквизит.Значение;
				КонецЕсли;
			КонецЦикла;
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидДокумента,
			"ВестиУчетПоКонтрагентам, ВестиУчетСторон, ИспользоватьУтверждение,
			|ВестиУчетСторон, ИспользоватьПодписание, ВестиУчетПоОрганизациям, ВариантПодписания");
		ВестиУчетПоКонтрагентам = РеквизитыВида.ВестиУчетПоКонтрагентам;
		ВестиУчетПоОрганизациям = РеквизитыВида.ВестиУчетПоОрганизациям;
		ИспользоватьУтверждение = РеквизитыВида.ИспользоватьУтверждение;
		ИспользоватьПодписание = РеквизитыВида.ИспользоватьПодписание;
		ВестиУчетСторон = РеквизитыВида.ВестиУчетСторон;
		ВариантПодписания = РеквизитыВида.ВариантПодписания; 
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриСозданииНаСервере(ЭтаФорма);
	РабочаяГруппаТекст = Делопроизводство.СтрокаОбязательноеЗаполнениеРабочихГруппДокументов(Объект.ВидДокумента);
	РабочаяГруппаПодпись = Делопроизводство.СтрокаАвтоматическиВестиСоставУчастниковРабочейГруппы(Объект.ВидДокумента);
	
	// Шаблоны автозапуска
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТолькоЧтоСозданныйДокумент = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоЧтоСозданныйДокумент") Тогда
		ТолькоЧтоСозданныйДокумент = Параметры.ТолькоЧтоСозданныйДокумент;
	КонецЕсли;	
	
	// Комплекты документов
	РаботаСКомплектамиДокументовСервер.ДокументПриСозданииНаСервере(ЭтаФорма);
	ТипСвязиСодержит = Справочники.ТипыСвязей.Содержит;
	
	// Параметры оповещения
	Если Параметры.Свойство("ПараметрыОповещения") Тогда
		ПараметрыОповещения = Параметры.ПараметрыОповещения;
	КонецЕсли;
	
	// Реквизиты по виду документа
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента));
	
	// Смена заголовка организации и установка видимости при взаимодействии ФО.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") И Не ВестиУчетСторон Тогда
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям",
			Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента)) Тогда
			Элементы.Организация.Видимость = Истина;
			Элементы.ГруппаОрганизация.Заголовок = НСтр("ru = 'Наша организация'; en = 'Our company'");
			Элементы.ГруппаОрганизация.Подсказка = НСтр("ru = 'Организация'; en = 'Company'");
		Иначе
			Элементы.Организация.Видимость = Ложь;
			Элементы.ГруппаОрганизация.Заголовок = НСтр("ru = 'Наше предприятие'; en = 'Our enterprise'");
			Элементы.ГруппаОрганизация.Подсказка = НСтр("ru = 'Предприятие'; en = 'Enterprise'");
		КонецЕсли;
	Иначе
		Элементы.Организация.Видимость = Ложь;
		Элементы.ГруппаОрганизация.Заголовок = НСтр("ru = 'Наше предприятие'; en = 'Our enterprise'");
		Элементы.ГруппаОрганизация.Подсказка = НСтр("ru = 'Предприятие'; en = 'Enterprise'");	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда 
		УстановитьПривилегированныйРежим(Истина);
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Шаблон,
			"ЗаполнениеНаименованияПоШаблону, Заголовок");
		Если РеквизитыШаблона.ЗаполнениеНаименованияПоШаблону Тогда 
			НаименованиеСозданоПоШаблону = Истина;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	УчитыватьНДС = Делопроизводство.УчитыватьНДС(Объект.Организация);
	Элементы.ГруппаСуммаНДС.Видимость = УчитыватьНДС;
	Элементы.ТоварыСтавкаНДС.Видимость = УчитыватьНДС;
	Элементы.ТоварыСуммаНДС.Видимость = УчитыватьНДС;
	
	ТекущийИтогСумма = Объект.Товары.Итог("Сумма");
	ТекущийИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС");
	
	// Запоминаем начальные значения реквизитов
	ЗапомнитьЗначенияРеквизитов();
	
	УстановитьДоступностьПолей();
	
	// Доступность элементов
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// Заполнение текстовых реквизитов
	Если ЗначениеЗаполнено(Объект.Дело) Тогда
		РеквизитыДела = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Дело, "НоменклатураДел.Индекс, МестоХраненияДел"); 
		ДелоТекст = СокрЛП(РеквизитыДела.НоменклатураДелИндекс) + " " + СокрЛП(Объект.Дело);
		МестоХранения = РеквизитыДела.МестоХраненияДел;
	КонецЕсли;	
	
	СформироватьПредставлениеСтатейДДС();
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
		
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	НесколькоКонтрагентов = (Объект.Контрагенты.Количество() > 1);
	УстановитьВидимостьКонтрагентов();
	
	ЗаполнитьСвязи();
	
	// картинки состояний
	ОбзорДокумента.ВывестиСтрокуСостояний(ЭтаФорма);
	
	Если Объект.Ссылка.Пустая() Тогда 
		Делопроизводство.АктивизироватьЭлементПоУмолчанию(ЭтаФорма);
	КонецЕсли;
	
	ВывестиДекорациюОтсутствуетОригинал(Объект);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	ИспользоватьЭтапыОбработкиДокумента = Ложь;
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		ИспользоватьЭтапыОбработкиДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
			"ИспользоватьЭтапыОбработкиДокумента");
	КонецЕсли;
	Элементы.ГруппаЭтапы.Видимость = ИспользоватьЭтапыОбработкиДокумента;
	Делопроизводство.ПрочитатьЭтапы(ЭтаФорма);
	
	Если Параметры.Свойство("ОткрытьЗакладкуФайлы") Тогда
		Если Элементы.Обзор.Видимость Тогда 
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор;
		Иначе	
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаФайлы;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуЭП") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуКатегории") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Категории;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуТовары") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары;
	КонецЕсли;
	
	ВключитьАвтоОтметкуИЗаполнитьПолеОтветственный();
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Делопроизводство.ПрочитатьОбязательныеТипыСвязей(ЭтаФорма, ОбязательныеТипыСвязей, Объект.Ссылка, Объект.ВидДокумента);
		
		Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы") И Не ТипСвязиВыбран Тогда
			МассивТиповСвязей = ПолучитьТипыСвязей(Основание, Объект.ВидДокумента);	
		КонецЕсли;
	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Делопроизводство.ПрочитатьОбязательныеСвязи(Объект.Ссылка, 
			ОбязательныеТипыСвязей, ОбязательныеСвязи);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
		УстановитьДоступностьКомандФайлыДобавленные();
	КонецЕсли;	
	
	ПолучитьОбзорДокумента();
	Элементы.ГруппаДобавитьФайл.Видимость = Не Элементы.Обзор.Видимость;
	КлючЗаписи = Делопроизводство.ПолучитьКлючЗаписиРегистраДанныеДокументов(Объект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если ЗначениеЗаполнено(Объект.Создал) И ЗначениеЗаполнено(Объект.ДатаСоздания) Тогда 
		СоздалТекст = СокрЛП(Объект.ДатаСоздания) + ", " + СокрЛП(Объект.Создал);
	Иначе 
		СоздалТекст = СокрЛП(Объект.ДатаСоздания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ВестиУчетТоваровИУслуг") Тогда
		ВестиУчетТоваровИУслуг = Истина;
		Элементы.СтраницаТовары.Видимость = Истина;
	Иначе 
		Элементы.СтраницаТовары.Видимость = Ложь;
		ВестиУчетТоваровИУслуг = Ложь;
	КонецЕсли;
	
	// Работа со подписями
	РаботаСПодписямиДокументов.ЗаполнитьТаблицуСторон(ЭтаФорма);
	Если ВестиУчетСторон Тогда
		КонтрагентПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
		КонтактноеЛицоПустаяСсылка = Справочники.КонтактныеЛица.ПустаяСсылка();
		Для Каждого СтрокаСтороны Из Объект.Стороны Цикл
			Если СтрокаСтороны.НомерСтроки = 1 Тогда
				ДокументПодписанНами = СтрокаСтороны.Подписан;
			КонецЕсли; 
		КонецЦикла;
		
		УстановитьУсловноеОформление();
	КонецЕсли;	
	
	НесколькоГрифовУтверждений = Объект.ГрифыУтверждения.Количество() > 1;
	УстановитьВидимостьГрифовУтверждений();
	
	Элементы.ПодписьТекст.Видимость = ИспользоватьПодписание И Не ВестиУчетСторон;
	Элементы.ГруппаСтороны.Видимость = ВестиУчетСторон;
	Элементы.СтороныПодписан.Видимость = ВестиУчетСторон И ВариантПодписания <> Перечисления.ВариантыПодписания.НеПодписывается;
	Элементы.СтороныДатаПодписи.Видимость = ВестиУчетСторон И ВариантПодписания <> Перечисления.ВариантыПодписания.НеПодписывается;
	
	ОбновитьЗаголовокПроцессаУтверждение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Элементы.ФормаПодписать.Видимость = Ложь;
		Элементы.ФормаЭПИШифрование.Видимость = Ложь;
		Элементы.КонтекстноеМенюФайлыГруппаЭПИШифрование.Видимость = Ложь;
		Элементы.ЭлектронныеПодписи.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		
		Элементы.ТаблицаПодписейКонтекстноеМенюПроверить.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюПроверитьВсе.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюОткрытьПодпись.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюУдалить.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюСохранить.Видимость = Ложь;
	КонецЕсли;
	
	СоставСтрока = ДелопроизводствоКлиентСервер.ПолучитьСтрокуСоставДокумента(Объект);
	НачальныйСостав = СоставСтрока;

	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли
	
	Оповестить("ОбновитьСписокПоследних");
	
	Если Не Параметры.ДокументОснование.Пустая() И ДокументОснованиеПодписан Тогда
		ПодключитьОбработчикОжидания("ВопросКопированияЭП", 0.2, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ОбновитьОтображениеСуммы();
	
	Если Не Отказ Тогда
		Описание = Новый ОписаниеОповещения("ПослеПолученияОтпечатков", ЭтотОбъект);
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Описание, Истина, Ложь);
	КонецЕсли;
	
	ЗаполнитьПоляУтвердилПодписал();
	
	Если ЕстьЭДО Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияЕстьЭДО", 300);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопированияЭП()
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ ""%1"" и присоединенные к нему файлы подписаны.
		| Копирование сведений об ЭП в новый документ сделает его недоступным для изменения.
		| Скопировать в новый документ сведения об ЭП?';
		|en = 'Document ""%1"" and its attached files are digitally signed. 
		|Copying the DS information to the new document will make it unchangeable
		|Copy the DS information to the new document?'"),
		Строка(Параметры.ДокументОснование));
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВопросКопированияЭППродолжение",
		ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопированияЭППродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КопироватьПодписиЭП = Истина;
		УстановитьДоступностьПолей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	// Перенос срока связанного документа
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ИсточникВыбора.Заголовок = НСтр("ru = 'Выбор связанного документа'; en = 'Selecting related document'") Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Документ", ВыбранноеЗначение);
		ПараметрыОткрытия.Вставить("ЗаполнитьРеквизиты", Истина);
		ПараметрыОткрытия.Вставить("ДокументИсточникИзменения", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ИзменятьСрокДействия", Истина);
		
		// Передадим также сроки исходного документа
		ПараметрыОткрытия.Вставить("ДатаНачалаДействия", Объект.ДатаНачалаДействия);
		ПараметрыОткрытия.Вставить("ДатаОкончанияДействия", Объект.ДатаОкончанияДействия);
		ПараметрыОткрытия.Вставить("Бессрочный", Объект.Бессрочный);
		ПараметрыОткрытия.Вставить("ПорядокПродления", Объект.ПорядокПродления);
		ПараметрыОткрытия.Вставить("РежимПереносСрока", Истина);
		
		ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.ИзменениеСрокаДействия", ПараметрыОткрытия, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Объект.Ссылка Тогда
		ЗаполнитьСписокФайлов();
		
		Если Параметр <> Неопределено Тогда
			УстановитьТекущуюСтрокуФайла(Параметр);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлыДокументаПомеченыНаУдаление" Тогда
		УстановитьВидимостьПоЭДО();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("Файл") И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			ОбновитьСтрокуФайла(ФайлСсылка);
			
			ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
			УстановитьДоступностьКоманд(ТекущиеДанные);
			
			Если ТипЗнч(Параметр) = Тип("Структура") Тогда
				Если Параметр.Свойство("ЕстьЗашифрованныеИлиЗанятыеФайлы") Тогда
					ЕстьЗашифрованныеИлиЗанятыеФайлы = Параметр.ЕстьЗашифрованныеИлиЗанятыеФайлы;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
 	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Владелец = Объект.Ссылка Тогда 
				Если Параметр.Свойство("ИзменилсяПризнакОригинала") И Параметр.ИзменилсяПризнакОригинала Тогда 
					ОбновитьСтрокуФайла(Параметр.Файл, Истина);
				Иначе	
					ОбновитьСтрокуФайла(Параметр.Файл);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ИмяСобытия = "БизнесПроцессСтартован" Тогда
		Если Параметр.Свойство("СсылкаНаПредметБизнесПроцесса")
			И Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Тогда
			СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
			УстановитьДоступностьПолей();
			
			Если Параметр.Свойство("СсылкаНаБизнесПроцесс")
				И ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
				ЗаполнитьСписокВиз();
			КонецЕсли;
			
			Если Параметр.Свойство("СсылкаНаБизнесПроцесс")
				И ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
				Прочитать();
				ЗаполнитьПоляУтвердилПодписал();
			КонецЕсли;
			
			СтатусВзаимодействие = 1;
			Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'Есть выполняющиеся задачи'; en = 'Has active tasks'");
			
			Если Параметр.Свойство("СсылкаНаБизнесПроцесс")
			   И (ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение")
			  Или ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение")) Тогда
				  ВывестиКартинкуКонтроля();
			КонецЕсли;
			
			ПолучитьОбзорДокумента();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗадачаСогласованияВыполнена" Тогда
		Если Параметр.Свойство("Предмет") И Параметр.Предмет = Объект.Ссылка Тогда
			ЗаполнитьСписокВиз();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбъектПодписан" И Параметр = Объект.Ссылка Тогда
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	КонецЕсли;
	
	Если ИмяСобытия = "ПрисоединенныйФайлЗашифрован" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокПодписей();
		УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	КонецЕсли;
	
	Если ИмяСобытия = "ПрисоединенныйФайлПодписан" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокПодписей();
		УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
		ОповеститьОбИзменении(КлючЗаписи);
		ОбновитьКартинкуЭП();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененЖурналПередачи" И Параметр = Объект.Ссылка Тогда
		КомуПереданДокумент = Делопроизводство.СтрокаКомуПереданДокумент(Объект.Ссылка);
		ПолучитьОбзорДокумента();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено
		   И Параметр.Свойство("Владелец")
		   И Параметр.Владелец = Объект.Ссылка Тогда
			
			ЗаполнитьСписокФайлов();
			
			Если Параметр.Свойство("Файл") Тогда
				УстановитьТекущуюСтрокуФайла(Параметр.Файл);
				ОтметитьПризнакОригиналУНовогоФайла(Параметр.Файл);
				
				Если Не Элементы.Обзор.Видимость 
					И Элементы.ГруппаСтраницы.ТекущаяСтраница 
					<> Элементы.СтраницаФайлы Тогда 
					Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаФайлы;
				КонецЕсли;
			КонецЕсли;
			Если Параметр.Свойство("СуммаДокумента")
				И Не ЗначениеЗаполнено(Объект.Сумма) Тогда
				Объект.Сумма = Параметр.СуммаДокумента;
			КонецЕсли; 
			Если Параметр.Свойство("СуммаНДС") 
				И Не ЗначениеЗаполнено(Объект.СуммаНДС) Тогда
				Объект.СуммаНДС = Параметр.СуммаНДС;
			КонецЕсли; 
			Если Параметр.Свойство("Валюта")
				И ЗначениеЗаполнено(Объект.Валюта) Тогда
				Объект.Валюта = Параметр.Валюта;
			КонецЕсли; 
			
			ОповеститьОбИзменении(КлючЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыРеквизитыПриИзмененииСвязи" И Параметр = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыСвязиДокумента" Тогда
		
		Если Параметр.Документ = Объект.Ссылка Тогда
			ПрочитатьСвязи(Параметр.ТипыСвязей);
		КонецЕсли;
		
		ЗаполнитьСвязи();
		// Раскроем дерево
	    КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;	
		
		// Установим курсор в нужную строку
		Если Параметр.Свойство("СвязанныйДокумент") Тогда 
			НашлиСтроку = Ложь; 
			КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
			Для Каждого Строка Из КоллекцияСтрок Цикл
				Если НашлиСтроку Тогда
					Прервать;
				КонецЕсли;
				
				ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
				Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл 
					Если Параметр.СвязанныйДокумент = ПодчиненнаяСтрока.СвязанныйДокумент 
					   И Параметр.ТипыСвязей[0] = ПодчиненнаяСтрока.ТипСвязи Тогда
						Элементы.ДеревоСвязей.ТекущаяСтрока = ПодчиненнаяСтрока.ПолучитьИдентификатор();
						НашлиСтроку = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЕсли;

	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыСвязиПодчиненныхДокументов" И Параметр.Документ = Объект.Ссылка Тогда
		ЗаполнитьСвязи();
		// Раскроем дерево
	    КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;	
	КонецЕсли;
	
	// Комплекты документов
	Если ЯвляетсяКомплектом Тогда
		Если ИмяСобытия = "ДобавленЭлементКомплекта" Тогда
			Если Параметр.Свойство("ПараметрСобытия") И Параметр.ПараметрСобытия = УникальныйИдентификатор Тогда
				РаботаСКомплектамиДокументовКлиент.СоставКомплектаДобавитьЭлементы(ЭтаФорма, Параметр.Ссылка);
			КонецЕсли;
		КонецЕсли;
		Если ИмяСобытия = "БизнесПроцессСтартован" Тогда
			РаботаСКомплектамиДокументовКлиент.СоставКомплектаОбновить(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	// Резолюции
	Если ИмяСобытия = "Запись_Резолюции" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокРезолюций();
	КонецЕсли;
	
	// Визы согласования
	Если ИмяСобытия = "Запись_ВизыСогласования" И Параметр = Объект.Ссылка Тогда
		ПрочитатьГруппыНаСервере();
		ЗаполнитьСписокВиз();
	КонецЕсли;
	
	Если ИмяСобытия = "НапечатанШтрихкод" И Параметр = Объект.Ссылка Тогда
		НеобходимоНапечататьШтрихкодПриСоздании = Ложь;
	КонецЕсли; 
	
	Если ИмяСобытия = "РедактироваласьКатегория" Тогда
		ОбновитьДанныеОКатегориях(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "СозданаТемаПоПредмету"
		И Параметр.Предмет = Объект.Ссылка Тогда 
		// картинки состояний
		ВывестиСтрокуСостояний();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда 
		Если Параметр.Предмет = Объект.Ссылка Тогда 
			ОбработатьЗаписьКонтроля();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "БизнесПроцессПрерван" Тогда 
		Если Параметр.Свойство("СсылкаНаПредметБизнесПроцесса") 
			И Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Тогда 
			СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
			УстановитьДоступностьПолей();
			ПолучитьОбзорДокумента();
			
			Если Параметр.Свойство("СсылкаНаБизнесПроцесс") 
			   И ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда 
				ЗаполнитьСписокВиз();			   
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// ЭДО
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ЕстьЭДО();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Запоминаем начальные значения реквизитов
	ЗапомнитьЗначенияРеквизитов();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник;
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
	
	// Комплекты документов
	РаботаСКомплектамиДокументовСервер.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Статьи ДДС.
	ПрочитатьСтатьиДДС(Объект.Ссылка);
	
	// Срок действия
	СрокДействияПриЧтенииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ИспользоватьЭтапыОбработкиДокумента") Тогда 
		Делопроизводство.ПрочитатьЭтапы(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияПриРегистрации(Результат, ПараметрыЗаписи) Экспорт

	Если Результат = Ложь или Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеПриРегистрации", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияОСканКопииОригинала(ПараметрыЗаписи) Экспорт

	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОСканКопииОригиналаДокумента", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияОПеререгистрации(Результат, ПараметрыЗаписи) Экспорт

	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОПеререгистрации", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеУказанияРегистрационногоНомера(Результат, ПараметрыЗаписи) Экспорт

	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	РегистрационныйНомер = СокрЛП(Результат);
	ПараметрыЗаписи.Вставить("УказанРегистрационныйНомер", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОСозданииСвязи(Результат, ПараметрыЗаписи) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		СвязанныйДокументДляНумерации = Неопределено;
		Возврат;
	КонецЕсли;
					
	Если ТипыВидыСвязанныхДокументовДляНумерации.Количество() = 0 Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Невозможно указать связь ""%1"", так как связь данного типа не настроена для документов вида ""%2"".'; en = 'It is not possible to establish relation ""%1"" because relationships of this type are not enabled for document type ""%2"".'"),
			ТипСвязиНумератора,
			Объект.ВидДокумента);
		
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВыбораСвязанногоДокумента",
		ЭтотОбъект,
		ПараметрыЗаписи);
	
	// Определение количества возможных типов связанного документа
	ТипСвязанногоДокументаСоставной = Ложь;
	ТипДляВыбора = ТипыВидыСвязанныхДокументовДляНумерации[0].Тип;
	Для Каждого СтрокаТипа Из ТипыВидыСвязанныхДокументовДляНумерации Цикл
		Если СтрокаТипа.Тип <> ТипДляВыбора Тогда
			ТипСвязанногоДокументаСоставной = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Открытие формы выбора связанного документа
	Если ТипСвязанногоДокументаСоставной Тогда
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборДокументаДляСвязи", 
			Новый Структура("ТаблицаТипов", ТипыВидыСвязанныхДокументовДляНумерации),,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	Иначе
		
		// Заполнение отбора по виду документа
		МассивВидовДокументов = Новый Массив;
		Для Каждого СтрокаТипа Из ТипыВидыСвязанныхДокументовДляНумерации Цикл
			
			Если ЗначениеЗаполнено(СтрокаТипа.Вид) Тогда 
				Если МассивВидовДокументов.Найти(СтрокаТипа.Вид) = Неопределено Тогда
					МассивВидовДокументов.Добавить(СтрокаТипа.Вид);
				КонецЕсли;
			Иначе
				// Настройка предусматривает любой вид документа, отбор не нужен
				МассивВидовДокументов.Очистить();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		Если МассивВидовДокументов.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидДокумента", МассивВидовДокументов));
		КонецЕсли;
			
		Поз = Найти(ТипДляВыбора, ".");
		ИмяФормыВыбора = "Справочник." + Сред(ТипДляВыбора, Поз + 1) + ".ФормаВыбора";
		
		ОткрытьФорму(
			ИмяФормыВыбора, 
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;				
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораСвязанногоДокумента(СвязанныйДокумент, ПараметрыЗаписи) Экспорт
	
	Если Не ЗначениеЗаполнено(СвязанныйДокумент) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказанВопросОСозданииСвязи", Истина);
	Если Объект.Ссылка.Пустая() Тогда // связь будет добавлена при записи
		СвязанныйДокументДляНумерации = СвязанныйДокумент;
	Иначе // связь нужно добавить сейчас для корректного формирования номера
		СвязиДокументов.СоздатьСвязь(
			Объект.Ссылка, 
			СвязанныйДокумент, 
			ТипСвязиНумератора);
		СоздатьСвязьДляНумерации = Ложь;
	КонецЕсли;
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Оценка производительности
	УИДЗамераВыполнениеКомандыЗаписать = ОценкаПроизводительностиКлиентСервер.НачатьРучнойЗамерВремени("ВнутренниеДокументыВыполнениеКомандыЗаписать");
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Товары, "Номенклатура");
	
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		
		ПредыдущийРегНомер = Объект.РегистрационныйНомер;
		ПредыдущаяДатаРегистрации = Объект.ДатаРегистрации;
		
		// Регистрация
		Если Не ДокументЗарегистрирован() Тогда 
			Если ОграничиватьДоступностьПолейПоСостоянию И
				Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеПриРегистрации") Тогда
				ОбработчикОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПредупрежденияПриРегистрации",
					ЭтотОбъект,
					ПараметрыЗаписи);
				ДелопроизводствоКлиент.ПредупредитьПриРегистрации(ОбработчикОповещения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			Если ОбязателенФайлОригинала Тогда 
				ОтсутствуетОригинал = Истина;
				Для Каждого Строка Из Файлы Цикл
					Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда 
						ОтсутствуетОригинал = Ложь;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				Если ОтсутствуетОригинал Тогда 
					Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОСканКопииОригиналаДокумента") Тогда
						ОписаниеОповещения = Новый ОписаниеОповещения(
							"ПередЗаписьюПродолжениеПослеПредупрежденияОСканКопииОригинала",
							ЭтотОбъект,
							ПараметрыЗаписи);
						ПоказатьПредупреждение(
							ОписаниеОповещения, 
							НСтр("ru = 'Для документа требуется обязательное наличие скан-копии оригинала.
								|Вы можете добавить ее в список файлов после регистрации документа.';
								|en = 'Scanned copy of the original is required for the document.
								|You can add it to the file list after the document is registered.'"));
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОПеререгистрации") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПредупрежденияОПеререгистрации",
					ЭтотОбъект,
					ПараметрыЗаписи);
					
				ДелопроизводствоКлиент.ПредупредитьПриПеререгистрации(ОписаниеОповещения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
		СтруктураПараметров.Вставить("ПерепискаПоПредмету",	ПерепискаПоПредмету);
		СтруктураПараметров.Вставить("НеДействуетВСоответствии", НеДействуетВСоответствии);
		СтруктураПараметров.Вставить("СвязанныйДокумент", СвязанныйДокументДляНумерации);
		
		ПараметрыЗаписи.Вставить("ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена", Ложь);
		СтруктураВозврата = Делопроизводство.ДляРегистрацииНеобходимоУказатьСвязанныйДокумент(СтруктураПараметров);
		ПараметрыЗаписи.ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена = Истина;
		
		Нумератор = СтруктураВозврата.Нумератор;
		СоздатьСвязьДляНумерации = СтруктураВозврата.СоздатьСвязьДляНумерации;
		
		Если СтруктураВозврата.Свойство("ТипСвязиНумератора") Тогда 
			ТипСвязиНумератора = СтруктураВозврата.ТипСвязиНумератора;
		КонецЕсли;	
		
		Если СтруктураВозврата.Свойство("ТипыВидыСвязанныхДокументовДляНумерации") Тогда 
			Для Каждого Строка Из СтруктураВозврата.ТипыВидыСвязанныхДокументовДляНумерации Цикл
				НоваяСтрока = ТипыВидыСвязанныхДокументовДляНумерации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Нумератор) Тогда		
			
			Если Не ПараметрыЗаписи.Свойство("УказанРегистрационныйНомер") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеУказанияРегистрационногоНомера",
					ЭтотОбъект,
					ПараметрыЗаписи);
				РегистрационныйНомер = Объект.РегистрационныйНомер;
				ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(
					РегистрационныйНомер, 
					НСтр("ru = 'Укажите регистрационный номер'; en = 'Specify the registration number'"), 
					"", 
					30,
					ОписаниеОповещения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		Иначе
			
			Если СоздатьСвязьДляНумерации И Не ПараметрыЗаписи.Свойство("ПоказанВопросОСозданииСвязи") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВопросаОСозданииСвязи",
					ЭтотОбъект,
					ПараметрыЗаписи);
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Для регистрации документа необходимо заполнить связь ""%1"". Заполнить сейчас?'; en = 'To register the document it is required to establish relation ""%1"". Establish now?'"),
						ТипСвязиНумератора);
						
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество()
		И ЧислоПользовательскихСвязей <= 1
		И ОбязательныеТипыСвязей.Количество() = 1 
		И ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы") 	
		И ЗначениеЗаполнено(Основание) Тогда
				
		Строка = ОбязательныеТипыСвязей[0];
		
		Если ОснованиеВидДокумента = Строка.СсылкаНа
			Или ОснованиеВидДокументаРодитель = Строка.СсылкаНа Тогда
			
			НоваяСтрока = ОбязательныеСвязи.Добавить();
			НоваяСтрока.ТипСвязи = Строка.ТипСвязи;
			НоваяСтрока.СсылкаНа = Строка.СсылкаНа;
			НоваяСтрока.СвязанныйДокумент = Основание;
			НоваяСтрока.НужноЗаписать = Истина;
			
			ОкноВыбораТипаСвязиПоказано = Истина;
					
		КонецЕсли;			
		
	КонецЕсли;	
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы") 
		И Не ТипСвязиВыбран 
		И Не ОкноВыбораТипаСвязиПоказано Тогда
		
		ТипСвязи = Неопределено;
		ТипСвязиВыбран = Истина;
		
		Если МассивТиповСвязей.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВыбораТипаСвязи",
				ЭтотОбъект,
				ПараметрыЗаписи);
			ПараметрыФормы = Новый Структура("МассивТиповСвязей, Основание", МассивТиповСвязей, Основание);
			ОткрытьФорму(
				"Справочник.ВнутренниеДокументы.Форма.ВыборТипаСвязи",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			Отказ = Истина;	
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
		
		СколькоНеЗаполненоСвязей = 
			ОбязательныеТипыСвязей.Количество() - ОбязательныеСвязи.Количество();
			
		ОбязательныеСвязиПараметр = Новый Массив;
		Для Каждого Строка Из ОбязательныеТипыСвязей Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("ТипСвязи", Строка.ТипСвязи);
			
			Строки = ОбязательныеСвязи.НайтиСтроки(Отбор);
			Если Строки.Количество() = 0 Тогда
				
				ПараметрыСвязи = Новый Структура("ТипСвязи, СсылкаНа",
					Строка.ТипСвязи, Строка.СсылкаНа);
				
				ОбязательныеСвязиПараметр.Добавить(ПараметрыСвязи);
				
			КонецЕсли;
			
		КонецЦикла;	
		
		ПараметрыОповещенияСвязей = Новый Структура("ОбязательныеСвязи, ПараметрыЗаписи", 
			ОбязательныеСвязиПараметр, ПараметрыЗаписи);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеВыбораОбязательнойСвязи",
			ЭтотОбъект,
			ПараметрыОповещенияСвязей);
			
		Контрагент = Неопределено;
		Если Объект.Контрагенты.Количество() = 1 Тогда
			Контрагент = Объект.Контрагенты[0].Контрагент;
		КонецЕсли;	
			
		ПараметрыОткрытияФормы = Новый Структура(
			"Документ, ОбязательныеСвязи, Контрагент, Организация, Проект", 
			Объект.Ссылка, ОбязательныеСвязиПараметр,
			Контрагент, Объект.Организация, Объект.Проект);	
			
		ИмяФормыСозданияСвязи = "";	
		Если СколькоНеЗаполненоСвязей = 1 Тогда
			
			СтрокаПараметров = ОбязательныеСвязиПараметр[0];
			Если ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВнутренниеДокументы")
				Или ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
				ИмяФормыСозданияСвязи = "Справочник.ВнутренниеДокументы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВходящиеДокументы")
				Или ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
				ИмяФормыСозданияСвязи = "Справочник.ВходящиеДокументы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ИсходящиеДокументы")
				Или ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
				ИмяФормыСозданияСвязи = "Справочник.ИсходящиеДокументы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Файлы") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Файлы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Мероприятия") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Мероприятия.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Проекты") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Проекты.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
				ИмяФормыСозданияСвязи = "Документ.ВходящееПисьмо.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
				ИмяФормыСозданияСвязи = "Документ.ИсходящееПисьмо.Форма.ФормаВыбораДляСозданияСвязи";
			Иначе	
				ИмяФормыСозданияСвязи = "РегистрСведений.СвязиДокументов.Форма.ФормаВнешнегоРесурсаДляСозданияСвязи";
			КонецЕсли;	
			
		Иначе	
			ИмяФормыСозданияСвязи = "РегистрСведений.СвязиДокументов.Форма.СозданиеОбязательныхСвязей";
		КонецЕсли;	
			
		ОткрытьФорму(ИмяФормыСозданияСвязи, 
			ПараметрыОткрытияФормы, ЭтаФорма,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;	
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
		
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораТипаСвязи(ТипСвязи, ПараметрыЗаписи) Экспорт
	
	ОкноВыбораТипаСвязиПоказано = Истина;
	
	Если ТипЗнч(ТипСвязи) = Тип("СправочникСсылка.ТипыСвязей")
		И ЗначениеЗаполнено(ТипСвязи) Тогда
		
		ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента = ТипСвязи;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ТипСвязи", ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента);
		
		СтрокиСвязи = ОбязательныеСвязи.НайтиСтроки(Отбор);
		СтрокиТипыСвязи = ОбязательныеТипыСвязей.НайтиСтроки(Отбор);
		
		Если СтрокиСвязи.Количество() = 0 И СтрокиТипыСвязи.Количество() <> 0 Тогда
			
			НоваяСтрока = ОбязательныеСвязи.Добавить();
			НоваяСтрока.ТипСвязи = ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента;
			НоваяСтрока.СвязанныйДокумент = Основание;
			НоваяСтрока.НужноЗаписать = Ложь;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораОбязательнойСвязи(Результат, Параметры) Экспорт 
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Массив") Тогда
		
		ВыбранныеОбязательныеСвязи = Результат; // массив
		
		Для Каждого Строка Из ВыбранныеОбязательныеСвязи Цикл
		
			Отбор = Новый Структура();
			Отбор.Вставить("ТипСвязи", Строка.ТипСвязи);
			Отбор.Вставить("СсылкаНа", Строка.СсылкаНа);
			
			Строки = ОбязательныеСвязи.НайтиСтроки(Отбор);
			Если Строки.Количество() = 1 Тогда
				Строки[0].СвязанныйДокумент = Строка.СвязанныйДокумент;
			ИначеЕсли Строки.Количество() = 0 Тогда
				
				НоваяСтрока = ОбязательныеСвязи.Добавить();
				НоваяСтрока.ТипСвязи = Строка.ТипСвязи;
				НоваяСтрока.СсылкаНа = Строка.СсылкаНа;
				НоваяСтрока.СвязанныйДокумент = Строка.СвязанныйДокумент;
				НоваяСтрока.Комментарий = Строка.Комментарий;
				НоваяСтрока.НужноЗаписать = Истина;
				
			КонецЕсли;	
		
		КонецЦикла;
		
		Записать(Параметры.ПараметрыЗаписи);
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям")
		И ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям", Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента)) Тогда
		Если Не ВестиУчетСторон И Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = НСтр("ru = 'Не выбрана организация'; en = 'Company is not specified'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Организация",,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ВестиУчетСторон
		И ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоКонтрагентам", Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента)) Тогда
			Если НесколькоКонтрагентов Тогда 
				Если Объект.Контрагенты.Количество() = 0 Тогда 
					ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Контрагенты""'; en = 'Field ""Counterparty"" is not filled in'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Контрагенты",,Отказ);
				КонецЕсли;
			Иначе
				Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
					ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'; en = 'Field ""Counterparty"" is not filled in'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Контрагент",,Отказ);
				КонецЕсли;
			КонецЕсли;
	КонецЕсли;
	
	Если ВестиУчетСторон Тогда
		Для Каждого Строка Из Объект.Стороны Цикл
			Если Строка.Подписан И Не ЗначениеЗаполнено(Строка.Подписал) Тогда 
				Если ЗначениеЗаполнено(Строка.Сторона) И ТипЗнч(Строка.Сторона) = Тип("СправочникСсылка.Контрагенты")
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Сторона, "ЮрФизЛицо") = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
					Продолжить;
				Иначе 
					НомерСтроки = Объект.Стороны.Индекс(Строка);
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Для стороны ""%1"" не указан подписант'; en = 'Signer is not specified for ""%1"" party'"), Строка.Сторона);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
						"Объект.Стороны["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].Подписал",, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		ИспользоватьЭтапыОбработкиДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
			"ИспользоватьЭтапыОбработкиДокумента");
		
		Если ИспользоватьЭтапыОбработкиДокумента Тогда 
			Для Каждого Строка Из ЭтапыОбработкиДокументов Цикл
				Если Строка.Пройден И Не ЗначениеЗаполнено(Строка.ДатаПрохождения) Тогда 
					НомерСтроки = ЭтапыОбработкиДокументов.Индекс(Строка);
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для пройденного этапа ""%1"" не указана дата прохождения'; en = 'For passed stage ""%1"" date of passing is not specified'"), Строка.Этап);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
						"ЭтапыОбработкиДокументов["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].ДатаПрохождения",, Отказ);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		ВестиУчетПоСтатьямДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
			"ВестиУчетПоСтатьямДДС");
		Если ВестиУчетПоСтатьямДДС 
			И Не НеПроверятьЗаполнениеСтатейДДС Тогда
			Если СтатьиДвиженияДенежныхСредств.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не выбрана статья движения денежных средств'; en = 'Cash flow report item is not selected'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, 
					"ПредставлениеСтатейДДС",, Отказ);
			Иначе
				ИтогСумма = 0;
				Для Каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
					ИтогСумма = ИтогСумма + Строка.Сумма;
				КонецЦикла;
				Если Объект.Сумма <> ИтогСумма Тогда
					ТекстОшибки = НСтр("ru = 'Сумма не соответствует ее расшифровке по статьям движения денежных средств'; en = 'The total amount does not match its breakdown by the cash flow report items'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, 
						"Сумма",, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны обязательные связи'; en = 'Mandatory relations are not established'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	КонецЕсли;
	
	ТекстСообщения = "";
	Если Делопроизводство.ПолучитьЗапретСозданияДокументовНеПоШаблону(Объект.Ссылка, Объект.ВидДокумента, 
			ПараметрШаблонДокумента, ТекстСообщения) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидДокумента",,Отказ);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	Для Каждого Строка Из ТекущийОбъект.Товары Цикл 
		Строка.Номер = Строка.НомерСтроки;
	КонецЦикла;
	
	НовыйДокумент = Объект.Ссылка.Пустая();
	
	// Обработка рабочей группы
	РаботаСРабочимиГруппами.ОбъектПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	// Срок действия
	СрокДействияПередЗаписьюНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	Если ТекущийОбъект.Стороны.Количество() > 0 И Не ВестиУчетСторон Тогда 
		ТекущийОбъект.Стороны.Очистить();
	КонецЕсли;
	
	Если ТекущийОбъект.Контрагенты.Количество() > 0
		И Не ВестиУчетПоКонтрагентам
		И Не ВестиУчетСторон Тогда 
		ТекущийОбъект.Контрагент = Неопределено;
		ТекущийОбъект.КонтактноеЛицо = Неопределено;
		ТекущийОбъект.ПодписалОтКонтрагента = Неопределено;
		ТекущийОбъект.Контрагенты.Очистить();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоУчастниковРабочейГруппы = РабочаяГруппаТаблица.Количество();
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для Каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для Каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(
				Новый Структура("Участник, Изменение",
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование списка добавленных участников рабочей группы
	Для Каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для Каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура("Участник, Изменение",
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда 
		Если Не ПараметрыЗаписи.Свойство("МассивСостояний") Тогда 
			СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
				Перечисления.СостоянияДокументов.Проект, 
				ПользователиКлиентСервер.ТекущийПользователь(), 
				ТекущаяДатаСеанса(),
			    Перечисления.СостоянияДокументов.ПустаяСсылка());
				
			МассивСостояний = Новый Массив;	
			МассивСостояний.Добавить(СтруктураСостояния);
			
			ПараметрыЗаписи.Вставить("МассивСостояний", МассивСостояний);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда 
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийОбъект.Ссылка, 
			"ЧисловойНомер, ДатаРегистрации, ЧисловойНомер");
		Если РеквизитыСсылки.ЧисловойНомер > 0 И ТекущийОбъект.ЧисловойНомер = -1 Тогда 
			ОсвободитьНомерДокумента(ТекущийОбъект, РеквизитыСсылки.ДатаРегистрации, РеквизитыСсылки.ЧисловойНомер);
		КонецЕсли;
	КонецЕсли;
	
	// Регистрация
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		Если ПараметрыЗаписи.Свойство("ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена")
			И Не ПараметрыЗаписи.ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если Не ПроверитьВозможностьРегистрации(ТекущийОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СообщениеОбОшибке = "";
		ЗарегистрироватьНаСервере(
			ТекущийОбъект, 
			СообщениеОбОшибке, 
			РегистрационныйНомер);
		
		СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
			Перечисления.СостоянияДокументов.Зарегистрирован, 
			ПользователиКлиентСервер.ТекущийПользователь(), 
			ТекущаяДатаСеанса(),
			Перечисления.СостоянияДокументов.ПустаяСсылка());
				
		МассивСостояний = Новый Массив;	
		МассивСостояний.Добавить(СтруктураСостояния);
		ПараметрыЗаписи.Вставить("МассивСостояний", МассивСостояний);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ПерепискаПоПредмету) И НачальныйПерепискаПоПредмету <> ПерепискаПоПредмету Тогда 
		ОснованиеПереписки = ПерепискаПоПредмету;	
	КонецЕсли;

	// Установка связей
	СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
		НачальныйПерепискаПоПредмету, ПерепискаПоПредмету, Справочники.ТипыСвязей.ПерепискаПоПредмету);
	
	Если СоздатьСвязьДляНумерации и ЗначениеЗаполнено(СвязанныйДокументДляНумерации) Тогда
		СвязиДокументов.СоздатьСвязь(
			ТекущийОбъект.Ссылка, 
			СвязанныйДокументДляНумерации, 
			ТипСвязиНумератора);
			
		СоздатьСвязьДляНумерации = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПисьмоОснование) Тогда
		СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
			Неопределено, Параметры.ПисьмоОснование, Справочники.ТипыСвязей.НаОснованииПисьма);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчитыватьНедействующиеДокументы", 
		Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента)) Тогда
		СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
			НачальныйНеДействуетВСоответствии, НеДействуетВСоответствии, Справочники.ТипыСвязей.НеДействуетВСоответствии);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента) Тогда
		СвязиДокументов.СоздатьСвязь(ТекущийОбъект.Ссылка, Основание, 
			ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента);
			
		//Обновим реквизиты связуемых документов
		РеквизитыВладельцаИзменены = СвязиДокументов.УстановитьРеквизитыПриДобавленииСвязи(ТекущийОбъект.Ссылка,
			УникальныйИдентификатор, ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента);
		НастройкаСвязи = СвязиДокументов.ПолучитьНастройкуСвязи(ТекущийОбъект.Ссылка, Основание, 
			ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента);
		
		Если НастройкаСвязи <> Неопределено И ЗначениеЗаполнено(НастройкаСвязи.ТипОбратнойСвязи) Тогда
			СвязиДокументов.УстановитьРеквизитыПриДобавленииСвязи(Основание,,
				НастройкаСвязи.ТипОбратнойСвязи);
		КонецЕсли;
	КонецЕсли;
	
	// пишем ранее подготовленные обязательные связи
	Для Каждого Строка Из ОбязательныеСвязи Цикл
		
		Если Строка.НужноЗаписать Тогда
			
			Попытка
			
				СвязиДокументов.СоздатьСвязь(
					ТекущийОбъект.Ссылка, 
					Строка.СвязанныйДокумент, 
					Строка.ТипСвязи,,,
					Строка.Комментарий);
					
				Строка.НужноЗаписать = Ложь;
				
			Исключение
				ОбязательныеСвязи.Удалить(Строка);
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;	
	
	КонецЦикла;
	
	// Изменение состояния
	Если ПараметрыЗаписи.Свойство("МассивСостояний") И ТипЗнч(ПараметрыЗаписи.МассивСостояний) = Тип("Массив") Тогда 
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда
			
			УстановленоСостояниеСогласован = Ложь;
			Для Каждого СтруктураСостояния Из ПараметрыЗаписи.МассивСостояний Цикл
				Если СтруктураСостояния.Состояние = Перечисления.СостоянияДокументов.Согласован 
					И СтруктураСостояния.Состояние <> СтруктураСостояния.НачальноеСостояние Тогда 
					УстановленоСостояниеСогласован = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если УстановленоСостояниеСогласован Тогда 
				
				ЕстьНеСогласованные = РаботаСВизамиСогласования.ЕстьВизыНеСогласованные(ТекущийОбъект.Ссылка);
				Если ЕстьНеСогласованные Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Нельзя указать состояние ""Согласовано"" так как есть визы с отрицательным результатом согласования'; en = 'It is not possible to set the state ""Approved"" because there are endorsements with negative approval result.'"),, 
					"Состояние",, Отказ);
				КонецЕсли;	
				
				ЕстьНаСогласовании = РаботаСВизамиСогласования.ЕстьВизыНаСогласовании(ТекущийОбъект.Ссылка);
				Если ЕстьНаСогласовании Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Нельзя указать состояние ""Согласовано"" так как есть визы с незаполненным результатом согласования'; en = 'It is not possible to set the state ""Approved"" because there are endorsements with empty approval result.'"),,
					"Состояние",, Отказ);
				КонецЕсли;
				
				Если Отказ Тогда 
					Возврат;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
			
		ИзменитьСостояние(ТекущийОбъект.Ссылка, ПараметрыЗаписи.МассивСостояний);
	КонецЕсли;
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	ЗаполнитьСвязи();
	
	// Этапы обработки документов
	Делопроизводство.ЗаписатьЭтапы(ЭтаФорма, ТекущийОбъект.Ссылка);
	
	// Статьи ДДС.
	РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ЗаписатьСтатьиДокумента(
		ТекущийОбъект.Ссылка, СтатьиДвиженияДенежныхСредств);
		
	РаботаСПодписямиДокументов.ЗаписатьФлагПодписиДокумента(Объект.Ссылка, ТекущийОбъект.ПодписанВсеми);		
		
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами	
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НовыйДокумент Тогда
		Если ЗначениеЗаполнено(ПараметрыОповещения) 
			И ПараметрыОповещения.Свойство("ИмяСобытия")
			И ПараметрыОповещения.ИмяСобытия = "СозданВнутреннийДокументНаОснованииПисьма" Тогда
			ПисьмоСсылка = ПараметрыОповещения.ПараметрСобытия;
			ПисьмоОбъект = ПисьмоСсылка.ПолучитьОбъект();
			ПисьмоОбъект.Предмет = Объект.Ссылка;
			ПисьмоОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйДокумент Тогда
		РаботаСШаблонамиДокументовСервер.ЗаписатьИспользованиеШаблона(Объект.Шаблон);
	КонецЕсли;
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, НовыйДокумент);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	// Автозаполнение файлов
	ИзменениеФайловMSWordНаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	ИспользоватьАвтозаполнениеФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов");
	ИспользоватьШтрихкоды = ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	
	// Создание файлов при сохранении нового документа
	Если ФайлыДобавленные.Количество() > 0 Тогда
		
		ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
		Индекс = ФайлыДобавленные.Количество() - 1;
        Пока Индекс >= 0 Цикл
			ФайлТаблицы = ФайлыДобавленные[Индекс]; 
			Если Не ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
            КонецЕсли;
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
			ВладелецФайла = Объект.Ссылка;
			Источник = ДанныеФайла.Ссылка;
			
			ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
			
			Если ТипЗнч(Объект.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Или ФайлТаблицы.ДобавленИзШаблона Тогда 
				ХранитьВерсииНовыйФайл = Истина;
			КонецЕсли;	
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.Комментарий = Источник.Описание;
			СведенияОФайле.ИмяБезРасширения = Источник.ПолноеНаименование;
			СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;
			
			НачатьТранзакцию();
			Попытка
				Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(ВладелецФайла, СведенияОФайле);
				
				Если ЗначениеЗаполнено(ФайлТаблицы.ШаблонОснованиеДляСоздания)
						И ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
					РегистрыСведений.ФайлыСозданныеПоШаблону.ЗанестиИнформациюОФайле(Приемник, Истина);//СозданПоШаблону
				КонецЕсли;
				
				ХранилищеФайла = Неопределено;
				Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
					ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
				КонецЕсли;
				
				СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
				СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
				СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
				СведенияОФайле.АдресВременногоХранилищаТекста = Источник.ТекущаяВерсия.ТекстХранилище;
				СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
				СведенияОФайле.ВремяИзменения = Источник.ТекущаяВерсия.ДатаМодификацииФайла;
				СведенияОФайле.ВремяИзмененияУниверсальное = Источник.ТекущаяВерсия.ДатаМодификацииУниверсальная;

				Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
				
				РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
				
				ПараметрыРаспознавания = РаботаСФайламиВызовСервера.ПодготовитьПараметрыРаспознавания();
				Если ПараметрыРаспознавания <> Неопределено И ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления") И ПараметрыРаспознавания.РаспознатьПослеДобавления Тогда
					РаспознатьНемедленно = Ложь;
					ОписаниеОшибки = "";
					РаспознанныйТекст = "";
					РаботаСФайламиВызовСервера.РаспознатьФайл(Приемник, ПараметрыРаспознавания, ОписаниеОшибки,
						РаспознанныйТекст, УникальныйИдентификатор,  РаспознатьНемедленно);
				КонецЕсли;
				
				Если КопироватьПодписиЭП Тогда
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					
					ЧислоПодписей = РаботаСЭП.СкопироватьВсеПодписи(Источник.ТекущаяВерсия, Приемник.ТекущаяВерсия);
					
					Если ЧислоПодписей <> 0 Тогда
						ФайлОбъект = Приемник.ПолучитьОбъект();
						ФайлОбъект.ПодписанЭП = Истина;
						ФайлОбъект.Записать();
						
						ВерсияОбъект.ПодписанЭП = Истина;
						ВерсияОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
				
				Если ФайлТаблицы.ДобавленИзШаблона Тогда
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.ШаблонОснованиеДляСоздания = ФайлТаблицы.ШаблонОснованиеДляСоздания;
					Если ФайлОбъект.ПодписанЭП Тогда
						ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
					КонецЕсли;
					ФайлОбъект.Записать();	
				КонецЕсли;
				
				Если ДанныеФайла.Зашифрован Тогда
					
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.Зашифрован = Истина;
					
					Для Каждого Строка Из Источник.СертификатыШифрования Цикл
						НоваяСтрока = ФайлОбъект.СертификатыШифрования.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					КонецЦикла;
					
					ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ФайлОбъект.Записать();
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					ВерсияОбъект.Зашифрован = Истина;
					ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ВерсияОбъект.Записать();
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
			// Автозаполнение файлов
			Если Источник <> Неопределено И ФайлТаблицы.ДобавленИзШаблона Тогда
				НастройкиАвтозаполнения = ПолучитьНастройкиАвтозаполненийШаблона(Приемник, 
					Приемник.ШаблонОснованиеДляСоздания, Приемник.ВладелецФайла);
				
				Если ИспользоватьАвтозаполнениеФайлов Тогда
					Если Не ИзменениеФайловMSWordНаСервере
						И Приемник.ТекущаяВерсияРасширение = "doc"
						И ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Обычная
						И Не ЭтоВебКлиент Тогда
						НоваяСтрока = ДанныеДляЗаполненияФайловНаКлиенте.Добавить();
						НоваяСтрока.Файл = Приемник;
						НоваяСтрока.Автозаполнение = Истина;
						НоваяСтрока.Штрихкодирование = Ложь;
						НоваяСтрока.НастройкиЗаполнения.Добавить(НастройкиАвтозаполнения);
					Иначе
						РезультатЗаполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
							Ложь, Приемник, Истина);
					КонецЕсли;
				КонецЕсли;
				
				Если ИспользоватьШтрихкоды Тогда
					ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Приемник);
					
					Если (ИзменениеФайловMSWordНаСервере И Приемник.ТекущаяВерсияРасширение = "doc")
						ИЛИ  Приемник.ТекущаяВерсияРасширение <> "doc" Тогда
						Если ДанныеОШтрихкоде <> Неопределено
							И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеФайла") Тогда
							Попытка 
								ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(Приемник.Ссылка,
									"ВставитьИзображениеШтрихкода", 
									Ложь, 
									ДанныеОШтрихкоде.ДвоичныеДанныеИзображения, 
									ДанныеОШтрихкоде.ДвоичныеДанныеФайла,
									ДанныеОШтрихкоде.Расширение,
									ДанныеОШтрихкоде.ФайлРедактируется,
									ДанныеОШтрихкоде.ИзменениеФайловMSWordТолькоНаСервере,
									ДанныеОШтрихкоде.НастройкиШтрихкода.ВысотаШК);
							Исключение
							КонецПопытки;		
						КонецЕсли;
					КонецЕсли;
					
					Если Не ИзменениеФайловMSWordНаСервере
						И Приемник.ТекущаяВерсияРасширение = "doc"
						И ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Обычная
						И Не ЭтоВебКлиент Тогда
						ПараметрыОтбора = Новый Структура("Файл", Приемник);
						НайденныеСтроки = ДанныеДляЗаполненияФайловНаКлиенте.НайтиСтроки(ПараметрыОтбора);
						
						Если НайденныеСтроки.Количество() > 0 Тогда
							НайденныеСтроки[0].Штрихкодирование = Истина;
							НайденныеСтроки[0].НастройкиЗаполнения.Добавить(ДанныеОШтрихкоде);
						Иначе
							НоваяСтрока = ДанныеДляЗаполненияФайловНаКлиенте.Добавить();
							НоваяСтрока.Файл = Приемник;
							НоваяСтрока.Автозаполнение = Ложь;
							НоваяСтрока.Штрихкодирование = Истина;
							НоваяСтрока.НастройкиЗаполнения.Добавить(НастройкиАвтозаполнения);
							НоваяСтрока.НастройкиЗаполнения.Добавить(ДанныеОШтрихкоде);	
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Источник = ТекущийФайлВСпискеДобавленныхДляРедактирования Тогда
				ТекущийФайлВСпискеДобавленныхДляРедактирования = Приемник;
			КонецЕсли;
			
			Если Источник = ТекущийФайлВСпискеДобавленныхДляОткрытия Тогда
				ТекущийФайлВСпискеДобавленныхДляОткрытия = Приемник;
			КонецЕсли;
			
			// Установка признака оригинала
			Если ВестиУчетСканКопийОригиналовДокументов
				И Не ФайлТаблицы.ДобавленИзШаблона 
				И ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Приемник.ТекущаяВерсияРасширение) Тогда 
				
				Делопроизводство.СохранитьСведенияОбОригиналеФайла(Приемник, ВладелецФайла);
				
				Если Элементы.Обзор.Видимость Тогда 
					ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
				Иначе
					ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
				КонецЕсли;
				Если ЭлементГруппаНадписьОтсутствуетОригинал.Видимость Тогда 
					ЭлементГруппаНадписьОтсутствуетОригинал.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ФайлыДобавленные.Удалить(Индекс);
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Файлы
	Делопроизводство.СохранитьСведенияОбОригиналахФайловИзКарточки(Файлы, Объект.Ссылка);
	Если НовыйДокумент Тогда 
		ЗаполнитьСписокФайлов(Истина);
	КонецЕсли;	
	
	// ЭП
	Если КопироватьПодписиЭП Тогда
		Источник = Параметры.ДокументОснование;
		Приемник = Объект.Ссылка;
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПодписанЭП = Истина;
		
		РаботаСЭП.СкопироватьВсеПодписи(Источник.Ссылка, Приемник);
		
		ДокументОбъект.Записать();
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();

	ИначеЕсли ДокументОснованиеПодписан Тогда	
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПодписанЭП = Ложь;
		ДокументОбъект.Записать();
		Прочитать();
	КонецЕсли;
	
	// Заполнение по шаблону
	ЭтаФорма.Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
	
	// Работа с визами
	РаботаСВизамиСогласования.ПослеЗаписиДокументаНаСервере(ЭтаФорма);
	ЗаполнитьСписокВиз();
	
	// Шаблоны автозапуска
	ЗаполнитьШаблоныДляАвтоЗапуска();
	
	// Срок действия
	СрокДействияПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	// Файлы
	Если Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица Тогда
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаСписокСоздание;
	КонецЕсли;
	
	// Комплекты документов
	Если ЯвляетсяКомплектом Или НачальныеЗначенияРеквизитов[0].ЯвляетсяКомплектом Тогда
		РаботаСКомплектамиДокументовСервер.СохранитьСоставКомплекта(ЭтаФорма);
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы
	УчастникиРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для Каждого Эл Из УчастникиРабочейГруппы Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	// Категории данных
	Если ИспользоватьКатегорииДанных Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Объект.Ссылка);
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НавигационнаяСсылкаДокумента = ПолучитьНавигационнуюСсылку(ТекущийОбъект.Ссылка);
	ПредставлениеОбъекта = Строка(ТекущийОбъект.Ссылка);
	
	Если ДокументооборотПраваДоступа.ЕстьПравоРегистрации(ТекущийОбъект.Ссылка) Тогда
		Элементы.РегистрационныйНомер.ТолькоПросмотр = Ложь;	
		Элементы.ДатаРегистрации.ТолькоПросмотр = Ложь;
	Иначе 
		Элементы.РегистрационныйНомер.ТолькоПросмотр = Истина;	
		Элементы.ДатаРегистрации.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Т.к. запись прошла, заполним новые начальные значения реквизитов. Выполнять в самом конце транзакции.
	ЗапомнитьЗначенияРеквизитов();
	
	Если НовыйДокумент Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	ЗаполнитьСвязи();
	ПолучитьОбзорДокумента();
	ПолучитьИнструкции();
	
	КлючЗаписи = Делопроизводство.ПолучитьКлючЗаписиРегистраДанныеДокументов(ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Работа со сторонами
	РаботаСПодписямиДокументов.ЗаполнитьТаблицуСторон(ЭтаФорма);
	Если ВестиУчетСторон Тогда
		УстановитьУсловноеОформление();
		ЕстьЭДО();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
	// Оценка производительности
	ОценкаПроизводительностиКлиентСервер.ЗакончитьРучнойЗамерВремени(УИДЗамераВыполнениеКомандыЗаписать);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказыватьУдаленныеВизы"] <> Неопределено
		И ИспользоватьВизыСогласования Тогда
		
		Элементы.ВизыСогласованияПоказыватьУдаленныеВизы.Пометка = Настройки["ПоказыватьУдаленныеВизы"];
		Если Не Объект.Ссылка.Пустая() Тогда 
			ЗаполнитьСписокВиз();
		КонецЕсли;
	КонецЕсли;
	
	Если Настройки["ПоказыватьУдаленныеФайлы"] <> Неопределено Тогда
		
		Если Не Объект.Ссылка.Пустая() Тогда 
			ЗаполнитьСписокФайлов(Истина);
		КонецЕсли;
		
		Если ИспользоватьОбзорДокументов И Не Объект.Ссылка.Пустая() Тогда		
			Элементы.ФайлыПоказыватьУдаленныеФайлы.Пометка = Настройки["ПоказыватьУдаленныеФайлы"];
		Иначе
			Элементы.ФайлыСозданиеПоказыватьУдаленныеФайлы.Пометка = Настройки["ПоказыватьУдаленныеФайлы"];		
		КонецЕсли;
	
	КонецЕсли;
	
	Если Настройки["ПоказыватьУдаленныеРезолюции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьРезолюцииВДокументах") Тогда
		
		Элементы.КПРезолюцийПоказыватьУдаленные.Пометка = Настройки["ПоказыватьУдаленныеРезолюции"];
		ЗаполнитьСписокРезолюций();
	КонецЕсли;
	
	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;
	
	Если Настройки["ПоказыватьТолькоОригиналыВСвязях"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда
		ЗаполнитьСвязи();
	КонецЕсли;
	
	Если Настройки["ПоказыватьУдаленныеСвязи"] <> Неопределено 
		И Не Объект.Ссылка.Пустая() Тогда
		Элементы.ДеревоСвязейПоказыватьУдаленныеСвязи.Пометка = Настройки["ПоказыватьУдаленныеСвязи"];
		ЗаполнитьСвязи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()

	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	// Штрихкодирование
	Если Не Объект.Ссылка.Пустая() И ИспользоватьШК
		И НеобходимоНапечататьШтрихкодПриСоздании И Не ПоказанВопросОВставкеШтрихкода Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для данного документа не был напечатан штрихкод.%1Действительно закрыть форму?'; en = 'Barcode for the document was not printed.%1Are you sure you want to close the form?'"),
			Символы.ПС);
		РежимВопроса = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗакрытиемПродолжение",
			ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимВопроса);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; en = 'Data has been changed. Save changes?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	Если ЗакрытьФормуПриНаличииЗанятыхФайлов <> Истина Тогда
		ДелопроизводствоКлиент.ПередЗакрытиемДокумента(Объект, Отказ, ЭтаФорма);
	КонецЕсли;
	
	Если Не ПоказанВопросОбОтправкеПоЭДО Тогда
		ОбменСКонтрагентамиДОСлужебныйКлиент.ЗапроситьСогласиеСформироватьДокументЭДО(Объект, Отказ, ЭтаФорма);
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоЧтоСозданныйДокумент И БылПоказанДиалогИнтерактивногоЗапускаПроцесса <> Истина Тогда
		ИнтерактивныйЗапускБизнесПроцессовКлиент.ВыполнитьИнтерактивныйЗапускБизнесПроцесса(
			ШаблоныДляАвтоЗапускаЗакрытиеКарточки, 
			Объект.Ссылка, 
			"ЗакрытиеКарточки",
			ЭтаФорма,
			Отказ,
			Истина);
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПродолжение(ОтветПользователя, параметры) Экспорт
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПоказанВопросОВставкеШтрихкода = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Найти(ДанныеСобытия.Href, "goods") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары;
		Возврат;
	ИначеЕсли Лев(ДанныеСобытия.Href, 6) <> "v8doc:" Тогда 
		Возврат;
	КонецЕсли;
	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
	ПараметрыНажатия = Новый Структура;
	ПараметрыНажатия.Вставить("ТекущийПользователь", ТекущийПользователь);
	ПараметрыНажатия.Вставить("СрокДействияДокументИсточникИзменения", СрокДействияДокументИсточникИзменения);
	ПараметрыНажатия.Вставить("СрокДействияКомментарий", СрокДействияКомментарий);
	
	ЭлементСрокДействия = Элементы.Найти("СрокДействияСтрока");
	Если ЭлементСрокДействия <> Неопределено Тогда
	ПараметрыНажатия.Вставить("НеИзменятьСрокДействия", 
		ТолькоПросмотр Или Элементы.СрокДействияСтрока.ТолькоПросмотр);
	КонецЕсли;
	
	ПараметрыНажатия.Вставить("Элемент", Элемент);
	ПараметрыНажатия.Вставить("ЭтаФорма", ЭтаФорма);
	ПараметрыНажатия.Вставить("МестоХранения", МестоХранения);
	ПараметрыНажатия.Вставить("ЗапретитьРучноеИзменениеСостоянияДокументов",
		ЗапретитьРучноеИзменениеСостоянияДокументов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИзменитьСрокДействияДокументаПродолжение",
		ЭтотОбъект);
	ПараметрыНажатия.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОбработатьСтатус = Новый ОписаниеОповещения(
		"ОбработатьСтатус",
		ЭтотОбъект);
	ПараметрыНажатия.Вставить("ОписаниеОбработатьСтатус", ОписаниеОбработатьСтатус);
	
	ДелопроизводствоКлиент.ОбработатьНажатиеНаПолеОбзор(Объект, НавигационнаяСсылкаПоля, ПараметрыНажатия); 
	
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущийПользователь", ТекущийПользователь);
	ПараметрыОткрытия.Вставить("СрокДействияДокументИсточникИзменения", СрокДействияДокументИсточникИзменения);
	ПараметрыОткрытия.Вставить("СрокДействияКомментарий", СрокДействияКомментарий);
	ПараметрыОткрытия.Вставить("ЭтаФорма", ЭтаФорма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИзменитьСрокДействияДокументаПродолжение",
		ЭтотОбъект);
	ПараметрыОткрытия.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ДелопроизводствоКлиент.ИзменитьСрокДействияДокумента(Объект, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) И (КонецДня(Объект.СрокИсполнения) < Объект.ДатаРегистрации) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Установленный срок исполнения меньше даты регистрации документа!'; en = 'Specified due date is less than the document registration date!'"),,,
				"Объект.СрокИсполнения");
			Возврат;
	КонецЕсли;	
	
	СрокИсполненияДней = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
		Объект.ВидДокумента, "СрокИсполнения");
	Если ЗначениеЗаполнено(СрокИсполненияДней) И ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда 
		Если Объект.СрокИсполнения > Объект.ДатаРегистрации + 24 * 3600 * СрокИсполненияДней Тогда 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Установленный срок исполнения превышает нормативный срок для данного вида документа!'; en = 'Specified due date exceeds the standard period specified for the document type!'"),,,
				"Объект.СрокИсполнения");
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ОбновитьОтображениеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	Если Не ВестиУчетПоСтатьямДДС Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтатей = СтатьиДвиженияДенежныхСредств.Количество();
	Если КоличествоСтатей = 1 Тогда
		СтатьиДвиженияДенежныхСредств[0].СуммаНДС = Объект.СуммаНДС;
	ИначеЕсли КоличествоСтатей > 1 Тогда
		ИтогСуммаНДС = 0;
		Для Каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
			ИтогСуммаНДС = ИтогСуммаНДС + Строка.СуммаНДС;
		КонецЦикла;
		Если ИтогСуммаНДС = Объект.СуммаНДС Тогда
			Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
				Элементы.СтраницаСуммаВерна;
		Иначе
			Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
				Элементы.СтраницаСуммаНеверна;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИзменитьСуммуНажатие(Элемент)
	
	ОткрытьСтатьиДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если СтатьиДвиженияДенежныхСредств.Количество() <= 1 
			И ЗначениеЗаполнено(Текст) Тогда
			ДанныеВыбора = ПолучитьДанныеВыбораСтатейДДС(Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если СтатьиДвиженияДенежныхСредств.Количество() <= 1 
			И ЗначениеЗаполнено(Текст) Тогда
			ДанныеВыбора = ПолучитьДанныеВыбораСтатейДДС(Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораСтатейДДС(Текст)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура);
	ПараметрыВыбора.Вставить("СтрокаПоиска", Текст);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыВыбора.Вставить("СпособПоискаСтроки", СпособПоискаСтрокиПриВводеПоСтроке.ЛюбаяЧасть);
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеСтатейДДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтатьиДвиженияДенежныхСредств.Очистить();
	Строка = СтатьиДвиженияДенежныхСредств.Добавить();
	Строка.СтатьяДвиженияДенежныхСредств = ВыбранноеЗначение;
	Строка.Сумма = Объект.Сумма;
	Строка.СуммаНДС = Объект.СуммаНДС;
	СформироватьПредставлениеСтатейДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСтатьиДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСтатьиДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСОчистка(Элемент, СтандартнаяОбработка)
	
	СтатьиДвиженияДенежныхСредств.Очистить();
	СформироватьПредставлениеСтатейДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатьиДДС()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСтатьиДДСЗавершение", ЭтаФорма);
	МассивСтрок = Новый Массив;
	Для каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("СтатьяДвиженияДенежныхСредств", 
			Строка.СтатьяДвиженияДенежныхСредств);
		СтруктураСтроки.Вставить("Сумма", Строка.Сумма);
		СтруктураСтроки.Вставить("СуммаНДС", Строка.СуммаНДС);
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтатьиДвиженияДенежныхСредств", МассивСтрок);
	ПараметрыФормы.Вставить("Сумма", Объект.Сумма);
	ПараметрыФормы.Вставить("СуммаНДС", Объект.СуммаНДС);
	ПараметрыФормы.Вставить("УчитыватьНДС", УчитыватьНДС);
	ОткрыватьНаПросмотр = (Элементы.ПредставлениеСтатейДДС.ТолькоПросмотр Или ТолькоПросмотр);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ОткрыватьНаПросмотр);
	ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.СтатьиДвиженияДенежныхСредств", ПараметрыФормы, 
		ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатьиДДСЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	СтатьиДвиженияДенежныхСредств.Очистить();
	Объект.Сумма = 0;
	Объект.СуммаНДС = 0;
	Для каждого СтруктураСтроки из Результат Цикл
		Строка = СтатьиДвиженияДенежныхСредств.Добавить();
		Строка.СтатьяДвиженияДенежныхСредств = СтруктураСтроки.СтатьяДвиженияДенежныхСредств;
		Строка.Сумма = СтруктураСтроки.Сумма;
		Строка.СуммаНДС = СтруктураСтроки.СуммаНДС;
		Объект.Сумма = Объект.Сумма + СтруктураСтроки.Сумма;
		Объект.СуммаНДС = Объект.СуммаНДС + СтруктураСтроки.СуммаНДС;
	КонецЦикла;
	СформироватьПредставлениеСтатейДДС();
	Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
		Элементы.СтраницаСуммаВерна;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаПриИзменении(Элемент)
	
	ОбновитьПолныйПуть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененПриИзменении(Элемент)
	
	Если Объект.НеДействует Тогда 
		Элементы.НеДействуетВСоответствии.Доступность = Истина;
		
		Если УчитыватьСрокДействия 
			И (НачалоДня(Объект.ДатаОкончанияДействия) <> НачалоДня(ТекущаяДата()) 
			Или Объект.Бессрочный <> Ложь 
			Или Объект.ПорядокПродления <> ПредопределенноеЗначение("Перечисление.ПорядокПродления.НеПродлевается")) Тогда
			Объект.ДатаОкончанияДействия = ТекущаяДата();
			Объект.Бессрочный = Ложь;
			Объект.ПорядокПродления = ПредопределенноеЗначение("Перечисление.ПорядокПродления.НеПродлевается");
			СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(
				Объект, СрокДействияКомментарий);
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ПолучитьОбзорДокумента();
			КонецЕсли;
			
			ПоказатьПредупреждение(, НСтр( "ru = 'Срок действия документа изменен'; en = 'Period of validity of the document is changed'"));
		КонецЕсли;
	Иначе
		НеДействуетВСоответствии = Неопределено;
		Элементы.НеДействуетВСоответствии.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененДокументомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("НеДействует", Ложь));
	ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.Обзор И Модифицированность Тогда
		ПолучитьОбзорДокумента();
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДекорацияВзаимодействиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке документ необходимо записать.'; en = 'To navigate to the link you need to save the document.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
		Новый Структура("Предмет", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЭПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ГруппаЭП.Видимость Тогда 
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Не подписан электронной подписью'; en = 'Not signed digitally'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КартинкаФорумНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке документ необходимо записать.'; en = 'To navigate to the link you need to save the document.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Справочник.ТемыОбсуждений.Форма.ФормаПросмотраТемы", 
		Новый Структура("Документ", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКатегорииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Категории;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаПриИзменении(Элемент)
	
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Контрагент""'; en = 'Field ""Counterparty"" is not filled in'"),,
			"Объект.Контрагенты["+ Формат(ТекущиеДанные.НомерСтроки-1, "ЧН=0; ЧГ=0") +"].Контрагент",,);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПодписалОтКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Контрагент""'; en = 'Field ""Counterparty"" is not filled in'"),,
			"Объект.Контрагенты["+ Формат(ТекущиеДанные.НомерСтроки-1, "ЧН=0; ЧГ=0") +"].Контрагент",,);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтатус(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда 
		ИзменитьСостояние(Объект.Ссылка, Результат);
		ОповеститьОбИзменении(КлючЗаписи);
	КонецЕсли;	

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Изменение полей, влияющих на номер

&НаКлиенте
Процедура ДатаРегистрацииПриИзменении(Элемент)
	
	ПриИзмененииДатыРегистрации();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, ДатаРегистрации);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ПриИзмененииВидаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если БыстрыйВыборВидаДокумента Тогда 
		ДанныеВыбора = ВидДокументаПолучитьДанныеВыбора("");
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("ЗапретитьСозданиеДокументовНеПоШаблону", Ложь);
		Отбор.Вставить("ПометкаУдаления", Ложь);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.ВидДокумента);
		
		ОткрытьФорму("Справочник.ВидыВнутреннихДокументов.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ВидДокументаПолучитьДанныеВыбора(Текст);
	КонецЕсли;	
	
КонецПроцедуры

// Готовит данные выбора для поля ВидДокумента
&НаСервереБезКонтекста
Функция ВидДокументаПолучитьДанныеВыбора(Текст)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЗапретитьСозданиеДокументовНеПоШаблону", Ложь);
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("СтрокаПоиска", Текст);
	ПараметрыВыбора.Вставить("Отбор", Отбор);
	
	ДанныеВыбора = Справочники.ВидыВнутреннихДокументов.ПолучитьДанныеВыбора(ПараметрыВыбора);	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	// ручное изменение номера
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
	Нумератор = Нумерация.ПолучитьНумераторДокумента(СтруктураПараметров);
	Если ЗначениеЗаполнено(Нумератор) Тогда 
		Если ЗначениеЗаполнено(Объект.Ссылка) И Объект.ЧисловойНомер > 0 Тогда 
			ОсвободитьНомерДокумента(Объект, ДатаРегистрации, ЧисловойНомер);
		КонецЕсли;
		Объект.ЧисловойНомер = -1;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Элементы.Организация.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.Организация);
	УчитыватьНДС = Делопроизводство.УчитыватьНДС(Объект.Организация);
	Элементы.ГруппаСуммаНДС.Видимость = УчитыватьНДС;
	Элементы.ТоварыСтавкаНДС.Видимость = УчитыватьНДС;
	Элементы.ТоварыСуммаНДС.Видимость = УчитыватьНДС;
	
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДеятельностиПриИзменении(Элемент)
	
	ПолучитьИнструкции();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Выбор пользователей, контрагента и контактного лица

&НаКлиенте
Процедура УтвердилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Утвердил);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		СтандартнаяОбработка = Ложь;
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Контрагент""'; en = 'Field ""Counterparty"" is not filled in'"),,,
			"Объект.Контрагент");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОтКонтрагентаПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОтКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		СтандартнаяОбработка = Ложь;
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Контрагент""'; en = 'Field ""Counterparty"" is not filled in'"),,,
			"Объект.Контрагент");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Подготовил) И Не НельзяМенятьПодразделение Тогда 
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Подготовил);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Подготовил);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с составом документа

&НаКлиенте
Процедура СоставСтрокаПриИзменении(Элемент)
	
	Результат = ДелопроизводствоКлиент.ПолучитьСоставДокумента(Объект, СоставСтрока, НачальныйСостав); 
	СоставСтрока = Результат.Состав;
    НачальныйСостав = СоставСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаПоиска = НРег(Элемент.ТекстРедактирования);	
	Результат = ДелопроизводствоКлиент.ПолучитьСоставДокумента(Объект, СтрокаПоиска, НачальныйСостав); 
	СоставСтрока = Результат.Состав;
	
	// На случай возврата ошибки останавливаем вызов
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;	

	СтандартнаяОбработка = Ложь;	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КоличествоЛистов", Объект.КоличествоЛистов);
	ПараметрыФормы.Вставить("КоличествоПриложений", Объект.КоличествоПриложений);
	ПараметрыФормы.Вставить("КоличествоЭкземпляров", Объект.КоличествоЭкземпляров);
	ПараметрыФормы.Вставить("ЛистовВПриложениях", Объект.ЛистовВПриложениях);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоставСтрокаНачалоВыбораПродолжение",
		ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.СоставДокумента", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтрокаНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Количество() > 0 Тогда 
		Объект.КоличествоЛистов = Результат.КоличествоЛистов;
		Объект.КоличествоПриложений = Результат.КоличествоПриложений;
		Объект.КоличествоЭкземпляров = Результат.КоличествоЭкземпляров;
		Объект.ЛистовВПриложениях = Результат.ЛистовВПриложениях;
		
        ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	
	
	СоставСтрока = ДелопроизводствоКлиентСервер.ПолучитьСтрокуСоставДокумента(Объект);
    НачальныйСостав = СоставСтрока;
		
КонецПроцедуры	

&НаКлиенте
Процедура СоставСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.КоличествоЛистов = 0;
	Объект.КоличествоПриложений = 0;
	Объект.КоличествоЭкземпляров = 0;
	Объект.ЛистовВПриложениях = 0;
    НачальныйСостав = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с делом документа

&НаКлиенте
Процедура ДелоТекстПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ДелоТекст) Тогда 
		Объект.Дело = Неопределено;
		МестоХранения = Неопределено;
		ДелоТекст = Неопределено;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДелоТекстНачалоВыбораПродолжение",
		ЭтотОбъект,
		Новый Структура("Элемент", Элемент));
			
	Если Не ЗначениеЗаполнено(Объект.Дело) 
		И Делопроизводство.КоличествоЗадач(Объект.Ссылка, Истина) > 0 Тогда 
		
		ТекстВопроса = 
			НСтр("ru = 'По документу имеются невыполненные задачи.'; en = 'There are pending tasks for the document.'") 
			+ Символы.ПС 
			+ НСтр("ru = 'Вы действительно хотите поместить документ в дело?'; en = 'Are you sure you want to transfer the document to the case?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстНачалоВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаРегистрации", 		Объект.ДатаРегистрации);
		ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
		ПараметрыФормы.Вставить("ВидДокумента", 		Объект.ВидДокумента);
		ПараметрыФормы.Вставить("Контрагент", 		Объект.Контрагент);
		ПараметрыФормы.Вставить("ВопросДеятельности", 	Объект.ВопросДеятельности);
		ПараметрыФормы.Вставить("ТекущаяСтрока", 		Объект.Дело);
		ПараметрыФормы.Вставить("НоменклатураДел", 		Объект.НоменклатураДел);
		ПараметрыФормы.Вставить("Подразделение", 		Объект.Подразделение);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ПометкаУдаления", Ложь);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ДелопроизводствоКлиент.ВыбратьДело(Параметры.Элемент, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Дело = Неопределено;
	МестоХранения = Неопределено;
	ДелоТекст = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ДелоТекст) Тогда
		ПоказатьЗначение(, Объект.Дело);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ДелаХраненияДокументов") Тогда 
		
		СтандартнаяОбработка = Ложь;
		Дело = ВыбранноеЗначение;
				
		Если ЗначениеЗаполнено(Дело) Тогда	
			
			Если Не ЗначениеЗаполнено(Объект.Дело) Тогда 
				КоличествоЗадач = Делопроизводство.КоличествоЗадач(Объект.Ссылка, Истина);
				Если КоличествоЗадач > 0 Тогда 
					
					ПараметрыОбработчика = Новый Структура();
					ПараметрыОбработчика.Вставить("Дело", Дело);
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ДелоТекстОбработкаВыбораПродолжение",
						ЭтотОбъект,
						ПараметрыОбработчика);
					
					ТекстВопроса = 
						НСтр("ru = 'По документу имеются невыполненные задачи.'; en = 'There are pending tasks for the document.'") 
						+ Символы.ПС 
						+ НСтр("ru = 'Вы действительно хотите поместить документ в дело?'; en = 'Are you sure you want to transfer the document to the case?'");
					
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
					Возврат;	
				КонецЕсли;
			КонецЕсли;
			
			РеквизитыДела = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(Дело, 
				"НоменклатураДел.Индекс, МестоХраненияДел"); 
			ДелоТекст = СокрЛП(РеквизитыДела.НоменклатураДелИндекс) + " " + СокрЛП(Дело);
			МестоХранения = РеквизитыДела.МестоХраненияДел;
		Иначе
			ДелоТекст = Неопределено;
			МестоХранения = Неопределено;
		КонецЕсли;	

		Объект.Дело = Дело;
        Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		МестоХранения = Неопределено;
		ДелоТекст = Неопределено;
		Возврат;
	КонецЕсли;
	
	Дело = Параметры.Дело;
	РеквизитыДела = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(Дело, 
		"НоменклатураДел.Индекс, МестоХраненияДел"); 
	ДелоТекст = СокрЛП(РеквизитыДела.НоменклатураДелИндекс) + " " + СокрЛП(Дело);
	МестоХранения = РеквизитыДела.МестоХраненияДел;
	Объект.Дело = Дело;
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораДелаХранения(
			Текст, Объект.Организация, Объект.Подразделение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
        СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораДелаХранения(
			Текст, Объект.Организация, Объект.Подразделение);	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с номенклатурой дел

&НаКлиенте
Процедура НоменклатураДелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Контрагенты = Новый Массив;
	Для Каждого Строка Из Объект.Стороны Цикл
		Если РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Строка.Сторона) Тогда
			Контрагенты.Добавить(Строка.Сторона);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
	ПараметрыФормы.Вставить("ВидДокумента", 		Объект.ВидДокумента);
	ПараметрыФормы.Вставить("Контрагент", 			Контрагенты);
	ПараметрыФормы.Вставить("ВопросДеятельности", 	Объект.ВопросДеятельности);
	ПараметрыФормы.Вставить("ТекущаяСтрока", 		Объект.НоменклатураДел);
	ПараметрыФормы.Вставить("Подразделение", 		Объект.Подразделение);
	
	ОткрытьФорму("Справочник.НоменклатураДел.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(
			Текст, Объект.Организация, Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(
			Текст, Объект.Организация, Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с состоянием документа

&НаКлиенте
Процедура СостояниеТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ИспользоватьПодписание", ИспользоватьПодписание);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СостояниеТекстНачалоВыбораПродолжение",
		ЭтотОбъект);
		
	ОткрытьФорму("ОбщаяФорма.СостоянияДокумента", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда 
		Если Объект.Ссылка.Пустая() Тогда 
			ПараметрыЗаписи = Новый Структура("МассивСостояний", Результат);
			Если Не Записать(ПараметрыЗаписи) Тогда 
				Возврат;
			КонецЕсли;	
		Иначе
			ИзменитьСостояние(Объект.Ссылка, Результат);
			ОповеститьОбИзменении(КлючЗаписи);
		КонецЕсли;			
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ДляПросмотра", Истина);
	ПараметрыФормы.Вставить("ИспользоватьПодписание", ИспользоватьПодписание);
	
	ОткрытьФорму("ОбщаяФорма.СостоянияДокумента", ПараметрыФормы, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаКлиенте
Процедура ДеревоСвязейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;				
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
	 Или ТекущиеДанные.ЭтоРодитель Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ВыборФайла(ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязаннаяСтрока) Тогда 
		ПерейтиПоНавигационнойСсылке(ТекущиеДанные.СвязаннаяСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязанныйДокумент) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.СвязанныйДокумент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПриАктивизацииСтроки(Элемент)
	
	Элементы.ДеревоСвязейОткрыть.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Ложь;
	Элементы.ДеревоСвязейУдалить.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаУдалить.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаСкопировать.Доступность = Ложь;
	
	Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейСохранитьКак.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейНапечататьФайлы.Доступность = Ложь;
	Элементы.ДеревоСвязейСохранитьКак.Доступность = Ложь;
	Элементы.ДеревоСвязейНапечататьФайлы.Доступность = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		
		Элементы.ДеревоСвязейОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейСохранитьКак.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейНапечататьФайлы.Доступность = Истина;
		Элементы.ДеревоСвязейСохранитьКак.Доступность = Истина;
		Элементы.ДеревоСвязейНапечататьФайлы.Доступность = Истина;
		
	ИначеЕсли Не ТекущиеДанные.ЭтоРодитель Тогда 	
		
		Элементы.ДеревоСвязейОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейУдалить.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаУдалить.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаСкопировать.Доступность = Истина;
		
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Объект.Ссылка.Пустая() Тогда 
		
		НеПродолжатьСозданиеСвязи = Ложь;
		Если ОбязательныеТипыСвязей.Количество() <> 0 И
			ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
			НеПродолжатьСозданиеСвязи = Истина;
		КонецЕсли;	
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
		Если НеПродолжатьСозданиеСвязи Тогда
			Возврат;
		КонецЕсли;	
			
	КонецЕсли;

	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТипСвязи", Элементы.ДеревоСвязей.ТекущиеДанные.ТипСвязи);
	КонецЕсли;	
	
	Если Копирование Тогда 
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("Документ", Объект.Ссылка);
		ПараметрыКлюча.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыКлюча.Вставить("СвязанныйДокумент", ТекущиеДанные.СвязанныйДокумент);
		ПараметрыКлюча.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);
		
		ПараметрыФормы.Вставить("ЗначениеКопирования", ПолучитьКлюч(ПараметрыКлюча));
		Открытьформу("РегистрСведений.СвязиДокументов.ФормаЗаписи", ПараметрыФормы, Элементы.ДеревоСвязей);
	Иначе 
		ОчиститьСообщения();
		Открытьформу("РегистрСведений.СвязиДокументов.Форма.СозданиеСвязи", ПараметрыФормы,
			Элементы.ДеревоСвязей,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Если ТекущиеДанные.ЭтоРодитель Тогда		
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипСвязи) Тогда
			ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ТипСвязи);
			ОткрытьФорму("Справочник.ТипыСвязей.Форма.ФормаЭлемента", ПараметрыФормы, Элементы.ДеревоСвязей);
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Файл);
	Иначе	
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("Документ", Объект.Ссылка);
		ПараметрыКлюча.Вставить("ТипСвязи", Элементы.ДеревоСвязей.ТекущиеДанные.ТипСвязи);
		ПараметрыКлюча.Вставить("СвязанныйДокумент", Элементы.ДеревоСвязей.ТекущиеДанные.СвязанныйДокумент);
		ПараметрыКлюча.Вставить("СвязаннаяСтрока", Элементы.ДеревоСвязей.ТекущиеДанные.СвязаннаяСтрока);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
		ПараметрыФормы.Вставить("Ключ", ПолучитьКлюч(ПараметрыКлюча));
		Открытьформу("РегистрСведений.СвязиДокументов.ФормаЗаписи", ПараметрыФормы, Элементы.ДеревоСвязей);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
	 Или ТекущиеДанные.ЭтоРодитель
	 Или ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоСвязейПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("ТекущиеДанные", ТекущиеДанные));

	ПоказатьВопрос(ОписаниеОповещения, 
		НСтр("ru = 'Удалить запись?'; en = 'Delete relation?'"), 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ТекущиеДанные = Параметры.ТекущиеДанные;
		
		ПараметрыУдаления = Новый Структура;
		ПараметрыУдаления.Вставить("Документ", Объект.Ссылка);
		ПараметрыУдаления.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыУдаления.Вставить("СвязанныйДокумент", ТекущиеДанные.СвязанныйДокумент);
		ПараметрыУдаления.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);
		
		УдалитьСвязь(ПараметрыУдаления);
		
		КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			Элементы.ДеревоСвязей.Развернуть(Строка.ПолучитьИдентификатор(), Истина)
		КонецЦикла;
		
		// Оповестим связанный документ об удалении связи
		Если ЗначениеЗаполнено(ТекущиеДанные.СвязанныйДокумент) Тогда 
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Документ", ТекущиеДанные.СвязанныйДокумент);
			Оповестить("ИзмененыСвязиПодчиненныхДокументов", ПараметрОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СвязанныйДокумент = ПараметрыПеретаскивания.Значение[0];
	
	Если ЗначениеЗаполнено(СвязанныйДокумент)
		И ДелопроизводствоКлиент.ДокументыМожноСвязать(Объект.Ссылка, СвязанныйДокумент) Тогда 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("СвязанныйДокумент", СвязанныйДокумент);
		
		ОчиститьСообщения();
		Открытьформу("РегистрСведений.СвязиДокументов.Форма.СозданиеСвязи", ПараметрыФормы,
			Элементы.ДеревоСвязей,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 			
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя установить связь между выбранными объектами'; en = 'It is not possible to establish a relation between the selected objects'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоОригиналыВСвязяхПриИзменении(Элемент)
	
	ЗаполнитьСвязи();
	
	КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина)
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Работа с инструкциями

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с категориями документа

&НаКлиенте
Процедура СписокКатегорийДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ВыполнитьОткрытиеФормыПодбораКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьКатегорииИзСпискаВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПослеУдаления(Элемент)
	
	СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыСтороны

&НаКлиенте
Процедура СтороныСторонаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПараметрыТаблицыСтороны(ТекущиеДанные);
	ЕстьЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЗапретУдаления Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ТекущийПользовательПодписант = ТекущиеДанные.Подписал = ТекущийПользователь;
	ТекущийПользовательУстановилПодпись = ТекущиеДанные.Установил = ТекущийПользователь;
	
	Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(ТекущиеДанные.Сторона)
		И ТекущиеДанные.Подписан = Истина
		И ЗначениеЗаполнено(ТекущиеДанные.Подписал)
		И ЗначениеЗаполнено(ТекущиеДанные.Установил)
		И (Не ТекущийПользовательПодписант И Не ТекущийПользовательУстановилПодпись) Тогда
			Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПослеУдаления(Элемент)
	
	ЕстьЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ТекущиеДанные.Подписал = "";
		
		Если ТекущиеДанные.НомерСтроки > 1 Тогда
			ТекущиеДанные.Сторона = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Иначе 
			ТекущиеДанные.Сторона = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИОрганизациюВРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.СтороныДействиеПоЭДО Тогда
		СтандартнаяОбработка = Ложь;
		Если Не НаправлениеИсходящий 
			И (ТекущиеДанные.ДействиеПоЭДО = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Подписать") 
			Или ТекущиеДанные.ДействиеПоЭДО = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Утвердить")) Тогда
			Если Не Записать() Тогда 
				Возврат;
			КонецЕсли;
			ПараметрыФормыПодписания = Новый Структура;
			ПараметрыФормыПодписания.Вставить("ДействиеПоЭДО", ТекущиеДанные.ДействиеПоЭДО);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"СтороныВыборДействияПоЭДОПродолжение",
				ЭтотОбъект);
			ОткрытьФорму(
				"ОбщаяФорма.ПодписатьУтвердитьОтклонить", 
				ПараметрыФормыПодписания,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		ИначеЕсли ТекущиеДанные.ДействиеПоЭДО = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Подписать") Тогда
			ПодписатьЭД(Неопределено);
		ИначеЕсли ТекущиеДанные.ДействиеПоЭДО = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Утвердить") Тогда
			УтвердитьЭД();
		ИначеЕсли ТекущиеДанные.ДействиеПоЭДО = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭДДО.НеСформирован") Тогда
			;
		ИначеЕсли ТекущиеДанные.ДействиеПоЭДО = "Начать заново" Тогда
			НачатьЭДОЗаново(ТекущиеДанные);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтороныВыборДействияПоЭДОПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
			ПодписатьЭД(Неопределено);
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		УтвердитьЭД();
	ИначеЕсли Результат = КодВозвратаДиалога.Прервать Тогда
		ОтклонитьАннулироватьДО(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСПодписямиДокументовКлиент.СтороныПриАктивизацииЯчейки(ЭтаФорма, Элементы, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;	
	
	Если Объект.Стороны.Количество() = 0 Тогда
		ОрганизациюПоУмолчанию = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		Если ЗначениеЗаполнено(ОрганизациюПоУмолчанию) Тогда
			Отказ = Истина;
			ДобавитьСторону(ОрганизациюПоУмолчанию);
			Элементы.Стороны.ВыделенныеСтроки.Добавить(Объект.Стороны[0].ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЭДОЗаново(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЭДОЗановоПродолжение",ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда  
		
		ТекстВопроса = ТекстВопросаНезаписанныхДанных(НСтр("ru = 'Начать ЭДО заново'; en = 'Start EDI again'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЭДОЗановоПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЭДОЗановоЗавершение", ЭтотОбъект);
		
		Если ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ПодписанЭП") Тогда
			
			ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Что бы вернуть документ на редактирование, 
			|нужно удалить электронные подписи по документу. 
			|Удалить ЭП документа?';
			|en = 'Digital signatures must be deleted
			|in order to start editing the document.
			|Delete the signatures?'"), 
			РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура НачатьЭДОЗановоЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ОбменСКонтрагентамиДОВызовСервера.НачатьЭДОЗаново(Объект.Ссылка, Объект.Стороны[1].Сторона, НаправлениеИсходящий);
		ЕстьЭДО();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// По организациям работает быстрый выбор.
	Если ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Организации") Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	Если ТекущиеДанные.НомерСтроки > 1 Тогда
		ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
		ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("ОтображатьОрганизации", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор стороны'; en = 'Select a party'"));
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Сторона) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ТекущиеДанные.Сторона);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы,
		Элементы.СтороныСторона,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") Тогда
		ТекущиеДанные.Сторона = ВыбранноеЗначение;
		ТекущиеДанные.КонтактноеЛицо = ПользователиПустаяСсылка;
		ТекущиеДанные.Подписал = "";
		ЕстьЭДО();
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекущиеДанные.Сторона = ВыбранноеЗначение;
		ТекущиеДанные.КонтактноеЛицо = КонтактноеЛицоПустаяСсылка;
		ТекущиеДанные.Подписал = "";
		ЕстьЭДО();
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ (ЗначениеЗаполнено(ТекущиеДанные.Сторона) И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
			ТекущиеДанные.Сторона = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
			ЕстьЭДО();
		КонецЕсли;	
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		ТекущиеДанные.Сторона = Контрагент;
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		ЕстьЭДО();
	КонецЕсли;
	
	Модифицированность = Истина;
	СкопироватьКонтрагентаИОрганизациюВРеквизиты();
	УстановитьПараметрыТаблицыСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("НомерСтрокиСтороны", ТекущиеДанные.НомерСтроки);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораСтороны(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("НомерСтрокиСтороны", ТекущиеДанные.НомерСтроки);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораСтороны(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПараметрыТаблицыСтороны(ТекущиеДанные);	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСПодписямиДокументовКлиент.СтороныКонтактноеЛицоНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Элементы.СтороныКонтактноеЛицо);
		
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда

		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ (ЗначениеЗаполнено(ТекущиеДанные.Сторона) И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
				ТекущиеДанные.Сторона = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
				ЕстьЭДО();
		КонецЕсли;	
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ Контрагент <> ТекущиеДанные.Сторона Тогда
				ТекущиеДанные.Сторона = Контрагент;
				ЕстьЭДО();
		КонецЕсли;
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;	
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьПараметрыТаблицыСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораКонтактногоЛицаСтороны(ПараметрыПолученияДанных);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораКонтактногоЛицаСтороны(ПараметрыПолученияДанных);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПараметрыТаблицыСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСПодписямиДокументовКлиент.СтороныПодписалНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Элементы.СтороныПодписал);
		
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда

		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ (ЗначениеЗаполнено(ТекущиеДанные.Сторона) И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
				ТекущиеДанные.Сторона = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
				ЕстьЭДО();
		КонецЕсли;	
		ТекущиеДанные.Подписал = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ Контрагент <> ТекущиеДанные.Сторона Тогда
				ТекущиеДанные.Сторона = Контрагент;
				ЕстьЭДО();
		КонецЕсли;
		ТекущиеДанные.Подписал = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		ТекущиеДанные.Подписал = ВыбранноеЗначение;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьПараметрыТаблицыСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораПодписал(ПараметрыПолученияДанных);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораПодписал(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписанПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные.Подписан Тогда 
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ДатаПодписи) Тогда
			ТекущиеДанные.ДатаПодписи = ТекущаяДата();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Подписал)
			И РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(ТекущиеДанные.Сторона) Тогда
				ТекущиеДанные.Подписал = ТекущийПользователь;
		КонецЕсли;
		Если ТекущиеДанные.НомерСтроки = 1 Тогда
			ДокументПодписанНами = Истина;
		КонецЕсли; 
		ТекущиеДанные.Установил = ТекущийПользователь;
		
	Иначе
		Если ТекущиеДанные.НомерСтроки = 1 Тогда
			ДокументПодписанНами = Ложь;
		ИначеЕсли ЕстьЭДО И ТекущиеДанные.НомерСтроки = 2 И Не НаправлениеИсходящий Тогда
			ТекущиеДанные.Подписан = Истина;
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Документ пришел по ЭДО! Нельзя изменять признак подписанности стороны отправителя'; en = 'The document was received via EDI! It is forbidden to change the sender party attributes.'"),,,);
			Возврат;
		КонецЕсли; 
		ТекущиеДанные.ДатаПодписи = '00010101';
		ТекущиеДанные.Установил = Неопределено;
	КонецЕсли;
	УстановитьВидимостьПоЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", ТекущиеДанные.Комментарий);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКомментарияСтороныЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКомментарияСтороныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Комментарий = Результат;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрифыУтверждения

&НаКлиенте
Процедура ГрифыУтвержденияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьГрифПродолжение",
		ЭтотОбъект);
		
	ПараметрыФормы = Новый Структура("ЗаголовокКомандыЗаписать", "Сохранить");
		
	ОткрытьФорму("ОбщаяФорма.УтверждениеДокумента", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГрифПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		ГрифУтверждения = Объект.ГрифыУтверждения.Добавить();
		ЗаполнитьЗначенияСвойств(ГрифУтверждения, Результат);
		
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифыУтвержденияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.ГрифыУтверждения.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИзменениеГрифаПродолжение",
		ЭтотОбъект);
		
	ПараметрыФормы = Новый Структура("АвторУтверждения, ДатаУтверждения, Комментарий,
		|Результат, УстановилГриф, ДатаУстановкиГрифа, ИдентификаторСтроки, ЗаголовокКомандыЗаписать, Шаблон");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	ПараметрыФормы.ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормы.ЗаголовокКомандыЗаписать = "Сохранить";
	ПараметрыФормы.Шаблон = Объект.Шаблон;
	
	ОткрытьФорму("ОбщаяФорма.УтверждениеДокумента", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеГрифаПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ГрифУтверждения = Объект.ГрифыУтверждения.НайтиПоИдентификатору(Результат.ИдентификаторСтроки);
		ГрифУтверждения.АвторУтверждения = Результат.АвторУтверждения;
		ГрифУтверждения.ДатаУтверждения = Результат.ДатаУтверждения;
		ГрифУтверждения.Результат = Результат.Результат;
		ГрифУтверждения.Комментарий = Результат.Комментарий;
		
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифыУтвержденияПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.ГрифыУтверждения.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если Не ПроверитьВыделенныеГрифыУтверждений(ВыделенныеСтроки, ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Подписал, РезультатПодписания, ДатаПодписания,
		|УстановилПодпись, ДатаУстановкиПодписи, КомментарийПодписи, Шаблон");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	
	ОткрыватьНаПросмотр = Элементы.ПодписьТекст.ТолькоПросмотр Или ТолькоПросмотр;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ОткрыватьНаПросмотр);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПараметрыФормы.Вставить("ЗаголовокКомандыЗаписать", НСтр("ru = 'Готово'; en = 'Done'"));
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписьТекстНачалоВыбораПродолжение",
		ЭтотОбъект);
		
	ОткрытьФорму("ОбщаяФорма.ПодписьДокумента", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьТекстНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	СписокПолей = "Подписал, РезультатПодписания, ДатаПодписания,
		|КомментарийПодписи, УстановилПодпись, ДатаУстановкиПодписи";
	ЗаполнитьЗначенияСвойств(Объект, Результат, СписокПолей);
	
	ПодписьТекст = ДелопроизводствоКлиентСервер.ПолучитьСтрокуПодписи(Объект);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьТекстОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Подписал, РезультатПодписания, ДатаПодписания,
		|УстановилПодпись, ДатаУстановкиПодписи, КомментарийПодписи, Шаблон");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	
	ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	Если Объект.Ссылка.Пустая() Тогда
		ПараметрыФормы.Вставить("ЗаголовокКомандыЗаписать", НСтр("ru = 'Готово'; en = 'Done'"));
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ПодписьДокумента", ПараметрыФормы, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждениеТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("АвторУтверждения, Результат, ДатаУтверждения,
		|Комментарий, УстановилГриф, ДатаУстановкиГрифа, Шаблон");
	
	Если Объект.ГрифыУтверждения.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект.ГрифыУтверждения[0]);
	КонецЕсли;
	
	ПараметрыФормы.Шаблон = Объект.Шаблон;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПараметрыФормы.Вставить("ЗаголовокКомандыЗаписать", НСтр("ru = 'Готово'; en = 'Done'"));
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УтвердилТекстНачалоВыбораПродолжение",
		ЭтотОбъект);
		
	ОткрытьФорму("ОбщаяФорма.УтверждениеДокумента", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура УтвердилТекстНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ГрифыУтверждения.Очистить();
	ГрифУтверждения = Объект.ГрифыУтверждения.Добавить();
	ЗаполнитьЗначенияСвойств(ГрифУтверждения, Результат);
	
	УтверждениеТекст = ДелопроизводствоКлиентСервер.ПолучитьСтрокуУтверждения(Объект);
	
	Если Не Объект.Ссылка.Пустая() Тогда 
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждениеТекстОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждениеТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("АвторУтверждения, Результат, ДатаУтверждения,
		|Комментарий, УстановилГриф, ДатаУстановкиГрифа, Шаблон");
	ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПараметрыФормы.Вставить("ЗаголовокКомандыЗаписать", НСтр("ru = 'Готово'; en = 'Done'"));
	КонецЕсли;
	
	Если Объект.ГрифыУтверждения.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект.ГрифыУтверждения[0]);
	КонецЕсли;
	
	ПараметрыФормы.Шаблон = Объект.Шаблон;
	
	ОткрытьФорму("ОбщаяФорма.УтверждениеДокумента", ПараметрыФормы, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, Файл);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьСтрокуФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	КоличествоФайлов = 0;
	
	КоличествоФайлов = Файлы.Количество();
	Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ВыборФайла(Строка.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСозданиеПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.ФайлыСоздание.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления);
		
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления)
	
	ДобавлениеОригинала = ПараметрыДобавления.Свойство("ДобавлениеОригинала", ДобавлениеОригинала);
	
	Если ВестиУчетСканКопийОригиналовДокументов 
		И ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный")
		И Не ДобавлениеОригинала Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа. Продолжить?'; en = 'In current state ""%1"" one can only add a scanned copy of the original document. Continue?'"),
			СостояниеТекст);
		
		СписокВариантовОтветов = Новый СписокЗначений;
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));
		
		ПараметрыДобавления.Вставить("ДобавлениеОригинала", ДобавлениеОригинала);
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Элемент", Элемент);
		ПараметрыОбработчика.Вставить("Отказ", Отказ);
		ПараметрыОбработчика.Вставить("Копирование", Копирование);
		ПараметрыОбработчика.Вставить("Родитель", Родитель);
		ПараметрыОбработчика.Вставить("Группа", Группа);
		ПараметрыОбработчика.Вставить("ПараметрыДобавления", ПараметрыДобавления);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ФайлыПередНачаломДобавленияКлиентПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтаФорма,
			НСтр("ru = 'Добавление файла'; en = 'Adding file'"),
			Текст,
			"ДобавлениеОригинала",
			"ЗадаватьВопросПриДобавленииСканКопииОригинала",
			СписокВариантовОтветов,,
			ОписаниеОповещения);
		Возврат;
			
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = ?(ДобавлениеОригинала, 2, 1);
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, 
				ЭтаФорма, РежимСоздания, Истина, ДобавлениеОригинала,,,,,
				Объект.Шаблон);
		Исключение
			ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		ФайлОснование = ТекущиеДанные.Ссылка;
		
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиентПродолжение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ПараметрыДобавления.ДобавлениеОригинала = Истина;
	ФайлыПередНачаломДобавленияКлиент(
		ПараметрыОбработчика.Элемент, 
		ПараметрыОбработчика.Отказ, 
		ПараметрыОбработчика.Копирование, 
		ПараметрыОбработчика.Родитель, 
		ПараметрыОбработчика.Группа, 
		ПараметрыОбработчика.ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если Элементы.Файлы.ТекущийЭлемент = Элементы.Оригинал Тогда 
			Возврат;
		КонецЕсли;	
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		Если Элементы.ФайлыСоздание.ТекущийЭлемент = Элементы.ОригиналСоздание Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные <> Неопределено Тогда
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И ТекущиеДанные.СозданПоШаблонуДокумента);
		Если Не РазрешеноУдаление Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура);
	ДелопроизводствоКлиент.ПометитьФайлыДокументаНаУдаление(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивФайлов = Параметры.МассивФайлов;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления);
		
		Если ПоказыватьУдаленныеФайлы Тогда 
			Для Каждого Файл Из МассивФайлов Цикл 
				ОбновитьСтрокуФайла(Файл);
			КонецЦикла;
		КонецЕсли;
		
		Оповестить("ФайлыДокументаПомеченыНаУдаление", Объект.Ссылка);
		
		Если Параметры.ПодписанЭП Тогда
			Оповестить("ПрисоединенныйФайлПодписан", Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор И ВыделенныеСтроки.Количество() = 1 Тогда
			
			ВыбраннаяСтрока = ВыделенныеСтроки[0];
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			ФайлСсылка = ДанныеСтроки.Ссылка;
			
			Если ЗначениеЗаполнено(ФайлСсылка) Тогда
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
				
				ПолноеИмяПеретаскиваемогоФайла = "";
				
				Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
				РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
					ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
					
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда		
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
				Возврат;
			Иначе
				Выполнение = Ложь;
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
		
	#КонецЕсли
		
	МассивФайловДляПеретаскивания = Новый Массив;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;

			МассивФайловДляПеретаскивания.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		МассивФайловДляПеретаскивания.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайловДляПеретаскивания;
	
КонецПроцедуры

// Продолжение процедуры после получения файла на клиент
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущийЭлемент = Элементы.Файлы;
	Иначе	
		ТекущийЭлемент = Элементы.ФайлыСоздание;
	КонецЕсли;

	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда
		Текст = СтрШаблон(
			НСтр("ru = 'В текущем состоянии ""%1"" файлы добавлять нельзя.'; en = 'Adding files is not permitted in current state ""%1"".'"),
			СостояниеТекст);
		ПоказатьПредупреждение(, Текст);
		
		Возврат;
	
	ИначеЕсли ВестиУчетСканКопийОригиналовДокументов 
		И ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный")
		И Не ПеретаскиваниеОригинала Тогда
		
		Текст = СтрШаблон(
			НСтр("ru = 'В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа. Продолжить?'; en = 'In current state ""%1"" one can only add a scanned copy of the original document. Continue?'"),
			СостояниеТекст);
		
		СписокВариантовОтветов = Новый СписокЗначений;
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Элемент", Элемент);
		ПараметрыОбработчика.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
		ПараметрыОбработчика.Вставить("Строка", Строка);
		ПараметрыОбработчика.Вставить("Поле", Поле);
		ПараметрыОбработчика.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ФайлыПеретаскиваниеПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтаФорма,
			НСтр("ru = 'Перетаскивание файла'; en = 'Dropping the file'"),
			Текст,
			"ДобавлениеОригинала",
			"ЗадаватьВопросПриДобавленииСканКопииОригинала",
			СписокВариантовОтветов,,
			ОписаниеОповещения);
		Возврат;
	
	КонецЕсли;
	
	Если ПеретаскиваниеОригинала Тогда 
		ТекстПредупреждения = "";
		ПараметрыПеретаскивания.Значение = ДелопроизводствоКлиент.ОтобратьДляПеретаскиванияТолькоФайлыОригиналы(
			ПараметрыПеретаскивания, СостояниеТекст, ТекстПредупреждения);
			
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(
		ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	ЗаполнитьСписокФайлов();
	
	ПеретаскиваниеОригинала = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскиваниеПродолжение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		ПеретаскиваниеОригинала = Ложь;
		Возврат;
	КонецЕсли;
	
	ПеретаскиваниеОригинала = Истина;
	
	ФайлыПеретаскивание(
		ПараметрыОбработчика.Элемент, 
		ПараметрыОбработчика.ПараметрыПеретаскивания, 
		ПараметрыОбработчика.СтандартнаяОбработка, 
		ПараметрыОбработчика.Строка, 
		ПараметрыОбработчика.Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СозданИзШаблона Тогда 
		ТекущиеДанные.Оригинал = Не ТекущиеДанные.Оригинал;
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя отметить как оригинал файл, созданный из шаблона.'; en = 'It is not possible to mark as the original a file created from a template.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОригиналПриИзмененииПродолжение",
		ЭтотОбъект,
		Новый Структура("ТекущиеДанные", ТекущиеДанные));
	
	Если ТекущиеДанные.Оригинал 
		И Не ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ТекущиеДанные.Расширение) Тогда 
		ТекстВопроса = НСтр("ru = 'Выбранный файл, возможно, не является скан-копией. 
		|Вы действительно хотите отметить его как оригинал?';
		|en = 'The selected file might not be a scanned copy. 
		|Are you sure you want to mark it as the original?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет, 
			НСтр("ru = 'Отметка оригинала'; en = 'Original mark'"));
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзмененииПродолжение(Результат, Параметры) Экспорт 
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ОбязателенФайлОригинала И ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда 
			Если ТекущиеДанные.Оригинал И Не ТекущиеДанные.ПометкаУдаления Тогда 
				УстановитьВидимостьДекорацииОтсутствуетОригинал(Ложь);
			Иначе
				Если Не ПолучитьВидимостьДекорацииОтсутствуетОригинал() Тогда 
					ОтсутствуетОригинал = Истина;
					Для Каждого Строка Из Файлы Цикл
						Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда 
							ОтсутствуетОригинал = Ложь;
						КонецЕсли;	
					КонецЦикла;	
					Если ОтсутствуетОригинал Тогда 
						УстановитьВидимостьДекорацииОтсутствуетОригинал(Истина);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Модифицированность = Истина;

	Иначе 
		ТекущиеДанные.Оригинал = Не ТекущиеДанные.Оригинал;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыДобавленные

&НаКлиенте
Процедура ФайлыДобавленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ТекущиеДанные.ПолныйПуть) Тогда 
		ТекущийФайлВСпискеДобавленныхДляОткрытия = ПолучитьИзВременногоХранилища(ТекущиеДанные.ПолныйПуть).Ссылка;
		Записать();
	Иначе
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено Тогда
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И ТекущиеДанные.ДобавленИзШаблона);
		Если Не РазрешеноУдаление Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПослеУдаления(Элемент)
	
	КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
	КоличествоФайлов = КоличествоФайловТаблицы;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;	
		
	Если Элементы.ФайлыДобавленные.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		Файл = ПараметрыПеретаскивания.Значение;		
		НоваяСтрока = ФайлыДобавленные.Добавить();
		НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
		НоваяСтрока.ПолныйПуть = Файл.ПолноеИмя;
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
		КоличествоФайлов = КоличествоФайлов+1;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Ложь Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Выберите только файлы, но не каталоги.'; en = 'Select only files but not directories.'"));
		Возврат;		
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги											
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ФайлПринятый.ИмяБезРасширения;
					НоваяСтрока.ПолныйПуть = ФайлПринятый.ПолноеИмя;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ФайлПринятый.Расширение);										
					КоличествоФайлов = КоличествоФайлов+1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Элементы.ФайлыДобавленные.Обновить();	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Если ТекущийИтогСумма = Объект.Сумма Тогда 
		Объект.Сумма = Объект.Товары.Итог("Сумма");
	КонецЕсли;
	ТекущийИтогСумма = Объект.Товары.Итог("Сумма");
	
	Если УчитыватьНДС Тогда 
		Если ТекущийИтогСуммаНДС = Объект.СуммаНДС Тогда 
			Объект.СуммаНДС = Объект.Товары.Итог("СуммаНДС");
		КонецЕсли;
		ТекущийИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС");
	КонецЕсли;
	
	ОбновитьОтображениеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПринятыеЭлементы = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
			ПринятыеЭлементы.Добавить(Строка);
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПринятыеЭлементы.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Если ПринятыеЭлементы.Количество() > 0 Тогда
		Для Каждого ВыделеннаяСтрока Из ПринятыеЭлементы Цикл
			ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
			Если ТекущиеДанные.ЭтоГруппа Тогда 
				Обработчик = Новый ОписаниеОповещения("ПеренестиНоменклатуруПродолжение", ЭтотОбъект, 
					Новый Структура("Группа", ТекущиеДанные.Ссылка));
				ПоказатьВопрос(Обработчик, 
					НСтр("ru = 'Выбран групповой элемент.
	                     |Добавить все содержимое группы?';
	                     |en = 'A group is selected.
	                     |Add all items of the group?'"), РежимДиалогаВопрос.ДаНет, 60);
				Возврат;
			
			Иначе 
				НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Ссылка));
				Если НайденныеСтроки.Количество() = 0 Тогда 
					НайденнаяСтрока = Объект.Товары.Добавить();
					НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
					НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
					НайденнаяСтрока.Цена = ТекущиеДанные.Цена;
					НайденнаяСтрока.СтавкаНДС = ТекущиеДанные.СтавкаНДС;
					НайденнаяСтрока.Количество = 1;
					ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
				Иначе 
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
						НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
						ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
		ТоварыПриИзменении(Элементы.Товары);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьНоменклатуру(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда 
			РеквизитыКарточки = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
				ТекущиеДанные.Номенклатура, "СтавкаНДС, Цена, ЕдиницаИзмерения");
			ТекущиеДанные.Цена = РеквизитыКарточки.Цена;
			ТекущиеДанные.СтавкаНДС = РеквизитыКарточки.СтавкаНДС;
			ТекущиеДанные.ЕдиницаИзмерения = РеквизитыКарточки.ЕдиницаИзмерения;
			
			Если ТекущиеДанные.Количество = 0 Тогда 
				ТекущиеДанные.Количество = 1;
			КонецЕсли;
			
			ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
		Иначе 
			ТекущиеДанные.Номенклатура = Неопределено;
			ТекущиеДанные.Цена = 0;
			ТекущиеДанные.СтавкаНДС = Неопределено;
			ТекущиеДанные.Сумма = 0;
			ТекущиеДанные.СуммаНДС = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДелопроизводствоКлиентСервер.ПересчитатьСуммуНДСВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДелопроизводствоКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппа

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВизыСогласованияТаблица

&НаКлиенте
Процедура ВизыСогласованияТаблицаПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.ВизыСогласования.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		КоличествоВиз = КоличествоВиз - ВыделенныеСтроки.Количество();
		Элементы.ГруппаНетВизСогласования.Видимость = (КоличествоВиз = 0);
		Элементы.ГруппаЕстьВизы.Видимость = (КоличествоВиз > 0);
		Элементы.ВизыСогласования.Видимость = (КоличествоВиз > 0);
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	УдалятьВизыЗапрещено = ТипЗнч(НеДоступныеПоля) = Тип("Структура") 
		И НеДоступныеПоля.Свойство("ВизыСогласованияУдалить");
	Если УдалятьВизыЗапрещено Тогда 
		Возврат
	КонецЕсли;
	
	ЭтоПолноправныйПользователь = 
		СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПерсональныеНастройкиРаботыСФайлами. ЭтоПолноправныйПользователь;
	
	ЗаполненныеВизы = Новый Массив;
	НезаполненныеВизы = Новый Массив;
	
	ТекстОшибки = "";
	Если Не ВыделитьЗаполненныеВизы(ВыделенныеСтроки, ЗаполненныеВизы, НезаполненныеВизы, ТекстОшибки) Тогда 
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;	
	
	ПерезаполнитьВизы = Ложь;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ЗаполненныеВизы", ЗаполненныеВизы);
	СтруктураДанных.Вставить("НезаполненныеВизы", НезаполненныеВизы);
	СтруктураДанных.Вставить("ПерезаполнитьВизы", ПерезаполнитьВизы);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВизыСогласованияТаблицаПередУдалениемПродолжение",
		ЭтотОбъект,
		СтруктураДанных);	

	Если ЗаполненныеВизы.Количество() > 0 Тогда 
		Если ЗаполненныеВизы.Количество() = 1 Тогда 
			ТекстВопроса = НСтр("ru = 'Виза с заполненным результатом будет помещена в историю согласования.'; en = 'Endorsement that contains approval result will be archived.'");
		Иначе		
			ТекстВопроса = НСтр("ru = 'Визы с заполненным результатом будут помещены в историю согласования.'; en = 'Endorsements that contain approval results will be archived.'");
		КонецЕсли;
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("Продолжить", НСтр("ru = 'Продолжить'; en = 'Continue'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса,,"Продолжить");
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВизыСогласованияТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	ПерезаполнитьВизы = Параметры.ПерезаполнитьВизы;
	НезаполненныеВизы = Параметры.НезаполненныеВизы;

	Если Результат = "Продолжить" Тогда 
		РаботаСВизамиСогласования.ПоместитьВизыВИсторию(Параметры.ЗаполненныеВизы, ТекущийПользователь);
		ПерезаполнитьВизы = Истина;
	КонецЕсли;	
		
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НезаполненныеВизы", НезаполненныеВизы);
	СтруктураДанных.Вставить("ПерезаполнитьВизы", ПерезаполнитьВизы);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВизыСогласованияПродолжение",
		ЭтотОбъект,
		СтруктураДанных);	

	Если НезаполненныеВизы.Количество() > 0 Тогда 
		Если НезаполненныеВизы.Количество() = 1 Тогда
			ДанныеВизы = ВизыСогласования.НайтиСтроки(Новый Структура("Ссылка", НезаполненныеВизы[0]))[0]; 
			Если ДанныеВизы.ПометкаУдаления Тогда
				ТекстВопроса = НСтр("ru = 'Удаленная виза будет восстановлена.'; en = 'Deleted endorsement will be restored'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Виза с незаполненным результатом согласования будет удалена.'; en = 'Endorsement that contain no approval result will be deleted.'");
			КонецЕсли;
		Иначе		
			ТекстВопроса = НСтр("ru = 'Визы с незаполненным результатом согласования будут удалены.
				|Удаленнные визы будут восстановлены.'; en = 'Endorsements that contain no approval results will be deleted.'");
		КонецЕсли;
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("Продолжить", НСтр("ru = 'Продолжить'; en = 'Continue'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса,,"Продолжить");	
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВизыСогласованияПродолжение(Результат, Параметры) Экспорт 
	
	ПерезаполнитьВизы = Параметры.ПерезаполнитьВизы;
	НезаполненныеВизы = Параметры.НезаполненныеВизы;
	
	Если Результат = "Продолжить" Тогда 
		РаботаСВизамиСогласования.УдалитьВизы(НезаполненныеВизы);
		ПерезаполнитьВизы = Истина;
	КонецЕсли;	

	Если ПерезаполнитьВизы Тогда
		ЗаполнитьСписокВиз();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВизыСогласованияТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавлятьВизыЗапрещено = ТипЗнч(НеДоступныеПоля) = Тип("Структура") 
		И НеДоступныеПоля.Свойство("ВизыСогласованияДобавить");
	Если ДобавлятьВизыЗапрещено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСВизамиСогласованияКлиент.ДобавитьВизу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВизыСогласованияТаблицаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	РаботаСВизамиСогласованияКлиент.ИзменитьВизу(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставКомплекта 

&НаКлиенте
Процедура СоставКомплектаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаВыбор(ЭтаФорма, Элемент, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПриАктивизацииСтроки(Элемент)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПриАктивизацииСтроки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПередНачаломДобавления(ЭтаФорма, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент = Элементы.СоставКомплектаКомментарий
		И Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отказ = Истина;
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаОткрытьКарточку(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПередУдалением(Элемент, Отказ)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаУдалить(ЭтаФорма, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаДобавитьЭлементы(ЭтаФорма, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаДобавитьЭлементы(ЭтаФорма, ПараметрыПеретаскивания.Значение);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаИзменитьКомментарий(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭлектронныеПодписи

&НаКлиенте
Процедура ТаблицаПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЭлектронныеПодписи.ТекущиеДанные;
	
	Если ДелопроизводствоКлиентСервер.ЭтоФайл(ТекущиеДанные.Объект)
		И Не ЗначениеЗаполнено(ТекущиеДанные.ДатаПодписи) Тогда
		
		ВыборФайла(ТекущиеДанные.Объект);
	Иначе
		РаботаСЭПКлиент.ОткрытьПодпись(ТекущиеДанные, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ЭлектронныеПодписи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущиеДанные.Объект = Неопределено
		ИЛИ ТекущиеДанные.Объект.Пустая() Тогда
		
		Возврат;
	КонецЕсли;
	
	УдалитьПодписи();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапыОбработкиДокументов

&НаКлиенте
Процедура ЭтапыОбработкиДокументовПройденПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные.Пройден Тогда 
		ТекущиеДанные.ДатаПрохождения = ТекущаяДата();
		ТекущиеДанные.Установил = ТекущийПользователь;
		КоличествоПройденныхЭтапов = КоличествоПройденныхЭтапов + 1;
	Иначе
		ТекущиеДанные.ДатаПрохождения = '00010101';
		ТекущиеДанные.Установил = Неопределено;
		КоличествоПройденныхЭтапов = КоличествоПройденныхЭтапов - 1;
	КонецЕсли;
	
	Если КоличествоЭтапов > 0 И КоличествоПройденныхЭтапов > 0 Тогда
		ЗаголовокГруппыЭтапов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Этапы (%1 из %2)'; en = 'Stages (%1 of %2)'"),
			КоличествоПройденныхЭтапов, КоличествоЭтапов);
	Иначе 
		ЗаголовокГруппыЭтапов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Этапы (%1)'; en = 'Stages (%1)'"), КоличествоЭтапов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОбработкиДокументовКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", ТекущиеДанные.Комментарий);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКомментарияЭтапаЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКомментарияЭтапаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Комментарий = Результат;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)

	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры


// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
  ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
  ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПродолжение", ЭтотОбъект);
	РаботаСШаблонамиДокументовКлиент.ПоказатьФормуЗаполненияДокументаПоШаблону(
		ОписаниеОповещения,
		"ШаблоныВнутреннихДокументов", 
		Объект.Папка);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено
		И ТипЗнч(Результат) <> Тип("Строка") Тогда
		ЗаполнитьПоШаблонуВыполнить(Результат.ШаблонДокумента);
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не найдено доступных шаблонов внутренних документов.'; en = 'Available internal document templates are not found.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокДействияСвязанногоДокумента(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор связанного документа'; en = 'Selecting related document'"));
	ПараметрыОткрытия.Вставить("СвязанныйДокумент", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПоказыватьКомандуСоздать", Ложь);
	ПараметрыОткрытия.Вставить("ИспользоватьИерархию", Ложь);
	ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, "ПодборСвязанногоДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	ЧисловойНомер = 0;
	ДатаРегистрации = Дата(1,1,1);
	РегистрационныйНомер = "";
	
	Попытка
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("Регистрация", Истина);
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
	Исключение
		Если ЗначениеЗаполнено(ЧисловойНомер) Тогда
			КомпенсацияРегистрации();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновные;
			
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	Если ЕстьЗашифрованныеИлиЗанятыеФайлы Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя подписать документ с зашифрованными или занятыми файлами.'; en = 'It is not possible sign documents with encrypted or locked files.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьДокументПродолжение",
		ЭтотОбъект,Новый Структура("ПодписатьЭД", Команда = "ПодписатьЭД"));
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда  
		
		ТекстВопроса = ТекстВопросаНезаписанныхДанных(НСтр("ru = 'Подписать'; en = 'Sign'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		
		Возврат;
		
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	ПодписатьОтветныйТитулФНС = ЭтоТитулФНС И Параметры.ПодписатьЭД И Не НаправлениеИсходящий;
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Объект", Объект.Ссылка);
	ПараметрыОбработчика.Вставить("ПодписатьЭД", Параметры.ПодписатьЭД);
	ПараметрыОбработчика.Вставить("НаправлениеЭД", ?(НаправлениеИсходящий, 
		ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий"), 
		ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий")));
	ПараметрыОбработчика.Вставить("ПодписатьОтветныйТитулФНС", ПодписатьОтветныйТитулФНС);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьДокументЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	Если ПодписатьОтветныйТитулФНС Тогда
		ОбменСКонтрагентамиДОСлужебныйКлиент.ПодписатьЭДНаСторонеПолучателя(Объект.Ссылка, ОбработчикЗавершения);
	Иначе	
		РаботаСЭПКлиент.Подписать(Объект.Ссылка, УникальныйИдентификатор, ОбработчикЗавершения);
	КонецЕсли; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументЗавершение(Результат, Параметры) Экспорт
	
	Если (Параметры.ПодписатьОтветныйТитулФНС И Не Результат)
		Или (Не Параметры.ПодписатьОтветныйТитулФНС И Не Результат.Успех) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (Параметры.ПодписатьОтветныйТитулФНС) Тогда
		РаботаСЭПКлиент.ПослеПодписанияОбъекта(Результат, Параметры);
	КонецЕсли;
	
	Если Параметры.ПодписатьЭД Тогда
		Текст = НСтр("ru = 'Документ поставлен в очередь на отправку контрагентам по ЭДО.'; en = 'The document was put to a queue to send via EDI.'");
		Состояние(Текст, , , БиблиотекаКартинок.ЭмблемаСервиса1СЭДО);
		ДокументПодписанНами = Истина;
	КонецЕсли;
	
	ПодписатьДокументЗавершениеВызовСервера();
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
	ЕстьЭДО();
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования(Команда)
	
	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ИсторияВизСогласования", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЛистСогласования(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПечатьЛистСогласованияПродолжение",
		ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Лист согласования"" возможно только после записи данных.
			|Данные будут записаны.';
			|en = 'The data have not yet been saved. 
			|Performing the action ""Approval form"" is possible only after the data is saved. 
			|Data will be saved.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЛистСогласованияПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.ВнутренниеДокументы",
		"ЛистСогласования",
		МассивДокументов,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЛистСогласованияСИсторией(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПечатьЛистСогласованияСИсториейПродолжение",
		ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = ТекстВопросаНезаписанныхДанных(НСтр("ru = 'Лист согласования с историей'; en = 'Approval form with history'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЛистСогласованияСИсториейПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.ВнутренниеДокументы",
		"ЛистСогласованияСИсторией",
		МассивДокументов,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВиз(Команда)
	
	ЗаполнитьСписокВиз();
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинКонтрагент(Команда)
	
	КоличествоКонтрагентов = Объект.Контрагенты.Количество(); 
	Для Инд = 1 По КоличествоКонтрагентов Цикл 
		Строка = Объект.Контрагенты[КоличествоКонтрагентов - Инд]; 
		Если Не ЗначениеЗаполнено(Строка.Контрагент) Тогда 
			Объект.Контрагенты.Удалить(Строка); 
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОдинКонтрагентПродолжение",
		ЭтотОбъект);	
	
	Если Объект.Контрагенты.Количество() > 1 Тогда 
		ТекстВопроса = НСтр("ru = 'Все контрагенты, кроме первого, будут удалены. 
			|Продолжить?';
			|en = 'All counterparties except the first one will be deleted. 
			|Сontinue?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОдинКонтрагентПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда

		Пока Объект.Контрагенты.Количество() > 1 Цикл
			Объект.Контрагенты.Удалить(1);
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Объект.Контрагенты.Количество() > 0 Тогда
		Строка = Объект.Контрагенты[0];
		Объект.Контрагент = Строка.Контрагент;
		Объект.КонтактноеЛицо = Строка.КонтактноеЛицо;
		Объект.ПодписалОтКонтрагента = Строка.ПодписалОтКонтрагента;
	Иначе	
		Объект.Контрагент = Неопределено;
		Объект.КонтактноеЛицо = Неопределено;
		Объект.ПодписалОтКонтрагента = Неопределено;
	КонецЕсли;
	
	НесколькоКонтрагентов = Ложь;
	УстановитьВидимостьКонтрагентов();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновные;

КонецПроцедуры

&НаКлиенте
Процедура МногоКонтрагентов(Команда)
	
	НесколькоКонтрагентов = Истина;
	УстановитьВидимостьКонтрагентов();

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКонтрагенты;
	
КонецПроцедуры

&НаКлиенте
Процедура НесколькоГрифовУтверждений(Команда)
	
	НесколькоГрифовУтверждений = Истина;
	УстановитьВидимостьГрифовУтверждений();

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаГрифыУтверждения;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаКлиенте
Процедура СтруктураСвязей(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Документ еще не записан и не имеет связей.'; en = 'Document is not yet saved and has no relations.'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму("Отчет.СтруктураСвязейДокумента.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвязь(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
	 Или ТекущиеДанные.ЭтоРодитель Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ОткрытьФайл(ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязаннаяСтрока) Тогда 
		ПерейтиПоНавигационнойСсылке(ТекущиеДанные.СвязаннаяСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязанныйДокумент) Тогда
		ПоказатьЗначение(, ТекущиеДанные.СвязанныйДокумент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейОбновить(Команда)
	
	ЗаполнитьСвязи();
	
	КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина)
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейОткрытьДляПросмотра(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьФайл(ТекущиеДанные.Файл);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейСохранитьКак(Команда)
	
	ВыделенныеСтроки = Элементы.ДеревоСвязей.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоСвязей.ДанныеСтроки(ВыбраннаяСтрока);	
			Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда 
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Файл);
			КонецЕсли;	
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущиеДанные.Файл, 
				Неопределено, 
				ЭтаФорма.УникальныйИдентификатор);
			
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейНапечататьФайлы(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'; en = 'Printing files is not supported in web client.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'; en = 'Printing files is only possible in Windows.'"));
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ДеревоСвязей.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоСвязей.ДанныеСтроки(ВыделеннаяСтрока);	
			Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда 
				МассивФайлов.Добавить(ДанныеСтроки.Файл);
			КонецЕсли;	
		КонецЦикла;
		
		Если МассивФайлов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
			
		ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
			МассивФайлов, 
			ЭтаФорма.УникальныйИдентификатор);
			
		КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
	Иначе
		
		ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Файл, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с таблицей Файлы

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		ОткрытьФайл(ФайлСсылка);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленныхДляРедактирования = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе			
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;
	Иначе
		
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
			
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущиеДанные.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		ТекущиеДанные.Ссылка, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	РаботаСФайламиКлиент.ЗанятьСОповещением(Неопределено, ТекущиеДанные.Ссылка);
	ОбновитьСтрокуФайла(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Неопределено, 
		ТекущиеДанные.Ссылка);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;

			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокФайловПослеОперации", ЭтотОбъект);
	КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

Процедура ОбновитьСписокФайловПослеОперации(Результат, ПараметрыВыполнения) Экспорт
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловПослеУстановкиРасширения", ЭтотОбъект);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	Если НЕ ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'; en = 'Added:'"), 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	РаботаСФайламиКлиент.ВыполнитьИмпортФайловСОткрытиемФормыИмпорта(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеФайлы(Команда)
	
	ПоказыватьУдаленныеФайлы = Не ПоказыватьУдаленныеФайлы;
	
	ЗаполнитьСписокФайлов();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		Элементы.ФайлыПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;
	Иначе	
		Элементы.ФайлыСозданиеПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеСвязи(Команда)
	
	ПоказыватьУдаленныеСвязи = Не ПоказыватьУдаленныеСвязи;
	Элементы.ДеревоСвязейПоказыватьУдаленныеСвязи.Пометка = ПоказыватьУдаленныеСвязи;
	ЗаполнитьСвязи();
	
КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'; en = 'Printing files is not supported in web client.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'; en = 'Printing files is only possible in Windows.'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
				МассивФайлов, 
				ЭтаФорма.УникальныйИдентификатор);
				
			КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Ссылка, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	ПараметрыДобавления = Новый Структура;
	
	Если Элементы.Обзор.Видимость Тогда
		ТекущаяТаблица = Элементы.Файлы;
	Иначе	
		ТекущаяТаблица = Элементы.ФайлыСоздание;
	КонецЕсли;
	
	ФайлыПередНачаломДобавленияКлиент(ТекущаяТаблица, Истина, Ложь, Неопределено, Неопределено, ПараметрыДобавления);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с таблицей Рабочая группа

&НаКлиенте
Процедура РабочаяГруппаОбновить(Команда)
	
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокумента(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПерезаполнитьРабочуюГруппуДокументаПродолжение",
		ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Рабочая группа будет заполнена автоматически. Все внесенные изменения будут удалены. Продолжить?';
|en = 'Working group will be filled automatically. All changes will be deleted. 
|Do you want to continue?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокументаПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьРабочуюГруппуДокументаСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с резолюциями

&НаКлиенте
Процедура ДобавитьРезолюцию(Команда)
	
	РаботаСРезолюциямиКлиент.ДобавитьРезолюцию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезолюцию(Команда)
	
	РаботаСРезолюциямиКлиент.ИзменитьРезолюцию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРезолюцию(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалениеРезолюцииПродолжение",
		ЭтотОбъект);
	РаботаСРезолюциямиКлиент.УдалитьРезолюцию(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеРезолюцииПродолжение(Результат, Параметры) Экспорт
	
	ЗаполнитьСписокРезолюций();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРезолюций(Команда)
	
	ЗаполнитьСписокРезолюций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеРезолюции(Команда)
	
	ПоказыватьУдаленныеРезолюции = Не ПоказыватьУдаленныеРезолюции;
	Элементы.КПРезолюцийПоказыватьУдаленные.Пометка = ПоказыватьУдаленныеРезолюции;
	
	ЗаполнитьСписокРезолюций();
	
КонецПроцедуры

&НаКлиенте
Процедура РезолюцияHTMLПредставлениеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Лев(ДанныеСобытия.Href, 6) <> "v8doc:" Тогда 
		Возврат;
	КонецЕсли;
	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с визами согласования

&НаКлиенте
Процедура ДобавитьВизуСогласования(Команда)
	
	РаботаСВизамиСогласованияКлиент.ДобавитьВизу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеВизы(Команда)
	
	ПоказыватьУдаленныеВизы = Не ПоказыватьУдаленныеВизы;
	Элементы.ВизыСогласованияПоказыватьУдаленныеВизы.Пометка = ПоказыватьУдаленныеВизы;
	
	ЗаполнитьСписокВиз();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с электронной подписью

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСЭПКлиент.ПроверитьПодписиОбъекта(ЭтотОбъект, Элементы.ЭлектронныеПодписи.ВыделенныеСтроки,
		Новый ОписаниеОповещения("ПроверитьПодписиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	РаботаСЭПКлиент.ПроверитьПодписиОбъекта(ЭтотОбъект,,
		Новый ОписаниеОповещения("ПроверитьПодписиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСписокПодписей(Неопределено);
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодпись(Команда)
	
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодпись(Команда)
	
	УдалитьПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПодпись(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ЭлектронныеПодписи.ТекущиеДанные.Объект <> Неопределено И (НЕ Элементы.ЭлектронныеПодписи.ТекущиеДанные.Объект.Пустая()) Тогда
		
		АдресПодписи = Элементы.ЭлектронныеПодписи.ТекущиеДанные.АдресПодписи;
		
		РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
		Если РасширениеПодключено Тогда
			
			ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			
			РасширениеДляФайловПодписи = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляФайловПодписи;
			Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Все файлы (*.%1)|*.%1'; en = 'All files (*.%1)|*.%1'"), РасширениеДляФайловПодписи);
			
			ДиалогОткрытияФайла.Фильтр = Фильтр;
			ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
			ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл для сохранения подписи'; en = 'Select the file to save the signature'");
			
			Если ДиалогОткрытияФайла.Выбрать() Тогда
				
				ПолныйПутьПодписи = ДиалогОткрытияФайла.ПолноеИмяФайла;
				
				Файл = Новый Файл(ПолныйПутьПодписи);
				ПередаваемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, АдресПодписи);
				ПередаваемыеФайлы.Добавить(Описание);
				
				ПутьКФайлу = Файл.Путь;
				ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
					ПутьКФайлу, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());

				// Сохраним Файл из БД на диск
				ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
					
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Подпись сохранена в файл ""%1""'; en = 'Signature saved to file ""%1""'"),
					ДиалогОткрытияФайла.ПолноеИмяФайла);
				Состояние(Текст);
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайл(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(ТекущиеДанные.Ссылка);
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ТекущиеДанные.Ссылка);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ВладелецФайла", ДанныеФайла.Владелец);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьФайлЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	
	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(МассивФайлов, УникальныйИдентификатор, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПрисоединенныйФайлПодписан", ПараметрыВыполнения.ВладелецФайла);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(
		ТекущиеДанные.Ссылка,
		УникальныйИдентификатор,
		Новый ОписаниеОповещения("ДобавитьЭПИзФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайлаЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		УстановитьДоступностьКоманд(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = ТекущиеДанные.Ссылка;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Истина;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
	СсылкаВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ВладелецФайла");
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(СсылкаВладелецФайла);	
	
	ЗаполнитьСписокПодписей(); // т.к. параметр Зашифрован в таблице подписей изменился
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = ТекущиеДанные.Ссылка;
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(Обработчик, ДанныеФайла.Ссылка, УникальныйИдентификатор, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСписокПодписей()
	
	Коллекция = ЭлектронныеПодписи.ПолучитьЭлементы();
	Для Каждого Строка Из Коллекция Цикл
		Элементы.ЭлектронныеПодписи.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПодписей(Команда)
	
	ЗаполнитьСписокПодписей();
	РазвернутьСписокПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФайлДаннымиДокумента(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийФайл = ТекущиеДанные.Ссылка;
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		ДанныеВыполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
			Истина,
			ТекущийФайл, 
			Истина, 
			УникальныйИдентификатор);
	#Иначе
		ДанныеВыполнения = ЗаполнитьФайлДаннымиДокументаСервер(ТекущийФайл);
	#КонецЕсли
	
	Если ДанныеВыполнения.Результат Тогда
		Прочитать();
		Текст = НСтр("ru = 'Поля в файле обновлены данными владельца.'; en = 'Fields in the file are updated with the data of the file owner.'");
	Иначе
		ВызватьИсключение(ДанныеВыполнения.Описание);
	КонецЕсли;
	
	ПоказатьПредупреждение(, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьШтрихкод(Команда)
	
	ШтрихкодированиеКлиент.ВставитьШтрихкод(ЭтаФорма);

КонецПроцедуры   

&НаКлиенте
Процедура ВставитьРегистрационныйШтамп(Команда)

	ШтрихкодированиеКлиент.ВставитьРегистрационныйШтамп(ЭтаФорма);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// Команды работы с составом комплекта

&НаКлиенте
Процедура ЭлементКомплектаУдалить(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаУдалить(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаПросмотретьФайл(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаПросмотретьФайл(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаОткрытьКарточку(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаОткрытьКарточку(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаРедактировать(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаРедактировать(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаОбновитьИзФайлаНаДиске(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаОбновитьИзФайлаНаДиске(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаЗанятьФайл(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаЗанятьФайл(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаОтменитьРедактированиеФайла(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаОтменитьРедактированиеФайла(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаЗакончитьРедактирование(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаЗакончитьРедактирование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаСохранитьФайлКак(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаСохранитьФайлКак(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаСохранитьИзмененияФайла(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаСохранитьИзмененияФайла(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаОбновить(Команда)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаОбновить(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаСоздатьБизнесПроцесс(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаСоздатьБизнесПроцесс(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаИзменитьКомментарий(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаИзменитьКомментарий(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаПереместитьВниз(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаПереместитьВниз(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаПереместитьВверх(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаПереместитьВверх(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПодобратьВнутренниеДокументы(Команда)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПодобрать(ЭтаФорма, "ВнутренниеДокументы");
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПодобратьВходящиеДокументы(Команда)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПодобрать(ЭтаФорма, "ВходящиеДокументы");
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПодобратьИсходящиеДокументы(Команда)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПодобрать(ЭтаФорма, "ИсходящиеДокументы");
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПодобратьФайлы(Команда)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПодобрать(ЭтаФорма, "Файлы");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Категории

&НаКлиенте
Процедура УдалитьКатегорииИзСпискаВыбранных()
	
	Если Элементы.СписокКатегорийДанных.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = РаботаСКатегориямиДанных.ФильтроватьСписокКатегорийДляУдаления(Объект.Ссылка, СписокКатегорийДанных, Элементы.СписокКатегорийДанных.ВыделенныеСтроки);
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		СписокКатегорийДанных.Удалить(СписокКатегорийДанных.НайтиПоИдентификатору(СтрокаДляУдаления));
	КонецЦикла;
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		Модифицированность = Истина;
		СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
		
		Если СписокКатегорийДанных.Количество() = 0 Тогда 
			СтатусКатегории = 0;
			Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Нет категорий'; en = 'No categories'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбъектовСВыбраннымиКатегориями(Команда)
	
	Если СписокКатегорийДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКатегорий = Новый Массив();
	УникальныйИдентификаторСпискаКатегорий = "";
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		МассивКатегорий.Добавить(ВыбраннаяКатегория.Значение);
		УникальныйИдентификаторСпискаКатегорий = УникальныйИдентификаторСпискаКатегорий + "," + ВыбраннаяКатегория.ПолноеНаименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокВыбранныхКатегорий", МассивКатегорий);
	
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаСписка", ПараметрыФормы, Элементы.СписокКатегорийДанных, УникальныйИдентификаторСпискаКатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорий(Команда)
	
	ВыполнитьОткрытиеФормыПодбораКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыПодбораКатегорий()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьОткрытиеФормыПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
	
	Если СписокКатегорийДанных.Количество() > 0 Тогда 
		СтатусКатегории = 1;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Есть категории'; en = 'Has categories'");
	КонецЕсли;
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Учет времени

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Работа с документом ""%1""'; en = 'Working with document ""%1""'"),
			Объект.Наименование);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект);
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтаФорма); // Выполнена
		
	КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с инструкциями

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ЧислоФайлов = 0;
	СкопироватьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) скопированы в буфер обмена.'; en = 'Files (%1 pcs) copied to the clipboard.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование в буфер'; en = 'Copy to clipboard'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	Если Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЧислоФайлов = 0;
	ВставитьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) вставлены из буфера обмена.'; en = 'Files (%1 pcs) pasted from the clipboard.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Вставка из буфера'; en = 'Paste from clipboard'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
				ПутьКФайлу, Объект.Ссылка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
				
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'; en = 'Ther is no picture in clipboard'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	ПоказыватьНоменклатуру = Не ПоказыватьНоменклатуру;
	Элементы.ПодобратьТовары.Пометка = ПоказыватьНоменклатуру;
	Элементы.ВсяНоменклатура.Видимость = ПоказыватьНоменклатуру;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	ВыделенныеСтроки = Элементы.ВсеТовары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущиеДанные.ЭтоГруппа Тогда 
			Обработчик = Новый ОписаниеОповещения("ПеренестиНоменклатуруПродолжение", ЭтотОбъект, 
				Новый Структура("Группа", ТекущиеДанные.Ссылка));
			ПоказатьВопрос(Обработчик, 
				НСтр("ru = 'Выбран групповой элемент.
                     |Добавить все содержимое группы?';
                     |en = 'A group is selected.
                     |Add all items of the group?'"), РежимДиалогаВопрос.ДаНет, 60);
			Возврат;
			
		Иначе 
			НайденныеСтроки = Объект.Товары.НайтиСтроки(
				Новый Структура("Номенклатура, ЕдиницаИзмерения",
				ТекущиеДанные.Ссылка, ТекущиеДанные.ЕдиницаИзмерения));
			Если НайденныеСтроки.Количество() = 0 Тогда 
				НайденнаяСтрока = Объект.Товары.Добавить();
				НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
				НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
				НайденнаяСтрока.Цена = ТекущиеДанные.Цена;
				НайденнаяСтрока.СтавкаНДС = ТекущиеДанные.СтавкаНДС;
				НайденнаяСтрока.Количество = 1;
				ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
			Иначе 
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
					ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Модифицированность = Истина;
	
	ТоварыПриИзменении(Элементы.Товары);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
/// Команды работы с ЭДО

&НаКлиенте
Процедура ПодписатьЭД(Команда)
	
	ПодписатьДокумент("ПодписатьЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД()
	
	ОбменСКонтрагентамиДОСлужебныйКлиент.УтвердитьЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ОтклонитьАннулироватьДО(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЭД(Команда)
	
	ОтклонитьАннулироватьДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулироватьДО(Отклонить = Ложь)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьАннулироватьДОПродолжить", ЭтотОбъект);
	ПараметрыЭД = Новый Структура("Организация, Отклонить, ОписаниеОповещения",
		Объект.Организация, Отклонить, ОписаниеОповещения);
	ОбменСКонтрагентамиДОСлужебныйКлиент.ОбработатьОтклонениеАннулированиеДокументаДО(Объект.Ссылка, ПараметрыЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулироватьДОПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ЕстьЭДО();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Отправить

&НаКлиенте
Процедура ОтправитьПоЭДО(Команда)
	
	Если КоличествоФайлов = 0 Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для отправки по ЭДО нужно добавть файл!'; en = 'You must add a file to send via EDI!'"));
			Возврат;
	КонецЕсли;
		
	Попытка
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ОтправитьПоЭДО", Истина);
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессСогласование(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Согласование", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессУтверждение(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Утверждение", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессРегистрация(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Регистрация", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессРассмотрение(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Рассмотрение", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Исполнение", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Ознакомление", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	ТипыОпераций = Новый Массив;
	ТипыОпераций.Добавить("ОбработкаВнутреннегоДокумента");
	ТипыОпераций.Добавить("КомплексныйПроцесс");
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		ТипыОпераций, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВывестиСтрокуСостояний()
	
	ОбзорДокумента.ВывестиКартинкуФорума(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ТекстВопросаНезаписанныхДанных(НазваниеКоманды)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Данные еще не записаны.
             |Выполнение действия ""%1"" возможно только после записи данных.
             |Данные будут записаны.';
             |en = 'The data have not yet been saved. 
             |Performing the action ""%1"" is possible only after the data is saved. 
             |Data will be saved.'"),
		НазваниеКоманды);
	
КонецФункции

&НаКлиенте
Функция ТекущиеДанныеСпискаФайлов()
	
	Если Элементы.Обзор.Видимость Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
	КонецЕсли;
	
	Возврат ТекущиеДанные;
	
КонецФункции

// Заполняет список файлов в карточке документа
//
//	Параметры
//		ЗаполнитьПризнакОригинал - Булево - если Истина, то будет заполнен признак оригинала
//
&НаСервере
Процедура ЗаполнитьСписокФайлов(ЗаполнитьПризнакОригинал = Ложь)
	
	Делопроизводство.ЗаполнитьСписокФайловДокумента(ЭтаФорма, ЗаполнитьПризнакОригинал);
	ЕстьЭДО();
	
КонецПроцедуры	

// Обновляет одну или несколько колонок в списке файлов
//
//	Параметры
//		Колонки - Строка - список колонок, которые нужно обновить
//
&НаСервере
Процедура ОбновитьКолонкиСпискаФайлов(Колонки)
	
	МассивФайлов = Файлы.Выгрузить().ВыгрузитьКолонку("Ссылка");
	ТаблицаФайлов = Делопроизводство.ПолучитьДанныеФайловДляСписка(МассивФайлов);
	Для Каждого Строка Из Файлы Цикл
		НайденнаяСтрока = ТаблицаФайлов.Найти(Строка.Ссылка, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока, Колонки);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ЗначениеПометкиУдаления)
	
	Делопроизводство.ПометитьФайлыНаУдаление(ЭтаФорма, МассивФайлов, 
		ЗначениеПометкиУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуФайла(Файл)
	
	СтрокаИдентификатор = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Обзор.Видимость Тогда
		Элементы.Файлы.ТекущаяСтрока = СтрокаИдентификатор;
	Иначе	
		Элементы.ФайлыСоздание.ТекущаяСтрока = СтрокаИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак оригинал для нового созданного файла
//
//	Параметры
//		Файл - СправочникСсылка.Файлы - ссылка на новый файл
//
&НаКлиенте
Процедура ОтметитьПризнакОригиналУНовогоФайла(Файл)
	
	Если Не ВестиУчетСканКопийОригиналовДокументов Тогда 
		Возврат;
	КонецЕсли;	
	
	НайденнаяСтрока = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			НайденнаяСтрока = Строка;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если НайденнаяСтрока = Неопределено
	 Или НайденнаяСтрока.СозданИзШаблона
	 Или НайденнаяСтрока.Оригинал Тогда  
	 Возврат;
	КонецЕсли;	
	
	ДоступноТолькоДобавлениеОригинала = ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный");
	
	Если ДоступноТолькоДобавлениеОригинала Или
		(ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(НайденнаяСтрока.Расширение) 
		И Не Делопроизводство.ЕстьСведенияОбОригиналеФайла(Файл)) Тогда 
		НайденнаяСтрока.Оригинал = Истина;
		Делопроизводство.СохранитьСведенияОбОригиналеФайла(Файл, Объект.Ссылка);
	КонецЕсли;		
			
	Если НайденнаяСтрока.Оригинал 
		И Не НайденнаяСтрока.ПометкаУдаления
		И ОбязателенФайлОригинала 
		И ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда 
		УстановитьВидимостьДекорацииОтсутствуетОригинал(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

// Обновляет данные одного файла в списке файлов документа
//
// Параметры
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//    ЗаполнитьПризнакОригинал - Булево - Истина, если требуется обновить признак оригинала
//
&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл, ЗаполнитьПризнакОригинал = Ложь)
	
	ДелопроизводствоКлиент.ОбновитьСтрокуФайла(Файлы, Файл, ЗаполнитьПризнакОригинал);
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьОбзорДокумента()
	
	Если Не ИспользоватьОбзорДокументов Тогда 
		Возврат;
	КонецЕсли;
	
	ПредставлениеHTML = ОбзорДокумента.ПолучитьОбзорВнутреннегоДокумента(ЭтаФорма);
	
КонецПроцедуры 	

&НаСервере
Процедура ПриИзмененииВидаДокумента()

	ТекстСообщения = "";
	Если Делопроизводство.ПолучитьЗапретСозданияДокументовНеПоШаблону(Объект.Ссылка, Объект.ВидДокумента, 
			ПараметрШаблонДокумента, ТекстСообщения, Ложь) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидДокумента");
		
		Объект.ВидДокумента = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидДокумента, 
		"ВестиУчетПоКонтрагентам, ВестиУчетПоОрганизациям, УчитыватьНедействующиеДокументы, ЯвляетсяДоговором, ВестиУчетТоваровИУслуг,
		|УчитыватьСрокДействия, НеобходимаПечатьШтрихкода, ВестиУчетПоСтатьямДДС, ИспользоватьЭтапыОбработкиДокумента,
		|ВестиУчетСторон, ИспользоватьПодписание, ИспользоватьУтверждение, ВариантПодписания");
		
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ВестиУчетПоКонтрагентам = РеквизитыВидаДокумента.ВестиУчетПоКонтрагентам;
		ВестиУчетПоОрганизациям = РеквизитыВидаДокумента.ВестиУчетПоОрганизациям;
		ИспользоватьУтверждение = РеквизитыВидаДокумента.ИспользоватьУтверждение;
		ИспользоватьПодписание = РеквизитыВидаДокумента.ИспользоватьПодписание; 
		ВариантПодписания = РеквизитыВидаДокумента.ВариантПодписания;
		ВестиУчетСторон = РеквизитыВидаДокумента.ВестиУчетСторон;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
			Если РеквизитыВидаДокумента.ВестиУчетСторон Тогда
				Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
					РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
						"Отправитель, Подписал, Организация");
					
					Объект.Стороны.Очистить();
					ДобавитьСторону(РеквизитыОснования.Организация);
					ДобавитьСторону(РеквизитыОснования.Отправитель, РеквизитыОснования.Подписал, 1);
					
				ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
					
					РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
						"Организация, Подписал");
					
					Объект.Стороны.Очистить();
					ДобавитьСторону(РеквизитыОснования.Организация, РеквизитыОснования.Подписал);
					Для Каждого СтрокаПолучатель Из Основание.Получатели Цикл
						ДобавитьСторону(СтрокаПолучатель.Получатель, СтрокаПолучатель.Адресат, 1);
					КонецЦикла;
					
				ИначеЕсли  ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Основание)Тогда
					
					Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.ОтправительАдресат, "Адрес");
					СтруктураРезультата = 
					ВстроеннаяПочтаСервер.ПолучитьКонтрагентаИКонтактноеЛицоПоСтрокеАдреса(Адрес);
					
					Если СтруктураРезультата <> Неопределено Тогда
						Объект.Стороны.Очистить();
						ДобавитьСторону(СтруктураРезультата.Контрагент, СтруктураРезультата.КонтактноеЛицо, 1);
						
					КонецЕсли;
					
				ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Основание)Тогда
					
					МассивАдресов = Новый Массив;
					
					Для Каждого Получатель Из Основание.ПолучателиПисьма Цикл 
						МассивАдресов.Добавить(Получатель.Адресат);
					КонецЦикла;
					Для Каждого Получатель Из Основание.ПолучателиКопий Цикл 
						МассивАдресов.Добавить(Получатель.Адресат);
					КонецЦикла;
					Для Каждого Получатель Из Основание.ПолучателиСкрытыхКопий Цикл 
						МассивАдресов.Добавить(Получатель.Адресат);
					КонецЦикла;
					
					Объект.Стороны.Очистить();
					Если ЗначениеЗаполнено(Объект.Организация) Тогда
						ДобавитьСторону(Объект.Организация);
					КонецЕсли;
					
					Для Каждого Адресат Из МассивАдресов Цикл 
						Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Адресат, "Адрес");
						СтруктураРезультата = 
						ВстроеннаяПочтаСервер.ПолучитьКонтрагентаИКонтактноеЛицоПоСтрокеАдреса(Адрес);
						
						Если СтруктураРезультата <> Неопределено Тогда
							Строка = Объект.Стороны.Добавить();
							ДобавитьСторону(СтруктураРезультата.Контрагент, СтруктураРезультата.КонтактноеЛицо, 1);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли РеквизитыВидаДокумента.ВестиУчетПоКонтрагентам И Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
					РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
						"Отправитель, Подписал");
					Объект.Контрагент = РеквизитыОснования.Отправитель;
					Объект.КонтактноеЛицо = РеквизитыОснования.Подписал;
					
					Объект.Контрагенты.Очистить();	
					Строка = Объект.Контрагенты.Добавить();
					Строка.Контрагент = Объект.Контрагент;
					Строка.КонтактноеЛицо = Объект.КонтактноеЛицо;
					
				ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
					
					Объект.Контрагенты.Очистить();
					Для Каждого СтрокаПолучатель Из Основание.Получатели Цикл
						Строка = Объект.Контрагенты.Добавить();
						Строка.Контрагент = СтрокаПолучатель.Получатель;
						Строка.КонтактноеЛицо = СтрокаПолучатель.Адресат;
					КонецЦикла;	
					
					Если Объект.Контрагенты.Количество() > 0 Тогда 
						Объект.Контрагент = Объект.Контрагенты[0].Контрагент;
						Объект.КонтактноеЛицо = Объект.Контрагенты[0].КонтактноеЛицо;
					КонецЕсли;	
					
				ИначеЕсли  ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Основание)Тогда
					
					Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.ОтправительАдресат, "Адрес");
					СтруктураРезультата = 
						ВстроеннаяПочтаСервер.ПолучитьКонтрагентаИКонтактноеЛицоПоСтрокеАдреса(Адрес);
						
					Если СтруктураРезультата <> Неопределено Тогда
						Объект.Контрагент = СтруктураРезультата.Контрагент;
						Объект.КонтактноеЛицо = СтруктураРезультата.КонтактноеЛицо;
		
						Объект.Контрагенты.Очистить();	
						Строка = Объект.Контрагенты.Добавить();
						Строка.Контрагент = СтруктураРезультата.Контрагент;
						Строка.КонтактноеЛицо = СтруктураРезультата.КонтактноеЛицо;
						
					КонецЕсли;
					
				ИначеЕсли  ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Основание)Тогда
					
					МассивАдресов = Новый Массив;
					
					Для Каждого Получатель Из Основание.ПолучателиПисьма Цикл 
						МассивАдресов.Добавить(Получатель.Адресат);
					КонецЦикла;
					Для Каждого Получатель Из Основание.ПолучателиКопий Цикл 
						МассивАдресов.Добавить(Получатель.Адресат);
					КонецЦикла;
					Для Каждого Получатель Из Основание.ПолучателиСкрытыхКопий Цикл 
						МассивАдресов.Добавить(Получатель.Адресат);
					КонецЦикла;
					
					Объект.Контрагенты.Очистить();
					Для Каждого Адресат Из МассивАдресов Цикл 
						Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Адресат, "Адрес");
						СтруктураРезультата = 
							ВстроеннаяПочтаСервер.ПолучитьКонтрагентаИКонтактноеЛицоПоСтрокеАдреса(Адрес);
							
						Если СтруктураРезультата <> Неопределено Тогда
							Строка = Объект.Контрагенты.Добавить();
							Строка.Контрагент = СтруктураРезультата.Контрагент;
							Строка.КонтактноеЛицо = СтруктураРезультата.КонтактноеЛицо;
						КонецЕсли;
					КонецЦикла;	
					
					Если Объект.Контрагенты.Количество() > 0 Тогда 
						Объект.Контрагент = Объект.Контрагенты[0].Контрагент;
						Объект.КонтактноеЛицо = Объект.Контрагенты[0].КонтактноеЛицо;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НесколькоКонтрагентов = (Объект.Контрагенты.Количество() > 1);
	УстановитьВидимостьКонтрагентов();
	
	// обновить номер
	Если ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда // документ зарегистрирован
		УстановитьСрокИсполнения(Объект);
	КонецЕсли;
	
	// Срок действия
	СрокДействияПриИзмененииВидаДокумента();
	
	// Недействующие документы
	Если ЗначениеЗаполнено(Объект.ВидДокумента)
		И РеквизитыВидаДокумента.УчитыватьНедействующиеДокументы
		И РеквизитыВидаДокумента.ЯвляетсяДоговором Тогда
		Элементы.НеДействует.Заголовок = НСтр("ru = 'Расторгнут'; en = 'Terminated'");
	КонецЕсли;
	
	// Реквизиты по виду документа
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента));
	НеобходимоНапечататьШтрихкодПриСоздании = РеквизитыВидаДокумента.НеобходимаПечатьШтрихкода;
	УчитыватьСрокДействия = РеквизитыВидаДокумента.УчитыватьСрокДействия;
	
	// Статьи ДДС.
	ВестиУчетПоСтатьямДДС = ?(ЗначениеЗаполнено(Объект.ВидДокумента),
		РеквизитыВидаДокумента.ВестиУчетПоСтатьямДДС, 
		Ложь);
	Элементы.ГруппаСуммаНДССтатьиДДС.Видимость = ВестиУчетПоСтатьямДДС;
	Если Не ВестиУчетПоСтатьямДДС Тогда
		СтатьиДвиженияДенежныхСредств.Очистить();
	КонецЕсли;
	СформироватьПредставлениеСтатейДДС();
	
	// Заполнение валюты
	Если Не ЗначениеЗаполнено(Объект.Валюта)
		И ЗначениеЗаполнено(Объект.ВидДокумента) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСуммуВоВнутренних",
		Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента)) Тогда
		Объект.Валюта = Делопроизводство.ПолучитьВалютуПоУмолчанию();
	КонецЕсли;
	
	// Доступность реквизитов регистрации
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	
	// Обработчик механизма "Свойства"
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриИзмененииВидаДокумента(ЭтаФорма);
	РабочаяГруппаТекст = Делопроизводство.СтрокаОбязательноеЗаполнениеРабочихГруппДокументов(Объект.ВидДокумента);
	РабочаяГруппаПодпись = Делопроизводство.СтрокаАвтоматическиВестиСоставУчастниковРабочейГруппы(Объект.ВидДокумента);
	
	// Комплекты документов
	РаботаСКомплектамиДокументовСервер.ДокументПриИзмененииВидаДокументаНаСервере(ЭтаФорма);		
	
	// Смена заголовка организации и установка видимости при взаимодействии ФО.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") И Не ВестиУчетСторон Тогда
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям",
			Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента)) Тогда
			Элементы.Организация.Видимость = Истина;
			Элементы.Организация.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.Организация);
			Элементы.ГруппаОрганизация.Заголовок = НСтр("ru = 'Наша организация'; en = 'Our company'");
			Элементы.ГруппаОрганизация.Подсказка = НСтр("ru = 'Организация'; en = 'Company'");
		Иначе
			Элементы.Организация.Видимость = Ложь;
			Элементы.ГруппаОрганизация.Заголовок = НСтр("ru = 'Наше предприятие'; en = 'Our enterprise'");
			Элементы.ГруппаОрганизация.Подсказка = НСтр("ru = 'Предприятие'; en = 'Enterprise'");
			Объект.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
		
	ИначеЕсли ВестиУчетСторон Тогда
		Элементы.Организация.Видимость = Ложь;
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
			Объект.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
	Иначе
		Элементы.Организация.Видимость = Ложь;
		Элементы.ГруппаОрганизация.Заголовок = НСтр("ru = 'Наше предприятие'; en = 'Our enterprise'");
		Элементы.ГруппаОрганизация.Подсказка = НСтр("ru = 'Предприятие'; en = 'Enterprise'");
		Объект.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	Элементы.ГруппаСтороны.Видимость = ВестиУчетСторон;
	Элементы.СтороныПодписан.Видимость = ВестиУчетСторон И ВариантПодписания <> Перечисления.ВариантыПодписания.НеПодписывается;
	Элементы.СтороныДатаПодписи.Видимость = ВестиУчетСторон И ВариантПодписания <> Перечисления.ВариантыПодписания.НеПодписывается;
	
	Если ВестиУчетСторон Тогда
		ДобавитьСторону(Объект.Организация);	
	Иначе
		Объект.Стороны.Очистить();
	КонецЕсли;
	
	ВывестиДекорациюОтсутствуетОригинал(Объект);
	
	//Копирование дополнительных реквизитов основания 
	Если ЗначениеЗаполнено(Основание) 
		И ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы")
		И ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		
		Для Каждого Реквизит Из Основание.ДополнительныеРеквизиты Цикл
			СтруктураПоиска = Новый Структура("Свойство", Реквизит.Свойство);
			МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() > 0 Тогда
				НоваяСтрока = МассивСтрок[0];
				
				Если Не ЗначениеЗаполнено(ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение]) Тогда
					ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение] = Реквизит.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	// Обновить инструкции
	ПолучитьИнструкции();
	
	// ЭтапыОбработкиДокумента
	ИспользоватьЭтапыОбработкиДокумента = Ложь;
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		ИспользоватьЭтапыОбработкиДокумента = РеквизитыВидаДокумента.ИспользоватьЭтапыОбработкиДокумента;
	КонецЕсли;
	Элементы.ГруппаЭтапы.Видимость = ИспользоватьЭтапыОбработкиДокумента;
	Делопроизводство.ПрочитатьЭтапы(ЭтаФорма);
	
	ВключитьАвтоОтметкуИЗаполнитьПолеОтветственный();	
	
	Делопроизводство.ПрочитатьОбязательныеТипыСвязей(ЭтаФорма, ОбязательныеТипыСвязей, Объект.Ссылка, Объект.ВидДокумента);	
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы") И Не ТипСвязиВыбран Тогда
		МассивТиповСвязей = ПолучитьТипыСвязей(Основание, Объект.ВидДокумента);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента)
		И РеквизитыВидаДокумента.ВестиУчетТоваровИУслуг Тогда
		ВестиУчетТоваровИУслуг = Истина;
		Элементы.СтраницаТовары.Видимость = Истина;
		
		Если Объект.Товары.Количество() > 0 И Объект.Сумма <> Объект.Товары.Итог("Сумма") Тогда 
			Элементы.Сумма1.Видимость = Истина;
			Элементы.Сумма.Видимость = Ложь;
		Иначе 
			Элементы.Сумма1.Видимость = Ложь;
			Элементы.Сумма.Видимость = Истина;
		КонецЕсли;
	Иначе 
		Элементы.СтраницаТовары.Видимость = Ложь;
		ВестиУчетТоваровИУслуг = Ложь;
	КонецЕсли;
	
	Элементы.ПодписьТекст.Видимость = ИспользоватьПодписание И Не ВестиУчетСторон;
	
	ОбновитьЗаголовокПроцессаУтверждение();
	
	РаботаСПодписямиДокументов.ЗаполнитьТаблицуСторон(ЭтаФорма);
	УстановитьУсловноеОформление();
	ЕстьЭДО();
	
	НесколькоГрифовУтверждений = Объект.ГрифыУтверждения.Количество() > 1;
	УстановитьВидимостьГрифовУтверждений();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьАвтоОтметкуИЗаполнитьПолеОтветственный()
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		
		ОбязательноеУказаниеОтветственного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.
			ВидДокумента, "ОбязательноеУказаниеОтветственного");
			
		Если ОбязательноеУказаниеОтветственного Тогда	
			
			Элементы.Ответственный.АвтоОтметкаНезаполненного = Истина;
			
			// только для нового документа это делаем
			Если Не ЗначениеЗаполнено(Объект.Ответственный) И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Объект.Ответственный = Пользователи.ТекущийПользователь();
				Модифицированность = Истина;
			КонецЕсли;	
			
		Иначе
			Элементы.Ответственный.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Ответственный.ОтметкаНезаполненного = Ложь;
		КонецЕсли;			
			
	КонецЕсли;		
	
КонецПроцедуры	

&НаСервере
Процедура ПриИзмененииДатыРегистрации()
	
	Нумератор = Нумерация.ПолучитьНумераторДокумента(Объект);
	Если Нумерация.ПроверитьСменуПериодаНумерации(Объект.ДатаРегистрации, НачальнаяДатаРегистрации, Нумератор) Тогда 
		ОсвободитьНомерДокумента(Объект, НачальнаяДатаРегистрации);
		СформироватьЧисловойНомерДокумента(Объект);
		СформироватьСтроковыйНомерДокумента(Объект);
	Иначе
		СформироватьСтроковыйНомерДокумента(Объект);
	КонецЕсли;
	НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	
КонецПроцедуры

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура;
	
	Если Не БыстрыйВыборВидаДокумента Тогда 
		СохраняемыеЭлементы.Вставить("ВидДокумента", Объект.ВидДокумента);
	КонецЕсли;
	
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаСервере
Процедура ЗапомнитьЗначенияРеквизитов()
	
	НачальныеЗначенияРеквизитов.Очистить();
	НачальныеЗначения = НачальныеЗначенияРеквизитов.Добавить();
	ЗаполнитьЗначенияСвойств(НачальныеЗначения, Объект);
	НачальныеЗначения.СрокДействияДокументИсточникИзменения = СрокДействияДокументИсточникИзменения;
	НачальныеЗначения.СрокДействияКомментарий = СрокДействияКомментарий;
	НачальныеЗначения.ЯвляетсяКомплектом = 
		ЗначениеЗаполнено(Объект.ВидДокумента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЯвляетсяКомплектомДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если НовыйДокумент Тогда
		Если ЗначениеЗаполнено(ПараметрыОповещения)
			И ПараметрыОповещения.Свойство("ПараметрСобытия") Тогда
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Ссылка", Объект.Ссылка);
			ПараметрОповещения.Вставить("ПараметрСобытия", ПараметрыОповещения.ПараметрСобытия);
			Оповестить(ПараметрыОповещения.ИмяСобытия, ПараметрОповещения);
		КонецЕсли;
		
		ОповеститьОЗаписиНового(КлючЗаписи);
		
		Оповестить("ДокументСоздан", Объект.Ссылка, ЭтаФорма);
		НовыйДокумент = Ложь;
	Иначе	
		ОповеститьОбИзменении(КлючЗаписи);
		Оповестить("ДокументИзмененДляСписков", КлючЗаписи, ЭтаФорма);
	КонецЕсли;
	
	Оповестить("ДокументИзменен", Объект.Ссылка, ЭтаФорма);
	
	Если ЗначениеЗаполнено(ПерепискаПоПредмету) Тогда 
		Оповестить("ОбновитьПредметПереписки", ПерепискаПоПредмету, ЭтаФорма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПереписки) Тогда 
		ПараметрСобытия = Новый Структура;
		ПараметрСобытия.Вставить("Документ", ОснованиеПереписки);
		Оповестить("ИзмененыСвязиПодчиненныхДокументов", ПараметрСобытия);
		ОснованиеПереписки = Неопределено;
	КонецЕсли;	
	
	Если ФайлыДобавленные.Количество() > 0 Тогда
		Индекс = ФайлыДобавленные.Количество() - 1;
		Пока Индекс >= 0 Цикл 
			
			ФайлТаблицы = ФайлыДобавленные[Индекс];
			
			Если ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
			КонецЕсли;
			
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ФайлТаблицы.ПолныйПуть, Объект.Ссылка, ЭтаФорма, Истина);			
			
			ФайлыДобавленные.Удалить(Индекс);			
			Индекс = Индекс - 1;

		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
	#Если НЕ ВебКлиент Тогда
	//Выполнить автозаполнение файлов, которые должны заполняться на клиенте
	Если ДанныеДляЗаполненияФайловНаКлиенте.Количество() > 0 Тогда
		Состояние(НСтр("ru = 'Выполняется автоматическое заполнение файлов. Пожалуйста, подождите...'; en = 'In process of filling files automatically. Please wait...'"));
		
		МассивДанныхДляОбновленияФайлов = Новый Массив();
		
		Для Каждого ФайлДляАвтоЗаполнения Из ДанныеДляЗаполненияФайловНаКлиенте Цикл
			
			ЗаполненныйФайл = Новый Структура("ДвоичныеДанные, ТекущаяВерсия");
			ДвоичныеДанныеЗаполненногоФайла = Неопределено;
			Если ФайлДляАвтоЗаполнения.Автозаполнение Тогда
				ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлMSWordПоДвоичнымДанным(
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.РасширениеШаблона,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.НастройкиЗамены,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ДвоичныеДанные);
			КонецЕсли;
			
			// Штрихкодирование
			Если ФайлДляАвтоЗаполнения.Штрихкодирование
				И ФайлДляАвтоЗаполнения.НастройкиЗаполнения.Количество() > 1 Тогда
				ДанныеШК = ФайлДляАвтоЗаполнения.НастройкиЗаполнения[1].Значение;
				Если Не ДанныеШК.Свойство("СообщениеОбОшибке") 
					ИЛИ Не ЗначениеЗаполнено(ДанныеШК.СообщениеОбОшибке) Тогда
					
					Если ДвоичныеДанныеЗаполненногоФайла = Неопределено Тогда
						ДвоичныеДанныеЗаполненногоФайла = ДанныеШК.ДвоичныеДанныеФайла;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДвоичныеДанныеЗаполненногоФайла) Тогда 
						РезультатВставкиШтрихкода = ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(ФайлДляАвтоЗаполнения.Файл,
						"ВставитьИзображениеШтрихкода", 
						Истина, 
						ДанныеШК.ДвоичныеДанныеИзображения, 
						ДвоичныеДанныеЗаполненногоФайла,
						ДанныеШК.Расширение,
						ДанныеШК.ФайлРедактируется,
						ДанныеШК.ИзменениеФайловMSWordТолькоНаСервере,
						ДанныеШК.НастройкиШтрихкода.ВысотаШК,
						УникальныйИдентификатор,
						Ложь);		
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(РезультатВставкиШтрихкода) = Тип("ДвоичныеДанные") Тогда
				ДвоичныеДанныеЗаполненногоФайла = РезультатВставкиШтрихкода;
			КонецЕсли;
			
			Если ДвоичныеДанныеЗаполненногоФайла <> Неопределено Тогда
				ЗаполненныйФайл.ДвоичныеДанные = ДвоичныеДанныеЗаполненногоФайла;
				ЗаполненныйФайл.ТекущаяВерсия = ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ТекущаяВерсия;
				МассивДанныхДляОбновленияФайлов.Добавить(ЗаполненныйФайл);
			КонецЕсли;
		КонецЦикла;
		Если МассивДанныхДляОбновленияФайлов.Количество() > 0 Тогда
			ВыполнитьПакетноеОбновлениеВерсийФайлов(МассивДанныхДляОбновленияФайлов);
		КонецЕсли;
		ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
		Состояние();
	КонецЕсли;
	
	#КонецЕсли

	Если ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленныхДляРедактирования) Тогда
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущийФайлВСпискеДобавленныхДляРедактирования);
		
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		УстановитьДоступностьКоманд(ТекущиеДанные);
		
		УстановитьТекущуюСтрокуФайла(ТекущийФайлВСпискеДобавленныхДляРедактирования);
		ТекущийФайлВСпискеДобавленныхДляРедактирования = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленныхДляОткрытия) Тогда
		
		ВыборФайла(ТекущийФайлВСпискеДобавленныхДляОткрытия);
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		УстановитьДоступностьКоманд(ТекущиеДанные);
		
		УстановитьТекущуюСтрокуФайла(ТекущийФайлВСпискеДобавленныхДляОткрытия);
		ТекущийФайлВСпискеДобавленныхДляОткрытия = Неопределено;
	КонецЕсли;
	
	//Регистрация 
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		
		ВыполняетсяРегистрация = Ложь;
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Документ зарегистрирован:'; en = 'Document registered:'"), 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
		Отказ = Ложь;
		ИнтерактивныйЗапускБизнесПроцессовКлиент.ВыполнитьИнтерактивныйЗапускБизнесПроцесса(
			ШаблоныДляАвтоЗапускаРегистрация, Объект.Ссылка, "Регистрация", ЭтаФорма, Отказ, Ложь);	
		
	КонецЕсли;
	
	//Постановка в очередь отправки по ЭДО	
	Если ПараметрыЗаписи.Свойство("ОтправитьПоЭДО") Тогда
		СостояниеВерсииДокументаПоЭДО = ОбменСКонтрагентамиДОВызовСервера.ДанныеСостоянияДокументаПоЭДО(Объект.Ссылка);
		Если СостояниеВерсииДокументаПоЭДО = Неопределено 
			Или СостояниеВерсииДокументаПоЭДО = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭДДО.НеСформирован") Тогда
			НаправлениеЭД = ?(НаправлениеИсходящий, 
				ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий"), 
				ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"));
			Если Не ОбменСКонтрагентамиДОСлужебныйКлиент.ПоставитьДокументВОчередьНаОтправкуПоЭДО(
				Объект.Ссылка, Неопределено, НаправлениеЭД) Тогда
				
				Отказ = Истина;
				Возврат;
			Иначе
				ЕстьЭДО();
			КонецЕсли;
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'ЭДО. Состояние документа : %1'; en = 'EDI. Document state : %1'"),Строка(СостояниеВерсииДокументаПоЭДО));;
			Состояние(Текст, , , БиблиотекаКартинок.ЭмблемаСервиса1СЭДО);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'; en = 'Changed:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьГруппыНаСервере()
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСрокИсполнения(ТекущийОбъект)
	
	Если ПолучитьФункциональнуюОпцию(
		"ИспользоватьСрокИсполненияВоВнутренних",
		Новый Структура("ВидВнутреннегоДокумента", ТекущийОбъект.ВидДокумента)) Тогда
		СрокИсполненияДней = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущийОбъект.ВидДокумента, "СрокИсполнения");
			
		Если Не ЗначениеЗаполнено(ТекущийОбъект.СрокИсполнения) И ЗначениеЗаполнено(СрокИсполненияДней) Тогда 
			ТекущийОбъект.СрокИсполнения = ТекущийОбъект.ДатаРегистрации + 24 * 3600 * СрокИсполненияДней;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолныйПуть()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Папка");
	
	Если ЗначениеЗаполнено(ПапкаРодитель) Тогда
		
		ПолныйПуть = "";
		
		Пока Не ПапкаРодитель.Пустая() Цикл
			
			Если Не ПустаяСтрока(ПолныйПуть) Тогда
				ПолныйПуть = "\" + ПолныйПуть;
			КонецЕсли;	
			
			ПолныйПуть = Строка(ПапкаРодитель) + ПолныйПуть;
			
			ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПапкаРодитель, "Родитель");	
			Если Не ЗначениеЗаполнено(ПапкаРодитель) Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;
		
		Элементы.Папка.Подсказка = ПолныйПуть;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок()
	
	СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);	
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОКатегориях(Параметр)
	
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		ВыбраннаяКатегория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбраннаяКатегория.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояние(Документ, МассивСостояний) 
	
	Для Каждого СтруктураСостояния Из МассивСостояний Цикл
		
		Если СтруктураСостояния.Состояние = СтруктураСостояния.НачальноеСостояние Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураСостояния.Состояние) Тогда 
			Делопроизводство.ЗаписатьСостояниеДокумента(Документ, СтруктураСостояния.Период, СтруктураСостояния.Состояние, СтруктураСостояния.Установил);
		Иначе
			Делопроизводство.ОчиститьСостояниеДокумента(Документ, СтруктураСостояния.НачальноеСостояние);
		КонецЕсли;
		
	КонецЦикла;	
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Документ);
	
	// установка доступности
	Делопроизводство.УстановитьДоступностьПоСостоянию(ЭтаФорма, Документ, ДоступныеПоля, НедоступныеПоля);
	УстановитьДоступностьПоЭП();
	УстановитьДоступностьПоЗапрету();
	
	Если НаименованиеСозданоПоШаблону Тогда 
		Элементы.Заголовок.ТолькоПросмотр = Истина;
		Элементы.Заголовок.Подсказка = НСтр("ru = 'Наименование документа сформировано автоматически по шаблону, редактирование запрещено.'; en = 'Document decription generated automatically using template, editing is forbidden.'");
		Элементы.Заголовок.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
	ПолучитьИнструкции();
	ПолучитьОбзорДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКонтрагентаИзРеквизитовВСписок()
	
	Объект.Контрагенты.Очистить();
	
	Строка = Объект.Контрагенты.Добавить();
	Строка.Контрагент = Объект.Контрагент;
	Строка.КонтактноеЛицо = Объект.КонтактноеЛицо;
	Строка.ПодписалОтКонтрагента = Объект.ПодписалОтКонтрагента;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьКонтроля()
	
	ВывестиКартинкуКонтроля();
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКартинкуКонтроля()
	
	ОбзорДокумента.ВывестиКартинкуКонтроля(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКонтрагентаИОрганизациюВРеквизиты()
	
	// копирование контрагента
	СторонаКонтрагент = Неопределено;
	ИндексСторон = Объект.Стороны.Количество()-1;
	
	Пока ИндексСторон > -1 Цикл
		
		Если ЗначениеЗаполнено(Объект.Стороны[ИндексСторон].Сторона)
			И РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Объект.Стороны[ИндексСторон].Сторона) Тогда
				СторонаКонтрагент = Объект.Стороны[ИндексСторон].Сторона;	
		КонецЕсли;
			
		ИндексСторон = ИндексСторон - 1;
	КонецЦикла;
			
	Если СторонаКонтрагент <> Неопределено Тогда
		Объект.Контрагент = СторонаКонтрагент;		
	КонецЕсли;
	
	// копирование организации	
	Если Объект.Стороны.Количество() > 0
		И РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Объект.Стороны[0].Сторона) Тогда
		Если Объект.Организация <> Объект.Стороны[0].Сторона Тогда
			Объект.Организация = Объект.Стороны[0].Сторона;
			УстановитьУсловноеОформление();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Работа с рабочей группой

&НаСервере
Процедура ПерезаполнитьРабочуюГруппуДокументаСервер()
	
	РаботаСРабочимиГруппами.ПерезаполнитьРабочуюГруппуНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РабочаяГруппаОбновитьНаСервере()
	
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Работа с шаблонами

&НаСервере
Процедура ЗаполнитьШаблоныДляАвтоЗапуска()
	
	ШаблоныДляАвтоЗапускаЗакрытиеКарточки = ИнтерактивныйЗапускБизнесПроцессов.ПолучитьШаблоныДляАвтоЗапуска(
		Перечисления.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоВнутреннегоДокумента,
		Объект.ВидДокумента, Объект.Организация, Объект.Ссылка);
	ШаблоныДляАвтоЗапускаРегистрация = ИнтерактивныйЗапускБизнесПроцессов.ПолучитьШаблоныДляАвтоЗапуска(
		Перечисления.ВидыИнтерактивныхДействий.ИнтерактивнаяРегистрацияВнутреннегоДокумента,
		Объект.ВидДокумента, Объект.Организация, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуВыполнить(ШаблонДокумента)
	
	ШаблоныДокументов.ЗаполнитьФайлыДокументаПоШаблону(ШаблонДокумента, ФайлыДобавленные, Истина);
	КоличествоФайлов = ФайлыДобавленные.Количество();
	Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
	Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(ШаблонДокумента, ДокументОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Элементы.Категории.Заголовок = 
		РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
	
	ШаблоныДокументов.ЗаполнитьСтатьиДДСДокументаПоШаблону(ШаблонДокумента,
		СтатьиДвиженияДенежныхСредств, Объект.Сумма, СуммаНДС);

	НесколькоКонтрагентов = (Объект.Контрагенты.Количество() > 1);
	УстановитьВидимостьКонтрагентов();

	ПриИзмененииВидаДокумента();
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтаФорма);
	
	Модифицированность = Истина;
	Элементы.РедактироватьДобавленныйФайл.Видимость = Истина;
	Элементы.РедактироватьДобавленныйФайлКонтекст.Видимость = Истина;
	
	РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(ЭтаФорма);
	
	Если ИспользоватьВизыСогласования Тогда 
		ШаблоныДокументов.ЗаполнитьВизыДокументаПоШаблону(ШаблонДокумента, ВизыСогласования);
		КоличествоВиз = ВизыСогласования.Количество();
		Элементы.ГруппаНетВизСогласования.Видимость = (КоличествоВиз = 0);
		Элементы.ГруппаЕстьВизы.Видимость = (КоличествоВиз > 0);
		Элементы.ВизыСогласования.Видимость = (КоличествоВиз > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиАвтозаполненийШаблона(Файл, Шаблон, Документ)  
	
	СтруктураВозврата = Новый Структура("ВыполнятьНаСервере, РасширениеШаблона,НастройкиЗамены, ДанныеФайла, ДвоичныеДанные, ТекущаяВерсия");
	НаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	ПеремДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл.Ссылка);
	
	СтруктураВозврата.ВыполнятьНаСервере = НаСервере;
	СтруктураВозврата.РасширениеШаблона = НРег(Файл.ТекущаяВерсияРасширение);
	
	Если Шаблон = Неопределено Тогда
		Шаблон = Файл;
	КонецЕсли;
		
	СтруктураВозврата.НастройкиЗамены = АвтозаполнениеШаблоновФайловСервер.ПолучитьМассивАвтозаполненийШаблона(Файл, Шаблон, Документ);
	СтруктураВозврата.ДанныеФайла = ПеремДанныеФайла;
	
	ТекущаяВерсия = Файл.ТекущаяВерсия.ПолучитьОбъект();
	ИмяСРасширениемФайла = ТекущаяВерсия.ПолноеНаименование + "." + ТекущаяВерсия.Расширение;
	ДвоичныеДанныеФайла = АвтозаполнениеШаблоновФайловСервер.ПолучитьДвоичныеДанныеФайла(Файл);
	
	СтруктураВозврата.ДвоичныеДанные = ДвоичныеДанныеФайла;
	СтруктураВозврата.ТекущаяВерсия = Файл.ТекущаяВерсия;
	
	Возврат СтруктураВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//Работа с визами и резолюциями

&НаСервере
Процедура ЗаполнитьСписокВиз()
	
	РаботаСВизамиСогласования.ЗаполнитьСписокВиз(ЭтаФорма, ПоказыватьУдаленныеВизы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРезолюций()
	
	РаботаСРезолюциями.ЗаполнитьСписокРезолюций(ЭтаФорма, Не ПоказыватьУдаленныеРезолюции);
	
КонецПроцедуры

&НаСервере 
Функция ВыделитьЗаполненныеВизы(ВыделенныеСтроки, ЗаполненныеВизы, НезаполненныеВизы, ТекстОшибки)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ЭтоПолноправныйПользователь = ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ();
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеПоВизе = ВизыСогласования.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ДанныеПоВизе.Автор <> ТекущийПользователь И Не ЭтоПолноправныйПользователь Тогда 
			ТекстОшибки = НСтр("ru = 'Удалить визу может только ее автор или администратор!'; en = 'Only the author or the administrator can delete an endorsement!'");
			Возврат Ложь;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ДанныеПоВизе.Источник) Тогда 
			Если ТипЗнч(ДанныеПоВизе.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И Не ДанныеПоВизе.Источник.Выполнена Тогда 
				ТекстОшибки = НСтр("ru = 'Нельзя удалить визу, которая создана задачей, находящейся на выполнении!'; en = 'It is not possible to delete an endorsement that was created by an active task!'");
				Возврат Ложь;
			КонецЕсли;	
			Если ТипЗнч(ДанныеПоВизе.Источник) = Тип("БизнесПроцессСсылка.Согласование") И Не ДанныеПоВизе.Источник.Завершен Тогда 
				ТекстОшибки = НСтр("ru = 'Нельзя удалить визу, которая создана процессом, находящемся на выполнении!'; en = 'It is not possible to delete an endorsement that was created by an active process!'");
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ДанныеПоВизе.РезультатСогласования) Тогда 
			ЗаполненныеВизы.Добавить(ДанныеПоВизе.Ссылка);
		Иначе
			НезаполненныеВизы.Добавить(ДанныеПоВизе.Ссылка);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//Управление доступностью полей

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Если ДоступныеПоля = "" Тогда
		Команда.Доступность = Доступность;
	ИначеЕсли ТипЗнч(ДоступныеПоля) = Тип("Структура") Тогда
		Если ДоступныеПоля.Свойство(Команда.Имя) Или Не НедоступныеПоля.Свойство(Команда.Имя) Тогда
			Команда.Доступность = Доступность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если Элементы.Обзор.Видимость Тогда
		Префикс = "";
	Иначе	
		Префикс = "Создание";
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы["Файлы"+Префикс].ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				
		УстановитьДоступностьКоманды(Элементы["СоздатьФайл"+Префикс], Не Объект.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСоздать"+Префикс], Не Объект.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ВставитьКартинкуИзБуфера"+Префикс], Не Объект.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"+Префикс], Ложь);
				
		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], Ложь);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Занять"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Освободить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРаспознать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРаспознать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыПодписатьФайл"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыПодписатьФайл"+Префикс], Ложь);
	                                 
		УстановитьДоступностьКоманды(Элементы["ФайлыДобавитьЭПИзФайла"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыДобавитьЭПИзФайла"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыСохранитьВместеСЭП"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьВместеСЭП"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗашифровать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗашифровать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРасшифровать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРасшифровать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗаполнитьФайлДаннымиДокумента"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗаполнитьФайлДаннымиДокумента"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьШтрихкод"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьШтрихкод"+Префикс], Ложь);		
		
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСнятьОтметкуСканКопияОригиналаУВсехФайлов"+Префикс], Ложь);
		
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
		Зашифрован = ТекущиеДанные.Зашифрован;
		СозданПоШаблонуДокумента = ТекущиеДанные.СозданПоШаблонуДокумента;
		РазрешеноРедактирование = Не (ЗапретитьРедактироватьФайлы И СозданПоШаблонуДокумента);
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И СозданПоШаблонуДокумента);
		
		УстановитьДоступностьКоманды(Элементы["СоздатьФайл"+Префикс], Не Объект.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСоздать"+Префикс], Не Объект.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ВставитьКартинкуИзБуфера"+Префикс], Не Объект.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], НЕ ТекущиеДанные.ПодписанЭП И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"+Префикс], НЕ ТекущиеДанные.ПодписанЭП И РазрешеноРедактирование);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Занять"+Префикс], Редактирует.Пустая() И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"+Префикс], Редактирует.Пустая() И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], РазрешеноУдаление);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"+Префикс], РазрешеноУдаление);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Истина);

		УстановитьДоступностьКоманды(Элементы["Освободить"+Префикс],  Не Редактирует.Пустая() И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"+Префикс],  Не Редактирует.Пустая() И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], РазрешеноРедактирование);
				
		Расширение = ТекущиеДанные.Расширение;
		ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Расширение, ИспользоватьImageMagickДляРаспознаванияPDF);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРаспознать"+Префикс], РасширениеПоддерживается И Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРаспознать"+Префикс], РасширениеПоддерживается И Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["ФайлыПодписатьФайл"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыПодписатьФайл"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);

        УстановитьДоступностьКоманды(Элементы["ФайлыДобавитьЭПИзФайла"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыДобавитьЭПИзФайла"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыСохранитьВместеСЭП"+Префикс], ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьВместеСЭП"+Префикс], ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗашифровать"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗашифровать"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРасшифровать"+Префикс], Зашифрован);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРасшифровать"+Префикс], Зашифрован);

		УстановитьДоступностьКоманды(Элементы["ФайлыЗаполнитьФайлДаннымиДокумента"+Префикс], ТекущиеДанные.СозданИзШаблона И Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗаполнитьФайлДаннымиДокумента"+Префикс], ТекущиеДанные.СозданИзШаблона И Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьШтрихкод"+Префикс], Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьШтрихкод"+Префикс], Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс], ЗначениеЗаполнено(Объект.РегистрационныйНомер) И Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьРегистрационныйНомер"+Префикс], ЗначениеЗаполнено(Объект.РегистрационныйНомер) И Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСнятьОтметкуСканКопияОригиналаУВсехФайлов"+Префикс], Не Элементы.Оригинал.ТолькоПросмотр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи()
	
	Прочитать();
	УстановитьДоступностьПолей();
	ЗаполнитьСписокПодписей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПолей()
	
	УстановитьДоступностьПоСостоянию();
	УстановитьДоступностьПоЭП();
	УстановитьДоступностьПоПравам();
	УстановитьДоступностьПоЗапрету();
	
	Если НаименованиеСозданоПоШаблону Тогда 
		Элементы.Заголовок.ТолькоПросмотр = Истина;
		Элементы.Заголовок.Подсказка = НСтр("ru = 'Наименование документа сформировано автоматически по шаблону, редактирование запрещено.'; en = 'Document decription generated automatically using template, editing is forbidden.'");
		Элементы.Заголовок.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоЭП()
	
	Если ПодписанЭДО Тогда
		УстановитьТолькоПросмотр = Истина;
		Если Не НаправлениеИсходящий И Не ДокументПодписанНами Тогда
			Версия = 5;
		ИначеЕсли Элементы.КомандаОтклонитьЭД.Доступность 
			Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.НеСформирован Тогда
			Версия = 3;
		Иначе
			Версия = 4;
		КонецЕсли; 
	Иначе	
		УстановитьТолькоПросмотр = Объект.ПодписанЭП;
	КонецЕсли; 
	
	ИспользоватьСостоянияДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов");
	ДоступныПолныеПрава = РольДоступна("ПолныеПрава");
	УстановитьДоступностьПоСостояниюНеРаботает = ДоступныПолныеПрава ИЛИ НЕ ИспользоватьСостоянияДокументов;
	
	// если не ПодписанЭП - делаем доступными ключевые поля - только для роли ПолныеПрава
	// - для неполных прав сработает УстановитьДоступностьПоСостоянию
	Если Объект.ПодписанЭП Или ПодписанЭДО Или (НЕ Объект.ПодписанЭП И УстановитьДоступностьПоСостояниюНеРаботает) Тогда
		
		МассивИмен = Справочники.ВнутренниеДокументы.ПолучитьИменаКлючевыхРеквизитов(Версия);
		
		ПрефиксОбъекта = "Объект.";
		МассивИменСОбъектом = Новый Массив;
		Для Каждого ИмяПоля Из МассивИмен Цикл
			ИмяСОбъектом = ПрефиксОбъекта + ИмяПоля;
			Если ИмяПоля = "Файлы" Тогда
				МассивИменСОбъектом.Добавить(ИмяПоля);
			Иначе
				МассивИменСОбъектом.Добавить(ИмяСОбъектом);
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыДляИмен = Новый Массив;
		ЭлементыДляИмен.Добавить(Элементы.Заголовок);
		ЭлементыДляИмен.Добавить(Элементы.Содержание);
		ЭлементыДляИмен.Добавить(Элементы.Организация);
		ЭлементыДляИмен.Добавить(Элементы.Сумма);
		ЭлементыДляИмен.Добавить(Элементы.Валюта);
		ЭлементыДляИмен.Добавить(Элементы.Файлы);
		ЭлементыДляИмен.Добавить(Элементы.ФайлыСоздание);
		ЭлементыДляИмен.Добавить(Элементы.СтороныСторона);
		ЭлементыДляИмен.Добавить(Элементы.СтороныПодписан);
		ЭлементыДляИмен.Добавить(Элементы.СтороныПодписал);
		ЭлементыДляИмен.Добавить(Элементы.СтороныДатаПодписи);
		
		Для Каждого Элем Из ЭлементыДляИмен Цикл
			
			Если ТипЗнч(Элем) = Тип("ПолеФормы") ИЛИ ТипЗнч(Элем) = Тип("ТаблицаФормы") Тогда
				
				Если МассивИменСОбъектом.Найти(Элем.ПутьКДанным) <> Неопределено Тогда
					Если Элем.ПутьКДанным = "Файлы" Тогда 
						Элем.ИзменятьСоставСтрок = Не УстановитьТолькоПросмотр;
					Иначе
						Элем.ТолькоПросмотр = УстановитьТолькоПросмотр;
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоСостоянию()
	
	Делопроизводство.УстановитьДоступностьПоСостоянию(ЭтаФорма, Объект.Ссылка, ДоступныеПоля, НедоступныеПоля);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоПравам()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		Если Не ПраваПоОбъекту.Изменение Тогда
			ТолькоПросмотр = Истина;
			Элементы.ДобавитьПервуюРезолюцию.Доступность = Ложь;
			Элементы.КПРезолюцийДобавить.Доступность = Ложь;
			Элементы.КПРезолюцийОткрыть.Доступность = Ложь;
			Элементы.КПРезолюцийУдалить.Доступность = Ложь;
			Элементы.Зарегистрировать.Доступность = Ложь;
			Элементы.ВизыСогласования.ИзменятьСоставСтрок = Ложь;
			Элементы.ВизыСогласования.ИзменятьПорядокСтрок = Ложь;
			Элементы.Оригинал.ТолькоПросмотр = Истина;
			Элементы.ОригиналСоздание.ТолькоПросмотр = Истина;
			
			Элементы.ФормаЗакрыть.Видимость = Истина;
			Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
			Элементы.ФормаЗаписать.Видимость = Ложь;
			Элементы.ЗаписатьИЗакрытьЕще.Видимость = Ложь;
			Элементы.ЗаписатьЕще.Видимость = Ложь;
			
			Элементы.СписокКатегорийДанныхКонтекстноеМенюОткрытьФормуПодбораКатегорий.Доступность = Ложь;
			Элементы.СписокКатегорийДанныхОткрытьФормуПодбораКатегорий.Доступность = Ложь;
			
			Элементы.ПодписьТекст.ТолькоПросмотр = ТолькоПросмотр;
			Элементы.УтверждениеТекст.ТолькоПросмотр = ТолькоПросмотр;
			
			// Если доступа к документу нет, то состояние можно только "смотреть"
			ЗапретитьРучноеИзменениеСостоянияДокументов = Истина;
			Элементы.ДобавитьФайл.Доступность = Ложь;
			
			// Комплекты
			Элементы.СоставКомплекта.ИзменятьСоставСтрок = Ложь;
			Элементы.СоставКомплекта.ИзменятьПорядокСтрок = Ложь;
			Элементы.СоставКомплектаПодобратьВнутренниеДокументы.Доступность = Ложь;
			Элементы.СоставКомплектаПодобратьВходящиеДокументы.Доступность = Ложь;
			Элементы.СоставКомплектаПодобратьИсходящиеДокументы.Доступность = Ложь;
			Элементы.СоставКомплектаПодобратьФайлы.Доступность = Ложь;
			Элементы.ЭлементКомплектаУдалить.Доступность = Ложь;
			Элементы.КонтекстноеМенюЭлементКомплектаУдалить.Доступность = Ложь;
			Элементы.КонтекстноеМенюЭлементКомплектаПереместитьВверх.Доступность = Ложь;
			Элементы.КонтекстноеМенюЭлементКомплектаПереместитьВниз.Доступность = Ложь;
			
		ИначеЕсли Не ДокументооборотПраваДоступа.ЕстьПравоРегистрации(Объект.Ссылка) Тогда
			Элементы.РегистрационныйНомер.ТолькоПросмотр = Истина;
			Элементы.ДатаРегистрации.ТолькоПросмотр = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Ставит доступность полям, уже заполненным в шаблоне.
&НаСервере
Процедура УстановитьДоступностьПоЗапрету()
	
	Если Не ЗначениеЗаполнено(Объект.Шаблон) Или РольДоступна("ПолныеПрава") Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	Шаблон = Объект.Шаблон;
	
	ЗапретитьИзменятьРеквизитыИзШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Объект.Шаблон, "ЗапретитьИзменятьРеквизитыИзШаблона");
		
	Если ЗапретитьИзменятьРеквизитыИзШаблона = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитов = "Адресат, ВидДокумента, Организация, ГрифДоступа, ВопросДеятельности, Папка, Подразделение, Проект, Ответственный, НоменклатураДел, Стороны, Контрагенты, СтатьяДвиженияДенежныхСредств";
	
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Шаблон, ИменаРеквизитов);
		
	Для Каждого Пара Из РеквизитыШаблона Цикл
			
		ИмяРеквизита = Пара.Ключ;
		
		Если ИмяРеквизита = "Стороны" Тогда 
			Продолжить; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыШаблона[ИмяРеквизита]) Тогда
			НайденныйЭлемент = Элементы.Найти(ИмяРеквизита);
			Если НайденныйЭлемент <> Неопределено Тогда
				
				НайденныйЭлемент.ТолькоПросмотр = Истина;
				
				Если ИмяРеквизита = "Подразделение" Тогда 
					НельзяМенятьПодразделение = Истина; 
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(РеквизитыШаблона["СтатьяДвиженияДенежныхСредств"]) Тогда
		Элементы.ПредставлениеСтатейДДС.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ТаблицаСторонШаблона = РеквизитФормыВЗначение("СтороныШаблона");
	ТаблицаСторонШаблона.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РеквизитыШаблона.Стороны.Выгрузить(), ТаблицаСторонШаблона);
	ТаблицаСторонШаблона.ЗагрузитьКолонку(РеквизитыШаблона.Стороны.Выгрузить().ВыгрузитьКолонку("Подписант"), "Подписал");
	ЗначениеВРеквизитФормы(ТаблицаСторонШаблона, "СтороныШаблона");
	
	ВыборкаСторон = РеквизитыШаблона.Стороны.Выбрать();
	Пока ВыборкаСторон.Следующий() Цикл
		ПараметрыОтбора = Новый Структура("Сторона", ВыборкаСторон.Сторона);
		НайденныеСтроки = Объект.Стороны.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ЗапретУдаления = Истина;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКонтрагентов()
	
	Элементы.ГруппаКонтрагент.Видимость =
		Не НесколькоКонтрагентов
		И ВестиУчетПоКонтрагентам
		И Не ВестиУчетСторон;
		
	Элементы.ГруппаКонтрагенты.Видимость =
		НесколькоКонтрагентов
		И ВестиУчетПоКонтрагентам
		И Не ВестиУчетСторон;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГрифовУтверждений()
	
	Элементы.УтверждениеТекст.Видимость = ИспользоватьУтверждение И Не НесколькоГрифовУтверждений;
	Элементы.ГрифыУтверждения.Видимость = ИспользоватьУтверждение И НесколькоГрифовУтверждений;
	
	Элементы.НесколькоГрифовУтверждений.Видимость = ИспользоватьУтверждение И Не НесколькоГрифовУтверждений; 
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСканКопияОригиналаУВсехФайлов(Команда)
	
	Если Элементы.Оригинал.ТолькоПросмотр
		Или (ТипЗнч(ДоступныеПоля) = Тип("Структура")
		И Не ДоступныеПоля.Свойство("СоздатьФайлОригинал")) Тогда 
		Возврат;
		
	Иначе 
		ЕстьПометкиОригинала = Ложь;
		Для Каждого Строка Из Файлы Цикл
			Если Строка.Оригинал Тогда 
				Строка.Оригинал = Ложь;
				ЕстьПометкиОригинала = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбязателенФайлОригинала И ЗначениеЗаполнено(Объект.РегистрационныйНомер)
			И Не ПолучитьВидимостьДекорацииОтсутствуетОригинал() Тогда 
			УстановитьВидимостьДекорацииОтсутствуетОригинал(Истина);
		КонецЕсли;
		
		Если ЕстьПометкиОригинала Тогда 
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Процедура ОткрытьФайл(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФайл(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьФайлДаннымиДокументаСервер(ТекущийФайл)
	
	Возврат АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
		Ложь,
		ТекущийФайл, 
		Истина, 
		УникальныйИдентификатор);
		
КонецФункции

&НаСервере
Процедура ВыполнитьПакетноеОбновлениеВерсийФайлов(МассивФайловДляОбновления)
	
	Для Каждого ЗаполненныйФайл Из МассивФайловДляОбновления Цикл
		АвтозаполнениеШаблоновФайловСервер.ОбновитьВерсиюИзДвоичныхДанных(ЗаполненныйФайл.ДвоичныеДанные, ЗаполненныйФайл.ТекущаяВерсия, "Автозаполнение шаблона");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Команда)
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьИсториюСрокаДействия()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияСроковДействияДокументов.ДатаИзменения,
		|	ИсторияСроковДействияДокументов.Комментарий,
		|	ИсторияСроковДействияДокументов.ДокументИсточникИзменения
		|ИЗ
		|	РегистрСведений.ИсторияСроковДействияДокументов КАК ИсторияСроковДействияДокументов
		|ГДЕ
		|	ИсторияСроковДействияДокументов.Документ = &Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсторияСроковДействияДокументов.ДатаИзменения УБЫВ";
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл  
		ИсторияСрокаДействия = Новый Структура;
		ИсторияСрокаДействия.Вставить("Комментарий", Результат.Комментарий);
		ИсторияСрокаДействия.Вставить("ДокументИсточникИзменения", Результат.ДокументИсточникИзменения);
		
		Возврат ИсторияСрокаДействия;
	КонецЦикла;
	
	Возврат Новый Структура("Комментарий, ДокументИсточникИзменения"); 
	
КонецФункции

&НаСервере
Процедура ВывестиДекорациюОтсутствуетОригинал(ТекущийОбъект)
	
	ОбязателенФайлОригинала = ВестиУчетСканКопийОригиналовДокументов 
		И ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.ВидДокумента, "ОбязателенФайлОригинала");
		
	Если ОбязателенФайлОригинала И ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда 
		
		НайденныеСтроки = Файлы.НайтиСтроки(Новый Структура("Оригинал, ПометкаУдаления", Истина, Ложь));
		Если НайденныеСтроки.Количество() = 0 Тогда 
			УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере(Истина);
		Иначе
			УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере(Ложь);
		КонецЕсли;
		
	Иначе
		УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДекорацииОтсутствуетОригинал(Видимость)
	
	Если Элементы.Обзор.Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
	Иначе
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
	КонецЕсли;
		
	Если ЭлементГруппаНадписьОтсутствуетОригинал.Видимость <> Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал.Видимость = Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВидимостьДекорацииОтсутствуетОригинал()
	
	Если Элементы.Обзор.Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
	Иначе
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
	КонецЕсли;
	
	Возврат ЭлементГруппаНадписьОтсутствуетОригинал.Видимость;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере(Видимость)
	
	Если Элементы.Обзор.Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
	Иначе
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
	КонецЕсли;
	
	ЭлементГруппаНадписьОтсутствуетОригинал.Видимость = Видимость;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаСервере
Процедура ПрочитатьСвязи(ТипыСвязей = Неопределено)
	
	Если ТипыСвязей = Неопределено Или ТипыСвязей.Найти(Справочники.ТипыСвязей.НеДействуетВСоответствии) <> Неопределено Тогда
		НеДействуетВСоответствии = СвязиДокументов.ПолучитьСвязанныйДокумент(Объект.Ссылка, Справочники.ТипыСвязей.НеДействуетВСоответствии);
		НачальныйНеДействуетВСоответствии = НеДействуетВСоответствии;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязи()
	
	Делопроизводство.ЗаполнитьДеревоСвязейДокумента(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура УдалитьСвязь(Параметры)
	
	Если ЗначениеЗаполнено(Параметры.СвязанныйДокумент) Тогда 
		СвязанныйДокумент = Параметры.СвязанныйДокумент;
	ИначеЕсли ЗначениеЗаполнено(Параметры.СвязаннаяСтрока) Тогда 
		СвязанныйДокумент = Параметры.СвязаннаяСтрока;
	КонецЕсли;
	
	СвязиДокументов.УдалитьСвязь(Параметры.Документ, СвязанныйДокумент, Параметры.ТипСвязи);
	ЗаполнитьСвязи();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлюч(ПараметрыКлюча)
	
	КлючЗаписи = РегистрыСведений.СвязиДокументов.СоздатьКлючЗаписи(ПараметрыКлюча);
	Возврат КлючЗаписи;
	
КонецФункции	

&НаСервере
Функция ПолучитьТипыСвязей(Основание, ВидДокумента)
	
	МассивТиповСвязей.Очистить();
	ЧислоПользовательскихСвязей = 0;
	
	СвязанныйДокумент = Новый Структура("ВидДокумента", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидДокумента"));
	ДокументСтруктура = Новый Структура("ВидДокумента", ВидДокумента);
	ТаблицаНастроекСвязей = СвязиДокументов.ПолучитьНастройкиСвязи(ДокументСтруктура, СвязанныйДокумент);
	
	Для Каждого Строка Из ТаблицаНастроекСвязей Цикл
		
		Если Не СвязиДокументов.ЭтоПодходящийТипСвязи(Объект.Ссылка, Основание, Строка.ТипСвязи) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Единичная Тогда
			
			// если связь единичная - надо проверить, что нет уже документов, связанных с основанием связью этого типа
			ДокументыНайденные = СвязиДокументов.ПолучитьСвязанныеДокументы(Основание, Строка.ТипОбратнойСвязи);
			Если ДокументыНайденные.Количество() = 0 Тогда
				МассивТиповСвязей.Добавить(Строка.ТипСвязи);
			КонецЕсли;
			
		Иначе
			
			МассивТиповСвязей.Добавить(Строка.ТипСвязи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из МассивТиповСвязей Цикл
		Если ЗначениеЗаполнено(Строка.Значение) И Не Строка.Значение.Предопределенный Тогда
			ЧислоПользовательскихСвязей = ЧислоПользовательскихСвязей + 1;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат МассивТиповСвязей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры механизма свойств

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с электронной подписью

&НаСервере
Процедура ОбновитьКартинкуЭП()
	
	ОбзорДокумента.ВывестиКартинкуЭП(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодписатьДокументЗавершениеВызовСервера()
	
	ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	РаботаСЭП.ЗаполнитьСписокПодписей(Объект.Ссылка, ЭлектронныеПодписи, 
		УникальныйИдентификатор, Элементы.ГруппаЭП);
		
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП,ПодписанЭП");
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписи()
	
	Если Элементы.ЭлектронныеПодписи.ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить выделенные подписи?'; en = 'Delete the selected signatures?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выделенную подпись?'; en = 'Delete the selected signature?'");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалитьПодписиПродолжение",
		ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписиПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	УдалитьПодписиИОбновитьСписок(Ложь);
		
	ОповеститьОбИзменении(КлючЗаписи);
		
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
		
КонецПроцедуры	

&НаСервере
Процедура УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен)
	
	РаботаСЭП.УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен, 
		Элементы.ЭлектронныеПодписи.ВыделенныеСтроки,
		Объект.Ссылка, ЭлектронныеПодписи, УникальныйИдентификатор, Элементы.ГруппаЭП);
		
	Если РеквизитПодписанИзменен Тогда
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	КонецЕсли;
	
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаПодписей(ТекущиеДанные)
	
	ЭтоПодпись = Истина;
	ЕстьПодписи = (ЭлектронныеПодписи.ПолучитьЭлементы().Количество() <> 0);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЭтоПодпись = ТекущиеДанные.Объект <> Неопределено И (НЕ ТекущиеДанные.Объект.Пустая());
	КонецЕсли;
		
	Элементы.ТаблицаПодписейПроверить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейОткрытьПодпись.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейУдалить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейСохранить.Доступность = ЕстьПодписи И ЭтоПодпись;
	
	Элементы.ТаблицаПодписейКонтекстноеМенюПроверить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейКонтекстноеМенюОткрытьПодпись.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюУдалить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюСохранить.Доступность = ЕстьПодписи И ЭтоПодпись;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Регистрация документа

&НаСервере
Процедура КомпенсацияРегистрации()
	
	ОсвободитьНомерДокумента(Объект, ДатаРегистрации, ЧисловойНомер);
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРеквизитовРегистрации(ТекущийОбъект)
	
	ЭтоДелопроизводитель = РольДоступна("РегистрацияВнутреннихДокументов") Или РольДоступна("ПолныеПрава");
	Если Не ЭтоДелопроизводитель Тогда 
		
		Элементы.Зарегистрировать.Видимость = Ложь;
		Элементы.ЗарегистрироватьЕще.Видимость = Ложь;
		Элементы.ГруппаРегНомер.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Если Не ЗначениеЗаполнено(Объект.РегистрационныйНомер) 
		   И Не ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда 
			Элементы.РегистрационныйНомер.Видимость = Ложь;
			Элементы.ДатаРегистрации.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		
		Элементы.Зарегистрировать.Видимость = Истина;
		Элементы.ЗарегистрироватьЕще.Видимость = Истина;
		Элементы.ГруппаРегНомер.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		
		Если Не ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента)
			И Делопроизводство.ИспользоватьВидыВнутреннихДокументов() Тогда // не известен вид нумерации
			
			Элементы.РегистрационныйНомер.Доступность = Ложь;
			Элементы.ДатаРегистрации.Доступность = Ложь;
			Элементы.ГруппаРегНомер.Подсказка = 
				НСтр("ru = 'Для регистрации документа используйте кнопку ""Зарегистрировать"" в командной панели.'; en = 'To register the document click button ""Register"" at the command bar.'");
			
			Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
			Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
			
		Иначе
			
			Если ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда // документ зарегистрирован
				Элементы.РегистрационныйНомер.Доступность = Истина;
				Элементы.ДатаРегистрации.Доступность = Истина;
				Элементы.Зарегистрировать.Видимость = Ложь;
				Элементы.ЗарегистрироватьЕще.Заголовок = НСтр("ru = 'Перерегистрировать'; en = 'Register again'");
				Элементы.РегистрационныйНомер.ОтображениеПредупрежденияПриРедактировании = 
					ОтображениеПредупрежденияПриРедактировании.Отображать;
				Элементы.ГруппаРегНомер.Подсказка = 
					НСтр("ru = 'Для перерегистрации документа используйте команду ""Еще \ Документы \ Перерегистрировать"".'; en = 'For repeat registration of the document use the command ""More \ Documents \ Register again"".'");
				
				Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Истина;
				Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомер.Доступность = Истина;
				Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Истина;
				Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомерСоздание.Доступность = Истина;
			Иначе
				Элементы.РегистрационныйНомер.Доступность = Ложь;
				Элементы.ДатаРегистрации.Доступность = Ложь;
				Элементы.ЗарегистрироватьЕще.Заголовок = НСтр("ru = 'Зарегистрировать'; en = 'Register'");
				Элементы.ГруппаРегНомер.Подсказка = 
					НСтр("ru = 'Для регистрации документа используйте кнопку ""Зарегистрировать"" в командной панели.'; en = 'To register the document click button ""Register"" at the command bar.'");
				
				Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
				Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
				Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
				Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОсвободитьНомерДокумента(ТекущийОбъект, ДатаРегистрации = Неопределено, ЧисловойНомер = Неопределено)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	
	Если ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		СтруктураПараметров.Вставить("ДатаРегистрации", ДатаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧисловойНомер) Тогда 
		СтруктураПараметров.Вставить("ЧисловойНомер", ЧисловойНомер);
	КонецЕсли;
	
	Нумерация.ОсвободитьНомер(СтруктураПараметров);
	
КонецПроцедуры	

&НаСервере
Процедура СформироватьЧисловойНомерДокумента(ТекущийОбъект)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	СтруктураПараметров.Вставить("ПерепискаПоПредмету",	ПерепискаПоПредмету);
	СтруктураПараметров.Вставить("НеДействуетВСоответствии", НеДействуетВСоответствии);
	СтруктураПараметров.Вставить("СвязанныйДокумент", СвязанныйДокументДляНумерации);
	
	Нумерация.СформироватьЧисловойНомерДокумента(СтруктураПараметров, ТекущийОбъект.ЧисловойНомер);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтроковыйНомерДокумента(ТекущийОбъект)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	СтруктураПараметров.Вставить("ПерепискаПоПредмету",	ПерепискаПоПредмету);
	СтруктураПараметров.Вставить("НеДействуетВСоответствии", НеДействуетВСоответствии);
	СтруктураПараметров.Вставить("СвязанныйДокумент", СвязанныйДокументДляНумерации);
	
	ОписанияОшибок = Новый СписокЗначений;
	Нумерация.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, ТекущийОбъект.РегистрационныйНомер, ОписанияОшибок);
	
	Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОписаниеОшибки.Представление,,
			ОписаниеОшибки.Значение,
			"Объект");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеРеквизита(ЗначениеРеквизита, ИмяРеквизита, Поле, ТекстСообщения = Неопределено)
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Сообщение = Новый СообщениеПользователю;
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			Сообщение.Текст = ТекстСообщения;
		Иначе
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поле ""%1"" не заполнено'; en = 'Field ""%1"" is not filled in'"),
				ИмяРеквизита);
		КонецЕсли;
		Сообщение.Поле = Поле;
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьРегистрации(ТекущийОбъект)
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	
	// Проверка заполненности срока действия документа
	Если  ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.ВидДокумента, "УчитыватьСрокДействия") Тогда
		Если ПолучитьФункциональнуюОпцию("УчитыватьСрокДействияДокумента", 
			Новый Структура("ВидВнутреннегоДокумента", ТекущийОбъект.ВидДокумента)) Тогда
			Поле = "СрокДействияСтрока";
			Сообщение = НСтр("ru = 'Не заполнена дата начала действия'; en = 'Effective date is not filled in'");
			Если Не ПроверитьЗаполнениеРеквизита(
				ТекущийОбъект.ДатаНачалаДействия,
				НСтр("ru = 'Дата начала действия'; en = 'Effective date'"),
				Поле,
				Сообщение) Тогда
				Результат = Ложь;
			КонецЕсли;
			Если Не ТекущийОбъект.Бессрочный Тогда
				Сообщение = НСтр("ru = 'Не заполнена дата окончания действия'; en = 'Expiration date is not filled in'");
				Если Не ПроверитьЗаполнениеРеквизита(
					ТекущийОбъект.ДатаОкончанияДействия,
					НСтр("ru = 'Дата окончания действия'; en = 'Expiration date'"),
					Поле,
					Сообщение) Тогда
					Результат = Ложь;
				КонецЕсли;
				Сообщение = НСтр("ru = 'Не заполнен порядок продления'; en = 'Renewal procedure is not filled in'");
				Если Не ПроверитьЗаполнениеРеквизита(
					ТекущийОбъект.ПорядокПродления,
					НСтр("ru = 'Порядок продления'; en = 'Renewal procedure'"),
					Поле,
					Сообщение)Тогда
					Результат = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// проверка уникальности номера, указанного вручную
	Нумератор = Нумерация.ПолучитьНумераторДокумента(ТекущийОбъект);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда 
		Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда 
			ОбъектСтруктура = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
			ОбъектСтруктура.Вставить("РегистрационныйНомер", РегистрационныйНомер);
			ОбъектСтруктура.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
			
			Если Не Делопроизводство.РегистрационныйНомерУникален(ОбъектСтруктура) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Указанный регистрационный номер не уникален!'; en = 'The specified registration number is not unique!'"));
				Возврат Ложь;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДелВоВнутренних", 
		Новый Структура("ВидВнутреннегоДокумента", ТекущийОбъект.ВидДокумента)) Тогда 
		Если Не ЗначениеЗаполнено(ТекущийОбъект.НоменклатураДел) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Номенклатура дел"" не заполнено'; en = 'Field ""Case file"" is not filled in'"),,"Объект.НоменклатураДел");
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(ТекущийОбъект.Ссылка);
	Если КоличествоЗанятыхФайлов > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Документ содержит файлы, занятые для редактирования'; en = 'The document contains files locked for editing'"),,,"Файлы");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗарегистрироватьНаСервере(ТекущийОбъект, СообщениеОбОшибке, РегистрационныйНомер = "")
	
	// Проверяем права доступа
	Если Не ДокументооборотПраваДоступа.ЕстьПравоРегистрации(ТекущийОбъект) Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Вашего уровня доступа недостаточно для регистрации этого внутреннего документа.
                                  |Обратитесь к администратору.';
                                  |en = 'Your permissions level is not enough to register the internal document. 
                                  |Contact the administrator.'");
		
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецЕсли;
	
	Если РегистрационныйНомер = "" Тогда // сформировать автоматически
		
		ТекущийОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
		НачальнаяДатаРегистрации = ТекущийОбъект.ДатаРегистрации;
		
		// сформируем текущий номер
		СформироватьЧисловойНомерДокумента(ТекущийОбъект);
		СформироватьСтроковыйНомерДокумента(ТекущийОбъект);
		
	Иначе
		ТекущийОбъект.РегистрационныйНомер = РегистрационныйНомер;
		ТекущийОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
		НачальнаяДатаРегистрации = ТекущийОбъект.ДатаРегистрации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда // успешно сформирован номер
		ТекущийОбъект.Зарегистрировал = ПользователиКлиентСервер.ТекущийПользователь();
		Состояние = Перечисления.СостоянияДокументов.Зарегистрирован;
	Иначе
		ТекущийОбъект.ДатаРегистрации = '00010101';
		НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	КонецЕсли;
	
	УстановитьСрокИсполнения(ТекущийОбъект);
	УстановитьДоступностьРеквизитовРегистрации(ТекущийОбъект);
	
	РегистрационныйНомер = ТекущийОбъект.РегистрационныйНомер;
	ЧисловойНомер = ТекущийОбъект.ЧисловойНомер;
	ДатаРегистрации = ТекущийОбъект.ДатаРегистрации;
	
	ВывестиДекорациюОтсутствуетОригинал(ТекущийОбъект);
	
	ПротоколированиеРаботыПользователей.ЗаписатьРегистрациюДокумента(Объект.Ссылка, РегистрационныйНомер);
	
КонецПроцедуры

&НаКлиенте
Функция ДокументЗарегистрирован()
	
	Возврат ЗначениеЗаполнено(Объект.РегистрационныйНомер);
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// Срок действия документа

&НаСервере
Процедура СрокДействияПриЧтенииНаСервере()
	
	НачальныйСрокДействияЗаполнен = СрокДействияЗаполнен();
	УчитыватьСрокДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
		"УчитыватьСрокДействия");
	ОбновитьОтображениеСрокаДействия();
	
КонецПроцедуры

&НаСервере
Процедура СрокДействияПриСозданииНаСервере()
	
	НачальныйСрокДействияЗаполнен = СрокДействияЗаполнен();
	УчитыватьСрокДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
		"УчитыватьСрокДействия");
	ОбновитьОтображениеСрокаДействия();
	
КонецПроцедуры

&НаСервере
Процедура СрокДействияПередЗаписьюНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	ПараметрыЗаписи.Вставить("СрокДействияКомментарий", СрокДействияКомментарий);
	ПараметрыЗаписи.Вставить("СрокДействияДокументИсточникИзменения", СрокДействияДокументИсточникИзменения);
	
	Если ТекущийОбъект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента) 
		Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.ВидДокумента, "УчитыватьСрокДействия") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НачальныеЗначенияРеквизитов[0].НеДействует И ТекущийОбъект.НеДействует Тогда // установлен признак "Не действует"
		
		Если ЗначениеЗаполнено(НеДействуетВСоответствии) Тогда
			СрокДействияКомментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Действие документа прекращено в соответствии с документом: %1.'; en = 'The document is inoperative in accordance with document: %1.'"),
				Строка(НеДействуетВСоответствии));
		Иначе
			СрокДействияКомментарий = НСтр("ru = 'Действие документа прекращено.'; en = 'Document is inoperative.'");
		КонецЕсли;
		СрокДействияДокументИсточникИзменения = НеДействуетВСоответствии;
		ПараметрыЗаписи.Вставить("СрокДействияКомментарий", СрокДействияКомментарий);
		ПараметрыЗаписи.Вставить("СрокДействияДокументИсточникИзменения", НеДействуетВСоответствии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СрокДействияПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	Если НовыйДокумент
		И СрокДействияЗаполнен()
		Или СрокДействияИзменен(ТекущийОбъект, ПараметрыЗаписи) Тогда
		
		Запись = Новый Структура;
		Запись.Вставить("Документ", Объект.Ссылка);
		Запись.Вставить("ДатаНачалаДействия", Объект.ДатаНачалаДействия);
		Запись.Вставить("ДатаОкончанияДействия", Объект.ДатаОкончанияДействия);
		Запись.Вставить("Бессрочный", Объект.Бессрочный);
		Запись.Вставить("ПорядокПродления", Объект.ПорядокПродления);
		Запись.Вставить("ДокументИсточникИзменения", ПараметрыЗаписи.СрокДействияДокументИсточникИзменения);
		Запись.Вставить("Комментарий", ПараметрыЗаписи.СрокДействияКомментарий);
		РегистрыСведений.ИсторияСроковДействияДокументов.ДобавитьЗапись(Запись);
		
	КонецЕсли;
	
	НачальныйСрокДействияЗаполнен = СрокДействияЗаполнен();
	УчитыватьСрокДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
		"УчитыватьСрокДействия");
	
КонецПроцедуры

&НаСервере
Процедура СрокДействияПриИзмененииВидаДокумента()
	
	УчитыватьСрокДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
		"УчитыватьСрокДействия");
	ОбновитьОтображениеСрокаДействия();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСрокаДействия()
	
	Если УчитыватьСрокДействия Тогда
		ИсторияСрока = ПрочитатьИсториюСрокаДействия();
		СрокДействияКомментарий = ИсторияСрока.Комментарий;
		СрокДействияДокументИсточникИзменения = ИсторияСрока.ДокументИсточникИзменения;
		
		СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(
			Объект, СрокДействияКомментарий);
		Элементы.СрокДействияСтрока.Видимость = Истина;
	Иначе
		Элементы.СрокДействияСтрока.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокДействияДокументаПродолжение(Результат, Параметры) Экспорт 

	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Объект.ДатаНачалаДействия = Результат.ДатаНачалаДействия;
		Объект.ДатаОкончанияДействия = Результат.ДатаОкончанияДействия;
		Объект.Бессрочный = Результат.Бессрочный;
		Объект.ПорядокПродления = Результат.ПорядокПродления;
		СрокДействияДокументИсточникИзменения = Результат.ДокументИсточникИзменения;
		СрокДействияКомментарий = Результат.Комментарий;
		СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(
			Объект, СрокДействияКомментарий);
		Модифицированность = Истина;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
			ПолучитьОбзорДокумента();
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры	

&НаСервере
Функция СрокДействияЗаполнен()
	
	Возврат ЗначениеЗаполнено(Объект.ДатаНачалаДействия)
	Или Объект.Бессрочный
	Или ЗначениеЗаполнено(Объект.ДатаОкончанияДействия)
	Или ЗначениеЗаполнено(Объект.ПорядокПродления);
	
КонецФункции

&НаСервере
Функция СрокДействияИзменен(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НачальныеЗначенияРеквизитов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТекущийОбъект.ДатаНачалаДействия <> НачальныеЗначенияРеквизитов[0].ДатаНачалаДействия
	Или ТекущийОбъект.Бессрочный <> НачальныеЗначенияРеквизитов[0].Бессрочный
	Или ТекущийОбъект.ДатаОкончанияДействия <> НачальныеЗначенияРеквизитов[0].ДатаОкончанияДействия
	Или ТекущийОбъект.ПорядокПродления <> НачальныеЗначенияРеквизитов[0].ПорядокПродления
	Или ПараметрыЗаписи.СрокДействияДокументИсточникИзменения <> НачальныеЗначенияРеквизитов[0].СрокДействияДокументИсточникИзменения
	Или ПараметрыЗаписи.СрокДействияКомментарий <> НачальныеЗначенияРеквизитов[0].СрокДействияКомментарий;
	
КонецФункции

// Устанавливает доступность команд для поля ФайлыДобавленные (видно при создании по шаблону)
&НаСервере
Процедура УстановитьДоступностьКомандФайлыДобавленные()
	
	СозданИзШаблона = Истина;
	РазрешеноРедактирование = Не (ЗапретитьРедактироватьФайлы И СозданИзШаблона);
	РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И СозданИзШаблона);
	
	Элементы.РедактироватьДобавленныйФайл.Доступность = РазрешеноРедактирование;
	Элементы.РедактироватьДобавленныйФайлКонтекст.Доступность = РазрешеноРедактирование;
	Элементы.ФайлыДобавленныеУдалить.Доступность = РазрешеноУдаление;
	Элементы.ФайлыДобавленныеКонтекстноеМенюУдалить.Доступность = РазрешеноУдаление;
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
  ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры


&НаКлиенте
Процедура ПеренестиНоменклатуруПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПеренестиНоменклатуруИзГруппы(Параметры.Группа);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиНоменклатуруИзГруппы(ГруппаНоменклатуры)
	
	Делопроизводство.ПеренестиНоменклатуруИзГруппы(ЭтаФорма, ГруппаНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеСуммы()
	
	Если ВестиУчетТоваровИУслуг И 
		Объект.Товары.Количество() > 0 И Объект.Сумма <> Объект.Товары.Итог("Сумма") Тогда 
		Элементы.Сумма1.Видимость = Истина;
		Элементы.Сумма.Видимость = Ложь;
	Иначе 
		Элементы.Сумма1.Видимость = Ложь;
		Элементы.Сумма.Видимость = Истина;
	КонецЕсли;
	
	Если Не ВестиУчетПоСтатьямДДС Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтатей = СтатьиДвиженияДенежныхСредств.Количество();
	Если КоличествоСтатей = 1 Тогда
		СтатьиДвиженияДенежныхСредств[0].Сумма = Объект.Сумма;
	ИначеЕсли КоличествоСтатей > 1 Тогда
		ИтогСумма = 0;
		Для Каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
			ИтогСумма = ИтогСумма + Строка.Сумма;
		КонецЦикла;
		Если ИтогСумма = Объект.Сумма Тогда
			Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
				Элементы.СтраницаСуммаВерна;
		Иначе
			Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
				Элементы.СтраницаСуммаНеверна;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с инструкциями

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 90, 102);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Учет времени

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ВидыРабот,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКонтрольНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Статьи ДДС

&НаСервере
Процедура ПрочитатьСтатьиДДС(ДокументОснование = Неопределено)
	
	ВестиУчетПоСтатьямДДС = ?(ЗначениеЗаполнено(Объект.ВидДокумента),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ВестиУчетПоСтатьямДДС"), 
		Ложь);
	Элементы.ГруппаСуммаНДССтатьиДДС.Видимость = ВестиУчетПоСтатьямДДС;
	
	Если ВестиУчетПоСтатьямДДС Тогда
		
		Если НЕ Объект.Ссылка.Пустая() Тогда // прочтем статьи самого документа
			РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
				Объект.Ссылка, СтатьиДвиженияДенежныхСредств);
			НеПроверятьЗаполнениеСтатейДДС = (СтатьиДвиженияДенежныхСредств.Количество() = 0);
		ИначеЕсли ЗначениеЗаполнено(ДокументОснование) Тогда // скопируем статьи основания
			РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
				ДокументОснование, СтатьиДвиженияДенежныхСредств);
		КонецЕсли;
			
		СуммаНДС = 0;
		Для Каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
		КонецЦикла;
			
	КонецЕсли;
	
	СформироватьПредставлениеСтатейДДС();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеСтатейДДС()
	
	ВестиУчетПоСтатьямДДС = ?(ЗначениеЗаполнено(Объект.ВидДокумента),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ВестиУчетПоСтатьямДДС"), 
		Ложь);
	Если Не ВестиУчетПоСтатьямДДС Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтатей = СтатьиДвиженияДенежныхСредств.Количество();
	Элементы.ПредставлениеСтатейДДС.ОтметкаНезаполненного = (КоличествоСтатей = 0);
	
	Если КоличествоСтатей <= 1 Тогда
		
		Элементы.СтраницыСтатьиДДС.ТекущаяСтраница = Элементы.СтраницаСтатьяДДС;
		Элементы.ПредставлениеСтатейДДС.РедактированиеТекста = Истина;
		
		Если КоличествоСтатей = 1 Тогда
			ПредставлениеСтатейДДС = Строка(СтатьиДвиженияДенежныхСредств[0].СтатьяДвиженияДенежныхСредств);
		Иначе
			ПредставлениеСтатейДДС = "";
		КонецЕсли;
		
	Иначе // несколько статей
		
		Элементы.СтраницыСтатьиДДС.ТекущаяСтраница = Элементы.СтраницаСтатьиДДС;
		Элементы.ПредставлениеСтатейДДС.РедактированиеТекста = Ложь;
		
		// Соберем представление статей строкой в поле формы.
		Результат = "";
		Для каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
			Если Результат <> "" Тогда
				Результат = Результат + "; ";
			КонецЕсли;
			Результат = Результат + Строка(Строка.СтатьяДвиженияДенежныхСредств);
		КонецЦикла;
		
		ПредставлениеСтатейДДС = Результат;
			
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Копирование файлов

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ЧислоФайлов)
	
	ЧислоФайлов = Элементы.Файлы.ВыделенныеСтроки.Количество();
	
	ОбщегоНазначения.СкопироватьФайлыВБуферОбменаИзТаблицыФайлы(Файлы, Элементы.Файлы.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ЧислоФайлов)
	
	Если ОбщегоНазначения.ПустойБуферОбмена() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	МассивФайлов = ДанныеИзБуфераОбмена.Данные;
	
	ЧислоФайлов = МассивФайлов.Количество();
	
	РаботаСФайламиВызовСервера.СкопироватьФайлВПриложенных(МассивФайлов, Объект.Ссылка);
	
	ЗаполнитьСписокФайлов();
	Модифицированность = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со сторонами

&НаСервере
Процедура ДобавитьСторону(Сторона, КонтактноеЛицо = Неопределено, ИндексКартинки = 2)
	
	Если Не ЗначениеЗаполнено(Сторона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбораСторона = Новый Структура("Сторона", Сторона);
	Если Объект.Стороны.НайтиСтроки(ПараметрыОтбораСторона).Количество() = 0 Тогда
		НоваяСтрока = Объект.Стороны.Добавить();
		НоваяСтрока.Сторона = Сторона;
		НоваяСтрока.Подписал = "";
		НоваяСтрока.ИндексКартинкиСтороны = ИндексКартинки;
		
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			НоваяСтрока.КонтактноеЛицо = КонтактноеЛицо;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыТаблицыСтороны(СтрокаТаблицы)
	
	Если ТипЗнч(СтрокаТаблицы.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтрокаТаблицы.ИндексКартинкиСтороны = 1;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Сторона)
			И ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
				СтрокаТаблицы.Сторона, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
			СтрокаТаблицы.КонтрагентЯвляетсяФизЛицом = Истина;
		Иначе 
			СтрокаТаблицы.КонтрагентЯвляетсяФизЛицом = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтрокаТаблицы.Сторона) = Тип("СправочникСсылка.Организации") Тогда
		СтрокаТаблицы.ИндексКартинкиСтороны = 2;
		СтрокаТаблицы.КонтрагентЯвляетсяФизЛицом = Ложь;
	Иначе
		СтрокаТаблицы.ИндексКартинкиСтороны = 0;
		СтрокаТаблицы.КонтрагентЯвляетсяФизЛицом = Ложь;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	РаботаСПодписямиДокументов.УстановитьУсловноеСторон(УсловноеОформление, Объект.Организация);	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭДО

&НаСервере
Процедура УстановитьВидимостьПоЭДО()
	
	Элементы.СтороныГруппаЭДО.Видимость = ЕстьЭДО;
	Элементы.ЭДО.Видимость = ЕстьЭДО;
	Элементы.ОбновитьСтороныЭДО.Видимость = ЕстьЭДО;
	Элементы.ОтправитьПоЭДО.Видимость = ЕстьЭДО И НаправлениеИсходящий;
	
	Элементы.СтороныДобавить.Доступность = Не ЕстьЭДО;
	Элементы.СтороныКонтекстноеМенюдобавить.Доступность = Не ЕстьЭДО;
	
	Если Не ЕстьЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ПризнакиДокПоЭДО = Новый Структура;
	ПризнакиДокПоЭДО.Вставить("СсылкаНаМассивОтпечатков",СсылкаНаМассивОтпечатков);
	ПризнакиДокПоЭДО.Вставить("ПрофильНастроекЭДО",ПрофильНастроекЭДО);
	ПризнакиДокПоЭДО.Вставить("ВидЭД",ВидЭД);
	ПризнакиДокПоЭДО.Вставить("ОсновнойФайлЭД",Неопределено);
	ПризнакиДокПоЭДО.Вставить("МожноОтклонитьЭтотЭД",Истина);
	ПризнакиДокПоЭДО.Вставить("ЕстьДоступныеСертификаты",Ложь);
	ПризнакиДокПоЭДО.Вставить("ЭДСчетФактура",Ложь);
	ПризнакиДокПоЭДО.Вставить("ДОСФЗавершен",Ложь);
	ПризнакиДокПоЭДО.Вставить("СтатусЭД",Неопределено);
	ПризнакиДокПоЭДО.Вставить("ТипЭлементаВерсииЭД",Неопределено);
	ПризнакиДокПоЭДО.Вставить("ПричинаОтклонения","");
	ПризнакиДокПоЭДО.Вставить("ВторойТитулПодписан",Ложь);
	ПризнакиДокПоЭДО.Вставить("МожноАннулироватьЭтотЭД",Ложь);
	ПризнакиДокПоЭДО.Вставить("ЕстьОтправленноеУведомление",Ложь);
	ПризнакиДокПоЭДО.Вставить("ЭтоТитулФНС",Ложь);
	
	ОбменСКонтрагентамиДОВызовСервера.ПолучитьПризнакиДокументаПоЭДО(Объект.Ссылка, ПризнакиДокПоЭДО);
		
	ЕстьПравоОбработки = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Ложь);
	ЕстьВозможностьПодписания = ЕстьПравоОбработки И ПризнакиДокПоЭДО.ЕстьДоступныеСертификаты;
	МожноАннулироватьЭтотЭД = ЕстьПравоОбработки И ПризнакиДокПоЭДО.МожноАннулироватьЭтотЭД;
	ЭДОЗакрыт = ОбменСКонтрагентамиДОВызовСервера.ДОЗакрытПринудительно(Объект.Ссылка);
	МожноОтклонитьЭтотЭД = ЕстьПравоОбработки И ПризнакиДокПоЭДО.МожноОтклонитьЭтотЭД;
	СтатусЭД = ПризнакиДокПоЭДО.СтатусЭД;
	ВидЭД = ПризнакиДокПоЭДО.ВидЭД;
	СтатусОтклонен = ОбменСКонтрагентамиСлужебныйВызовСервера.ЭДОтклонен(СтатусЭД);
	ЭтоТитулФНС = ПризнакиДокПоЭДО.ЭтоТитулФНС;
	ЭДСчетФактура = ПризнакиДокПоЭДО.ЭДСчетФактура;
	ЭтоСчетВерсии30 = ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
	
	Элементы.ЖурналСобытийЭДО.Доступность = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Ложь);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И НаправлениеИсходящий
		И (Не ЗначениеЗаполнено(ПризнакиДокПоЭДО.ОсновнойФайлЭД)
			ИЛИ СтатусЭД = Перечисления.СтатусыЭД.Сформирован
			ИЛИ СтатусЭД = Перечисления.СтатусыЭД.Подписан
			ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке) Тогда
		МожноРедактироватьПередаваемыеПараметры = Истина;
	Иначе
		МожноРедактироватьПередаваемыеПараметры = Не ЗначениеЗаполнено(ПризнакиДокПоЭДО.ОсновнойФайлЭД);
	КонецЕсли;
	Элементы.СтороныКонтекстноеМенюУдалить.Доступность = МожноРедактироватьПередаваемыеПараметры;
	
	ДействиеСНашейСтороны = "";
	Если Не НаправлениеИсходящий Тогда
		
		КомандаУтвердитьВидимость = ЭДСчетФактура ИЛИ ЭтоСчетВерсии30;
		КомандаУтвердитьДоступность = Не ЭДОЗакрыт И ЕстьПравоОбработки И СтатусЭД = Перечисления.СтатусыЭД.Получен;
		
		КомандаПодписатьЭДВидимость = ЕстьВозможностьПодписания И Не ЭДСчетФактура И Не ЭтоСчетВерсии30;
		КомандаПодписатьЭДДоступность = НЕ СтатусОтклонен И Не ЭДОЗакрыт
			И (СтатусЭД = Перечисления.СтатусыЭД.Получен 
			Или СтатусЭД = Перечисления.СтатусыЭД.Утвержден 
			Или СтатусЭД = Перечисления.СтатусыЭД.Подписан)
			И Не ПризнакиДокПоЭДО.ВторойТитулПодписан
			И Не СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку;
			
		Если КомандаПодписатьЭДВидимость Тогда
			Если КомандаПодписатьЭДДоступность Тогда
				ДействиеСНашейСтороны = Перечисления.ОжидаемоеДействиеЭД.Подписать;
			КонецЕсли; 	
		Иначе //утверждение
			Если КомандаУтвердитьВидимость И КомандаУтвердитьДоступность Тогда
				ДействиеСНашейСтороны = Перечисления.ОжидаемоеДействиеЭД.Утвердить;
			КонецЕсли; 	
		КонецЕсли; 	
		Если ВидЭД = Перечисления.ВидыЭД.СчетФактура
			Или ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Элементы.КомандаОтклонитьЭД.Заголовок = НСтр("ru = 'Запросить уточнение по электронному документу'; en = 'Request clarification on electronic document'");
			Элементы.КомандаОтклонитьЭД.Картинка = БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
		КонецЕсли;
	Иначе
		
		КомандаПодписатьЭДВидимость = ЕстьВозможностьПодписания;
		КомандаПодписатьЭДДоступность = НЕ СтатусОтклонен И Не ЭДОЗакрыт
			И СтатусЭД = Перечисления.СтатусыЭД.Сформирован
			Или (СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.НеСформирован 
				И КоличествоФайлов > 0 И Не ДокументПодписанНами);
		
		Если КомандаПодписатьЭДВидимость И КомандаПодписатьЭДДоступность Тогда
			ДействиеСНашейСтороны = Перечисления.ОжидаемоеДействиеЭД.Подписать;
		ИначеЕсли НаправлениеИсходящий 
			И (СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ЗакрытПринудительно 
			Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяКорректировка 
			Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.Отклонен 
			Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОтклоненПолучателем) Тогда
			
			ДействиеСНашейСтороны = "Начать заново";
		КонецЕсли;
		
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДействиеСНашейСтороны) И ЗначениеЗаполнено(ПризнакиДокПоЭДО.ОсновнойФайлЭД) Тогда
		Строка = Новый Структура;
		Строка.Вставить("ВидЭД", ВидЭД);
		Строка.Вставить("Родитель", Неопределено);
		Строка.Вставить("ТипЭД", ПризнакиДокПоЭДО.ТипЭлементаВерсииЭД);
		Если Не ЭДСчетФактура 
			И СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
			Строка.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Утвержден);
		Иначе	
			Строка.Вставить("СтатусЭД", СтатусЭД);
		КонецЕсли; 
		Строка.Вставить("Ссылка", ПризнакиДокПоЭДО.ОсновнойФайлЭД);
		
		ДействиеСНашейСтороны = ОбменСКонтрагентамиСлужебный.ОжидаемоеДействиеПоТекущемуСтатусу(Строка);
	КонецЕсли; 
	
	Если ДействиеСНашейСтороны = Перечисления.ОжидаемоеДействиеЭД.Подписать Тогда
		Если КомандаПодписатьЭДВидимость И КомандаПодписатьЭДДоступность Тогда
			Объект.Стороны[0].ДействиеПоЭДО = ДействиеСНашейСтороны;
		Иначе	
			Объект.Стороны[0].ДействиеПоЭДО = "";
			
		КонецЕсли; 
	ИначеЕсли ДействиеСНашейСтороны = Перечисления.ОжидаемоеДействиеЭД.Утвердить Тогда
		Если Не КомандаПодписатьЭДВидимость И КомандаУтвердитьДоступность Тогда
			Объект.Стороны[0].ДействиеПоЭДО = ДействиеСНашейСтороны;
		Иначе	
			Объект.Стороны[0].ДействиеПоЭДО = "";
		КонецЕсли; 
	ИначеЕсли ДействиеСНашейСтороны = Перечисления.ОжидаемоеДействиеЭД.Отправить Тогда
	Иначе
		Объект.Стороны[0].ДействиеПоЭДО = ДействиеСНашейСтороны;
	КонецЕсли; 
	
	Элементы.КомандаАннулироватьЭД.Доступность = МожноАннулироватьЭтотЭД;
	Элементы.КомандаОтклонитьЭД.Доступность = (НЕ (СтатусОтклонен ИЛИ ЭДОЗакрыт) И МожноОтклонитьЭтотЭД)
		И Не ПризнакиДокПоЭДО.ЕстьОтправленноеУведомление;
		
	Если СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.Отклонен 
		Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОтклоненПолучателем 
		Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяКорректировка Тогда
		
		ПозДвоеточия = СтрНайти(ПризнакиДокПоЭДО.ПричинаОтклонения,":");
		ПозЗапятой = СтрНайти(ПризнакиДокПоЭДО.ПричинаОтклонения,",");
		Подписал = Сред(ПризнакиДокПоЭДО.ПричинаОтклонения, ПозЗапятой +1, ПозДвоеточия-ПозЗапятой-1);
		Комментарий =Сред(ПризнакиДокПоЭДО.ПричинаОтклонения, ПозДвоеточия+2);
		Индекс = 1;
		Если НаправлениеИсходящий И СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.Отклонен
			Или Не НаправлениеИсходящий И СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОтклоненПолучателем 
			Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяКорректировка Тогда
			Индекс = 0;
		КонецЕсли;
		Объект.Стороны[Индекс].Подписал = Подписал;
		Объект.Стороны[Индекс].Комментарий =Комментарий;
	КонецЕсли;
	
	Элементы.СтороныПодписан.ТолькоПросмотр = Ложь;

КонецПроцедуры 

&НаКлиенте
Процедура ПослеПолученияОтпечатков(Отпечатки, Параметры = Неопределено) Экспорт
	
	МассивОтпечатков = Новый Массив;
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаМассивОтпечатков) Тогда
		МассивОтпечатковСервера = ПолучитьИзВременногоХранилища(СсылкаНаМассивОтпечатков);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатков, МассивОтпечатковСервера, Истина);
	КонецЕсли;
	
	СсылкаНаМассивОтпечатков = ПоместитьВоВременноеХранилище(МассивОтпечатков, УникальныйИдентификатор);
	
	ЕстьЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияЕстьЭДО()
	ЕстьЭДО();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтороныЭДО(Команда)
	
	ЕстьЭДО();
	
КонецПроцедуры

&НаСервере
Процедура ЕстьЭДО()
	
	ЕстьЭДО = Ложь;
	ПодписанЭДО = Ложь;
	Если ВариантПодписания <> Перечисления.ВариантыПодписания.НеПодписывается Тогда
		
		Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			Для каждого СтрокаТаблицы Из Объект.Стороны Цикл
				Если ТипЗнч(СтрокаТаблицы.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда
					НаДату = Неопределено;
					НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					СостояниеПоЭДО = ОбменСКонтрагентамиДОВызовСервера.ДанныеСостоянияДокументаПоЭДО(Объект.Ссылка, СтрокаТаблицы.Сторона, НаДату, НаправлениеЭД);
					НаправлениеИсходящий = НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					Если ЗначениеЗаполнено(СостояниеПоЭДО) Тогда
						Если НаправлениеИсходящий И СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.Отклонен
							Или Не НаправлениеИсходящий И СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОтклоненПолучателем Тогда
							СостояниеПоЭДОСтр = "Отклонен нами";
							Объект.Стороны[0].СостояниеПоЭДО = СостояниеПоЭДОСтр +?(ЗначениеЗаполнено(НаДату)," ("+НаДату+")","");
						Иначе
							Если СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.СформированЭД 
								Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяОтправка Тогда
								СостояниеПоЭДОСтр = "Поставлен в очередь на отправку";
							Иначе
								СостояниеПоЭДОСтр = ""+СостояниеПоЭДО;
							КонецЕсли;
							СтрокаТаблицы.СостояниеПоЭДО = СостояниеПоЭДОСтр +?(ЗначениеЗаполнено(НаДату)," ("+НаДату+")","");
						КонецЕсли;
						
						ЕстьЭДО = Истина;
						Если Не НаправлениеИсходящий Тогда
							ПодписанЭДО = Истина;
						Иначе 
							Если СостояниеПоЭДО <> Перечисления.СостоянияВерсийЭДДО.ЗакрытПринудительно 
								Или СостояниеПоЭДО <> Перечисления.СостоянияВерсийЭДДО.НеСформирован 
								Или СостояниеПоЭДО <> Перечисления.СостоянияВерсийЭДДО.Отклонен 
								Или СостояниеПоЭДО <> Перечисления.СостоянияВерсийЭДДО.ОтклоненПолучателем Тогда
								
								ПодписанЭДО = Истина;
							КонецЕсли; 
						КонецЕсли;
					Иначе 
						//ДокументОбъект = РеквизитФормыВЗначение("Объект");
						//ДокументОбъект.ДополнительныеСвойства.Вставить("КонтрагентЭДО", СтрокаТаблицы.Сторона);
						Источник = Новый Структура;
						Источник.Вставить("ДокументОбъект",Объект.Ссылка);
						Источник.Вставить("КонтрагентЭДО",СтрокаТаблицы.Сторона);
						Источник.Вставить("ОрганизацияЭДО",Объект.Стороны[0].Сторона);
						ПараметрыЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(Источник);
						НастройкиОбменаЭД = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
						Если ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда
							НастройкиОбменаЭД.Свойство("ПрофильНастроекЭДО",ПрофильНастроекЭДО);
							ЕстьЭДО = Истина;
							СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.НеСформирован;
							СтрокаТаблицы.СостояниеПоЭДО = СостояниеПоЭДО;
							НаправлениеИсходящий = Истина;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьЭДО И Не ЗначениеЗаполнено(ВидЭД) Тогда
				ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	УстановитьВидимостьПоЭДО();
	УстановитьДоступностьПоЭП();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокПроцессаУтверждение()
	
	Если ИспользоватьПодписание Тогда
		ЗаголовокПроцесса = НСтр("ru = 'На подписание'; en = 'For signing'");
	Иначе
		ЗаголовокПроцесса = НСтр("ru = 'На утверждение'; en = 'For confirmation'");
	КонецЕсли;
	
	Элементы.ПроцессУтверждение.Заголовок = ЗаголовокПроцесса;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнитьПоляУтвердилПодписал()

	ПодписьТекст = ДелопроизводствоКлиентСервер.ПолучитьСтрокуПодписи(Объект);
	УтверждениеТекст = ДелопроизводствоКлиентСервер.ПолучитьСтрокуУтверждения(Объект);

КонецПроцедуры

&НаСервере
Функция ПроверитьВыделенныеГрифыУтверждений(ВыделенныеСтроки, ТекстОшибки)
	
	Результат = Истина;
	ЭтоПолноправныйПользователь = ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ();
	Если ЭтоПолноправныйПользователь Тогда
		Возврат Результат;
	КонецЕсли;
	
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Шаблон,
		"ЗапретитьИзменятьРеквизитыИзШаблона, ГрифыУтверждения");

	Если РеквизитыШаблона.ЗапретитьИзменятьРеквизитыИзШаблона = Истина Тогда
		АвторыУтвержденияШаблона = РеквизитыШаблона.ГрифыУтверждения.Выгрузить().ВыгрузитьКолонку("АвторУтверждения");
	Иначе
		АвторыУтвержденияШаблона = Новый Массив;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		СтрокаГрифаУтверждения = Объект.ГрифыУтверждения.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Не СтрокаГрифаУтверждения.АвторУтверждения = ТекущийПользователь
			И Не СтрокаГрифаУтверждения.УстановилГриф = ТекущийПользователь Тогда
				ТекстОшибки = НСтр("ru = 'Удалить гриф утверждения может только ее автор и ответственное лицо'; en = 'Only the author and the responsible person are allowed to delete confirmation stamp.'");
				Результат = Ложь;
				Прервать;
		КонецЕсли;
			
		Если АвторыУтвержденияШаблона.Найти(СтрокаГрифаУтверждения.АвторУтверждения) <> Неопределено Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Нельзя удалить гриф утверждения
				|%1 указан(а) в шаблоне документа в качестве утверждающего лица';
				|en = 'It is impossible to delete the confirmation stamp:
				|%1 is specified in the template as the confirming person.'"),
				Строка(СтрокаГрифаУтверждения.АвторУтверждения));
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ТестЦентр

&НаКлиенте
Функция ТЦЗаписать() Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	Записать(ПараметрыЗаписи);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦЗарегистрировать() Экспорт
	
	Зарегистрировать(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТЦСоздатьНаОснованииБизнесПроцесс() Экспорт
	
	Предметы = Новый Массив;
	Предметы.Добавить(Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Предметы", Предметы);
	ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса", ПараметрыФормы);
	Возврат Истина;
	
КонецФункции

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
    ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
    ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
    ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт    
    ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭДок(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСобытийЭДО(Команда)
	
	Отбор = Новый Структура("ДокументДО", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.СостояниеДокументовПоЭДО.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти
