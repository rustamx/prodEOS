#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Параметры.Родитель) Тогда
			Объект.Родитель = Параметры.Родитель;
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.Ответственный) Тогда
			Объект.Ответственный = Параметры.Ответственный;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка = Справочники.РабочиеГруппы.ПустаяСсылка()
	   И Объект.Родитель = Справочники.РабочиеГруппы.ВсеПользователи Тогда
		Объект.Родитель = Справочники.РабочиеГруппы.ПустаяСсылка();
	КонецЕсли;
	
	Если Объект.Ссылка = Справочники.РабочиеГруппы.ВсеПользователи Тогда
		ТолькоПросмотр = Истина;
		Элементы.ДекорацияПредопределеннаяГруппаВсеПользователи.Видимость = Истина;
		Элементы.СтраницыУчастникиГруппыКомментарий.Видимость = Ложь;
		Элементы.Недействительна.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьСведенияОПользователях();
	
	ОбновитьСписокНедействительныхПользователей(Истина);
	УстановитьДоступностьСвойств(ЭтотОбъект);
	ОбновитьСогласноПометкеУдаленияИНедействительности();
	
	Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Элементы.ФормаПолномочияИРазрешения.Заголовок = НСтр("ru = 'Полномочия'; en = 'Privileges'");
	КонецЕсли;	
	
	Элементы.ФормаПолномочияИРазрешения.Видимость = ПравоДоступа("Изменение", 
		Метаданные.РегистрыСведений.ПолномочияПользователей);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьСведенияОПользователях();
	ОбновитьСписокНедействительныхПользователей(Истина);
	УстановитьДоступностьСвойств(ЭтотОбъект);
	ОбновитьСогласноПометкеУдаленияИНедействительности()

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_РабочиеГруппы", Новый Структура, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСведенияОПользователях();
	ОбновитьСогласноПометкеУдаленияИНедействительности()
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыборРодителя");
	
	ОткрытьФорму("Справочник.РабочиеГруппы.ФормаВыбора", ПараметрыФормы, Элементы.Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура НедействительнаПриИзменении(Элемент)
	
	ОбновитьСогласноПометкеУдаленияИНедействительности();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

&НаКлиенте
Процедура СоставОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Объект.Состав.Очистить();
	Для каждого Значение Из ВыбранноеЗначение Цикл
		Объект.Состав.Добавить().Пользователь = Значение;
	КонецЦикла;
	ЗаполнитьСведенияОПользователях();
	Элементы.Состав.Обновить();
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗаполнитьСведенияОПользователях(Элементы.Состав.ТекущаяСтрока, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	СообщениеПользователю = ПеремещениеПользователяВГруппу(ПараметрыПеретаскивания.Значение, Объект.Ссылка);
	Если СообщениеПользователю <> Неопределено Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Перемещение пользователей'; en = 'Moving users'"), , СообщениеПользователю, БиблиотекаКартинок.Информация32);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьПользователей(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Подбор участников рабочей группы'; en = 'Fill working group members'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все пользователи'; en = 'All users'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные пользователи'; en = 'Selected users'"));
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("КонтролироватьДублиАдресатов", Истина);
	
	ВыбранныеПользователи = Новый Массив;
	Для Каждого Строка Из Объект.Состав Цикл
		ВыбранныеПользователи.Добавить(Строка.Пользователь);
	КонецЦикла;
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеПользователи);
	
	ОткрытьФорму("Справочник.АдреснаяКнига.ФормаСписка",
		ПараметрыФормы,
		Элементы.Состав,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительныхПользователей(Команда)
	ОбновитьСписокНедействительныхПользователей(Ложь);
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	СоставСортироватьСтроки("ПоВозрастанию");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	СоставСортироватьСтроки("ПоУбыванию");
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	СоставПереместитьСтроку("Вверх");
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	СоставПереместитьСтроку("Вниз");
КонецПроцедуры

&НаКлиенте
Процедура ПолномочияИРазрешения(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыФормыПолномочий = Новый Структура("Пользователь", Объект.Ссылка);
	ОткрытьФорму("Обработка.ПолномочияИРазрешения.Форма", ПараметрыФормыПолномочий, ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСвойств(Форма)
	
	Элементы = Форма.Элементы;
	
	СоставГруппы = Форма.Объект.Состав;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Недействителен", Ложь);
	ЕстьДействительныеПользователи = СоставГруппы.НайтиСтроки(ПараметрыОтбора).Количество() > 0;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
	ЕстьНеУдаленныеПользователи = СоставГруппы.НайтиСтроки(ПараметрыОтбора).Количество() > 0;
	
	ПараметрыОтбора.Вставить("Недействителен", Истина);
	ЕстьНедействительныеПользователи = СоставГруппы.НайтиСтроки(ПараметрыОтбора).Количество() > 0;
	
	ПараметрыОтбора.Вставить("ПометкаУдаления", Истина);
	ЕстьУдаленныеПользователи = СоставГруппы.НайтиСтроки(ПараметрыОтбора).Количество() > 0;
	
	ДоступностьКомандПеремещения =
		(ЕстьДействительныеПользователи Или ЕстьНеУдаленныеПользователи)
		Или ((ЕстьНедействительныеПользователи Или ЕстьУдаленныеПользователи)
			И Элементы.ПоказыватьНедействительныхПользователей.Пометка);
	
	Элементы.СоставПереместитьВверх.Доступность         = ДоступностьКомандПеремещения;
	Элементы.СоставПереместитьВниз.Доступность          = ДоступностьКомандПеремещения;
	Элементы.СоставКонтекстноеМенюПереместитьВверх.Доступность = ДоступностьКомандПеремещения;
	Элементы.СоставКонтекстноеМенюПереместитьВниз.Доступность  = ДоступностьКомандПеремещения;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Недействительные.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Пользователь.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.Недействителен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);

	// Удаленные.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Пользователь.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",
		Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Ложь, Ложь, Ложь, Истина, ));

КонецПроцедуры

&НаСервере
Функция ПеремещениеПользователяВГруппу(МассивПользователей, НоваяГруппаВладелец)
	
	МассивПеремещенныхПользователей = Новый Массив;
	МассивНеПеремещенныхПользователей = Новый Массив;
	Для Каждого ПользовательСсылка Из МассивПользователей Цикл
		
		ПараметрыОтбора = Новый Структура("Пользователь", ПользовательСсылка);
		Если ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.Пользователи")
			И Объект.Состав.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
			Объект.Состав.Добавить().Пользователь = ПользовательСсылка;
			МассивПеремещенныхПользователей.Добавить(ПользовательСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПользователиСлужебный.ФормированиеСообщенияПользователю(
		МассивПеремещенныхПользователей, НоваяГруппаВладелец, Ложь, МассивНеПеремещенныхПользователей);
	
КонецФункции

&НаСервере
Функция ПараметрыРасширеннойФормыПодбора()
	
	ВыбранныеПользователи = Новый ТаблицаЗначений;
	ВыбранныеПользователи.Колонки.Добавить("Пользователь");
	ВыбранныеПользователи.Колонки.Добавить("НомерКартинки");
	
	УчастникиГруппы = Объект.Состав.Выгрузить(, "Пользователь");
	
	Для каждого Элемент Из УчастникиГруппы Цикл
		
		СтрокаВыбранныеПользователи = ВыбранныеПользователи.Добавить();
		СтрокаВыбранныеПользователи.Пользователь = Элемент.Пользователь;
		
	КонецЦикла;
	
	ЗаголовокФормыПодбора = НСтр("ru = 'Подбор участников рабочей группы'; en = 'Fill working group members'");
	ПараметрыРасширеннойФормыПодбора = 
		Новый Структура("ЗаголовокФормыПодбора, ВыбранныеПользователи, ПодборГруппНевозможен",
		                 ЗаголовокФормыПодбора, ВыбранныеПользователи, Истина);
	АдресХранилища = ПоместитьВоВременноеХранилище(ПараметрыРасширеннойФормыПодбора);
	Возврат АдресХранилища;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОПользователях(ИдентификаторСтроки = Неопределено, ВыбранныйПользователь = Неопределено)
	
	Если ВыбранныйПользователь = Неопределено Тогда
		ВыбранныеПользователи = Объект.Состав.Выгрузить().ВыгрузитьКолонку("Пользователь");
	Иначе
		ВыбранныеПользователи = Новый Массив;
		ВыбранныеПользователи.Добавить(ВыбранныйПользователь);
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.Недействителен КАК Недействителен,
		|	Пользователи.ПометкаУдаления КАК ПометкаУдаления,
		|	СведенияОПользователяхДокументооборот.Подразделение КАК Подразделение,
		|	СведенияОПользователяхДокументооборот.Должность КАК Должность
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
		|ПО
		|	Пользователи.Ссылка = СведенияОПользователяхДокументооборот.Пользователь
		|ГДЕ
		|	Пользователи.Ссылка В (&Пользователи)");
	Запрос.УстановитьПараметр("Пользователи", ВыбранныеПользователи);
	ТаблицаИсточник = Запрос.Выполнить().Выгрузить();
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		ЗаполняемаяСтрока = Объект.Состав.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТаблицаИсточник.Количество() = 0 Тогда
			ЗаполняемаяСтрока.Недействителен = Ложь;
			ЗаполняемаяСтрока.Подразделение = Неопределено;
			ЗаполняемаяСтрока.Должность = Неопределено;
		Иначе
			ЗаполнитьЗначенияСвойств(ЗаполняемаяСтрока, ТаблицаИсточник[0]);
		КонецЕсли;
	Иначе
		Для Каждого ЗаполняемаяСтрока Из Объект.Состав Цикл
			Если ВыбранныеПользователи.Найти(ЗаполняемаяСтрока.Пользователь) <> Неопределено Тогда
				СтрокаИсточник = ТаблицаИсточник.Найти(ЗаполняемаяСтрока.Пользователь);
				Если СтрокаИсточник = Неопределено Тогда
					ЗаполняемаяСтрока.Недействителен = Ложь;
					ЗаполняемаяСтрока.ПометкаУдаления = Ложь;
					ЗаполняемаяСтрока.Подразделение = Неопределено;
					ЗаполняемаяСтрока.Должность = Неопределено;
				Иначе
					ЗаполнитьЗначенияСвойств(ЗаполняемаяСтрока, СтрокаИсточник);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНедействительныхПользователей(ПередОткрытиемФормы)
	
	Элементы.ПоказыватьНедействительныхПользователей.Пометка = ?(ПередОткрытиемФормы, Ложь,
		НЕ Элементы.ПоказыватьНедействительныхПользователей.Пометка);
	
	Отбор = Новый Структура;
	
	Если Не Элементы.ПоказыватьНедействительныхПользователей.Пометка Тогда
		Отбор.Вставить("Недействителен", Ложь);
		Отбор.Вставить("ПометкаУдаления", Ложь);
		Элементы.Состав.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Элементы.Состав.ОтборСтрок = Новый ФиксированнаяСтруктура();
	КонецЕсли;
	
	Элементы.Состав.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура СоставСортироватьСтроки(ТипСортировки)
	
	Если Не Элементы.ПоказыватьНедействительныхПользователей.Пометка Тогда
		Элементы.Состав.ОтборСтрок = Новый ФиксированнаяСтруктура();
	КонецЕсли;
	
	Если ТипСортировки = "ПоВозрастанию" Тогда
		Объект.Состав.Сортировать("Пользователь Возр");
	Иначе
		Объект.Состав.Сортировать("Пользователь Убыв");
	КонецЕсли;
	
	Если Не Элементы.ПоказыватьНедействительныхПользователей.Пометка Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Недействителен", Ложь);
		Отбор.Вставить("ПометкаУдаления", Ложь);
		Элементы.Состав.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоставПереместитьСтроку(НаправлениеПеремещения)
	
	Строка = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексТекущейСтроки = Строка.НомерСтроки - 1;
	Сдвиг = 0;
	
	Пока Истина Цикл
		Сдвиг = Сдвиг + ?(НаправлениеПеремещения = "Вверх", -1, 1);
		
		Если ИндексТекущейСтроки + Сдвиг < 0
		Или ИндексТекущейСтроки + Сдвиг >= Объект.Состав.Количество() Тогда
			Возврат;
		КонецЕсли;
		
		Если Элементы.ПоказыватьНедействительныхПользователей.Пометка
			Или Объект.Состав[ИндексТекущейСтроки + Сдвиг].Недействителен = Ложь
			Или Объект.Состав[ИндексТекущейСтроки + Сдвиг].ПометкаУдаления = Ложь Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Состав.Сдвинуть(ИндексТекущейСтроки, Сдвиг);
	Элементы.Состав.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСогласноПометкеУдаленияИНедействительности()
	
	Если Объект.ПометкаУдаления И Объект.Недействительна Тогда
		ТекстСостояния = НСтр("ru = 'Помечена на удаление и недействительна. Участники не редактируются.'; en = 'Marked for deletion and invalid. Members list cannot be edited.'");
	ИначеЕсли Объект.ПометкаУдаления Тогда
		ТекстСостояния = НСтр("ru = 'Помечена на удаление. Состав участников не редактируется.'; en = 'Marked for deletion. Members list cannot be edited.'");
	ИначеЕсли Объект.Недействительна Тогда
		ТекстСостояния = НСтр("ru = 'Недействительна. Состав участников не редактируется.'; en = 'Invalid group. Members list cannot be edited.'");
	Иначе
		ТекстСостояния = "";
	КонецЕсли;
	Элементы.ДекорацияПомеченаНаУдалениеНедействительна.Заголовок = ТекстСостояния;
	Элементы.Состав.Доступность = Не Объект.ПометкаУдаления И Не Объект.Недействительна;
	Элементы.СоставПодобрать.Доступность = Не Объект.ПометкаУдаления И Не Объект.Недействительна;
	Элементы.СоставКонтекстноеМенюПодобратьПользователей.Доступность = Не Объект.ПометкаУдаления И Не Объект.Недействительна;

КонецПроцедуры

#КонецОбласти
