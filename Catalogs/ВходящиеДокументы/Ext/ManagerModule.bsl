#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// УправлениеДоступом

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Ссылка,
		|ВидДокумента,
		|ВопросДеятельности,
		|ГрифДоступа,
		|Организация,
		|Подразделение,
		|Отправитель";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ВидОбъекта = ОбъектДоступа.ВидДокумента;
	ДескрипторДоступа.ВопросДеятельности = ОбъектДоступа.ВопросДеятельности;
	ДескрипторДоступа.ГрифДоступа = ОбъектДоступа.ГрифДоступа;
	ДескрипторДоступа.Организация = ОбъектДоступа.Организация;
	ДескрипторДоступа.Подразделение = ОбъектДоступа.Подразделение;
	
	// Контрагенты
	ГруппаДоступа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДоступа.Отправитель, "ГруппаДоступа");
	Если ЗначениеЗаполнено(ГруппаДоступа) Тогда
		Строка = ДескрипторДоступа.Контрагенты.Добавить();
		Строка.ГруппаДоступа = ГруппаДоступа;
	КонецЕсли;
	
КонецПроцедуры	

// Конец УправлениеДоступом

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Карточка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ВходящиеДокументы";
	КомандаПечати.Идентификатор = "Карточка";
	КомандаПечати.Представление = НСтр("ru = 'Карточка документа'; en = 'Document form'");
	КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьКарточкиДокумента";
	
	// Напечатать файлы
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ВходящиеДокументы";
	КомандаПечати.Идентификатор = "НапечататьФайлы";
	КомандаПечати.Представление = НСтр("ru = 'Напечатать файлы'; en = 'Print files'");
	КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.НапечататьФайлы";
	
	// Регистрационный штамп
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ВходящиеДокументы";
	КомандаПечати.Идентификатор = "РегистрационныйШтамп";
	КомандаПечати.Представление = НСтр("ru = 'Регистрационный штамп'; en = 'Registration stamp'");
	КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьРегистрационногоШтампа";
    
    Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда
        
        // Штрихкод на наклейке
        КомандаПечати = КомандыПечати.Добавить();
        КомандаПечати.МенеджерПечати = "Справочник.ВходящиеДокументы";
        КомандаПечати.Идентификатор = "ШтрихкодНаНаклейке";
        КомандаПечати.Представление = НСтр("ru = 'Штрихкод на наклейке'; en = 'Barcode on label'");
        КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьШтрихкодаНаНаклейке";
        
        // Штрихкод на странице
        КомандаПечати = КомандыПечати.Добавить();
        КомандаПечати.МенеджерПечати = "Справочник.ВходящиеДокументы";
        КомандаПечати.Идентификатор = "ШтрихкодНаСтранице";
        КомандаПечати.Представление = НСтр("ru = 'Штрихкод на странице'; en = 'Barcode on page'");
        КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьШтрихкодаНаСтранице";
        
    КонецЕсли;
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
    // Устанавливаем признак доступности печати по-комплектно
    ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда

        // Формируем табличный документ и добавляем его в коллекцию печатных форм
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Карточка",
			"Карточка входящего документа",
			ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			,
			"Справочник.ВходящиеДокументы.ПФ_MXL_Карточка");

	КонецЕсли;
		
КонецПроцедуры

// Формирует печатную форму карточки документа
//
// Параметры:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ОбъектыПечати   - СписокЗначений - список объектов печати;
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// Возвращаемое значение:
//  ТабличныйДокумент - ТабличныйДокумент - печатная форма
//
Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_КарточкаВходящегоДокумента";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ВходящиеДокументы.ПФ_MXL_Карточка");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьРеквизитыШапка = Макет.ПолучитьОбласть("РеквизитыШапка");
	
	ОбластьФайлыШапка = Макет.ПолучитьОбласть("ФайлыШапка");
	ОбластьФайлыСтрока = Макет.ПолучитьОбласть("ФайлыСтрока");
	
	ОбластьВерсииШапка = Макет.ПолучитьОбласть("ВерсииШапка");
	ОбластьВерсииСтрока = Макет.ПолучитьОбласть("ВерсииСтрока");
	ОбластьВерсииСтрокаФайл = Макет.ПолучитьОбласть("ВерсииСтрокаФайл");
	
	ОбластьЭПШапка = Макет.ПолучитьОбласть("ЭПШапка");
	ОбластьЭПСтрока = Макет.ПолучитьОбласть("ЭПСтрока");
	ОбластьЭПОбъект = Макет.ПолучитьОбласть("ЭПОбъект");
	
	ОбластьСвязанныеДокументыШапка = Макет.ПолучитьОбласть("СвязанныеДокументыШапка");
	ОбластьСвязанныеДокументыСтрока = Макет.ПолучитьОбласть("СвязанныеДокументыСтрока");
	ОбластьСвязанныеДокументыТипСвязи = Макет.ПолучитьОбласть("СвязанныеДокументыТипСвязи");
		
	ОбластьЖурналПередачиШапка = Макет.ПолучитьОбласть("ЖурналПередачиШапка");
	ОбластьЖурналПередачиСтрока = Макет.ПолучитьОбласть("ЖурналПередачиСтрока");
	
	ОбластьРезолюцииШапка = Макет.ПолучитьОбласть("РезолюцииШапка");
	ОбластьРезолюцииСтрока = Макет.ПолучитьОбласть("РезолюцииСтрока");
	
	ОбластьРассмотрениеШапка = Макет.ПолучитьОбласть("РассмотрениеШапка");
	ОбластьРассмотрениеСтрока = Макет.ПолучитьОбласть("РассмотрениеСтрока");
	
	ОбластьИсполнениеШапка = Макет.ПолучитьОбласть("ИсполнениеШапка");
	ОбластьИсполнениеСтрока = Макет.ПолучитьОбласть("ИсполнениеСтрока");
	ОбластьИсполнениеГруппа = Макет.ПолучитьОбласть("ИсполнениеГруппа");
	
	ОбластьОзнакомлениеШапка = Макет.ПолучитьОбласть("ОзнакомлениеШапка");
	ОбластьОзнакомлениеСтрока = Макет.ПолучитьОбласть("ОзнакомлениеСтрока");
	ОбластьОзнакомлениеГруппа = Макет.ПолучитьОбласть("ОзнакомлениеГруппа");
	
	ОбластьПорученияШапка = Макет.ПолучитьОбласть("ПорученияШапка");
	ОбластьПорученияСтрока = Макет.ПолучитьОбласть("ПорученияСтрока");
	ОбластьПорученияГруппа = Макет.ПолучитьОбласть("ПорученияГруппа");
	
	ОбластьЗадачиШапка = Макет.ПолучитьОбласть("ЗадачиШапка");
	ОбластьЗадачиСтрока = Макет.ПолучитьОбласть("ЗадачиСтрока");
	
	ОбластьДопРеквизитыШапка = Макет.ПолучитьОбласть("ДопРеквизитыШапка");
	ОбластьДопРеквизитыСтрока = Макет.ПолучитьОбласть("ДопРеквизитыСтрока");
	ОбластьДопРеквизитыПодвал = Макет.ПолучитьОбласть("ДопРеквизитыПодвал");
	
	ОбластьПрочиеШапка = Макет.ПолучитьОбласть("ПрочиеШапка");
	ОбластьПрочиеСтрока = Макет.ПолучитьОбласть("ПрочиеСтрока");
	ОбластьПрочиеПодвал = Макет.ПолучитьОбласть("ПрочиеПодвал");
	
	ОбластьЭтапыШапка = Макет.ПолучитьОбласть("ЭтапыШапка");
	ОбластьЭтапыСтрока = Макет.ПолучитьОбласть("ЭтапыСтрока");
	
	// Получаем запросом необходимые данные
	Индекс = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВходящийДокумент.Ссылка,
		|	ВходящийДокумент.Представление,
		|	ВЫБОР
		|		КОГДА ВходящийДокумент.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ВходящийДокумент.ДатаРегистрации
		|		ИНАЧЕ ВходящийДокумент.ДатаСоздания
		|	КОНЕЦ КАК ДатаСортировки
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящийДокумент
		|ГДЕ
		|	ВходящийДокумент.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСортировки;";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ИндексВыборкаЗаголовок = Индекс;
	
	Если ПараметрыПечати.Свойство("РеквизитыКарточки") И ПараметрыПечати.РеквизитыКарточки Тогда
		Индекс = Индекс + 4;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТекущиеСостоянияДокументов.Документ КАК Документ,
		|	ТекущиеСостоянияДокументов.ДатаУстановки КАК Период
		|ПОМЕСТИТЬ СостоянияДокументовИсполнен
		|ИЗ
		|	РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|ГДЕ
		|	ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязьВОтветНа.СвязанныйДокумент.РегистрационныйНомер КАК ВОтветНаНомер,
		|	СвязьВОтветНа.СвязанныйДокумент.ДатаРегистрации КАК ВОтветНаДата,
		|	СвязьВОтветНа.Документ КАК Ссылка
		|ПОМЕСТИТЬ ВОтветНа
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
		|ГДЕ
		|	СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученВОтветНа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязьОтправленОтвет.Документ КАК Ссылка,
		|	РеквизитыОтправленОтвет.ДатаРегистрации КАК ОтправленОтветДата,
		|	РеквизитыОтправленОтвет.РегистрационныйНомер КАК ОтправленОтветНомер
		|ПОМЕСТИТЬ ОтправленОтвет
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязьОтправленОтвет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК РеквизитыОтправленОтвет
		|		ПО (РеквизитыОтправленОтвет.Документ = СвязьОтправленОтвет.СвязанныйДокумент)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СвязьОтправленОтвет.Документ КАК Документ,
		|			МАКСИМУМ(РеквизитыОтправленОтвет.ДатаРегистрации) КАК МаксДатаРегистрации
		|		ИЗ
		|			РегистрСведений.СвязиДокументов КАК СвязьОтправленОтвет
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК РеквизитыОтправленОтвет
		|				ПО (РеквизитыОтправленОтвет.Документ = СвязьОтправленОтвет.СвязанныйДокумент)
		|		ГДЕ
		|			СвязьОтправленОтвет.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтвет)
		|			И СвязьОтправленОтвет.СвязанныйДокументОтправлен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СвязьОтправленОтвет.Документ) КАК ПоследнийОтправленОтвет
		|		ПО СвязьОтправленОтвет.Документ = ПоследнийОтправленОтвет.Документ
		|			И (СвязьОтправленОтвет.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтвет))
		|			И (СвязьОтправленОтвет.СвязанныйДокументОтправлен)
		|			И (РеквизитыОтправленОтвет.ДатаРегистрации = ПоследнийОтправленОтвет.МаксДатаРегистрации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВходящийДокумент.Адресат.Представление КАК Адресат,
		|	ВходящийДокумент.ВидДокумента.Представление КАК ВидДокумента,
		|	ВходящийДокумент.ВидДокумента.УчитыватьСуммуДокумента КАК УчитыватьСуммуДокумента,
		|	ВОтветНа.ВОтветНаДата КАК ВОтветНаДата,
		|	ВОтветНа.ВОтветНаНомер КАК ВОтветНаНомер,
		|	ВходящийДокумент.ДатаРегистрации КАК ДатаРегистрации,
		|	ВходящийДокумент.Дело.Представление КАК Дело,
		|	ВходящийДокумент.Зарегистрировал.Представление КАК Зарегистрировал,
		|	ВходящийДокумент.ИсходящаяДата КАК ИсходящаяДата,
		|	ВходящийДокумент.ИсходящийНомер КАК ИсходящийНомер,
		|	ВходящийДокумент.Заголовок КАК Наименование,
		|	ВходящийДокумент.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ВходящийДокумент.Отправитель.Представление КАК Отправитель,
		|	ОтправленОтвет.ОтправленОтветДата КАК ОтправленОтветДата,
		|	ОтправленОтвет.ОтправленОтветНомер КАК ОтправленОтветНомер,
		|	ВходящийДокумент.СрокИсполнения КАК ПлановыйСрокИсполнения,
		|	ВходящийДокумент.Подписал.Представление КАК Подписал,
		|	ВходящийДокумент.Содержание КАК Содержание,
		|	ВходящийДокумент.КоличествоЛистов КАК КоличествоЛистов,
		|	ВходящийДокумент.КоличествоПриложений КАК КоличествоПриложений,
		|	ВходящийДокумент.ЛистовВПриложениях КАК ЛистовВПриложениях,
		|	ВходящийДокумент.КоличествоЭкземпляров КАК КоличествоЭкземпляров,
		|	ВходящийДокумент.СпособПолучения.Представление КАК СпособПолучения,
		|	ВходящийДокумент.Подразделение.Представление КАК ПодразделениеАдресата,
		|	ВходящийДокумент.Представление КАК Представление,
		|	ВходящийДокумент.Ссылка КАК Ссылка,
		|	ВходящийДокумент.ГрифДоступа.Представление КАК ГрифДоступа,
		|	ВходящийДокумент.ВопросДеятельности.Представление КАК ВопросДеятельности,
		|	ВходящийДокумент.Организация.Представление КАК Организация,
		|	ВходящийДокумент.Сумма КАК Сумма,
		|	ВходящийДокумент.Валюта.Представление КАК Валюта,
		|	ВходящийДокумент.Ответственный,
		|	ЕСТЬNULL(СостоянияДокументовИсполнен.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ФактическийСрокИсполнения,
		|	ВЫБОР
		|		КОГДА СостоянияДокументовИсполнен.Период ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Исполнен
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящийДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияДокументовИсполнен КАК СостоянияДокументовИсполнен
		|		ПО ВходящийДокумент.Ссылка = СостоянияДокументовИсполнен.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВОтветНа КАК ВОтветНа
		|		ПО ВходящийДокумент.Ссылка = ВОтветНа.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОтправленОтвет КАК ОтправленОтвет
		|		ПО ВходящийДокумент.Ссылка = ОтправленОтвет.Ссылка
		|ГДЕ
		|	ВходящийДокумент.Ссылка В(&МассивОбъектов);";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаРеквизиты = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ДопРеквизиты") И ПараметрыПечати.ДопРеквизиты Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизиты.Свойство,
		|	ДополнительныеРеквизиты.Значение,
		|	ДополнительныеРеквизиты.ТекстоваяСтрока,
		|	ДополнительныеРеквизиты.Ссылка,
		|	ДополнительныеРеквизиты.Свойство.ФорматСвойства КАК ФорматСвойства
		|ИЗ
		|	Справочник.ВходящиеДокументы.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДополнительныеРеквизиты.Свойство.Наименование;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаДопРеквизиты = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ПриложенныеФайлы") И ПараметрыПечати.ПриложенныеФайлы Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.ПолноеНаименование КАК Наименование,
		|	Файлы.Автор.Представление КАК Автор,
		|	Файлы.Описание,
		|	Файлы.ДатаСоздания КАК Создан,
		|	Файлы.ТекущаяВерсия.Автор.Представление КАК Отредактировал,
		|	Файлы.ТекущаяВерсия.ДатаСоздания КАК Отредактирован,
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаФайлы = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ВерсииФайлов") И ПараметрыПечати.ВерсииФайлов Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
		|	ВерсииФайлов.Размер / 1024 КАК Размер,
		|	ВерсииФайлов.Автор.Представление КАК Автор,
		|	ВерсииФайлов.ДатаСоздания,
		|	ВерсииФайлов.Владелец КАК Файл,
		|	ВерсииФайлов.Владелец.ВладелецФайла КАК ВладелецФайла,
		|	ВерсииФайлов.Ссылка,
		|	ВерсииФайлов.Комментарий
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Владелец.ВладелецФайла В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Файл,
		|	НомерВерсии УБЫВ
		|ИТОГИ ПО
		|	ВладелецФайла,
		|	Файл;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаВерсии = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ЭП")
		И ПараметрыПечати.ЭП 
		И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭП.КомуВыданСертификат КАК КомуВыданСертификат,
		|	ЭП.ДатаПодписи КАК ДатаПодписи,
		|	ЭП.Комментарий КАК Комментарий,
		|	ЭП.Подпись КАК Подпись,
		|	ЭП.Отпечаток КАК Отпечаток,
		|	ЭП.УстановившийПодпись КАК УстановившийПодпись,
		|	ЭП.Сертификат КАК Сертификат,
		|	ЭП.Объект КАК Документ,
		|	ЭП.Объект КАК ОбъектЭП
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.Объект.ПодписанЭП
		|	И ЭП.Объект В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭП.КомуВыданСертификат,
		|	ЭП.ДатаПодписи,
		|	ЭП.Комментарий,
		|	ЭП.Подпись,
		|	ЭП.Отпечаток,
		|	ЭП.УстановившийПодпись,
		|	ЭП.Сертификат,
		|	Файлы.ВладелецФайла,
		|	Файлы.Ссылка
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО (Файлы.ТекущаяВерсия = ЭП.Объект)
		|ГДЕ
		|	ЭП.Объект.ПодписанЭП
		|	И Файлы.ВладелецФайла В(&МассивОбъектов)
		|ИТОГИ ПО
		|	Документ,
		|	ОбъектЭП;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаЭП = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("СвязанныеДокументы") И ПараметрыПечати.СвязанныеДокументы Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиДокументов.ТипСвязи.Представление КАК ТипСвязи,
		|	СвязиДокументов.Документ КАК Документ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СвязиДокументов.СвязаннаяСтрока, """") <> """"
		|			ТОГДА СвязиДокументов.СвязаннаяСтрока
		|		ИНАЧЕ СвязиДокументов.СвязанныйДокумент
		|	КОНЕЦ КАК Заголовок,
		|	ВЫБОР
		|		КОГДА СвязиДокументов.СвязанныйДокумент <> НЕОПРЕДЕЛЕНО
		|			ТОГДА СвязиДокументов.СвязанныйДокумент
		|		ИНАЧЕ СвязиДокументов.СвязаннаяСтрока
		|	КОНЕЦ КАК СвязанныйДокумент,
		|	СвязиДокументов.Комментарий
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ В(&МассивОбъектов)
		|	И СвязиДокументов.ТипСвязи <> ЗНАЧЕНИЕ(Справочник.ТипыСвязей.Содержит)
		|ИТОГИ ПО
		|	Документ,
		|	ТипСвязи;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаСвязи = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ЖурналПередачи") И ПараметрыПечати.ЖурналПередачи Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналПередачиДокументов.Документ КАК Ссылка,
		|	ЖурналПередачиДокументов.Период,
		|	ЖурналПередачиДокументов.НомерЭкземпляра,
		|	ЖурналПередачиДокументов.ТипЭкземпляра,
		|	ЖурналПередачиДокументов.Комментарий,
		|	ЖурналПередачиДокументов.Пользователь.Представление КАК Пользователь
		|ИЗ
		|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
		|ГДЕ
		|	(НЕ ЖурналПередачиДокументов.Возвращен)
		|	И ЖурналПередачиДокументов.Документ В(&МассивОбъектов);";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаЖурналПередачи = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Резолюции") И ПараметрыПечати.Резолюции Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Резолюции.Документ,
		|	Резолюции.АвторРезолюции,
		|	Резолюции.ДатаРезолюции,
		|	Резолюции.ТекстРезолюции,
		|	Резолюции.Подписана,
		|	ЭП.ДатаПодписи КАК ДатаПодписания
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|	ПО ЭП.Объект = Резолюции.Ссылка
		|ГДЕ
		|	Резолюции.Документ В(&МассивОбъектов)
		|	И НЕ Резолюции.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	Резолюции.ДатаРезолюции УБЫВ;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаРезолюции = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Рассмотрение") И ПараметрыПечати.Рассмотрение Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.РезультатВыполнения,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.Исполнитель.Представление КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителяПредметы.Предмет,
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|			И (ЗадачаИсполнителяПредметы.Предмет В (&МассивОбъектов))
		|ГДЕ
		|	ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаРассмотреть
		|	И ЗадачаИсполнителя.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.УстановитьПараметр("ТочкаМаршрутаРассмотреть",
			БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
		ИндексВыборкаРассмотрение = Индекс;
	КонецЕсли;
		
	Если ПараметрыПечати.Свойство("Исполнение") И ПараметрыПечати.Исполнение Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
		|	РезультатыИсполнения.ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	РезультатыИсполнения.ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
		|	РезультатыИсполнения.ЗадачаИсполнителя.Исполнитель.Представление КАК Исполнитель,
		|	РезультатыИсполнения.ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
		|	РезультатыИсполнения.ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
		|	РезультатыИсполнения.ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
		|	РезультатыИсполнения.ЗадачаИсполнителя.Выполнена КАК Выполнена,
		|	РезультатыПроверки.ОтправленоНаДоработку КАК ОтправленоНаДоработку
		|ИЗ
		|	БизнесПроцесс.Исполнение.РезультатыИсполнения КАК РезультатыИсполнения
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение.РезультатыПроверки КАК РезультатыПроверки
		|		ПО РезультатыИсполнения.ЗадачаИсполнителя = РезультатыПроверки.ЗадачаИсполнителя
		|			И РезультатыИсполнения.НомерИтерации = РезультатыПроверки.НомерИтерации
		|			И РезультатыИсполнения.Ссылка = РезультатыПроверки.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО (ЗадачаИсполнителяПредметы.Предмет В (&МассивОбъектов))
		|			И РезультатыИсполнения.ЗадачаИсполнителя = ЗадачаИсполнителяПредметы.Ссылка
		|ГДЕ
		|	РезультатыИсполнения.НомерИтерации В
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(МаксРезультатыИсполнения.НомерИтерации) КАК МаксНомерИтерации
		|			ИЗ
		|				БизнесПроцесс.Исполнение.РезультатыИсполнения КАК МаксРезультатыИсполнения
		|			ГДЕ
		|				МаксРезультатыИсполнения.Ссылка = РезультатыИсполнения.Ссылка
		|			СГРУППИРОВАТЬ ПО
		|						МаксРезультатыИсполнения.ЗадачаИсполнителя)
		|	И РезультатыИсполнения.Ссылка.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|	И НЕ РезультатыИсполнения.Ссылка.ПометкаУдаления
		|ИТОГИ ПО
		|	Предмет,
		|	БизнесПроцесс;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаИсполнение = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Ознакомление") И ПараметрыПечати.Ознакомление Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
		|	ЗадачаИсполнителя.Исполнитель.Представление КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.РезультатВыполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|			И (ЗадачаИсполнителяПредметы.Предмет В (&МассивОбъектов))
		|ГДЕ
		|	ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаОзнакомиться
		|	И ЗадачаИсполнителя.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|ИТОГИ ПО
		|	Предмет,
		|	БизнесПроцесс;";
		Запрос.УстановитьПараметр("ТочкаМаршрутаОзнакомиться",
			БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться);
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаОзнакомление = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Поручения") И ПараметрыПечати.Поручения Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
		|	ЗадачаИсполнителя.Исполнитель.Представление КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.РезультатВыполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|			И (ЗадачаИсполнителяПредметы.Предмет В (&МассивОбъектов))
		|ГДЕ
		|	ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаВыполнить
		|	И ЗадачаИсполнителя.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|ИТОГИ ПО
		|	Предмет,
		|	БизнесПроцесс;";
		Запрос.УстановитьПараметр("ТочкаМаршрутаВыполнить",
			БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить);
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаПоручения = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Задачи") И ПараметрыПечати.Задачи Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
		|	ЗадачаИсполнителя.Исполнитель.Представление КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.РезультатВыполнения,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.Дата КАК Дата,
		|	ЗадачаИсполнителя.Автор.Представление КАК Автор
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|			И (ЗадачаИсполнителяПредметы.Предмет В (&МассивОбъектов))
		|ГДЕ
		|	НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И ЗадачаИсполнителя.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|ИТОГИ ПО
		|	Предмет;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаЗадачи = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Этапы") И ПараметрыПечати.Этапы Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВходящиеДокументы.Ссылка КАК Документ,
		|	НастройкиЭтаповОбработкиДокументов.Порядок,
		|	НастройкиЭтаповОбработкиДокументов.Этап,
		|	ЕСТЬNULL(ЭтапыОбработкиДокументов.Пройден, ЛОЖЬ) КАК Пройден,
		|	ЭтапыОбработкиДокументов.ДатаПрохождения КАК ДатаПрохождения,
		|	ЭтапыОбработкиДокументов.Срок КАК Срок,
		|	ЭтапыОбработкиДокументов.Комментарий КАК Комментарий
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЭтаповОбработкиДокументов КАК НастройкиЭтаповОбработкиДокументов
		|		ПО ВходящиеДокументы.ВидДокумента = НастройкиЭтаповОбработкиДокументов.ВидДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтапыОбработкиДокументов КАК ЭтапыОбработкиДокументов
		|		ПО (НастройкиЭтаповОбработкиДокументов.Этап = ЭтапыОбработкиДокументов.Этап)
		|			И ВходящиеДокументы.Ссылка = ЭтапыОбработкиДокументов.Документ
		|ГДЕ
		|	ВходящиеДокументы.Ссылка В(&МассивОбъектов)
		|	И НЕ НастройкиЭтаповОбработкиДокументов.Этап.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НастройкиЭтаповОбработкиДокументов.Порядок
		|ИТОГИ ПО
		|	Документ;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаЭтапы = Индекс;
	КонецЕсли;
	
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ИспользоватьГрифыДоступа = ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа");
	ИспользоватьВопросыДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности");
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	ИспользоватьСостоянияДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов");
	ИспользоватьБизнесПроцессыИЗадачи = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	ИспользоватьРезолюцииВДокументах = ПолучитьФункциональнуюОпцию("ИспользоватьРезолюцииВДокументах");
	ИспользоватьСвязиДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьСвязиДокументов");
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	ВыборкаЗаголовок = Результат[ИндексВыборкаЗаголовок].Выбрать();
	
	ПервыйДокумент = Истина;
	Пока ВыборкаЗаголовок.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ВывестиПодвалРеквизитов = Ложь;
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаЗаголовок.Ссылка, "ВидДокумента");
		
		// Реквизиты карточки
		Если ПараметрыПечати.Свойство("РеквизитыКарточки") И ПараметрыПечати.РеквизитыКарточки Тогда 
			ВыборкаРеквизиты = Результат[ИндексВыборкаРеквизиты].Выбрать();
			
			Если ВыборкаРеквизиты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда
				
				ОбластьРеквизитыШапка.Параметры.Заполнить(ВыборкаРеквизиты);
				
				Если ЗначениеЗаполнено(ВыборкаРеквизиты.ОтправленОтветНомер) 
					Или ЗначениеЗаполнено(ВыборкаРеквизиты.ОтправленОтветДата) Тогда
					ОбластьРеквизитыШапка.Параметры.ОтправленОтвет = "№ " + ВыборкаРеквизиты.ОтправленОтветНомер 
						+ " от " + Формат(ВыборкаРеквизиты.ОтправленОтветДата, "ДЛФ=D");
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаРеквизиты.ВОтветНаНомер) 
					Или ЗначениеЗаполнено(ВыборкаРеквизиты.ВОтветНаДата) Тогда
					ОбластьРеквизитыШапка.Параметры.ВОтветНаДокумент = "№ " + ВыборкаРеквизиты.ВОтветНаНомер 
						+ " от " + Формат(ВыборкаРеквизиты.ВОтветНаДата, "ДЛФ=D");
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаРеквизиты.ИсходящийНомер) 
					Или ЗначениеЗаполнено(ВыборкаРеквизиты.ИсходящаяДата) Тогда
					ОбластьРеквизитыШапка.Параметры.ИсходящийДокумент = "№ " + ВыборкаРеквизиты.ИсходящийНомер 
						+ " от " + Формат(ВыборкаРеквизиты.ИсходящаяДата, "ДЛФ=D");
				КонецЕсли;
				
				СоставСтрока = ?(ВыборкаРеквизиты.КоличествоЛистов > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'листов %1,'; en = 'sheets %1,'") + " ", ВыборкаРеквизиты.КоличествоЛистов),"");
				СоставСтрока = СоставСтрока+?(ВыборкаРеквизиты.КоличествоПриложений > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'приложений %1,'; en = 'annexes %1,'") + " ", ВыборкаРеквизиты.КоличествоПриложений),"");
				СоставСтрока = СоставСтрока+?(ВыборкаРеквизиты.КоличествоЭкземпляров > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'экземпляров %1,'; en = 'instances %1,'") + " ", ВыборкаРеквизиты.КоличествоЭкземпляров),"");
				СоставСтрока = СоставСтрока+?(ВыборкаРеквизиты.ЛистовВПриложениях > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'листов в приложениях %1,'; en = 'sheets in annexes %1,'") + " ", ВыборкаРеквизиты.ЛистовВПриложениях),"");
				СоставСтрока = ВРег(Лев(СоставСтрока,1))+Прав(СоставСтрока, СтрДлина(СоставСтрока) - 1);
				Если Прав(СоставСтрока, 2) = ", " Тогда
					СоставСтрока = Лев(СоставСтрока, СтрДлина(СоставСтрока) - 2);
				КонецЕсли;

				ОбластьРеквизитыШапка.Параметры.Состав = СоставСтрока;
				ТабличныйДокумент.Вывести(ОбластьРеквизитыШапка);
				
				// Прочие реквизиты
				Если ВыборкаРеквизиты.УчитыватьСуммуДокумента 
					Или ИспользоватьГрифыДоступа 
					Или ИспользоватьУчетПоОрганизациям
					Или ИспользоватьВопросыДеятельности 
					Или ИспользоватьСостоянияДокументов
					Или ЗначениеЗаполнено(ВыборкаРеквизиты.Ответственный) Тогда 
					
					ТабличныйДокумент.Вывести(ОбластьПрочиеШапка);
					
					Если ИспользоватьГрифыДоступа Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Гриф доступа'; en = 'Security level'");
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.ГрифДоступа;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ИспользоватьУчетПоОрганизациям Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Организация'; en = 'Company'");
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.Организация;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ИспользоватьВопросыДеятельности Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Вопрос деятельности'; en = 'Activity type'");
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.ВопросДеятельности;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ИспользоватьСостоянияДокументов Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Состояние'; en = 'State'");
						ОбластьПрочиеСтрока.Параметры.Значение = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(ВыборкаРеквизиты.Ссылка);
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;	
					
					Если ВыборкаРеквизиты.УчитыватьСуммуДокумента Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Сумма'; en = 'Amount'");
						ОбластьПрочиеСтрока.Параметры.Значение = Строка(ВыборкаРеквизиты.Сумма) + " " + Строка(ВыборкаРеквизиты.Валюта);
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаРеквизиты.Ответственный) Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Ответственный'; en = 'Responsible'");
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.Ответственный;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					ВывестиПодвалРеквизитов = Истина;
				КонецЕсли; 
				
			КонецЕсли;
		КонецЕсли;
		
		// Дополнительные реквизиты
		Если ИспользоватьДополнительныеРеквизитыИСведения 
			И ПараметрыПечати.Свойство("ДопРеквизиты") 
			И ПараметрыПечати.ДопРеквизиты Тогда 
			
			ВыборкаДопРеквизиты = Результат[ИндексВыборкаДопРеквизиты].Выбрать();
			Если ВыборкаДопРеквизиты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда
				ТабличныйДокумент.Вывести(ОбластьДопРеквизитыШапка);
				
				ВыборкаДопРеквизиты.Сбросить();
				Пока ВыборкаДопРеквизиты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
					ОбластьДопРеквизитыСтрока.Параметры.Свойство = ВыборкаДопРеквизиты.Свойство;
					
					Если ЗначениеЗаполнено(ВыборкаДопРеквизиты.ТекстоваяСтрока) Тогда 
						ЗначениеСвойства = ВыборкаДопРеквизиты.ТекстоваяСтрока;
					Иначе
						ЗначениеСвойства = ВыборкаДопРеквизиты.Значение;
					КонецЕсли;	
					
					Если ЗначениеЗаполнено(ВыборкаДопРеквизиты.ФорматСвойства) Тогда
						ЗначениеСвойства = Формат(ЗначениеСвойства, ВыборкаДопРеквизиты.ФорматСвойства);
					КонецЕсли;
					
					ОбластьДопРеквизитыСтрока.Параметры.Значение = ЗначениеСвойства;
					
					ТабличныйДокумент.Вывести(ОбластьДопРеквизитыСтрока);
				КонецЦикла;	
				ВыборкаДопРеквизиты.Сбросить();
				
				ВывестиПодвалРеквизитов = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВывестиПодвалРеквизитов Тогда 
			ТабличныйДокумент.Вывести(ОбластьПрочиеПодвал);
		КонецЕсли;
		
		// Приложенные файлы
		Если ПараметрыПечати.Свойство("ПриложенныеФайлы") И ПараметрыПечати.ПриложенныеФайлы Тогда 
			
			ВыборкаФайлы = Результат[ИндексВыборкаФайлы].Выбрать();
			Если ВыборкаФайлы.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "ВладелецФайла") Тогда
				ТабличныйДокумент.Вывести(ОбластьФайлыШапка);
				
				ВыборкаФайлы.Сбросить();
				Пока ВыборкаФайлы.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "ВладелецФайла") Цикл
					ОбластьФайлыСтрока.Параметры.Заполнить(ВыборкаФайлы);
					ТабличныйДокумент.Вывести(ОбластьФайлыСтрока);
				КонецЦикла;	
				ВыборкаФайлы.Сбросить();
			КонецЕсли;
			
		КонецЕсли;	
		
		// Версии файлов
		Если ПараметрыПечати.Свойство("ВерсииФайлов") И ПараметрыПечати.ВерсииФайлов Тогда 
			
			ВыборкаВерсии = Результат[ИндексВыборкаВерсии].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаВерсии.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "ВладелецФайла") Тогда
				ТабличныйДокумент.Вывести(ОбластьВерсииШапка);
				
				ВыборкаВерсии.Сбросить();
				Пока ВыборкаВерсии.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "ВладелецФайла") Цикл
					
					ВыборкаГруппировкаФайлы = ВыборкаВерсии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаГруппировкаФайлы.Следующий() Цикл
						ОбластьВерсииСтрокаФайл.Параметры.Заполнить(ВыборкаГруппировкаФайлы);
						ТабличныйДокумент.Вывести(ОбластьВерсииСтрокаФайл);
						
						ВыборкаДетали = ВыборкаГруппировкаФайлы.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							ОбластьВерсииСтрока.Параметры.Заполнить(ВыборкаДетали);
							ТабличныйДокумент.Вывести(ОбластьВерсииСтрока);
						КонецЦикла;	
					КонецЦикла;	
					
				КонецЦикла;	
				ВыборкаВерсии.Сбросить();
			КонецЕсли;
			
		КонецЕсли;
		
		// ЭП
		Если ПараметрыПечати.Свойство("ЭП") 
			И ПараметрыПечати.ЭП 
			И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда 
			
			ВыборкаЭП = Результат[ИндексВыборкаЭП].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаЭП.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
				ТабличныйДокумент.Вывести(ОбластьЭПШапка);
				
				ВыборкаЭП.Сбросить();
				Если ВыборкаЭП.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
					
					ВыборкаОбъектЭП = ВыборкаЭП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаОбъектЭП.Следующий() Цикл
						ОбластьЭПОбъект.Параметры.ОбъектЭП = Строка(ТипЗнч(ВыборкаОбъектЭП.ОбъектЭП)) + " """ + Строка(ВыборкаОбъектЭП.ОбъектЭП) + """";
						ТабличныйДокумент.Вывести(ОбластьЭПОбъект);
						
						ВыборкаДетали = ВыборкаОбъектЭП.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							ОбластьЭПСтрока.Параметры.Заполнить(ВыборкаДетали);
							ТабличныйДокумент.Вывести(ОбластьЭПСтрока);
						КонецЦикла;	
					КонецЦикла;	
				КонецЕсли;
				ВыборкаЭП.Сбросить();
			КонецЕсли;
			
		КонецЕсли;
		
		// Связанные документы
		Если ИспользоватьСвязиДокументов
			И ПараметрыПечати.Свойство("СвязанныеДокументы")
			И ПараметрыПечати.СвязанныеДокументы Тогда 
			
			ВыборкаСвязи = Результат[ИндексВыборкаСвязи].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаСвязи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
				ТабличныйДокумент.Вывести(ОбластьСвязанныеДокументыШапка);
				
				ВыборкаСвязи.Сбросить();
				Если ВыборкаСвязи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
					
					ВыборкаТипСвязи = ВыборкаСвязи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаТипСвязи.Следующий() Цикл
						ОбластьСвязанныеДокументыТипСвязи.Параметры.Заполнить(ВыборкаТипСвязи);
						ТабличныйДокумент.Вывести(ОбластьСвязанныеДокументыТипСвязи);
						
						ВыборкаДетали = ВыборкаТипСвязи.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							Если ТипЗнч(ВыборкаДетали.СвязанныйДокумент) = Тип("Строка") Тогда 
								Тип = НСтр("ru = 'Внешняя ссылка'; en = 'External link'");
							Иначе
								Тип = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
									ВыборкаДетали.СвязанныйДокумент);
							КонецЕсли;
							
							ОбластьСвязанныеДокументыСтрока.Параметры.Заполнить(ВыборкаДетали);
							ОбластьСвязанныеДокументыСтрока.Параметры.Тип = Тип;
							ТабличныйДокумент.Вывести(ОбластьСвязанныеДокументыСтрока);
						КонецЦикла;	
					КонецЦикла;	
				КонецЕсли;
				
				ВыборкаСвязи.Сбросить();
			КонецЕсли;
			
		КонецЕсли;	
		
		// Журнал передачи
		Если ПараметрыПечати.Свойство("ЖурналПередачи") И ПараметрыПечати.ЖурналПередачи Тогда 
			
			ВыборкаЖурналПередачи = Результат[ИндексВыборкаЖурналПередачи].Выбрать();
			Если ВыборкаЖурналПередачи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда
				ТабличныйДокумент.Вывести(ОбластьЖурналПередачиШапка);
				
				ВыборкаЖурналПередачи.Сбросить();
				Пока ВыборкаЖурналПередачи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
					ОбластьЖурналПередачиСтрока.Параметры.Заполнить(ВыборкаЖурналПередачи);
					ТабличныйДокумент.Вывести(ОбластьЖурналПередачиСтрока);
				КонецЦикла;	
				ВыборкаЖурналПередачи.Сбросить();
			КонецЕсли;
			
		КонецЕсли;
		
		// резолюции
		Если ИспользоватьРезолюцииВДокументах 
			И ПараметрыПечати.Свойство("Резолюции") 
			И ПараметрыПечати.Резолюции Тогда 
			
			ВыборкаРезолюции = Результат[ИндексВыборкаРезолюции].Выбрать();
			Если ВыборкаРезолюции.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
				ТабличныйДокумент.Вывести(ОбластьРезолюцииШапка);
				
				ВыборкаРезолюции.Сбросить();
				Пока ВыборкаРезолюции.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Цикл
					
					ОбластьРезолюцииСтрока.Параметры.АвторРезолюции = ВыборкаРезолюции.АвторРезолюции;
					ОбластьРезолюцииСтрока.Параметры.ДатаРезолюции = ВыборкаРезолюции.ДатаРезолюции;
					Если ПараметрыПечати.Свойство("ЭП") 
						И ПараметрыПечати.ЭП И ВыборкаРезолюции.Подписана
						И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда
						ОбластьРезолюцииСтрока.Параметры.ДатаПодписания = ВыборкаРезолюции.ДатаПодписания;
					КонецЕсли;
					ОбластьРезолюцииСтрока.Параметры.Текст = ВыборкаРезолюции.ТекстРезолюции;
					
					ТабличныйДокумент.Вывести(ОбластьРезолюцииСтрока);
				КонецЦикла;	
				ВыборкаРезолюции.Сбросить();
			КонецЕсли;
			
		КонецЕсли;
		
		// Этапы
		Если ПараметрыПечати.Свойство("Этапы")
			И ПараметрыПечати.Этапы
			И ВидДокумента.ИспользоватьЭтапыОбработкиДокумента Тогда 
			
			ВыборкаЭтапы = Результат[ИндексВыборкаЭтапы].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаЭтапы.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
				ТабличныйДокумент.Вывести(ОбластьЭтапыШапка);
				
				ВыборкаДетали = ВыборкаЭтапы.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					ОбластьЭтапыСтрока.Параметры.Заполнить(ВыборкаДетали);
					ТабличныйДокумент.Вывести(ОбластьЭтапыСтрока);
				КонецЦикла;
				ВыборкаЭтапы.Сбросить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьБизнесПроцессыИЗадачи Тогда
			
			// Рассмотрение
			Если ПараметрыПечати.Свойство("Рассмотрение") И ПараметрыПечати.Рассмотрение Тогда 
				
				ВыборкаРассмотрение = Результат[ИндексВыборкаРассмотрение].Выбрать();
				Если ВыборкаРассмотрение.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Тогда
					ТабличныйДокумент.Вывести(ОбластьРассмотрениеШапка);
					
					ВыборкаРассмотрение.Сбросить();
					Пока ВыборкаРассмотрение.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Цикл
						
						Если ЗначениеЗаполнено(ВыборкаРассмотрение.Исполнитель) Тогда
							ОбластьРассмотрениеСтрока.Параметры.Исполнитель = ВыборкаРассмотрение.Исполнитель;
						Иначе
							СтрокаИсполнитель = Строка(ВыборкаРассмотрение.РольИсполнителя);
							ОбластьРассмотрениеСтрока.Параметры.Исполнитель = СтрокаИсполнитель;
						КонецЕсли;
						
						ОбластьРассмотрениеСтрока.Параметры.Выполнена = ВыборкаРассмотрение.Выполнена;
						ОбластьРассмотрениеСтрока.Параметры.ДатаИсполнения = ВыборкаРассмотрение.ДатаИсполнения;
						ОбластьРассмотрениеСтрока.Параметры.РезультатВыполнения = ВыборкаРассмотрение.РезультатВыполнения;
						
						ТабличныйДокумент.Вывести(ОбластьРассмотрениеСтрока);
					КонецЦикла;	
					ВыборкаРассмотрение.Сбросить();
				КонецЕсли;
				
			КонецЕсли;
			
			// Исполнение
			Если ПараметрыПечати.Свойство("Исполнение") И ПараметрыПечати.Исполнение Тогда 
				
				ВыборкаИсполнение = Результат[ИндексВыборкаИсполнение].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаИсполнение.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Тогда
					ТабличныйДокумент.Вывести(ОбластьИсполнениеШапка);
					
					ВыборкаИсполнение.Сбросить();
					Пока ВыборкаИсполнение.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Цикл
						ВыборкаИсполнениеГруппа = ВыборкаИсполнение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаИсполнениеГруппа.Следующий() Цикл
							Проверяющий = ВыборкаИсполнениеГруппа.БизнесПроцесс.Проверяющий;
							Контролер = ВыборкаИсполнениеГруппа.БизнесПроцесс.Контролер;
							
							ОбластьИсполнениеГруппа.Параметры.Исполнение = ВыборкаИсполнениеГруппа.БизнесПроцесс;
							ОбластьИсполнениеГруппа.Параметры.Проверяющий = ?(ЗначениеЗаполнено(Проверяющий), Проверяющий, НСтр("ru = 'нет'; en = 'no'"));
							ОбластьИсполнениеГруппа.Параметры.Контролер = ?(ЗначениеЗаполнено(Контролер), Контролер, НСтр("ru = 'нет'; en = 'no'"));
							
							ТабличныйДокумент.Вывести(ОбластьИсполнениеГруппа);
							
							ВыборкаДетали = ВыборкаИсполнениеГруппа.Выбрать();
							Пока ВыборкаДетали.Следующий() Цикл
								
								Если ЗначениеЗаполнено(ВыборкаДетали.Исполнитель) Тогда
									ОбластьИсполнениеСтрока.Параметры.Исполнитель = ВыборкаДетали.Исполнитель;
								Иначе
									СтрокаИсполнитель = Строка(ВыборкаДетали.РольИсполнителя);
									ОбластьИсполнениеСтрока.Параметры.Исполнитель = СтрокаИсполнитель;
								КонецЕсли;
								
								ОбластьИсполнениеСтрока.Параметры.СрокИсполнения = ВыборкаДетали.СрокИсполнения;
								ОбластьИсполнениеСтрока.Параметры.Выполнена = ВыборкаДетали.Выполнена;
								ОбластьИсполнениеСтрока.Параметры.ДатаИсполнения = ВыборкаДетали.ДатаИсполнения;
								ОбластьИсполнениеСтрока.Параметры.РезультатВыполнения = ВыборкаДетали.РезультатВыполнения;
								
								ТабличныйДокумент.Вывести(ОбластьИсполнениеСтрока);
							КонецЦикла;	
						КонецЦикла;	
					КонецЦикла;	
					ВыборкаИсполнение.Сбросить();
				КонецЕсли;
				
			КонецЕсли;
			
			// Ознакомление
			Если ПараметрыПечати.Свойство("Ознакомление") И ПараметрыПечати.Ознакомление Тогда 
				
				ВыборкаОзнакомление = Результат[ИндексВыборкаОзнакомление].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаОзнакомление.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Тогда
					ТабличныйДокумент.Вывести(ОбластьОзнакомлениеШапка);
					
					ВыборкаОзнакомление.Сбросить();
					Пока ВыборкаОзнакомление.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Цикл
						ВыборкаОзнакомлениеГруппа = ВыборкаОзнакомление.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаОзнакомлениеГруппа.Следующий() Цикл
							ОбластьОзнакомлениеГруппа.Параметры.Заполнить(ВыборкаОзнакомлениеГруппа);
							ТабличныйДокумент.Вывести(ОбластьОзнакомлениеГруппа);
							
							ВыборкаДетали = ВыборкаОзнакомлениеГруппа.Выбрать();
							Пока ВыборкаДетали.Следующий() Цикл
								ОбластьОзнакомлениеСтрока.Параметры.Заполнить(ВыборкаДетали);
								
								Если ЗначениеЗаполнено(ВыборкаДетали.Исполнитель) Тогда
									ОбластьОзнакомлениеСтрока.Параметры.Исполнитель = ВыборкаДетали.Исполнитель;
								Иначе
									СтрокаИсполнитель = Строка(ВыборкаДетали.РольИсполнителя);
									ОбластьОзнакомлениеСтрока.Параметры.Исполнитель = СтрокаИсполнитель;
								КонецЕсли;	
								
								ТабличныйДокумент.Вывести(ОбластьОзнакомлениеСтрока);
							КонецЦикла;	
						КонецЦикла;	
					КонецЦикла;
					ВыборкаОзнакомление.Сбросить();
				КонецЕсли;
				
			КонецЕсли;
			
			// Поручения
			Если ПараметрыПечати.Свойство("Поручения") И ПараметрыПечати.Поручения Тогда 
				
				ВыборкаПоручения = Результат[ИндексВыборкаПоручения].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаПоручения.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Тогда
					ТабличныйДокумент.Вывести(ОбластьПорученияШапка);
					
					ВыборкаПоручения.Сбросить();
					Пока ВыборкаПоручения.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Цикл
						ВыборкаПорученияГруппа = ВыборкаПоручения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаПорученияГруппа.Следующий() Цикл
							Проверяющий = ВыборкаПорученияГруппа.БизнесПроцесс.Проверяющий;
							Контролер = ВыборкаПорученияГруппа.БизнесПроцесс.Контролер;
							
							ОбластьПорученияГруппа.Параметры.Поручение = ВыборкаПорученияГруппа.БизнесПроцесс;
							ОбластьПорученияГруппа.Параметры.Проверяющий = ?(ЗначениеЗаполнено(Проверяющий), Проверяющий, НСтр("ru = 'нет'; en = 'no'"));
							ОбластьПорученияГруппа.Параметры.Контролер = ?(ЗначениеЗаполнено(Контролер), Контролер, НСтр("ru = 'нет'; en = 'no'"));
							
							ТабличныйДокумент.Вывести(ОбластьПорученияГруппа);
							
							ВыборкаДетали = ВыборкаПорученияГруппа.Выбрать();
							Пока ВыборкаДетали.Следующий() Цикл
								
								Если ЗначениеЗаполнено(ВыборкаДетали.Исполнитель) Тогда
									ОбластьПорученияСтрока.Параметры.Исполнитель = ВыборкаДетали.Исполнитель;
								Иначе
									СтрокаИсполнитель = Строка(ВыборкаДетали.РольИсполнителя);
									ОбластьПорученияСтрока.Параметры.Исполнитель = СтрокаИсполнитель;
								КонецЕсли;
								
								ОбластьПорученияСтрока.Параметры.СрокИсполнения = ВыборкаДетали.СрокИсполнения;
								ОбластьПорученияСтрока.Параметры.Выполнена = ВыборкаДетали.Выполнена;
								ОбластьПорученияСтрока.Параметры.ДатаИсполнения = ВыборкаДетали.ДатаИсполнения;
								ОбластьПорученияСтрока.Параметры.РезультатВыполнения = ВыборкаДетали.РезультатВыполнения;
								
								ТабличныйДокумент.Вывести(ОбластьПорученияСтрока);
							КонецЦикла;	
						КонецЦикла;	
					КонецЦикла;	
					ВыборкаПоручения.Сбросить();
				КонецЕсли;
				
			КонецЕсли;
			
			// Задачи
			Если ПараметрыПечати.Свойство("Задачи") И ПараметрыПечати.Задачи Тогда 
				
				ВыборкаЗадачи = Результат[ИндексВыборкаЗадачи].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаЗадачи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Тогда
					ТабличныйДокумент.Вывести(ОбластьЗадачиШапка);
					
					ВыборкаЗадачи.Сбросить();
					Пока ВыборкаЗадачи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Предмет") Цикл
						
						ВыборкаДетали = ВыборкаЗадачи.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							
							Если ЗначениеЗаполнено(ВыборкаДетали.Исполнитель) Тогда
								ОбластьЗадачиСтрока.Параметры.Исполнитель = ВыборкаДетали.Исполнитель;
							Иначе
								СтрокаИсполнитель = Строка(ВыборкаДетали.РольИсполнителя);
								ОбластьЗадачиСтрока.Параметры.Исполнитель = СтрокаИсполнитель;
							КонецЕсли;
							
							ОбластьЗадачиСтрока.Параметры.Наименование = ВыборкаДетали.Наименование;
							ОбластьЗадачиСтрока.Параметры.СрокИсполнения = ВыборкаДетали.СрокИсполнения;
							ОбластьЗадачиСтрока.Параметры.Выполнена = ВыборкаДетали.Выполнена;
							ОбластьЗадачиСтрока.Параметры.ДатаИсполнения = ВыборкаДетали.ДатаИсполнения;
							ОбластьЗадачиСтрока.Параметры.Автор = ВыборкаДетали.Автор;
							ОбластьЗадачиСтрока.Параметры.Ссылка = ВыборкаДетали.Ссылка;
							
							ТабличныйДокумент.Вывести(ОбластьЗадачиСтрока);
						КонецЦикла;	
						
					КонецЦикла;	
					ВыборкаЗадачи.Сбросить();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаЗаголовок.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Возвращает массив имен ключевых реквизитов согласно версии
//
// Параметры:
//	Версия - версия набора ключевых реквизитов. По умолчанию Неопределено - значит последняя.
//
// Возвращаемое значение:
//	Массив
// 
Функция ПолучитьИменаКлючевыхРеквизитов(Версия = Неопределено) Экспорт
	
	МассивИмен = Новый Массив;
	
	// Здесь указываем наборы предыдущих версий
	Если Версия = 1 Тогда
		МассивИмен.Добавить("Заголовок");
		МассивИмен.Добавить("Содержание");
	Иначе
		// Здесь указываем набор последней версии
		МассивИмен.Добавить("Заголовок");
		МассивИмен.Добавить("Содержание");
		МассивИмен.Добавить("Организация");
		МассивИмен.Добавить("Сумма");
		МассивИмен.Добавить("Валюта");
		МассивИмен.Добавить("Файлы");
	КонецЕсли;
	
	Возврат МассивИмен;
	
КонецФункции

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	Возврат Истина;
КонецФункции

// Добавляет участников документа в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, Документ) Экспорт
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, 
			"Ответственный, Зарегистрировал, Адресат, Создал, Ссылка");
	Иначе 
		РеквизитыДокумента = Документ;
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыДокумента.Ответственный);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыДокумента.Зарегистрировал);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыДокумента.Адресат);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыДокумента.Создал);
	
	ЭП = РаботаСЭП.ПолучитьЭлектронныеПодписи(РеквизитыДокумента.Ссылка);
	Пока ЭП.Следующий() Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, ЭП.УстановившийПодпись);
	КонецЦикла;
	
	Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(РеквизитыДокумента.Ссылка);
	Для Каждого РезолюцииСтрока Из Резолюции Цикл
		Если ТипЗнч(РезолюцииСтрока.АвторРезолюции) = Тип("СправочникСсылка.Пользователи") Тогда
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РезолюцииСтрока.АвторРезолюции);
		КонецЕсли;
		Если ТипЗнч(РезолюцииСтрока.ВнесРезолюцию) = Тип("СправочникСсылка.Пользователи") Тогда
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РезолюцииСтрока.ВнесРезолюцию);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, РеквизитыДокумента.Ссылка);
	
КонецПроцедуры

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат БизнесСобытияВызовСервера.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоДокументу(ШаблонСсылка, 
		ПредметСсылка, Подписчик, ВидСобытия, Условие);
	
	КонецФункции
	
// Возвращает имя предмета процесса по умолчанию
//
Функция ПолучитьИмяПредметаПоУмолчанию(Ссылка) Экспорт
	
	ИмяПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидДокумента");
	Если Не ЗначениеЗаполнено(ИмяПредмета) Тогда
		ИмяПредмета =  НСтр("ru='Входящий документ'; en = 'Incoming document'")
	КонецЕсли;
	
	Возврат Строка(ИмяПредмета);
	
КонецФункции

// ВерсионированиеОбъектов
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры


// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

#КонецЕсли
