
#Область ОбработчикиКомандФормы_Отправить

&НаКлиенте
Процедура ПроцессРегистрация(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Регистрация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессРассмотрение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Рассмотрение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Исполнение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	ОткрытьПомощникСозданияОсновныхПроцессов("Ознакомление");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	ТипыОпераций = Новый Массив;
	ТипыОпераций.Добавить("ОбработкаВходящегоДокумента");
	ТипыОпераций.Добавить("КомплексныйПроцесс");
	
	ОткрытьПомощникСозданияОсновныхПроцессов(ТипыОпераций);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникСозданияОсновныхПроцессов(ТипыОпераций)
	
	ВыделенныеДокументы = Новый Массив;
	
	Для Каждого СтрСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		ВыделенныеДокументы.Добавить(Элементы.Список.ДанныеСтроки(СтрСписка).Ссылка);
	КонецЦикла;
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		ТипыОпераций, ВыделенныеДокументы, ЭтаФорма, "ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСВД") Тогда 
		Элементы.ПоступилПоСВД.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	Если Не ИспользоватьКатегорииДанных Тогда
		Элементы.ЕстьКатегории.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Элементы.ПодписанЭП.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьФайлыУВходящихДокументов") Тогда
		Элементы.Файлы.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		Элементы.Задачи.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Справочники.ВходящиеДокументы) Тогда
		ДелопроизводствоКлиентСервер.УстановитьВидимостьДоступностьКомандСоздания(Элементы,
			"Видимость", Ложь);
	КонецЕсли;
		
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Элементы.СостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Список.Параметры.УстановитьЗначениеПараметра("ВестиУчетСканКопийОригиналовДокументов", 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов"));
	
	// Устанавливаем вид просмотра 
	ЗаполнитьСписокВыбораВидаПросмотра();

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Проекты.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	ТолькоМоиПроекты = Ложь;
	ПереключитьОтборПоПроектам();
	
	ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
	ПредыдущийВидПросмотра = ВидПросмотра;
	ПереключитьВидПросмотра();
	
	ПоказыватьУдаленные = Ложь;
	ПоказатьУдаленные();
	
	// Кешируем количество доступных шаблонов документов
	ЕстьДоступныеШаблоныДокументов = ЕстьДоступныеШаблоныДокументов();
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Неопределено,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтборСписка(Список, Настройки);
	
	ТолькоМоиПроекты = Настройки["ТолькоМоиПроекты"];
	ПереключитьОтборПоПроектам();
	
	ПоказыватьУдаленные = Настройки["ПоказыватьУдаленные"];
	ПоказатьУдаленные();
	
	// Устанавливаем вид просмотра 
	ВидПросмотра = Настройки["ВидПросмотра"];
	
	// На случай снятия ФО устанавливаем просмотр списком
	Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоВидамДокументов
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов") Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоКонтрагентам") Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел") Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
	КонецЕсли;
	
	ПредыдущийВидПросмотра = ВидПросмотра;
	
	Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоКатегориям
		И Не ИспользоватьКатегорииДанных Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
	КонецЕсли;
	
	ТекущийВидДокумента = Настройки["ТекущийВидДокумента"];
	Элементы.ВидыДокументов.ТекущаяСтрока = ТекущийВидДокумента;
	
	ТекущийВопросДеятельности = Настройки["ТекущийВопросДеятельности"];
	Элементы.ВопросыДеятельности.ТекущаяСтрока = ТекущийВопросДеятельности;
	
	ТекущийКонтрагент = Настройки["ТекущийКонтрагент"];
	Элементы.Контрагенты.ТекущаяСтрока = ТекущийКонтрагент;
	
	ТекущийПроект = Настройки["ТекущийПроект"];
	Элементы.Проекты.ТекущаяСтрока = ТекущийПроект;
	
	ГодНоменклатурыДел = Настройки["ГодНоменклатурыДел"];
	ОрганизацияНоменклатурыДел = Настройки["ОрганизацияНоменклатурыДел"];
	
	ПереключитьВидПросмотра();
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборВидОбращения, ВидОбращения);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборОрганизация, Организация);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборКонтрагент, Отправитель);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ПериодВыборки, ПериодВыборки);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборСостояние, Состояние);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборКатегория, Категория);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Элементы.Подписать.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюПодписать.Видимость = Ложь;
	КонецЕсли;
	
	Если ИспользоватьКатегорииДанных 
		И ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, ВыбранныеКатегорииПриОткрытии, ВыбранныеКатегории);
		РаботаСКатегориямиДанныхКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, КатегорииПриОткрытии);
		ПрименитьФильтрКатегорий();
	КонецЕсли;
	
	//Обработчик ожидания для периодического обновления количества доступных шаблонов документов через каждые 20 минут
	ПодключитьОбработчикОжидания("ОбновитьКоличествоДоступныхШаблонов", 1200, Ложь);
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел") Тогда 
		
		Для Каждого ЭлементДерева Из НоменклатураДел.ПолучитьЭлементы() Цикл
			Элементы.СписокНоменклатураДел.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		Если ТекущаяНоменклатураДел <> Неопределено Тогда 
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(ТекущаяНоменклатураДел, НоменклатураДел, Идентификатор);
			Если Идентификатор <> Неопределено Тогда 
				ТекущаяНоменклатураДел = Неопределено;
				Элементы.СписокНоменклатураДел.ТекущаяСтрока = Идентификатор;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам") Тогда 
		
		Для Каждого ЭлементДерева Из ДелаТома.ПолучитьЭлементы() Цикл
			Элементы.ДелаТома.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		Если ТекущееДелоТом <> Неопределено Тогда 
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(ТекущееДелоТом, ДелаТома, Идентификатор);
			Если Идентификатор <> Неопределено Тогда 
				ТекущееДелоТом = Неопределено;
				Элементы.ДелаТома.ТекущаяСтрока = Идентификатор;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьКатегорииДанных 
		И ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		СписокРаскрытыхКатегорий.Очистить();
		РаботаСКатегориямиДанныхКлиент.ПолучитьМассивРаскрытыхКатегорий(Элементы.ДеревоКатегорий, ДеревоКатегорий.ПолучитьЭлементы(), СписокРаскрытыхКатегорий);
		СостояниеДереваИзменилось = Ложь;
		Если КатегорииПриОткрытии.Количество() <> СписокРаскрытыхКатегорий.Количество() 
			ИЛИ ВыбранныеКатегории.Количество() <> ВыбранныеКатегорииПриОткрытии.Количество() Тогда
			СостояниеДереваИзменилось = Истина;
		КонецЕсли;
		
		Если Не СостояниеДереваИзменилось Тогда
			Для Каждого Элемент Из КатегорииПриОткрытии Цикл
				СостояниеДереваИзменилось = 
					СписокРаскрытыхКатегорий.НайтиПоЗначению(Элемент.Значение) = Неопределено;
				Если СостояниеДереваИзменилось Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не СостояниеДереваИзменилось Тогда
			Для Каждого Элемент Из ВыбранныеКатегории Цикл
				СостояниеДереваИзменилось = 
					ВыбранныеКатегорииПриОткрытии.НайтиПоЗначению(Элемент.Значение) = Неопределено;
				Если СостояниеДереваИзменилось Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТекущаяКатегория <> ТекущаяКатегорияПриОткрытии Тогда
			СостояниеДереваИзменилось = Истина;
		КонецЕсли;
		
		Если СостояниеДереваИзменилось Тогда
			РаботаСКатегориямиДанных.ЗаписатьПараметрыДереваКатегорийВСпискахДокументов(
		    	"СписокОбращенийГраждан",
				СписокРаскрытыхКатегорий,
				ТекущаяКатегория,
				ВыбранныеКатегории,
				ОтборДанных,
				СУчетомПодкатегорий,
				ПоказыватьСписокОтмеченных);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДокументИзмененДляСписков" Тогда
		Если ТипЗнч(Источник) = Тип("УправляемаяФорма") 
		   И Источник.ВладелецФормы = Элементы.Список 
		   И Элементы.Список.ТекущаяСтрока <> Параметр Тогда 
			Элементы.Список.ТекущаяСтрока = Параметр;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироваласьКатегория"
		И (Источник.ВладелецФормы = Неопределено
		ИЛИ Источник.ВладелецФормы.Имя <> "ДеревоКатегорий") Тогда
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;
	
	Если ИмяСобытия = "ДокументИзменен" Тогда 
		
		Если ТипЗнч(Параметр) <> Тип("СправочникСсылка.ВходящиеДокументы") 
			И ТипЗнч(Параметр) <> Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
			Возврат;
		КонецЕсли;
		
		Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		
		Если Не ПроверитьСовпадениеКонтрагента(Элементы.Список.ТекущиеДанные.Отправитель, Параметр) Тогда 
			Возврат;		
		КонецЕсли; 	
			
		ОбработкаОжиданияПриАктивизацииСписка();
		УстановитьДоступностьКоманд();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(Параметр.Предмет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.Файлы Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуФайлы", ТекущиеДанные.Ссылка, Истина);
		ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыОткрытия, Элементы.Список);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ПодписанЭП Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуЭП", ТекущиеДанные.Ссылка, Истина);
		ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыОткрытия, Элементы.Список);
		Возврат;
	КонецЕсли;	
	
	Если Поле = Элементы.Задачи Тогда
		ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
			Новый Структура("Предмет", ТекущиеДанные.Ссылка),
			ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ЕстьКатегории Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуКатегории", ТекущиеДанные.Ссылка, Истина);
		ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыОткрытия, Элементы.Список);
		Возврат;
	КонецЕсли;	
	
	Если Поле = Элементы.СостояниеКонтроля Тогда
		КонтрольКлиент.ОбработкаКомандыКонтроль(ТекущиеДанные.Ссылка, ЭтаФорма);
		Возврат;
	КонецЕсли;	
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
	ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыОткрытия, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СоздатьНовыйДокумент(Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИзСпискаОбращенийГраждан", Истина);
	ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.Ссылка);
	
	Открытьформу("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	РаботаСоСпискамиДокументовКлиент.ВыполнитьУстановкуПометкиУдаления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ОбновитьПараметрыУчетаВремениВФорме();
	
	Если ТекущаяСтрокаСписка <> Элементы.Список.ТекущаяСтрока Тогда
	
		ПодключитьОбработчикОжидания("ОбработкаОжиданияПриАктивизацииСписка", 0.2, Истина);
	
		УстановитьДоступностьКоманд();
	
		ТекущаяСтрокаСписка = Элементы.Список.ТекущаяСтрока;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	МассивДокументов = Новый Массив;
	Для Каждого Значение Из ПараметрыПеретаскивания.Значение Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Значение);
		Если ДанныеСтроки <> Неопределено Тогда
			МассивДокументов.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли;	
	КонецЦикла;
		
	ПараметрыПеретаскивания.Значение = МассивДокументов;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ИспользоватьФайлыУВходящихДокументов = ДелопроизводствоКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСДокументами().ИспользоватьФайлыУВходящихДокументов;	
	Если Не ИспользоватьФайлыУВходящихДокументов Тогда
		Возврат;
	КонецЕсли;	
	
	СписокКатегорий = Новый СписокЗначений;
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		Если ВыбранныеКатегории.Количество() = 0 Тогда
			СписокКатегорий.Добавить(ТекущаяКатегория);
		Иначе
			Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
				СписокКатегорий.Добавить(ВыбраннаяКатегория.Значение);
			КонецЦикла
		КонецЕсли;	
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() Тогда
		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("МассивФайлов", МассивФайлов);
		ПараметрыОткрытияФормы.Вставить("СписокКатегорий", СписокКатегорий);
		
		ЗначенияЗаполнения = ПолучитьЗначенияЗаполненияПоВидуПросмотра();
		Если ЗначенияЗаполнения <> Неопределено Тогда 
			ПараметрыОткрытияФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		КонецЕсли;
		
		ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыОткрытияФормы, Элементы.Список);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			МассивФайлов = Новый Массив;
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				МассивФайлов.Добавить(ФайлПринятый.ПолноеИмя);
			КонецЦикла;
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("МассивФайлов", МассивФайлов);
			ПараметрыОткрытияФормы.Вставить("СписокКатегорий", СписокКатегорий);
			
			ЗначенияЗаполнения = ПолучитьЗначенияЗаполненияПоВидуПросмотра();
			Если ЗначенияЗаполнения <> Неопределено Тогда 
				ПараметрыОткрытияФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			КонецЕсли;
			
			ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыОткрытияФормы, Элементы.Список);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КатегорииДанных") Тогда
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоВидамДокументов")
		И Элементы.СтраницаВидыДокументов.Видимость 
		И ТекущийВидДокумента <> Элементы.ВидыДокументов.ТекущаяСтрока Тогда 
		
		ТекущийВидДокумента = Элементы.ВидыДокументов.ТекущаяСтрока;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыДеятельностиПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности")
		И Элементы.СтраницаВопросыДеятельности.Видимость 
		И ТекущийВопросДеятельности <> Элементы.ВопросыДеятельности.ТекущаяСтрока Тогда 
		
		ТекущийВопросДеятельности = Элементы.ВопросыДеятельности.ТекущаяСтрока;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам")
		И Элементы.СтраницаКонтрагенты.Видимость
		И ТекущийКонтрагент <> Элементы.Контрагенты.ТекущаяСтрока Тогда 
		
		ТекущийКонтрагент = Элементы.Контрагенты.ТекущаяСтрока;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел")
		И Элементы.СтраницаНоменклатураДел.Видимость Тогда 
		
		ТекущиеДанные = Элементы.СписокНоменклатураДел.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущаяНоменклатураДел = ТекущиеДанные.Ссылка Тогда 
				Возврат;
			КонецЕсли;
			
			ТекущаяНоменклатураДел = ТекущиеДанные.Ссылка;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам")
		И Элементы.СтраницаДелаТома.Видимость Тогда 
		
		ТекущиеДанные = Элементы.ДелаТома.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущееДелоТом = ТекущиеДанные.Ссылка Тогда 
				Возврат;
			КонецЕсли;
			
			ТекущееДелоТом = ТекущиеДанные.Ссылка;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПроектам")
		И Элементы.СтраницаПроекты.Видимость 
		И ТекущийПроект <> Элементы.Проекты.ТекущаяСтрока Тогда 
		
		ТекущийПроект = Элементы.Проекты.ТекущаяСтрока;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВопросыДеятельностиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(Строка) <> Тип("Число") Тогда 
		Возврат;
	КонецЕсли;	
		
	ЭлементДерева = НоменклатураДел.НайтиПоИдентификатору(Строка);
	Если ЭлементДерева = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если ЭлементДерева.ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(Строка) <> Тип("Число") Тогда 
		Возврат;
	КонецЕсли;	
		
	ЭлементДерева = ДелаТома.НайтиПоИдентификатору(Строка);
	Если ЭлементДерева = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если ЭлементДерева.ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПеретаскиваниеДокументов(ПараметрыПеретаскивания, "ВидДокумента", Строка);
	
	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "ВидДокумента", Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыДеятельностиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПеретаскиваниеДокументов(ПараметрыПеретаскивания, "ВопросДеятельности", Строка);
	
	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "ВопросДеятельности", Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева = НоменклатураДел.НайтиПоИдентификатору(Строка);
	Если ЭлементДерева = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработатьПеретаскиваниеДокументов(ПараметрыПеретаскивания, "НоменклатураДел", ЭлементДерева.Ссылка);
	
	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "НоменклатураДел", ЭлементДерева.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева = ДелаТома.НайтиПоИдентификатору(Строка);
	Если ЭлементДерева = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработатьПеретаскиваниеДокументов(ПараметрыПеретаскивания, "Дело", ЭлементДерева.Ссылка);
	
	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "Дело", ЭлементДерева.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПеретаскиваниеДокументов(ПараметрыПеретаскивания, "Проект", Строка);
	
	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "Проект", Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокНоменклатураДел.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.СписокНоменклатураДел.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДелаТома.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДелаТома.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Отправитель", Отправитель);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Отправитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидОбращенияПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("ВидОбращения", ВидОбращения);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, ВидОбращения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыборкиПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("ПериодВыборки", ПериодВыборки);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, ПериодВыборки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Организация", Организация);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Состояние", Состояние);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Состояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорияПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Категория", Категория);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Категория);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНоменклатурыДелПриИзменении(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел") Тогда  
		
		ЗаполнитьДеревоНоменклатурыДел();
		
		Для Каждого ЭлементДерева Из НоменклатураДел.ПолучитьЭлементы() Цикл
			Элементы.СписокНоменклатураДел.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам") Тогда  
		
		ЗаполнитьДеревоДелТомов();
		
		Для Каждого ЭлементДерева Из ДелаТома.ПолучитьЭлементы() Цикл
			Элементы.ДелаТома.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГодНоменклатурыДелПриИзменении(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел") Тогда  
		
		ЗаполнитьДеревоНоменклатурыДел();
		
		Для Каждого ЭлементДерева Из НоменклатураДел.ПолучитьЭлементы() Цикл
			Элементы.СписокНоменклатураДел.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам") Тогда  
		
		ЗаполнитьДеревоДелТомов();
		
		Для Каждого ЭлементДерева Из ДелаТома.ПолучитьЭлементы() Цикл
			Элементы.ДелаТома.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраСписком(Команда)
	
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком");
	ВидПросмотраПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоВидамДокументов(Команда)
	
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоВидамДокументов");
	ВидПросмотраПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоВопросамДеятельности(Команда)
	
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности");
	ВидПросмотраПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоКонтрагентам(Команда)
	
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам");
	ВидПросмотраПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоНоменклатуреДел(Команда)
	
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел");
	ВидПросмотраПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоДеламТомам(Команда)
	
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам");
	ВидПросмотраПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоКатегориям(Команда)
	
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям");
	ВидПросмотраПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоПроектам(Команда)
	
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПроектам");
	ВидПросмотраПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПросмотраПриИзменении()
	
	Если ВидПросмотра = ПредыдущийВидПросмотра Тогда 
		Возврат;
	КонецЕсли;	
	
	ПереключитьВидПросмотра();
	
	ПредыдущийВидПросмотра = ВидПросмотра;
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		
		Если ИспользоватьКатегорииДанных Тогда 
			РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, ВыбранныеКатегорииПриОткрытии, ВыбранныеКатегории);
			РаботаСКатегориямиДанныхКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, КатегорииПриОткрытии);
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел") Тогда 
		
		Для Каждого ЭлементДерева Из НоменклатураДел.ПолучитьЭлементы() Цикл
			Элементы.СписокНоменклатураДел.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		Если ТекущаяНоменклатураДел <> Неопределено Тогда 
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(ТекущаяНоменклатураДел, НоменклатураДел, Идентификатор);
			Если Идентификатор <> Неопределено Тогда 
				ТекущаяНоменклатураДел = Неопределено;
				Элементы.СписокНоменклатураДел.ТекущаяСтрока = Идентификатор;
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам") Тогда 
		
		Для Каждого ЭлементДерева Из ДелаТома.ПолучитьЭлементы() Цикл
			Элементы.ДелаТома.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		Если ТекущееДелоТом <> Неопределено Тогда 
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(ТекущееДелоТом, ДелаТома, Идентификатор);
			Если Идентификатор <> Неопределено Тогда 
				ТекущееДелоТом = Неопределено;
				Элементы.ДелаТома.ТекущаяСтрока = Идентификатор;
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоМоиПроектыПриИзменении(Элемент)
	
	ПереключитьОтборПоПроектам();
	
КонецПроцедуры

// дерево переписки

&НаКлиенте
Процедура ДеревоПерепискиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоПереписки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПерепискиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоПереписки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПерепискиПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд();
	
КонецПроцедуры

// дерево категорий

&НаКлиенте
Процедура ДеревоКатегорийПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоКатегорий.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДеревоКатегорий.ТекущиеДанные <> Неопределено Тогда
		ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
	КонецЕсли;
	КоличествоВыбранныхКатегорий = ВыбранныеКатегории.Количество();
	Если КоличествоВыбранныхКатегорий = 1
		И ВыбранныеКатегории[0].Пометка = Ложь
		И ВыбранныеКатегории[0].Значение <> Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка Тогда
		ВыбранныеКатегории[0].Значение = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
		ВыбранныеКатегории[0].Представление = 
			РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбранныеКатегории[0].Значение);
		ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийВыбранаПриИзменении(Элемент)
	
	Если Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана
		И Не ПроверитьПредельноеКоличествоОтмеченныхКатегорий() Тогда
		Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеКатегории.Количество() = 1
		И ВыбранныеКатегории[0].Значение = ТекущаяКатегория Тогда
		
		ВыбранныеКатегории[0].Пометка = Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана;
		Возврат;
		
	КонецЕсли;
	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоКатегорийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ЗначениеЗаполнения = Новый Структура;
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ЗначениеКопирования");
	Если НЕ Копирование Тогда
		ЗначениеЗаполнения.Вставить("Родитель", Элемент.ТекущиеДанные.Ссылка);				
	Иначе
		ПараметрыФормы.ЗначениеКопирования = Элемент.ТекущиеДанные.Ссылка;
	КонецЕсли;
	ПараметрыФормы.ЗначенияЗаполнения = ЗначениеЗаполнения;
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ОбновитьДеревоКатегорий(Неопределено);
	ПрименитьФильтрКатегорий();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоКатегорийПеретаскиваниеПродолжение",
		ЭтотОбъект);

	РаботаСКатегориямиДанныхКлиент.ФормаСпискаОбъектовДеревоКатегорийПеретаскивание(
		ЭтаФорма, 
		ПараметрыПеретаскивания,
		Строка,
		СтандартнаяОбработка,
		ОписаниеОповещения)
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПеретаскиваниеПродолжение(Результат, Параметры) Экспорт 

	ОбновитьДеревоКатегорий(Неопределено);
	ПереключитьВидПросмотра();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоКатегорийПередУдалениемПродолжение",
		ЭтотОбъект);

	Отказ = Истина;
	РаботаСКатегориямиДанныхКлиент.ПометитьКатегориюНаУдаление(
		Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка,
		Элементы.ДеревоКатегорий.ТекущиеДанные.ПометкаУдаления,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередУдалениемПродолжение(Результат, Параметры) Экспорт 

	ОбновитьДеревоКатегорий(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.ДеревоКатегорий.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка); 
		ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьДокументВыполнить()
	
	СоздатьНовыйДокумент(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран документ.'; en = 'Document not selected.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'; en = 'Cannot execute the command for the specified object.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Объект", ТекущиеДанные.Ссылка);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСЭПКлиент.Подписать(ТекущиеДанные.Ссылка, УникальныйИдентификатор, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, Параметры) Экспорт
	
	РаботаСЭПКлиент.ПослеПодписанияОбъекта(Результат, Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКатегорию(Команда)
	
	ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
	Если Элементы.ДеревоКатегорий.ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеФлажка И ЗначениеЗаполнено(ТекущаяКатегория) Тогда		
		ПараметрыФормы = Новый Структура("Ключ", ТекущаяКатегория);
		ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элементы.ДеревоКатегорий);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметки(Команда)
	
	Если ВыбранныеКатегории.Количество() > 0 Тогда
		СнятьВсеОтметкиСервер();
		ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомВсехОтмеченных(Команда)
	
	ОтборДанных = "ПоВсем";
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Ложь;
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Истина;
	
	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомОднойИзОтмеченных(Команда)
	
	ОтборДанных = "ПоОднойИз";
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Истина;
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Ложь;
	
	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомИерархии(Команда)
	
	СУчетомПодкатегорий = НЕ СУчетомПодкатегорий;
	Элементы.ДеревоКатегорийПоказыватьСУчетомИерархии.Пометка = СУчетомПодкатегорий;
	
	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОтмеченныеКатегории(Команда)
	
	ПоказыватьСписокОтмеченных = НЕ ПоказыватьСписокОтмеченных;
	Элементы.ДеревоКатегорийПоказыватьВыбранныеКатегории.Пометка = ПоказыватьСписокОтмеченных;
	Элементы.ВыбранныеКатегории.Видимость = ПоказыватьСписокОтмеченных;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегории(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьКатегорииПродолжение",
		ЭтотОбъект);
		
	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаОбъектов(
		Элементы.Список, Истина, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегорииПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Неопределено Тогда
		ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоКатегорий(Команда)
	
	СписокРаскрытыхКатегорий.Очистить();
	РаботаСКатегориямиДанныхКлиент.ПолучитьМассивРаскрытыхКатегорий(Элементы.ДеревоКатегорий, ДеревоКатегорий.ПолучитьЭлементы(), СписокРаскрытыхКатегорий);
	
	ПостроитьДеревоКатегорий();
	
	ИдКатегории = Неопределено;
	РаботаСКатегориямиДанныхКлиентСервер.НайтиКатегориюВДеревеПоСсылке(ДеревоКатегорий.ПолучитьЭлементы(), ТекущаяКатегория, ИдКатегории);
	РазвернутьРодителяИУстановитьТекущуюСтроку(ИдКатегории);
	
	Элементы.ДеревоКатегорий.ТекущаяСтрока = ИдКатегории;
	
	РаботаСКатегориямиДанныхКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, СписокРаскрытыхКатегорий);
	РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, ВыбранныеКатегории);
	РаботаСКатегориямиДанныхКлиентСервер.УстановитьТекущуюКатегориюВДеревеПоСсылке(Элементы.ДеревоКатегорий, ДеревоКатегорий, ТекущаяКатегория);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОтвет(Команда)
	
	Если (Элементы.Список.ТекущаяСтрока = Неопределено) 
		Или (Элементы.ДеревоПереписки.ТекущаяСтрока = Неопределено) Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначениеКопирования", Элементы.ДеревоПереписки.ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("ВОтветНа", Элементы.Список.ТекущаяСтрока);
	
	ОткрытьФорму("Справочник.ИсходящиеДокументы.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКакПовторное(Команда)
	
	Если (Элементы.Список.ТекущаяСтрока = Неопределено) 
		Или (Элементы.ДеревоПереписки.ТекущаяСтрока = Неопределено) Тогда 
		Возврат;
	КонецЕсли;	
	
	ОтметитьКакПовторноеНаСервере(Элементы.Список.ТекущаяСтрока, Элементы.ДеревоПереписки.ТекущиеДанные.Ссылка);
	ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
	
	ПоказатьОповещениеПользователя(
		"Обращение отмечено как повторное:", 
		ПолучитьНавигационнуюСсылку(Элементы.Список.ТекущаяСтрока),
		Строка(Элементы.Список.ТекущаяСтрока),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКакДубликат(Команда)
	
	Если (Элементы.Список.ТекущаяСтрока = Неопределено) 
		Или (Элементы.ДеревоПереписки.ТекущаяСтрока = Неопределено) Тогда 
		Возврат;
	КонецЕсли;	
	
	ОтметитьКакДубликатНаСервере(Элементы.Список.ТекущаяСтрока, Элементы.ДеревоПереписки.ТекущиеДанные.Ссылка);
	ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
	
	ПоказатьОповещениеПользователя(
		"Обращение отмечено как дубликат:", 
		ПолучитьНавигационнуюСсылку(Элементы.Список.ТекущаяСтрока),
		Строка(Элементы.Список.ТекущаяСтрока),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПереписку(Команда)
	
	ОбработкаОжиданияПриАктивизацииСписка();
	УстановитьДоступностьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКомплект(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		МассивОбъектов.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	РаботаСКомплектамиДокументовКлиент.ДобавитьВКомплект(МассивОбъектов);
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление(Команда)
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияСписка(ЭтаФорма, "Список");
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьОтчеты(Команда)
		
	Раздел = ПредопределенноеЗначение("Перечисление.РазделыОтчетов.ОбращенияГражданСписок");

	ЗаголовокФормы = НСтр("ru = 'Отчеты по обращениям граждан'; en = 'Reports on citizen appeals'");
	
	РазделГипперСсылка = НастройкиВариантовОтчетовДокументооборот.ПолучитьРазделОтчетаПоИмени("ДокументыИФайлы");

	ПараметрыФормы = Новый Структура("Раздел, ЗаголовокФормы, НеОтображатьИерархию, РазделГипперСсылка", 
		Раздел, ЗаголовокФормы, Истина, РазделГипперСсылка);
	
	ОткрытьФорму(
		"Обработка.ВсеОтчеты.Форма.ФормаПоКатегориям",
		ПараметрыФормы,
		ЭтаФорма, 
		"ОбращенияГражданСписок");

КонецПроцедуры

// Учет времени

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, ТекущиеДанные.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Работа с документом ""%1""'; en = 'Working with document ""%1""'"),
			ТекущиеДанные.Наименование);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект,
			Новый Структура("Объект", ТекущиеДанные.Ссылка));
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Параметры.Объект);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		ТекущиеДанные.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтаФорма); // Выполнена
		
	КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьКоличествоДоступныхШаблонов()
	
	ЕстьДоступныеШаблоныДокументов = ЕстьДоступныеШаблоныДокументов();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ЕстьДоступныеШаблоныДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.ШаблоныВходящихДокументов КАК ШаблоныДокументов
	|ГДЕ
	|	(ШаблоныДокументов.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыВходящихДокументов.ПустаяСсылка)
	|			ИЛИ ШаблоныДокументов.ВидДокумента.ЯвляетсяОбращениемОтГраждан = ИСТИНА)
	|	И НЕ ШаблоныДокументов.ПометкаУдаления";
	
	Возврат Не Запрос.Выполнить().Пустой();
		
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораВидаПросмотра()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов") Тогда 
		Элементы.РежимПросмотраПоВидамДокументов.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел") Тогда 
		ОрганизацияНоменклатурыДел = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		ГодНоменклатурыДел = Год(ТекущаяДата());
	Иначе	
		Элементы.РежимПросмотраПоНоменклатуреДел.Видимость = Ложь;
		Элементы.РежимПросмотраПоДеламТомам.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда 
		Элементы.РежимПросмотраПоВопросамДеятельности.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьКатегорииДанных Тогда
		Элементы.РежимПросмотраПоКатегориям.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Элементы.РежимПросмотраПоПроектам.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьПеретаскиваниеДокументов(ПараметрыПеретаскивания, ИмяРеквизита, ЗначениеРеквизита)

	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	
	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") 
		И ЗначениеПеретаскивания.Количество() > 0 
		И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		
		Если ИзменитьРеквизитДокументов(ЗначениеПеретаскивания, ИмяРеквизита, ЗначениеРеквизита) = Истина Тогда
			Элементы.Список.Обновить();
			
			Если ЗначениеПеретаскивания.Количество() = 1 Тогда
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Входящий документ ""%1"" перенесен в ""%2""'; en = 'Incoming document ""%1"" moved to ""%2""'"), ЗначениеПеретаскивания[0], ЗначениеРеквизита);
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Входящий документ перенесен.'; en = 'Incoming document moved.'"),
					,
					ПолноеОписание,
					БиблиотекаКартинок.Информация32);
			Иначе
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Входящие документы (%1 шт.) перенесены в ""%2""'; en = 'Incoming documents (%1 pcs.) moved to ""%2""'"), ЗначениеПеретаскивания.Количество(), ЗначениеРеквизита);
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Входящие документы перенесены.'; en = 'Incoming documents moved.'"),
					,
					ПолноеОписание,
					БиблиотекаКартинок.Информация32);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, ИмяРеквизита, ЗначениеРеквизита)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") 
	   И ПараметрыПеретаскивания.Значение.ЭтоФайл() Тогда
		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить(ИмяРеквизита, ЗначениеРеквизита);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("МассивФайлов", МассивФайлов);
		ПараметрыОткрытияФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыОткрытияФормы, Элементы.Список);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
		
		МассивФайлов = Новый Массив;
		Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
			МассивФайлов.Добавить(ФайлПринятый.ПолноеИмя);
		КонецЦикла;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить(ИмяРеквизита, ЗначениеРеквизита);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("МассивФайлов", МассивФайлов);
		ПараметрыОткрытияФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыОткрытияФормы, Элементы.Список);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста 
Функция ИзменитьРеквизитДокументов(МассивДокументов, ИмяРеквизита, ЗначениеРеквизита)
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ничего менять не надо
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивДокументов[0], ИмяРеквизита) = ЗначениеРеквизита Тогда 
	    Возврат Ложь;
	КонецЕсли;
	
	НедоступныеДокументы = Новый Массив;
	Для Каждого ДокументСсылка Из МассивДокументов Цикл
		Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ДокументСсылка).Изменение Тогда 
			НедоступныеДокументы.Добавить(ДокументСсылка);
		КонецЕсли;
	КонецЦикла;	
	
	Если НедоступныеДокументы.Количество() > 0 Тогда 
		Если НедоступныеДокументы.Количество() = 1 Тогда 
			ДокументСсылка = НедоступныеДокументы[0];
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У вас нет права на изменение документа ""%1"".'; en = 'You have no permissions to change document ""%1"".'"),
				Строка(ДокументСсылка));
		Иначе
			ТекстСообщения = НСтр("ru = 'У вас нет права на изменение документов:'; en = 'You have no permissions to change documents:'");
			Для Каждого ДокументСсылка Из НедоступныеДокументы Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + Строка(ДокументСсылка);
			КонецЦикла;
		КонецЕсли;	
		
		ВызватьИсключение ТекстСообщения; 
	КонецЕсли;	
	
	НачатьТранзакцию();
	Попытка
		Для Каждого ДокументСсылка Из МассивДокументов Цикл
			ЗаблокироватьДанныеДляРедактирования(ДокументСсылка);
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект[ИмяРеквизита] = ЗначениеРеквизита;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСписка(Список, ПараметрыОтбора)
	
	ЭлементыОтбора = Список.Отбор.Элементы;
	
	// отправитель 
	Отправитель = ПараметрыОтбора["Отправитель"];
	Если Отправитель <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(Отправитель) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"Отправитель");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Отправитель",
				Отправитель,
				ВидСравненияКомпоновкиДанных.ВИерархии);
		КонецЕсли;
	КонецЕсли;
	
	// вид документа 
	ВидОбращения = ПараметрыОтбора["ВидОбращения"];
	Если ВидОбращения <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ВидОбращения) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"ВидОбращения");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"ВидОбращения",
				ВидОбращения,
				ВидСравненияКомпоновкиДанных.ВИерархии);
		КонецЕсли;
	КонецЕсли;
	
	// организация 
	Организация = ПараметрыОтбора["Организация"];
	Если Организация <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"Организация");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Организация",
				Организация);
		КонецЕсли;
	КонецЕсли;
	
	// период 
	ПериодВыборки = ПараметрыОтбора.Получить("ПериодВыборки");
	Если ПериодВыборки <> Неопределено Тогда 
		
		ЭлементыОтбора = Список.Отбор.Элементы;
		
		ЭлементОтбораДанных = Неопределено;
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Представление = "ОтборПериод" Тогда
				ЭлементОтбораДанных = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПериодВыборки) Тогда 
			
			Если ЭлементОтбораДанных = Неопределено Тогда
				ГруппаОтборПериод = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтборПериод.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 
				ГруппаОтборПериод.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
				ГруппаОтборПериод.Использование = Истина;
				ГруппаОтборПериод.Представление = "ОтборПериод";
			Иначе
				ГруппаОтборПериод = ЭлементОтбораДанных;
				ГруппаОтборПериод.Элементы.Очистить();
				ГруппаОтборПериод.Использование = Истина;
			КонецЕсли;	
			
			ГруппаДатаСортировки = ГруппаОтборПериод.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаДатаСортировки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
			ГруппаДатаСортировки.Использование = Истина;
			
			Если ЗначениеЗаполнено(ПериодВыборки.ДатаНачала) Тогда 
				ЭлементОтбораДанных = ГруппаДатаСортировки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСортировки");
				ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаНачала;
				ЭлементОтбораДанных.Использование = Истина;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ПериодВыборки.ДатаОкончания) Тогда 
				ЭлементОтбораДанных = ГруппаДатаСортировки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСортировки");
				ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаОкончания;
				ЭлементОтбораДанных.Использование = Истина;
			КонецЕсли;
			
			Если ГруппаДатаСортировки.Элементы.Количество() = 0 Тогда 
				ГруппаОтборПериод.Элементы.Удалить(ГруппаДатаСортировки);
			КонецЕсли;
			
		Иначе
			
			Если ЭлементОтбораДанных <> Неопределено Тогда
				ГруппаОтборПериод = ЭлементОтбораДанных;
				ГруппаОтборПериод.Элементы.Очистить();
				ГруппаОтборПериод.Использование = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	// состояние
	Состояние = ПараметрыОтбора.Получить("Состояние");
	Если Состояние <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Состояние) Тогда 
			Параметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Состояние"));
			Параметр.Использование = Ложь;
		Иначе
			Список.Параметры.УстановитьЗначениеПараметра("Состояние", Состояние);
		КонецЕсли;	
	КонецЕсли;
	
	// категория
	Категория = ПараметрыОтбора.Получить("Категория");
	Если Категория <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Категория) Тогда 
			Параметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Категория"));
			Параметр.Использование = Ложь;
		Иначе
			Список.Параметры.УстановитьЗначениеПараметра("Категория", Категория);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСписка()
	
	РаботаСоСпискамиДокументовКлиент.УстановитьПараметрыСписка(ЭтаФорма);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОжидания()
	
	УстановитьПараметрыСписка();
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьВидПросмотра()
	
	РаботаСоСпискамиДокументов.ПереключитьВидПросмотра(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокумент(Копирование)
	
	Если Копирование Тогда 
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда 
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.Ссылка);
			Открытьформу("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыФормы, Элементы.Список, Новый УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе	
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СоздатьНовыйДокументПродолжение",
			ЭтотОбъект);
			
		Если ЕстьДоступныеШаблоныДокументов Тогда
			РаботаСШаблонамиДокументовКлиент.ПоказатьФормуСозданияДокументаПоШаблону(
				ОписаниеОповещения,
				"ШаблоныВходящихДокументов",, 
				Истина);
		Иначе
			Результат = "СоздатьПустойДокумент";
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокументПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЗначенияЗаполнения = ПолучитьЗначенияЗаполненияПоВидуПросмотра(); 
	Если ЗначенияЗаполнения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КлючеваяОперация = "ВходящиеДокументыВыполнениеКомандыСоздать";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("ИзСпискаОбращенийГраждан", Истина);
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат);
	Иначе
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат.ШаблонДокумента);
	КонецЕсли;
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		Если ВыбранныеКатегории.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("СписокКатегорий", ВыбранныеКатегории);	
		ИначеЕсли НЕ ТекущаяКатегория = Неопределено
			И НЕ ТекущаяКатегория.Пустая()
			И НЕ ТекущаяКатегория = ВсеКатегорииПредопределенное Тогда
			ПараметрыФормы.Вставить("ОднаКатегория", ТекущаяКатегория);
		КонецЕсли;
	КонецЕсли;
	
	Открытьформу("Справочник.ВходящиеДокументы.ФормаОбъекта", ПараметрыФормы, Элементы.Список, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначенияЗаполненияПоВидуПросмотра()
	
	Возврат РаботаСоСпискамиДокументовКлиент.ПолучитьЗначенияЗаполненияПоВидуПросмотра(ЭтаФорма);
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьДеревоНоменклатурыДел() 
	
	РаботаСоСпискамиДокументов.ЗаполнитьДеревоНоменклатурыДел(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДеревоДелТомов() 
	
	РаботаСоСпискамиДокументов.ЗаполнитьДеревоДелТомов(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура ПереключитьОтборПоПроектам()
	
	Проекты.Параметры.УстановитьЗначениеПараметра("ТолькоМоиПроекты", ТолькоМоиПроекты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево(Контрагент)
	
	Дерево = РеквизитФормыВЗначение("ДеревоПереписки");
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВходящиеДокументы.Ссылка КАК Ссылка,
	|	ВходящиеДокументы.ДатаРегистрации,
	|	ВходящиеДокументы.РегистрационныйНомер,
	|	ВходящиеДокументы.Заголовок,
	|	ВходящиеДокументы.ДатаСоздания Как ДатаСоздания,
	|	ВходящиеДокументы.Наименование
	|ИЗ
	|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
	|		ПО ВходящиеДокументы.Ссылка = СвязьВОтветНа.Документ
	|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученВОтветНа))
	|ГДЕ
	|	ВходящиеДокументы.Отправитель = &Контрагент
	|	И СвязьВОтветНа.СвязанныйДокумент ЕСТЬ NULL 
	|	И НЕ ВходящиеДокументы.ПометкаУдаления
	|	И ВходящиеДокументы.ВидДокумента.ЯвляетсяОбращениемОтГраждан = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходящиеДокументы.Ссылка,
	|	ИсходящиеДокументы.ДатаРегистрации,
	|	ИсходящиеДокументы.РегистрационныйНомер,
	|	ИсходящиеДокументы.Заголовок,
	|	ИсходящиеДокументы.ДатаСоздания,
	|	ИсходящиеДокументы.Наименование
	|ИЗ
	|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
	|		ПО ИсходящиеДокументы.Ссылка = СвязьВОтветНа.Документ
	|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленВОтветНа))
	|ГДЕ
	|	&Контрагент В
	|			(ВЫБРАТЬ
	|				ИсходящиеДокументыПолучатели.Получатель
	|			ИЗ
	|				Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
	|			ГДЕ
	|				ИсходящиеДокументыПолучатели.Ссылка = ИсходящиеДокументы.Ссылка)
	|	И СвязьВОтветНа.СвязанныйДокумент ЕСТЬ NULL 
	|	И НЕ ИсходящиеДокументы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ТаблДокументов = Запрос.Выполнить().Выгрузить();
	ТаблДокументов.Сортировать("ДатаРегистрации");
	
	Для Каждого Строка Из ТаблДокументов Цикл
		НоваяСтрока = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
		
		Если ТипЗнч(НоваяСтрока.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			НоваяСтрока.ИндексКартинки = 0;
		ИначеЕсли ТипЗнч(НоваяСтрока.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
			Если НоваяСтрока.Ссылка.Получатели.Найти(Истина, "Отправлен") <> Неопределено Тогда 
				НоваяСтрока.ИндексКартинки = 1;
			Иначе
				НоваяСтрока.ИндексКартинки = 3;
			КонецЕсли;
		КонецЕсли;
		
		Если НоваяСтрока.Ссылка = Элементы.Список.ТекущаяСтрока Тогда 
			НоваяСтрока.Текущий = Истина;
		КонецЕсли;
		
		КорневоеПисьмо = ВстроеннаяПочтаСервер.ПолучитьКорневоеПисьмо(НоваяСтрока.Ссылка);
		ВыведенныеПисьма = Новый Массив;
		Делопроизводство.ЗаполнитьПодчиненныеДокументыВходящегоИлиИсходящего(НоваяСтрока.Строки, КорневоеПисьмо, НоваяСтрока.Ссылка, ВыведенныеПисьма);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПереписки");
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДерево()
	
	Дерево = РеквизитФормыВЗначение("ДеревоПереписки");
	Дерево.Строки.Очистить();
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПереписки");
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьПризнакОтправлен(ИсходящийДокумент, Получатель, Адресат)
	
	Отправлен = Ложь;
	
	ПараметрыОтбора = Новый Структура("Получатель", Получатель);
	НайденныеСтроки = ИсходящийДокумент.Получатели.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 1 Тогда 
		Отправлен =	НайденныеСтроки[0].Отправлен;
	Иначе
		ПараметрыОтбора = Новый Структура("Получатель, Адресат", Получатель, Адресат);
		НайденныеСтроки = ИсходящийДокумент.Получатели.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 1 Тогда 
			Отправлен =	НайденныеСтроки[0].Отправлен;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Отправлен;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОжиданияПриАктивизацииСписка()
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено 
		И ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ЗаполнитьДерево(Элементы.Список.ТекущиеДанные.Отправитель);
		
		ЭлементыДерева = ДеревоПереписки.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Элементы.ДеревоПереписки.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
		Элементы.ДеревоПереписки.ТекущаяСтрока = 0;
	Иначе
		ОчиститьДерево();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьКакПовторноеНаСервере(Документ, СвязанныйДокумент)
	
	ЗаблокироватьДанныеДляРедактирования(Документ);
	ДокументОбъект = Документ.ПолучитьОбъект();
	ДокументОбъект.Повторное = Истина;
	ДокументОбъект.Записать();
	
	СвязиДокументов.СоздатьСвязь(Документ, СвязанныйДокумент, Справочники.ТипыСвязей.ПервичноеОбращение);
	
КонецПроцедуры	

&НаСервере
Процедура ОтметитьКакДубликатНаСервере(Документ, СвязанныйДокумент)
	
	ЗаблокироватьДанныеДляРедактирования(Документ);
	ДокументОбъект = Документ.ПолучитьОбъект();
	ДокументОбъект.Дубликат = Истина;
	ДокументОбъект.Записать();
	
	СвязиДокументов.СоздатьСвязь(Документ, СвязанныйДокумент, Справочники.ТипыСвязей.ОсновноеОбращение);
	
КонецПроцедуры	

&НаСервере
Процедура ПостроитьДеревоКатегорий() Экспорт 
	
	Дерево = РеквизитФормыВЗначение("ДеревоКатегорий");
	Дерево = РаботаСКатегориямиДанных.ПостроитьДеревоКатегорий(Дерево,, Истина, Перечисления.ТипыОбъектов.ВходящиеДокументы);		
	ЗначениеВРеквизитФормы(Дерево, "ДеревоКатегорий");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрКатегорий()
	
	КлючеваяОперация = "ВходящиеДокументыВыполнениеКомандыОтборПоКатегориям";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	Если ВыбранныеКатегории.Количество() > 0 Тогда
		СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пожалуйста, подождите!%1Идет поиск данных по категориям...'; en = 'Please wait!%1Searching for data by categories...'"),
			Символы.ПС);
		Состояние(СтрокаСостояния);	
	КонецЕсли;
	УстановитьПараметрыВыбранныхКатегорий();
	Если ВыбранныеКатегории.Количество() > 0 Тогда
		Состояние();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбранныхКатегорий() Экспорт 
	
	ВыбранныеКатегории.Очистить();
	ПолучитьВыбранныеКатегории();	
	ПолучитьКоличествоКатегорийДляПоиска();
    	
	Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
		Если НЕ ЗначениеЗаполнено(ВыбраннаяКатегория.Значение) Тогда
			РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(Список, 10);
			Список.Параметры.УстановитьЗначениеПараметра("НаличиеКатегорий", 0);	
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	РаботаСКатегориямиДанных.СписокКатегорийВЗапросСписка(Список, 10, ВыбранныеКатегории, ОтборДанных, СУчетомПодкатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьРодителяИУстановитьТекущуюСтроку(ИдКатегории)
	
	Если ДеревоКатегорий.НайтиПоИдентификатору(ИдКатегории).ПолучитьРодителя() <> Неопределено Тогда
		Элементы.ДеревоКатегорий.Развернуть(ДеревоКатегорий.НайтиПоИдентификатору(ИдКатегории).ПолучитьРодителя().ПолучитьИдентификатор(), Ложь);
	КонецЕсли;
	
	Элементы.ДеревоКатегорий.ТекущаяСтрока = ИдКатегории;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд()
	
	ДеревоТекущиеДанные = Элементы.ДеревоПереписки.ТекущиеДанные;
	СписокТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	
	Если ДеревоТекущиеДанные = Неопределено Тогда 
		Элементы.СписокОтметитьКакПовторное.Доступность = Ложь;
		Элементы.СписокОтметитьКакДубликат.Доступность = Ложь;
		Элементы.ДеревоПерепискиСкопироватьОтвет.Доступность = Ложь;
		Возврат;
	КонецЕсли;	
		
	Если ТипЗнч(ДеревоТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
		Элементы.ДеревоПерепискиСкопироватьОтвет.Доступность = Истина;
	Иначе 
		Элементы.ДеревоПерепискиСкопироватьОтвет.Доступность = Ложь;
	КонецЕсли;
		
	Если СписокТекущаяСтрока = Неопределено Тогда 
		Элементы.СписокОтметитьКакПовторное.Доступность = Ложь;
		Элементы.СписокОтметитьКакДубликат.Доступность = Ложь;
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ДеревоТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") 
		И ДеревоТекущиеДанные.Ссылка <> СписокТекущаяСтрока Тогда 
		Элементы.СписокОтметитьКакПовторное.Доступность = Истина;
		Элементы.СписокОтметитьКакДубликат.Доступность = Истина;
	Иначе 
		Элементы.СписокОтметитьКакПовторное.Доступность = Ложь;
		Элементы.СписокОтметитьКакДубликат.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьКоличествоКатегорийДляПоиска()
	
	КоличествоВыбранныхКатегорий = ВыбранныеКатегории.Количество();
	КоличествоОтмеченныхКатегорий = 0;
	Для Каждого Элемент Из ВыбранныеКатегории Цикл
		Если Элемент.Пометка Тогда
			КоличествоОтмеченныхКатегорий = КоличествоОтмеченныхКатегорий + 1;
		КонецЕсли;
	КонецЦикла;
		
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Доступность = КоличествоОтмеченныхКатегорий > 1;
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Доступность = КоличествоОтмеченныхКатегорий > 1;
	
	КоличествоКатегорийДляПоиска = КоличествоВыбранныхКатегорий;
	Если КоличествоВыбранныхКатегорий > 1 Тогда
		КоличествоКатегорийДляПоиска = КоличествоОтмеченныхКатегорий;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВыбранныеКатегории()
	
	ПолучитьВыбранныеКатегорииВыполнить(ДеревоКатегорий.ПолучитьЭлементы(), ВыбранныеКатегории);
	
	ЕстьОтмеченныеКатегории = Ложь;
	Для Каждого Элемент Из ВыбранныеКатегории Цикл
		Если Элемент.Пометка = Истина Тогда
			ЕстьОтмеченныеКатегории = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтмеченныеКатегории Тогда
		Для Каждого Элемент Из ВыбранныеКатегории Цикл
			Если Элемент.Пометка = Ложь Тогда
				ВыбранныеКатегории.Удалить(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	ПолучитьКоличествоКатегорийДляПоиска();
	СтрокаЗаголовка = НСтр("ru = 'Категории, по которым выполняется отбор'; en = 'The categories you filter on'");
	Если КоличествоКатегорийДляПоиска > 0 Тогда
		СтрокаЗаголовка = СтрокаЗаголовка + " (" + КоличествоКатегорийДляПоиска + ")";
	КонецЕсли;
	Элементы.ВыбранныеКатегории.Заголовок = СтрокаЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПредельноеКоличествоОтмеченныхКатегорий()
	
	КоличествоОтмеченныхКатегорий = 0;
	Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
		Если ВыбраннаяКатегория.Пометка Тогда
			КоличествоОтмеченныхКатегорий = КоличествоОтмеченныхКатегорий + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоОтмеченныхКатегорий = 10 Тогда
		ТекстПредупреждения = НСтр("ru = 'Одновременно может быть отмечено не более 10 категорий.'; en = 'At the same time no more than 10 categories can be selected.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьСовпадениеКонтрагента(Контрагент, Параметр)
	
	Если ТипЗнч(Параметр) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	ВходящиеДокументы.Ссылка = &Ссылка
		|	И ВходящиеДокументы.Отправитель = &Контрагент
		|	И ВходящиеДокументы.ВидДокумента.ЯвляетсяОбращениемОтГраждан";
		
		Запрос.УстановитьПараметр("Ссылка", Параметр);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|ГДЕ
		|	ИсходящиеДокументы.Ссылка = &Ссылка
		|	И &Контрагент В
		|			(ВЫБРАТЬ
		|				ИсходящиеДокументыПолучатели.Получатель
		|			ИЗ
		|				Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
		|			ГДЕ
		|				ИсходящиеДокументыПолучатели.Ссылка = ИсходящиеДокументы.Ссылка)";
		
		Запрос.УстановитьПараметр("Ссылка", Параметр);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПолучитьВыбранныеКатегорииВыполнить(ЭлементыОдногоУровня, ВыбранныеКатегории)
	
	Для Каждого ЭлементУровня Из ЭлементыОдногоУровня Цикл
		Если ЭлементУровня.Выбрана Тогда
			ВыбранныеКатегории.Добавить(ЭлементУровня.Ссылка, ЭлементУровня.ПолноеНаименование, Истина);
		ИначеЕсли ЭлементУровня.Ссылка = ТекущаяКатегория Тогда
			ВыбранныеКатегории.Добавить(ЭлементУровня.Ссылка, ЭлементУровня.ПолноеНаименование, Ложь);			
		КонецЕсли;
		ПолучитьВыбранныеКатегорииВыполнить(ЭлементУровня.ПолучитьЭлементы(), ВыбранныеКатегории);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СнятьВсеОтметкиСервер()
	
	СнятьВсеОтметкиВыполнить(ДеревоКатегорий.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура СнятьВсеОтметкиВыполнить(ЭлементыОдногоУровня)
	
	ВыбранныеКатегории.Очистить();
	Для Каждого ЭлементУровня Из ЭлементыОдногоУровня Цикл
		ЭлементУровня.Выбрана = Ложь;
		СнятьВсеОтметкиВыполнить(ЭлементУровня.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	ПоказыватьУдаленные = Не ПоказыватьУдаленные;
	
	ПоказатьУдаленные();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьУдаленные()
	
	Если ПоказыватьУдаленные Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ПометкаУдаления");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ВидыДокументов, "ПометкаУдаления");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ВопросыДеятельности, "ПометкаУдаления");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Контрагенты, "ПометкаУдаления");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Проекты, "ПометкаУдаления");
	Иначе	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПометкаУдаления", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВидыДокументов, "ПометкаУдаления", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВопросыДеятельности, "ПометкаУдаления", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Контрагенты, "ПометкаУдаления", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Проекты, "ПометкаУдаления", Ложь);
	КонецЕсли;	
	
	Элементы.ПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВМоиДокументы(Команда)
	
	МассивДокументов = РаботаСоСпискамиДокументовКлиент.ПолучитьВыбранныеДокументы(Элементы.Список);
	МоиДокументыКлиент.ДобавитьВМоиДокументы(МассивДокументов);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_Хронометраж

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения) Экспорт
	
	Если ТекущийДокумент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ТекущийДокумент,
		ВидыРабот,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
	    ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	Если ТекущийДокумент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ТекущийДокумент,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыУчетаВремениВФорме()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
		Элементы.ПереключитьХронометраж.Доступность = Ложь;
		Элементы.УказатьТрудозатраты.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущийДокумент = ТекущиеДанные.Ссылка;
	
	ПараметрыУчетаВремени = ПолучитьПараметрыУчетаВремени(ТекущиеДанные.Ссылка);
	
	ДатаНачалаХронометража = ПараметрыУчетаВремени.ДатаНачалаХронометража;
	ДатаКонцаХронометража = ПараметрыУчетаВремени.ДатаКонцаХронометража;
	ВключенХронометраж = ПараметрыУчетаВремени.ВключенХронометраж;
	ОпцияИспользоватьУчетВремени = ПараметрыУчетаВремени.ОпцияИспользоватьУчетВремени;
	ВидыРабот = ПараметрыУчетаВремени.ВидыРабот;
	СпособУказанияВремени = ПараметрыУчетаВремени.СпособУказанияВремени;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.ПереключитьХронометраж Цикл
		Элементы.ПереключитьХронометраж[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.УказатьТрудозатраты Цикл
		Элементы.УказатьТрудозатраты[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыУчетаВремени(Документ)
	
	Результат = Новый Структура;
	
	ДатаНачалаХронометража = Неопределено;
	ДатаКонцаХронометража = Неопределено;
	ВключенХронометраж = Неопределено;
	ОпцияИспользоватьУчетВремени = Неопределено;
	ВидыРабот = Неопределено;
	СпособУказанияВремени = Неопределено;
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Имя, Подсказка");
	
	ПереключитьХронометраж = Новый Структура("Доступность, Пометка, Видимость");
	ПереключитьХронометраж.Доступность = Истина;
	
	УказатьТрудозатраты = Новый Структура("Доступность");
	УказатьТрудозатраты.Доступность = Истина;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Документ,
		ВидыРабот,
		СпособУказанияВремени,
		ПереключитьХронометражНеМеняяПодсказку,
		ПереключитьХронометраж,
		УказатьТрудозатраты);
		
	Результат.Вставить("ПереключитьХронометраж", Новый Соответствие);
	Результат.Вставить("УказатьТрудозатраты", Новый Соответствие);
	
	Результат.ПереключитьХронометраж.Вставить(
		"Доступность",
		ПереключитьХронометраж.Доступность);
	Результат.ПереключитьХронометраж.Вставить(
		"Пометка",
		ПереключитьХронометраж.Пометка);
	Результат.УказатьТрудозатраты.Вставить(
		"Доступность",
		УказатьТрудозатраты.Доступность);
	
	Результат.Вставить("ДатаНачалаХронометража", ДатаНачалаХронометража);
	Результат.Вставить("ДатаКонцаХронометража", ДатаКонцаХронометража);
	Результат.Вставить("ВключенХронометраж", ВключенХронометраж);
	Результат.Вставить("ОпцияИспользоватьУчетВремени", ОпцияИспользоватьУчетВремени);
	Результат.Вставить("ВидыРабот", ВидыРабот);
	Результат.Вставить("СпособУказанияВремени", СпособУказанияВремени);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
