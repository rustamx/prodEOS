
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Восстановление сохраненных значений настроек списков
	НастройкиОтображения = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + "/ТекущиеДанные");
	Если ЗначениеЗаполнено(НастройкиОтображения) Тогда
		ПоказыватьНедействительныхИсполнителей = 
			НастройкиОтображения.Получить("ПоказыватьНедействительныхИсполнителей");
		ПоказыватьРолиПомеченныеНаУдаление = 
			НастройкиОтображения.Получить("ПоказыватьРолиПомеченныеНаУдаление");
	Иначе
		ПоказыватьРолиПомеченныеНаУдаление = Ложь;
		ПоказыватьНедействительныхИсполнителей = Ложь;
	КонецЕсли;
	
	Элементы.ПоказыватьРолиПомеченныеНаУдаление.Пометка = ПоказыватьРолиПомеченныеНаУдаление;
	Элементы.ПоказыватьНедействительныхИсполнителей.Пометка = ПоказыватьНедействительныхИсполнителей;
	
	ПоказатьПомеченныеРоли();
	ПоказатьНедействительныхПользователей();
	
	// Установка условного оформления для списка Роли.
	
	// Роль без исполнителей.
	
	ЭлементУсловногоОформления = Роли.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьИсполнители");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.РольБезИсполнителей.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	// Удаленная роль.
	
	ЭлементУсловногоОформления = Роли.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементШрифтОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЗачеркнутыйШрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,,Истина);
	ЭлементШрифтОформления.Значение = ЗачеркнутыйШрифт;
	ЭлементШрифтОформления.Использование = Истина;
	
	// Установка условного оформления для списка Исполнители.
	
	// Недействительный исполнитель.
	
	ЭлементУсловногоОформления = Исполнители.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Недействителен");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	// Удаленный исполнитель.
	
	ЭлементУсловногоОформления = Исполнители.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементШрифтОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЗачеркнутыйШрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,,Истина);
	ЭлементШрифтОформления.Значение = ЗачеркнутыйШрифт;
	ЭлементШрифтОформления.Использование = Истина;
	
	// Недопустимый исполнитель.
	
	ЭлементУсловногоОформления = Исполнители.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Недопустим");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.РольБезИсполнителей.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтборВСпискеИсполнители();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РолиИсполнителей"
		И Параметр = Элементы.Роли.ТекущаяСтрока Тогда
		
		ПодключитьОбработчикОжидания("УстановитьПараметрыСпискаИсполнители", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРоли

&НаКлиенте
Процедура РолиПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяРоль = Элементы.Роли.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяРоль = Элементы.Роли.ТекущаяСтрока;
	ПодключитьОбработчикОжидания("УстановитьОтборВСпискеИсполнители", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Роль = Элементы.Роли.ТекущаяСтрока;
	Если Не ЗначениеЗаполнено(Роль) Тогда
		Сообщить(НСтр("ru = 'Не выбрана роль'; en = 'Role not selected'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.Роли.ТекущиеДанные.ИспользуетсяСОбъектамиАдресации Тогда
		
		ПараметрыЗаполнения = Новый Структура("РольИсполнителя", Роль);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
		ОткрытьФорму("РегистрСведений.ИсполнителиЗадач.ФормаЗаписи", ПараметрыФормы);
		
	Иначе
		
		ДопПараметры = Новый Структура("Роль", Роль);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершитьВыборИсполнителей", ЭтотОбъект, ДопПараметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
		ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор исполнителей роли'; en = 'Selecting role performers'"));
		ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все пользователи'; en = 'All users'"));
		ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные пользователи'; en = 'Selected users'"));
		ПараметрыФормы.Вставить("КонтролироватьДублиАдресатов", Истина);
		
		ОткрытьФорму("Справочник.АдреснаяКнига.ФормаСписка",
			ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыборИсполнителей(ВыбранныеИсполнители, ДопПараметры) Экспорт
	
	Если ВыбранныеИсполнители = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьВыборИсполнителейСервер(ВыбранныеИсполнители, ДопПараметры);
	Элементы.Исполнители.Обновить();
	
	ОповеститьОбИзменении(Элементы.Роли.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	ОповеститьОбИзменении(Элементы.Роли.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказыватьНедействительныхИсполнителей(Команда)
	
	ПоказыватьНедействительныхИсполнителей = Не ПоказыватьНедействительныхИсполнителей;
	Элементы.ПоказыватьНедействительныхИсполнителей.Пометка = ПоказыватьНедействительныхИсполнителей;
	ПоказатьНедействительныхПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьРолиПомеченныеНаУдаление(Команда)
	
	ПоказыватьРолиПомеченныеНаУдаление = Не ПоказыватьРолиПомеченныеНаУдаление;
	Элементы.ПоказыватьРолиПомеченныеНаУдаление.Пометка = ПоказыватьРолиПомеченныеНаУдаление;
	ПоказатьПомеченныеРоли();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьОтборВСпискеИсполнители()
	
	Исполнители.Отбор.Элементы.Очистить();
	НовыйОтбор = Исполнители.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РольВладелец");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = ТекущаяРоль;
	
	УстановитьПараметрыСпискаИсполнители();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСпискаИсполнители()
	
	Если Элементы.Роли.ТекущиеДанные = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Исполнители,
			"ОбъектыАдресацииОбязательны",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Исполнители,
			"ТипыОсновногоОбъектаАдресации",
			Новый Массив);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Исполнители,
			"ТипыДополнительногоОбъектаАдресации",
			Новый Массив);
			
	Иначе
			
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Исполнители,
			"ОбъектыАдресацииОбязательны",
			НЕ Элементы.Роли.ТекущиеДанные.ИспользуетсяБезОбъектовАдресации);
			
		Если Элементы.Роли.ТекущиеДанные.ИспользуетсяСОбъектамиАдресации
			И ЗначениеЗаполнено(Элементы.Роли.ТекущиеДанные.ТипыОсновногоОбъектаАдресации) Тогда
			ТипыОсновногоОбъектаАдресации = Элементы.Роли.ТекущиеДанные.ТипыОсновногоОбъектаАдресации.Типы();
			Если Элементы.Роли.ТекущиеДанные.ИспользуетсяБезОбъектовАдресации Тогда
				ТипыОсновногоОбъектаАдресации.Добавить(Тип("Неопределено"));
			КонецЕсли;
		Иначе
			ТипыОсновногоОбъектаАдресации = Новый Массив;
			ТипыОсновногоОбъектаАдресации.Добавить(Тип("Неопределено"));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Исполнители,
			"ТипыОсновногоОбъектаАдресации",
			ТипыОсновногоОбъектаАдресации);
		
		Если Элементы.Роли.ТекущиеДанные.ИспользуетсяСОбъектамиАдресации
			И ЗначениеЗаполнено(Элементы.Роли.ТекущиеДанные.ТипыДополнительногоОбъектаАдресации) Тогда
			ТипыДополнительногоОбъектаАдресации = Элементы.Роли.ТекущиеДанные.ТипыДополнительногоОбъектаАдресации.Типы();
			Если Элементы.Роли.ТекущиеДанные.ИспользуетсяБезОбъектовАдресации Тогда
				ТипыДополнительногоОбъектаАдресации.Добавить(Тип("Неопределено"));
			КонецЕсли;
		Иначе
			ТипыДополнительногоОбъектаАдресации = Новый Массив;
			ТипыДополнительногоОбъектаАдресации.Добавить(Тип("Неопределено"));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Исполнители,
			"ТипыДополнительногоОбъектаАдресации",
			ТипыДополнительногоОбъектаАдресации);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьНедействительныхПользователей()
	
	Если ПоказыватьНедействительныхИсполнителей Тогда
		ПараметрСписка = Исполнители.Параметры.Элементы.Найти("Недействителен");
		Если ПараметрСписка <> Неопределено Тогда
			ПараметрСписка.Использование = Ложь;
		КонецЕсли;
	Иначе
		Исполнители.Параметры.УстановитьЗначениеПараметра("Недействителен", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПомеченныеРоли()
	
	Если ПоказыватьРолиПомеченныеНаУдаление Тогда
		ПараметрСписка = Роли.Параметры.Элементы.Найти("ПоказыватьПомеченныеРоли");
		Если ПараметрСписка <> Неопределено Тогда
			ПараметрСписка.Использование = Ложь;
		КонецЕсли;
	Иначе
		Роли.Параметры.УстановитьЗначениеПараметра("ПоказыватьПомеченныеРоли", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьВыборИсполнителейСервер(ВыбранныеИсполнители, ДопПараметры) Экспорт
	
	Для Каждого Эл Из ВыбранныеИсполнители Цикл
		
		Запись = РегистрыСведений.ИсполнителиЗадач.СоздатьМенеджерЗаписи();
		
		Запись.Исполнитель = Эл.Контакт;
		Запись.РольИсполнителя = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(ДопПараметры.Роль,
			Неопределено,
			Неопределено);
		Запись.УдалитьРольИсполнителя = ДопПараметры.Роль;
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
