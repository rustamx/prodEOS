#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, 
		"ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	Нумерация.ПоказатьИндексНумерации(ЭтаФорма);
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ОтветственныеЛицаОрганизаций, "Организация", Объект.Ссылка,
		ВидСравненияКомпоновкиДанных.Равно, , Истина);
	
	Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка).Изменение Тогда 
		Элементы.БанковскиеСчетаСделатьОсновнымСчетом.Видимость = Ложь;
		Элементы.БанковскиеСчета.ТолькоПросмотр = Истина;
		Элементы.ИндексНумерации.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Справочники.БанковскиеСчета.ИмеетБанковскийСчет(Объект.Ссылка) Тогда 
		Элементы.БанковскийСчетЗадан.Видимость = Истина;
		Элементы.БанковскийСчетНеЗадан.Видимость = Ложь;
	Иначе 
		Элементы.БанковскийСчетЗадан.Видимость = Ложь;
		Элементы.БанковскийСчетНеЗадан.Видимость = Истина;
	КонецЕсли;
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ИмяФормы + "/ТекущиеДанные", "");
	Если НастройкиФормы = Неопределено Или НастройкиФормы.Получить("ПоказыватьУдаленные") = Неопределено Тогда
		Элементы.ПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
		УстановитьОтбор();
	КонецЕсли;
	
	// Видимость команды "Политики доступа".
	Если Элементы.Найти("ФормаПолитикиДоступа") <> Неопределено Тогда
		ОтключенныеРазрезы = ДокументооборотПраваДоступаПовтИсп.ОтключенныеРазрезыДоступа(Ложь);
		Если ОтключенныеРазрезы.Найти(ПланыВидовХарактеристик.ВидыДоступа.Организации) <> Неопределено Тогда
			Элементы.ФормаПолитикиДоступа.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЗаписатьОсновнойБанковскийСчет"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Владелец = Объект.Ссылка Тогда 
		Объект.ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
		Элементы.БанковскийСчетЗадан.Видимость = Истина;
		Элементы.БанковскийСчетНеЗадан.Видимость = Ложь;
		Записать();
	КонецЕсли;
	
	Если ИмяСобытия = "СозданБанковскийСчет"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Владелец = Объект.Ссылка Тогда 
		КоличествоБанковскихСчетов = ПолучитьКоличествоСчетов(Объект.Ссылка, ПоказыватьУдаленные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ОбновитьИнтерфейс = ТекущийОбъект.ЭтоНовый() И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", ТекущийОбъект.ЭтоНовый());
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ИндексНумерации = СокрЛП(ИндексНумерации);
	Если ИндексНумерации <> ИндексНумерацииПриОткрытии Тогда 
		Если ЗначениеЗаполнено(ИндексНумерации) Тогда 
			РегистрыСведений.ИндексыНумерации.ЗаписатьИндексНумерации(Объект.Ссылка, ИндексНумерации);
		Иначе 
			РегистрыСведений.ИндексыНумерации.УдалитьИндексНумерации(Объект.Ссылка);
		КонецЕсли;
		
		ИндексНумерацииПриОткрытии = ИндексНумерации;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	КонецЕсли;
	
	КоличествоБанковскихСчетов = ПолучитьКоличествоСчетов(Объект.Ссылка, ПоказыватьУдаленные);
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЮрФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора основного счета необходимо записать организацию'; en = 'Save the company to choose the main bank account'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксПриИзменении(Элемент)
	
	Если СтрНайти(Объект.Префикс, "-") > 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя в префиксе организации использовать символ ""-"".'; en = 'Use of symbol ""-"" in company prefix is not allowed.'"));
		Объект.Префикс = СтрЗаменить(Объект.Префикс, "-", "");
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБанковскиеСчета

&НаКлиенте
Процедура БанковскиеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОписаниеОповещенияОтветаНаВопрос = Новый ОписаниеОповещения(
		"СоздатьБанковскийСчетПродолжение",
		ЭтотОбъект,
		Новый Структура("Копирование", Копирование));
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(ОписаниеОповещенияОтветаНаВопрос, 
			НСтр("ru = 'Данные еще не записаны.
                  |Создание ""Банковского счета"" возможно только после записи данных. 
                  |Данные будут записаны.';
                  |en = 'The data have not yet been saved. 
                  |Adding ""Bank account"" is possible only after the data is saved. 
                  |Data will be saved.'"),
			РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОтветаНаВопрос, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийСчетПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.ОК И Не Записать() Тогда 
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	Если Параметры.Копирование Тогда 
		СтруктураПараметров = Новый Структура("ЗначениеКопирования", Элементы.БанковскиеСчета.ТекущаяСтрока);
	Иначе 
		СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец", Объект.Ссылка));
	КонецЕсли;
	
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтветственныеЛицаОрганизаций

&НаКлиенте
Процедура ОтветственныеЛицаОрганизацийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОписаниеОповещенияОтветаНаВопрос = Новый ОписаниеОповещения(
		"СоздатьОтветственноеЛицоПродолжение",
		ЭтотОбъект,
		Новый Структура("Копирование", Копирование));
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(ОписаниеОповещенияОтветаНаВопрос, 
			НСтр("ru = 'Данные еще не записаны.
                  |Создание ""Ответственного лица"" возможно только после записи данных. 
                  |Данные будут записаны.';
                  |en = 'The data have not yet been saved. 
                  |Adding ""Responsible person"" is possible only after the data is saved. 
                  |Data will be saved.'"),
			РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОтветаНаВопрос, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтветственноеЛицоПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.ОК И Не Записать() Тогда 
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	Если Параметры.Копирование Тогда 
		СтруктураПараметров = Новый Структура("ЗначениеКопирования", Элементы.ОтветственныеЛицаОрганизаций.ТекущаяСтрока);
	Иначе 
		СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("Организация", Объект.Ссылка));
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаЗаписи", СтруктураПараметров, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СделатьОсновнымСчетом(Команда)
	
	ОсновнойБанковскийСчет = Элементы.БанковскиеСчета.ТекущаяСтрока;
	
	Если ОсновнойБанковскийСчет = Неопределено 
		Или ОсновнойБанковскийСчет = Объект.ОсновнойБанковскийСчет Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ОсновнойБанковскийСчет = Элементы.БанковскиеСчета.ТекущаяСтрока;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	ПоказыватьУдаленные = Не ПоказыватьУдаленные;
	Элементы.ПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийСчет(Команда)
	
	ОписаниеОповещенияОтветаНаВопрос = Новый ОписаниеОповещения(
		"СоздатьБанковскийСчетПродолжение",
		ЭтотОбъект,
		Новый Структура("Копирование", Ложь));
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(ОписаниеОповещенияОтветаНаВопрос, 
			НСтр("ru = 'Данные еще не записаны.
                  |Создание ""Банковского счета"" возможно только после записи данных. 
                  |Данные будут записаны.';
                  |en = 'The data have not yet been saved. 
                  |Adding ""Bank account"" is possible only after the data is saved. 
                  |Data will be saved.'"),
			РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОтветаНаВопрос, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтбор()
	
	Если Не ПоказыватьУдаленные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			БанковскиеСчета, "ПометкаУдаления", Ложь,
			ВидСравненияКомпоновкиДанных.Равно, , Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(БанковскиеСчета, "ПометкаУдаления");
	КонецЕсли;
	
	КоличествоБанковскихСчетов = ПолучитьКоличествоСчетов(Объект.Ссылка, ПоказыватьУдаленные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоСчетов(Организация, ПоказыватьУдаленные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ БанковскиеСчета.Ссылка) КАК КоличествоСчетов
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Организация";
		
	Если Не ПоказыватьУдаленные Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ БанковскиеСчета.ПометкаУдаления";
	КонецЕсли;
	
	КоличествоБанковскихСчетов = 0;
	Запрос.Параметры.Вставить("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		КоличествоБанковскихСчетов = Выборка.КоличествоСчетов;
	КонецЦикла;
	
	Возврат КоличествоБанковскихСчетов;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель") Тогда
		Элементы.ГруппаЮрФизЛицо.ТекущаяСтраница = Элементы.ГруппаКакИП;
	Иначе
		Элементы.ГруппаЮрФизЛицо.ТекущаяСтраница = Элементы.ГруппаКакЮрЛицо;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти
