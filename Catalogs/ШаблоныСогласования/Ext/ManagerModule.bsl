#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру полей шаблона процесса
//
// Возвращаемое значение:
//   Структура
//     Наименование
//     Родитель
//     Ответственный
//     Комментарий
//     ДобавлятьНаименованиеПредмета
//     НаименованиеБизнесПроцесса
//     Описание
//     Важность
//     Автор
//     Предметы
//     РабочаяГруппа
//     ВариантСогласования
//     ПодписыватьЭП
//     Исполнители
//     НастройкиШаблона
//     РазныеСроки
//
Функция ПолучитьСтруктуруШаблонаСогласования() Экспорт
	
	ПараметрыПроцесса = Новый Структура;
	ПараметрыПроцесса.Вставить("Наименование");
	ПараметрыПроцесса.Вставить("Родитель");
	ПараметрыПроцесса.Вставить("Ответственный");
	ПараметрыПроцесса.Вставить("Комментарий");
	ПараметрыПроцесса.Вставить("ДобавлятьНаименованиеПредмета");
	ПараметрыПроцесса.Вставить("НаименованиеБизнесПроцесса");
	ПараметрыПроцесса.Вставить("Описание");
	ПараметрыПроцесса.Вставить("Важность");
	ПараметрыПроцесса.Вставить("Автор");
	ПараметрыПроцесса.Вставить("ШаблонВКомплексномПроцессе");
	ПараметрыПроцесса.Вставить("ВладелецШаблона");
	
	Предметы = Новый ТаблицаЗначений;
	Предметы.Колонки.Добавить("РольПредмета");
	Предметы.Колонки.Добавить("ИмяПредмета");
	Предметы.Колонки.Добавить("ТочкаМаршрута");
	Предметы.Колонки.Добавить("ИмяПредметаОснование");
	Предметы.Колонки.Добавить("ШаблонОснование");
	ПараметрыПроцесса.Вставить("Предметы", Предметы);
	
	РабочаяГруппаШаблона = Новый ТаблицаЗначений;
	РабочаяГруппаШаблона.Колонки.Добавить("Участник");
	ПараметрыПроцесса.Вставить("РабочаяГруппа", РабочаяГруппаШаблона);
	
	НастройкиШаблона = Новый ТаблицаЗначений;
	НастройкиШаблона.Колонки.Добавить("ВидДокумента");
	Если Константы.ИспользоватьУчетПоОрганизациям.Получить() Тогда
		НастройкиШаблона.Колонки.Добавить("Организация");
	КонецЕсли;
	НастройкиШаблона.Колонки.Добавить("Условие");
	НастройкиШаблона.Колонки.Добавить("ЗапрещеноИзменение");
	НастройкиШаблона.Колонки.Добавить("ИнтерактивныйЗапуск");
	НастройкиШаблона.Колонки.Добавить("ВидИнтерактивногоСобытия");
	ПараметрыПроцесса.Вставить("НастройкиШаблона", НастройкиШаблона);
	
	ТаблицаИсполнителей = Новый ТаблицаЗначений;
	ТаблицаИсполнителей.Колонки.Добавить("Исполнитель");
	ТаблицаИсполнителей.Колонки.Добавить("ПорядокСогласования");
	ТаблицаИсполнителей.Колонки.Добавить("ВариантУстановкиСрокаИсполнения");
	
	ТаблицаИсполнителей.Колонки.Добавить("СрокИсполненияДни");
	ТаблицаИсполнителей.Колонки.Добавить("СрокИсполненияЧасы");
	ТаблицаИсполнителей.Колонки.Добавить("СрокИсполненияМинуты");
	
	ПараметрыПроцесса.Вставить("Исполнители", ТаблицаИсполнителей);
	
	ПараметрыПроцесса.Вставить("СрокОбработкиРезультатовДни");
	ПараметрыПроцесса.Вставить("СрокОбработкиРезультатовЧасы");
	ПараметрыПроцесса.Вставить("СрокОбработкиРезультатовМинуты");
	
	ПараметрыПроцесса.Вставить("ВариантСогласования");
	
	ПараметрыПроцесса.Вставить("КоличествоИтераций");
	
	ПараметрыПроцесса.Вставить("ПодписыватьЭП");
	
	Возврат ПараметрыПроцесса;
	
КонецФункции

// Создает шаблон процесса.
//
// Параметры:
//   СтруктураШаблона - Структура - структура полей шаблона исполнение.
//
// Возвращаемый параметр:
//   СправочникСсылка.ШаблоныСогласования
//
Функция СоздатьШаблонСогласования(СтруктураШаблона) Экспорт
	
	НовыйШаблон = СоздатьЭлемент();
	ШаблоныБизнесПроцессов.ЗаполнитьШаблон(НовыйШаблон, СтруктураШаблона);
	
	НовыйШаблон.ВариантУстановкиСрокаОбработкиРезультатов = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
	
	// Заполнение таблицы Исполнителей
	
	Для Каждого СтрокаИсполнителя Из СтруктураШаблона.Исполнители Цикл
		
		НоваяСтрокаИсполнителя = НовыйШаблон.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаИсполнителя, СтрокаИсполнителя);
		
		НоваяСтрокаИсполнителя.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
	КонецЦикла;
	
	НовыйШаблон.Записать();
	
	НастройкиШаблона = 
	СтруктураШаблона.НастройкиШаблона.Скопировать();
	НастройкиШаблона.Колонки.Добавить("ШаблонБизнесПроцесса");
	НастройкиШаблона.ЗаполнитьЗначения(НовыйШаблон.Ссылка, "ШаблонБизнесПроцесса");
	
	НаборЗаписей = РегистрыСведений.НастройкаШаблоновБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ШаблонБизнесПроцесса.Установить(НовыйШаблон.Ссылка);
	НаборЗаписей.Загрузить(НастройкиШаблона);
	НаборЗаписей.Записать();
		
	Возврат НовыйШаблон.Ссылка;
	
КонецФункции

Функция ИмяПроцесса(ШаблонСсылка) Экспорт
	
	Возврат "Согласование";
	
КонецФункции

Функция СинонимПроцесса(ИмяПроцесса, РеквизитыШаблона) Экспорт
	
	Возврат Метаданные.БизнесПроцессы[ИмяПроцесса].Синоним;
	
КонецФункции

// Заполняет html обзор данными шаблона процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Шаблон - СправочникСсылка.ШаблоныСогласования - ссылка на шаблон
//
Процедура ЗаполнитьОбзорШаблона(HTMLТекст, Шаблон) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,
		"СрокОбработкиРезультатов,
		|СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовМинуты,
		|СрокОбработкиРезультатовЧасы,
		|КоличествоИтераций,
		|ВариантУстановкиСрокаОбработкиРезультатов,
		|ВариантСогласования,
		|Исполнители");
		
	ВариантСогласования = РеквизитыШаблона.ВариантСогласования;
	Исполнители = РеквизитыШаблона.Исполнители.Выгрузить();
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	Если Исполнители.Количество() > 0 Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		СмешанныйВариантИсполнения = 
			ВариантСогласования = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно");
			
		HTMLТекст = HTMLТекст + "<table class=""frame"">";
		
		//Формирование заголовка таблицы
		HTMLТекст = HTMLТекст + "<tr>";
		
		Если СмешанныйВариантИсполнения Тогда
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Шаг'; en = 'Step'"));
			HTMLТекст = HTMLТекст + "</td>";
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'С кем согласовать'; en = 'To be approved by'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок'; en = 'Due date'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		
		НомерШага = 1;
		
		//Заполнение таблицы исполнителями
		Для Каждого Исполнитель Из Исполнители Цикл
			HTMLТекст = HTMLТекст + "<tr>";
			
			Если СмешанныйВариантИсполнения Тогда
				
				Если Исполнитель.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего
					И Исполнитель <> Исполнители[0] Тогда
					
					НомерШага = НомерШага + 1;
				КонецЕсли;
				
				HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
				ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, НомерШага, "");
				HTMLТекст = HTMLТекст + "</td>";
			КонецЕсли;
			
			HTMLТекст = HTMLТекст + "<td class=""frame"">";
			Если ЗначениеЗаполнено(Исполнитель.Исполнитель) Тогда
				ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель.Исполнитель, "");
			КонецЕсли;
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
				Исполнитель.СрокИсполнения, Исполнитель.СрокИсполненияДни, 
				Исполнитель.СрокИсполненияЧасы, Исполнитель.СрокИсполненияМинуты, 
				ИспользоватьДатуИВремяВСрокахЗадач, Исполнитель.ВариантУстановкиСрокаИсполнения);
				
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, "");
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "</tr>";
		КонецЦикла;
		
		
		HTMLТекст = HTMLТекст + "</table>";
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "<br>";
	
	Если ЗначениеЗаполнено(ВариантСогласования) Тогда
		ПредставлениеРеквизитаНаправлять = НСтр("ru = 'Порядок согласования: %1'; en = 'Approval order: %1'");
		ПредставлениеРеквизитаНаправлять = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ПредставлениеРеквизитаНаправлять,
			Строка(ВариантСогласования));
			
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеРеквизитаНаправлять, "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШаблона.СрокОбработкиРезультатов) 
		Или ЗначениеЗаполнено(РеквизитыШаблона.СрокОбработкиРезультатовДни) 
		Или ЗначениеЗаполнено(РеквизитыШаблона.СрокОбработкиРезультатовМинуты) 
		Или ЗначениеЗаполнено(РеквизитыШаблона.СрокОбработкиРезультатовЧасы) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок обработки результатов:'; en = 'Result processing due date:'"));
		
		ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
			РеквизитыШаблона.СрокОбработкиРезультатов, 
			РеквизитыШаблона.СрокОбработкиРезультатовДни, 
			РеквизитыШаблона.СрокОбработкиРезультатовЧасы, 
			РеквизитыШаблона.СрокОбработкиРезультатовМинуты, 
			ИспользоватьДатуИВремяВСрокахЗадач, 
			РеквизитыШаблона.ВариантУстановкиСрокаОбработкиРезультатов);
		
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, "");
		
	КонецЕсли;
	
	ДлительностьПроцесса = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(Шаблон);
	
	Если ЗначениеЗаполнено(ДлительностьПроцесса.СрокИсполненияПроцессаДни)
		Или ЗначениеЗаполнено(ДлительностьПроцесса.СрокИсполненияПроцессаЧасы)
		Или ЗначениеЗаполнено(ДлительностьПроцесса.СрокИсполненияПроцессаМинуты) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		ПредставлениеДлительности = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеДлительности(
			ДлительностьПроцесса.СрокИсполненияПроцессаДни,
			ДлительностьПроцесса.СрокИсполненияПроцессаЧасы,
			ДлительностьПроцесса.СрокИсполненияПроцессаМинуты);
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок процесса:'; en = 'Process due date:'"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеДлительности, "");
		
		Если РеквизитыШаблона.КоличествоИтераций <> 0 Тогда
			
			HTMLТекст = HTMLТекст + " (";
			
			ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Кол. циклов:'; en = 'Cycle count:'"));
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, 
				Формат(РеквизитыШаблона.КоличествоИтераций, "ЧЦ=2"), "");
			
			HTMLТекст = HTMLТекст + ")";
			
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Ответственный,
		|Ссылка,
		|ЭтоГруппа,
		|ШаблонВКомплексномПроцессе,
		|ВладелецШаблона,
		|КомплексныйПроцесс";
	
КонецФункции

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	ШаблоныБизнесПроцессов.ЗаполнитьДескрипторыОбъекта(
		ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Возвращает участников для проверки прав на предметы.
//
// Параметры:
//  Шаблон - СправочникОбъект.ШаблоныСогласования, СправочникСсылка.ШаблоныСогласования - шаблон
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Участник
//   * Изменение
//
Функция УчастникиДляПроверкиПрав(Шаблон) Экспорт
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковСогласованияВТаблицу(ТаблицаУчастников, Шаблон);
	
	Возврат ТаблицаУчастников;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПоддержкаКомплексныхПроцессов

// Показывает, может ли процесс по данному шаблону использоваться в качестве части комплексного процесса
Функция МожетИспользоватьсяВКомплексномПроцессе() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает реквизиты, которые используются для определения значений
// вычисляемых полей комплексного процесса.
//
// Параметры:
//  Процесс - СправочникСсылка.ШаблоныСогласования - ссылка на шаблон
//
// Возвращаемое значение:
//  Структура
//
Функция РеквизитыЭтапаДляВычисляемыхПолей(Процесс) Экспорт
	
	РеквизитыСтрокой = 
		"НаименованиеБизнесПроцесса,
		|ИсходныйШаблон,
		|Описание,
		|Важность,
		|Исполнители,
		|СрокОтложенногоСтарта,
		|ВариантСогласования";
	
	РеквизитыПроцесса = ОбщегоНазначенияДокументооборот.
		ЗначенияРеквизитовОбъектаВПривилегированномРежиме(Процесс, РеквизитыСтрокой);
		
	РеквизитыПроцесса.Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
	
	Возврат РеквизитыПроцесса;
	
КонецФункции

// Получает строковое представление исполнителей шаблона процесса
//
// Параметры:
//  РеквизитыПроцесса - Струкута - см. РеквизитыЭтапаДляВычисляемыхПолей
//
// Возаращаемое значение:
//  Строка
//
Функция ПолучитьСтроковоеПредставлениеИсполнителей(РеквизитыПроцесса) Экспорт
	
	Результат = "";
	
	Исполнители = РеквизитыПроцесса.Исполнители;
	
	Разделитель = "";
	Для Каждого СтрИсполнитель Из Исполнители Цикл
		Результат = Результат
			+ Разделитель
			+ СтрИсполнитель.Исполнитель;
		Разделитель = ", ";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область КэшДанныхДействий

// Возвращает выбору данных действий.
//
// Параметры:
//  ПараметрыДействий - ТаблицаЗначений - параметры действий, соответствует табличной части
//                                        ПараметрыДействий схемы процесса.
//
// Возвращаемое значение:
//  ВыборкаДанных
//
Функция ВыборкаДанныхДействий(ПараметрыДействий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыДействий.ШаблонПроцесса
		|ПОМЕСТИТЬ ПараметрыДействий
		|ИЗ
		|	&ПараметрыДействий КАК ПараметрыДействий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШаблоныСогласования.Ссылка,
		|	ШаблоныСогласования.Наименование,
		|	ШаблоныСогласования.Исполнители,
		|	ШаблоныСогласования.Автор,
		|	ШаблоныСогласования.ВариантУстановкиСрокаОбработкиРезультатов,
		|	ШаблоныСогласования.СрокОбработкиРезультатов,
		|	ШаблоныСогласования.СрокОбработкиРезультатовДни,
		|	ШаблоныСогласования.СрокОбработкиРезультатовЧасы,
		|	ШаблоныСогласования.СрокОбработкиРезультатовМинуты,
		|	ШаблоныСогласования.КоличествоИтераций,
		|	ШаблоныСогласования.СрокИсполненияПроцесса
		|ИЗ
		|	ПараметрыДействий КАК ПараметрыДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныСогласования КАК ШаблоныСогласования
		|		ПО ПараметрыДействий.ШаблонПроцесса = ШаблоныСогласования.Ссылка";
		
	Запрос.УстановитьПараметр("ПараметрыДействий", ПараметрыДействий);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Возвращает данные процесса, являющегося действием комплексного процесса.
//
// Параметры:
//  Объект - СправочникСсылка.ШаблоныСогласования, ВыборкаДанных
//
// Возвращаемое значение:
//  Структура - см. функцию РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия
//
Функция ДанныеДействия(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПроцесса = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия();
	
	ТипОбъект = ТипЗнч(Объект);
	
	РеквизитыОбъектаСтрокой = "
		|Ссылка,
		|Наименование,
		|Исполнители,
		|Автор,
		|ВариантУстановкиСрокаОбработкиРезультатов,
		|СрокОбработкиРезультатов,
		|СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовЧасы,
		|СрокОбработкиРезультатовМинуты,
		|КоличествоИтераций,
		|СрокИсполненияПроцесса";
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипОбъект) Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, РеквизитыОбъектаСтрокой);
		РеквизитыОбъекта.Исполнители = РеквизитыОбъекта.Исполнители.Выгрузить();
	ИначеЕсли ТипОбъект = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		РеквизитыОбъекта = Новый Структура(РеквизитыОбъектаСтрокой);
		ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект,, "Исполнители");
		РеквизитыОбъекта.Исполнители = Объект.Исполнители.Выгрузить();
	Иначе
		РеквизитыОбъекта = Объект;
	КонецЕсли;
	
	ДанныеПроцесса.Описание = НСтр("ru = 'Согласование: '; en = 'Approval: '") + РеквизитыОбъекта.Наименование;
	
	ДанныеПроцесса.СрокИсполненияПроцесса = РеквизитыОбъекта.СрокИсполненияПроцесса;
	
	ДлительностьИсполнения = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(РеквизитыОбъекта);
	ЗаполнитьЗначенияСвойств(ДанныеПроцесса, ДлительностьИсполнения);
	
	МассивИсполнителей = Новый Массив;
	Для Каждого СтрокаИсполнитель Из РеквизитыОбъекта.Исполнители Цикл
		РаботаСКомплекснымиБизнесПроцессамиСервер.ДобавитьИсполнителяПроцессаВМассив(
			МассивИсполнителей, СтрокаИсполнитель.Исполнитель);
	КонецЦикла;
	
	ДанныеПроцесса.Исполнители = 
		РаботаСКомплекснымиБизнесПроцессамиСервер.ИсполнителиСтрокой(МассивИсполнителей);
	
	Возврат ДанныеПроцесса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс_Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяФорма = "Справочник.ШаблоныСогласования.Форма.ФормаЭлемента";
		
		Если Не Параметры.Свойство("ВладелецШаблона") И Параметры.Свойство("Ключ") Тогда
			ВладелецШаблона = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Параметры.Ключ, "ВладелецШаблона");
				
			Если (ТипЗнч(ВладелецШаблона) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
					Или ТипЗнч(ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")) Тогда
				
				Параметры.Вставить("ВладелецШаблона", ВладелецШаблона);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидФормы = "ФормаВыбора" Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ОбщаяФорма.ВыборШаблонаБизнесПроцесса";
		Параметры.Вставить("ТипШаблона", "Согласование");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
