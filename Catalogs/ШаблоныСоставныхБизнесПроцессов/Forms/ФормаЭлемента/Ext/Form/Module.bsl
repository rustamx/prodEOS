
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	УстановитьДоступностьЭлементовПоПравуДоступа();
	
	// Инициализация формы механизмом комплексных процессов 
	Если Объект.Ссылка.Пустая() Тогда
		ЗаголовокФормы = НСтр("ru = 'Составной процесс (Создание)'; en = 'Compount process (create)'");
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда 
			Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
	Иначе
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Составной процесс ""%1""'; en = 'Compound process ""%1""'"), 
			Объект.НаименованиеБизнесПроцесса);
	КонецЕсли;
		
	// Рабочие группы
	РаботаСРабочимиГруппами.ШаблонПриСозданииНаСервере(ЭтаФорма);

	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеПредметовШаблона(Объект);

	ДоступныеРолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	ДоступныеРолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);

	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтаФорма);
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.КарточкаШаблонаБизнесПроцессаПриСозданииНаСервере(
		ЭтаФорма, 
		ЗаголовокФормы);
		
	Если Не ЗначениеЗаполнено(Объект.ТипШаблона) И Параметры.Свойство("ТипШаблона") Тогда
		Объект.ТипШаблона = Параметры.ТипШаблона;
	КонецЕсли;
	
	ЗаполнитьТипыШаблона();
	
	ЗаполнитьПредставлениеШаблонов();
	
	// Учет переносов сроков выполнения
	ПереносСроковВыполненияЗадач.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Отложенный старт.
	СтартПроцессовСервер.КарточкаШаблонаПриСозданииНаСервере(ЭтаФорма);
	
	// Сроки выполнения
	УстановитьУсловноеОформлениеИстекшихСроков();
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	Параметры.Свойство("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчетаДляРасчетаСроков);
	
	Элементы.СрокИсполненияПредставление.Ширина =
		СрокиИсполненияПроцессов.ШиринаПоляСрокИсполненияДействияСоставногоПроцесса(ЭтаФорма);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
			СтрокаЗаменыДляВсплывающейПодсказки = НСтр("ru = '(по графику работ)'; en = '(according to schedule)'");
			
		Элементы.СрокИсполненияПредставление.Подсказка = СтрЗаменить(
			Элементы.СрокИсполненияПредставление.Подсказка,
			СтрокаЗаменыДляВсплывающейПодсказки, "");
		
		Элементы.СрокИсполненияПроцессаПредставление.Подсказка = СтрЗаменить(
			Элементы.СрокИсполненияПроцессаПредставление.Подсказка,
			СтрокаЗаменыДляВсплывающейПодсказки, "");
		
	КонецЕсли;
	
	ОбновитьСрокиИсполненияНаСервере();
	
	// Обработчик подсистемы "Свойства"
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Объект.Ссылка, ПустойБизнесПроцесс);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", ПустойБизнесПроцесс);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если ЗначениеЗаполнено(Объект.ТипШаблона) Тогда 
			ЗаполнитьТаблицуШаблонов();
		КонецЕсли;
	КонецЕсли;
	
	ИсходныйТипШаблона = Объект.ТипШаблона;
	
	// Заголовки команд
	РаботаСБизнесПроцессамиВызовСервера.УстановитьЗаголовкиКомандШаблонаБизнесПроцесса(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.СтандартныеКомандыФормы);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// Настроим отображение группы доступности шаблона.
	ШаблоныБизнесПроцессов.НастроитьОбластьДоступностиШаблонов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ШаблонПроцесса" Тогда
		Для Каждого Стр Из Объект.Шаблоны Цикл
			Если Стр.Шаблон = Параметр Тогда
				ОбновитьСрокиИсполненияОтложенно(Стр.Реквизит);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Сроки выполнения
	СрокиИсполненияПроцессовКлиент.ОбработкаОповещенияПослеПереносаСрока(
		ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьПредставлениеШаблонов();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы.
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
			
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	
	// СтандартныеПодсистемы.Свойства
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Объект.Ссылка, ПустойБизнесПроцесс);
	ПустойБизнесПроцессОбъект =
		РеквизитФормыВЗначение("ПустойБизнесПроцесс", Тип("БизнесПроцессОбъект.КомплексныйПроцесс"));
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ПустойБизнесПроцессОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	ПрочитатьДоступностьШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Отложенный старт.
	СтартПроцессовКлиент.КарточкаШаблонаПередЗаписью(ЭтаФорма);
	
	ЕстьЗаполненныйШаблон = Ложь;
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		Для Каждого СтрокаТаблицы Из Объект.Шаблоны Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Шаблон) Тогда
				ЕстьЗаполненныйШаблон = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если НЕ ЕстьЗаполненныйШаблон И Объект.ШаблонВКомплексномПроцессе Тогда
		Текст = НСтр("ru = 'Не указано ни одного шаблона.'; en = 'Not a single template is specified.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.Шаблоны",, Отказ);
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ФормаНастройкиДействияПередЗаписью(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("СрокиДействий",
		СрокиИсполненияПроцессов.СрокиДействийПроцесса(Объект.Шаблоны, "Реквизит"));
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(
				Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДоступностьШаблона(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СрокиДействий = ПараметрыЗаписи.СрокиДействий;
	
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 ""%2""'; en = '%1 ""%2""'"), 
			Объект.Ссылка.Метаданные().Синоним,
			Объект.НаименованиеБизнесПроцесса);
	КонецЕсли;
			
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	ЗаполнитьПредставлениеШаблонов();
	
	// Рабочая группа
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы.
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
			
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеПредметовШаблона(Объект);
	
	СрокиИсполненияПроцессов.ЗаполнитьСрокиВТаблицеДействий(СрокиДействий, Объект.Шаблоны, "Реквизит");
	ОбновитьПризнакиИстекшихСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ОповеститьПослеЗаписиНастройкиДействия(ЭтаФорма);
	КонецЕсли;
	
	ШаблоныБизнесПроцессовКлиент.ПоказатьОповещениеПослеЗаписиШаблона(ЭтаФорма);
	
	Оповестить("Запись_ШаблонПроцесса", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	СтруктураРеквизитов = Новый Структура;
	Для Каждого Строка Из Объект.Шаблоны Цикл
		СтруктураРеквизитов.Вставить(Строка.Реквизит, Строка.Шаблон);
	КонецЦикла;	
	
	Попытка
		Ошибки = БизнесПроцессы[Объект.ТипШаблона].ПроверитьШаблон(СтруктураРеквизитов);
	Исключение
		Возврат;	
	КонецПопытки;	
	
	Для Каждого Ошибка Из Ошибки Цикл
		Если ПустаяСтрока(Ошибка.Значение) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка.Представление,,"Объект.Шаблоны",,Отказ);
		Иначе	
			НайденныеСтроки = Объект.Шаблоны.НайтиСтроки(Новый Структура("Реквизит", Ошибка.Значение));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка.Представление,,
					"Объект.Шаблоны["+(НайденныеСтроки[0].НомерСтроки-1)+"].Шаблон",,Отказ);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Шаблоны

&НаКлиенте
Процедура ДекорацияНедоступенДляЗапускаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроверитьДоступностьШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРучнойЗапускОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	ПоказатьНезаполненныеПоляНеобходимыеДляСтарта();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШаблонПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Шаблоны.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСрокИсполненияШаблона(ТекущиеДанные);
	
	ОбновитьСрокиИсполненияОтложенно(РеквизитСИзмененнымСроком);
	
	ОтключитьДоступностьШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШаблонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Шаблоны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ШаблоныШаблонНачалоВыбораПродолжение",
		ЭтотОбъект);
	СписокТипов = ПолучитьТипы(ТекущиеДанные.Реквизит);
	Если СписокТипов.Количество() = 0 Тогда 
		Возврат;
	ИначеЕсли СписокТипов.Количество() = 1 Тогда 
		ВыбранныйТип = СписокТипов[0];
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВыбранныйТип);
	Иначе	
		СписокТипов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выбор типа данных");
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШаблонНачалоВыбораПродолжение(ВыбранныйТип, Параметры) Экспорт
	
	Если ВыбранныйТип = Неопределено Тогда 	
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.Шаблоны.ТекущиеДанные;
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", ТекущиеДанные.Шаблон);
	ОткрытьФорму("Справочник." + ВыбранныйТип.Значение + ".ФормаВыбора", ПараметрыФормы, Элементы.Шаблоны);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Шаблоны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Шаблон = ВыбранноеЗначение;
	
	ОбновитьСрокиИсполненияОтложенно(ТекущиеДанные.Реквизит);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗаписатьИЗакрыть(Команда, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СрокиИсполненияПроцессов

// Заполняет представление сроков в карточке процесса
//
&НаСервере
Процедура ОбновитьСрокиИсполненияНаСервере()
	
	РассчитатьОтносительныйСрок = Ложь;
	РассчитьтатьТочныйСрок = Ложь;
	
	Смещение = СрокиИсполненияПроцессовКлиентСерверКОРП.СмещенияДатыОтсчетаВКарточке(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.ВладелецШаблона)
		Или ЭтоДействиеШаблонаКомплексногоПроцесса
		Или (ЭтоДействиеКомплексногоПроцессаПоШаблону И Не КомплексныйПроцессСтартован) Тогда
		
		РассчитатьОтносительныйСрок = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков)
		И (Не КомплексныйПроцессСтартован
			Или ЗначениеЗаполнено(РеквизитСИзмененнымСроком)) Тогда
		
		РассчитьтатьТочныйСрок = Истина;
	КонецЕсли;
	
	Если РассчитатьОтносительныйСрок Тогда
		СрокиИсполненияПроцессов.ЗаполнитьДлительностьШаблоновСоставногоПроцесса(Объект.Шаблоны);
		ДлительностьИсполнения = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(Объект, Смещение);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДлительностьИсполнения);
	КонецЕсли;
	
	Если РассчитьтатьТочныйСрок Тогда
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчетаДляРасчетаСроков;
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитСИзмененнымСроком;
		ПараметрыДляРасчетаСроков.Смещение = Смещение;
		
		СрокиИсполненияПроцессов.РассчитатьСрокиСоставногоПроцесса(
			Объект, ПараметрыДляРасчетаСроков);
	КонецЕсли;
	
	РеквизитСИзмененнымСроком = "";
	
	ОбновитьПризнакиИстекшихСроков();
	ЗаполнитьПредставлениеСроковИсполнения();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполненияНаСервере
&НаКлиенте
Процедура ОбновитьСрокиИсполнения()
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполнения
&НаКлиенте
Процедура ОбновитьСрокиИсполненияОтложенно(Реквизит = "" ) Экспорт
	
	РеквизитСИзмененнымСроком = Реквизит;
	
	ПодключитьОбработчикОжидания("ОбновитьСрокиИсполнения", 0.2, Истина);
	
КонецПроцедуры

// Заполняет представление сроков исполнения
//
&НаСервере
Процедура ЗаполнитьПредставлениеСроковИсполнения()
	
	ДобавитьВПредставлениеТочныйСрок = ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков);
	
	ДобавитьВПредставлениеОтносительныйСрок = ЭтоДействиеКомплексногоПроцессаПоШаблону
		Или ЭтоДействиеШаблонаКомплексногоПроцесса
		Или Не ДобавитьВПредставлениеТочныйСрок;
	
	ФорматДаты = СрокиИсполненияПроцессовКлиентСервер.ФорматДатыСроковПроцессовИЗадач(
		ИспользоватьДатуИВремяВСрокахЗадач);
	
	Для Каждого Стр Из Объект.Шаблоны Цикл
		
		Дата = Дата(1,1,1);
		Если ДобавитьВПредставлениеТочныйСрок
			И ЗначениеЗаполнено(Стр.СрокИсполненияПроцесса) Тогда
			
			Дата = Стр.СрокИсполненияПроцесса;
		КонецЕсли;
		
		Дни = 0;
		Часы = 0;
		Минуты = 0;
		Если ДобавитьВПредставлениеОтносительныйСрок
			И (ЗначениеЗаполнено(Стр.СрокИсполненияПроцессаДни)

				Или ЗначениеЗаполнено(Стр.СрокИсполненияПроцессаЧасы)
				Или ЗначениеЗаполнено(Стр.СрокИсполненияПроцессаМинуты)) Тогда
			
			Дни = Стр.СрокИсполненияПроцессаДни;
			Часы = Стр.СрокИсполненияПроцессаЧасы;
			Минуты = Стр.СрокИсполненияПроцессаМинуты;
		КонецЕсли;
		
		Стр.СрокИсполненияПроцессаПредставление = "";
		Если ЗначениеЗаполнено(Дата) Или Дни <> 0 Или Часы <> 0 Или Минуты <> 0 Тогда
			СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСрокаИсполненияПроцесса(
				Стр.СрокИсполненияПроцессаПредставление,
				Дата, Дни, Часы, Минуты,
				ИспользоватьДатуИВремяВСрокахЗадач);
		КонецЕсли;
		
	КонецЦикла;
	
	Дата = Дата(1,1,1);
	Если ДобавитьВПредставлениеТочныйСрок
		И ЗначениеЗаполнено(Объект.СрокИсполненияПроцесса) Тогда
		
		Дата = Объект.СрокИсполненияПроцесса;
	КонецЕсли;
	
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСрокаИсполненияПроцесса(
		СрокИсполненияПроцессаПредставление,
		Дата,
		СрокИсполненияПроцессаДни,
		СрокИсполненияПроцессаЧасы,
		СрокИсполненияПроцессаМинуты,
		ИспользоватьДатуИВремяВСрокахЗадач);
	
КонецПроцедуры

// Обновляет форму процесса после переноса сроков действий
//
&НаСервере
Процедура ОбновитьФормуПослеПереносаСроковИсполнения() Экспорт
	
	Прочитать();
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// Очищает срок исполнения шаблона.
//
// Параметры:
//  ТекущиеДанные - Строка таблицы Объект.Шаблоны.
//
&НаКлиенте
Процедура ОчиститьСрокИсполненияШаблона(ТекущиеДанные)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Шаблон) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СрокИсполненияПроцесса = Дата(1,1,1);
	ТекущиеДанные.СрокИсполненияПроцессаДни = 0;
	ТекущиеДанные.СрокИсполненияПроцессаЧасы = 0;
	ТекущиеДанные.СрокИсполненияПроцессаМинуты = 0;
	
КонецПроцедуры

// Устанавливает условное оформление истекших сроков.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеИстекшихСроков()
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения действия истек (Шаблоны)'; en = 'Action due date is expired (Templates)'"),
		"Объект.Шаблоны.СрокИсполненияПроцессаИстек",
		"СрокИсполненияПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения процесса истек'; en = 'Process due date is expired'"),
		"СрокИсполненияПроцессаИстек",
		"СрокИсполненияПроцессаПредставление");
	
КонецПроцедуры

// Обновляет признаки истекших сроков в карточке.
//
&НаСервере
Процедура ОбновитьПризнакиИстекшихСроков()
	
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Для Каждого Шаблон Из Объект.Шаблоны Цикл
			Шаблон.СрокИсполненияПроцессаИстек = Ложь;
			Если ЗначениеЗаполнено(Шаблон.СрокИсполненияПроцесса)
				И Шаблон.СрокИсполненияПроцесса < ТекущаяДатаСеанса Тогда
				
				Шаблон.СрокИсполненияПроцессаИстек = Истина;
			КонецЕсли;
		КонецЦикла;
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
			Объект.СрокИсполненияПроцесса, ТекущаяДатаСеанса, СрокИсполненияПроцессаИстек);
	Иначе
		Для Каждого Шаблон Из Объект.Шаблоны Цикл
			Шаблон.СрокИсполненияПроцессаИстек = Ложь;
		КонецЦикла;
		СрокИсполненияПроцессаИстек = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ДоступностьШаблоновПроцессов

// Помещает доступность шаблона процесса в карточку.
//
&НаСервере
Процедура ПрочитатьДоступностьШаблона()
	
	ШаблоныБизнесПроцессов.ПрочитатьДоступностьШаблона(ЭтаФорма);
	
КонецПроцедуры

// Записывает доступность шаблона процесса из карточки.
//
// Параметры:
//  ШаблонОбъект - СправочникОбъект.<ИмяШаблонаПроцесса> - объект шаблона процесса.
//
&НаСервере
Процедура ЗаписатьДоступностьШаблона(ШаблонОбъект)
	
	ШаблоныБизнесПроцессов.ЗаписатьДоступностьШаблонаИзФормы(ШаблонОбъект, ЭтаФорма);
	
КонецПроцедуры

// Проверяет доступность шаблона и помещает результат в реквизиты
// ДоступенРучнойЗапускПоШаблону, ДоступенАвтоматическийЗапускПоШаблону.
//
&НаСервере
Процедура ПроверитьДоступностьШаблона()
	
	ШаблоныБизнесПроцессов.ПроверитьДоступностьШаблона(ЭтаФорма);
	
КонецПроцедуры

// Выводить сообщения пользователю с привязкой к незаполненным полям
// необходимым для старта процессов по шаблону.
//
&НаСервере
Процедура ПоказатьНезаполненныеПоляНеобходимыеДляСтарта()
	
	ШаблонОбъект = ДанныеФормыВЗначение(
		Объект, Тип("СправочникОбъект.ШаблоныСоставныхБизнесПроцессов"));
	
	ОшибкиЗаполнения = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
	
	Если ОшибкиЗаполнения.Найти("Исполнители") <> Неопределено
		Или ОшибкиЗаполнения.Найти("Исполнитель") <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В шаблонах вложенных процессов не заполнены обязательные поля.'; en = 'Required fields are not filled in in the nested process templates.'"),,
			"Объект.Шаблоны");
	Иначе
		
		Для Каждого ОшибкаЗаполнения Из ОшибкиЗаполнения Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ОшибкаЗаполнения,,
				"Объект.Шаблоны");
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Сбрасывает доступность в карточке шаблона процесса.
//
&НаКлиенте
Процедура ОтключитьДоступностьШаблона()
	
	ШаблоныБизнесПроцессовКлиент.ОтключитьДоступностьШаблона(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ТипШаблонаПриИзменении(Элемент)
	
	Если ИсходныйТипШаблона <> Объект.ТипШаблона Тогда 
		ЗаполнитьТаблицуШаблонов();
		ИсходныйТипШаблона = Объект.ТипШаблона;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Автор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Ответственный);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "РАБОЧАЯ ГРУППА"

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ПРЕДМЕТЫ"

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	МультипредметностьКлиент.ПредметыШаблонаПередНачаломДобавления(ЭтаФорма, Объект, Отказ, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтаФорма, Объект, Отказ, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПослеУдаления(Элемент)
	
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьОсновной(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьОсновной(ЭтаФорма, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьВспомогательный(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(ЭтаФорма, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыИзменитьПредмет(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыИзменитьРоль(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ИзменитьРольПредмета(ЭтаФорма, Объект, ВыбраннаяСтрока, Ложь, Истина);
		МультипредметностьКлиент.ПредметыШаблонаПриАктивизацииСтроки(ЭтаФорма, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьПредставлениеШаблонов()
	
	Если ЗначениеЗаполнено(Объект.ТипШаблона) Тогда 
		МДБизнесПроцесс = Метаданные.БизнесПроцессы.Найти(Объект.ТипШаблона);
		Если МДБизнесПроцесс <> Неопределено Тогда 
			Для Каждого Строка Из Объект.Шаблоны Цикл
				МДРеквизит = МДБизнесПроцесс.Реквизиты.Найти(Строка.Реквизит);
				Если МДРеквизит <> Неопределено Тогда 
					Строка.ПредставлениеРеквизита = ?(ПустаяСтрока(МДРеквизит.Синоним), МДРеквизит.Имя, МДРеквизит.Синоним);
				Иначе
					Строка.ПредставлениеРеквизита =  Строка.Реквизит;
				КонецЕсли;	
			КонецЦикла;	
		Иначе	
			Для Каждого Строка Из Объект.Шаблоны Цикл
				Строка.ПредставлениеРеквизита = Строка.Реквизит;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТаблицуШаблонов()
	
	Объект.Шаблоны.Очистить();
	МДБизнесПроцесс = Метаданные.БизнесПроцессы.Найти(Объект.ТипШаблона);
	Если МДБизнесПроцесс = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	МДРеквизитовПроцесса = Новый Соответствие;
	
	ТипШаблоныСогласования = Тип("СправочникСсылка.ШаблоныСогласования");
	ТипШаблоныУтверждения = Тип("СправочникСсылка.ШаблоныУтверждения");
	ТипШаблоныРегистрации = Тип("СправочникСсылка.ШаблоныРегистрации");
	ТипШаблоныРассмотрения = Тип("СправочникСсылка.ШаблоныРассмотрения");
	ТипШаблоныИсполнения = Тип("СправочникСсылка.ШаблоныИсполнения");
	ТипШаблоныОзнакомления = Тип("СправочникСсылка.ШаблоныОзнакомления");
	ТипШаблоныПоручения = Тип("СправочникСсылка.ШаблоныПоручения");
	
	МДРеквизиты = МДБизнесПроцесс.Реквизиты;
	Для Каждого МДРеквизит Из МДРеквизиты Цикл
		Если МДРеквизит.Тип.СодержитТип(ТипШаблоныСогласования) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныСогласования, МДРеквизит);
		ИначеЕсли МДРеквизит.Тип.СодержитТип(ТипШаблоныУтверждения) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныУтверждения, МДРеквизит);
		ИначеЕсли МДРеквизит.Тип.СодержитТип(ТипШаблоныРегистрации) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныРегистрации, МДРеквизит);
		ИначеЕсли МДРеквизит.Тип.СодержитТип(ТипШаблоныРассмотрения) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныРассмотрения, МДРеквизит);
		ИначеЕсли МДРеквизит.Тип.СодержитТип(ТипШаблоныИсполнения) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныИсполнения, МДРеквизит);
		ИначеЕсли МДРеквизит.Тип.СодержитТип(ТипШаблоныОзнакомления) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныОзнакомления, МДРеквизит);
		ИначеЕсли МДРеквизит.Тип.СодержитТип(ТипШаблоныПоручения) Тогда
			МДРеквизитовПроцесса.Вставить(ТипШаблоныПоручения, МДРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныСогласования);
	ДобавитьШаблон(МДРеквизит);
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныУтверждения);
	ДобавитьШаблон(МДРеквизит);
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныРегистрации);
	ДобавитьШаблон(МДРеквизит);
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныРассмотрения);
	ДобавитьШаблон(МДРеквизит);
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныИсполнения);
	ДобавитьШаблон(МДРеквизит);
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныОзнакомления);
	ДобавитьШаблон(МДРеквизит);
	
	МДРеквизит = МДРеквизитовПроцесса.Получить(ТипШаблоныПоручения);
	ДобавитьШаблон(МДРеквизит);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьШаблон(РеквизитПроцесса)
	
	Если РеквизитПроцесса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.Шаблоны.Добавить();
	НоваяСтрока.Реквизит = РеквизитПроцесса.Имя;
	НоваяСтрока.ПредставлениеРеквизита = 
		?(ПустаяСтрока(РеквизитПроцесса.Синоним), РеквизитПроцесса.Имя, РеквизитПроцесса.Синоним);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыШаблона()
	
	Для Каждого МДБизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		МДРеквизит = МДБизнесПроцесс.Реквизиты.Найти("Шаблон");
		Если МДРеквизит <> Неопределено Тогда
			Если МДРеквизит.Тип.СодержитТип(Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов")) Тогда 
				Элементы.ТипШаблона.СписокВыбора.Добавить(МДБизнесПроцесс.Имя, МДБизнесПроцесс.Синоним);
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере 
Функция ПолучитьТипы(Реквизит)
	
	СписокТипов = Новый СписокЗначений;
	
	МДБизнесПроцесс = Метаданные.БизнесПроцессы.Найти(Объект.ТипШаблона);
	Если МДБизнесПроцесс = Неопределено Тогда 
		Возврат СписокТипов;
	КонецЕсли;
	
	МДРеквизит = МДБизнесПроцесс.Реквизиты.Найти(Реквизит);
	Если МДРеквизит = Неопределено Тогда 
		Возврат СписокТипов;
	КонецЕсли;	
	
	ТипыОбъекта = МДРеквизит.Тип.Типы();
	Для Каждого ТипОбъекта Из ТипыОбъекта Цикл
		ОбъектСсылка = Новый(ТипОбъекта);
		СписокТипов.Добавить(ОбъектСсылка.Метаданные().Имя, ОбъектСсылка.Метаданные().Синоним);
	КонецЦикла;	
	
	Возврат СписокТипов;
	
КонецФункции	

// Устанавливает доступность элементов формы при ее открытии в зависимости от
// прав доступа к шаблону.
//
&НаСервере
Процедура УстановитьДоступностьЭлементовПоПравуДоступа()
	
	Если НЕ Объект.Ссылка.Пустая()
		И НЕ ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка).Изменение Тогда
		
		ТолькоПросмотр = Истина;
		
		Элементы.РабочаяГруппаТаблица.ТолькоПросмотр = Истина;
		
		Элементы.ФормаЗакрытьФорму.Видимость = Истина;
		Элементы.ФормаЗакрытьФорму.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОтложенногоСтартаНажатие(Элемент, СтандартнаяОбработка)
	
	СтартПроцессовКлиент.ОписаниеОтложенногоСтартаНажатие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_ПодсистемаСвойств

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти
