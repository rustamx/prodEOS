#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Находит или создает полную роль по исходной роли, дополненной объектами адресации.
//
// Параметры:
//   ИсходнаяРоль - СправочникСсылка.РолиИсполнителей - исходная роль.
//   ОсновнойОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - основной объект адресации.
//   ДополнительныйОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - доп. объект адресации.
//
// Возвращаемое значение:
//   СправочникСсылка.ПолныеРоли - полная роль, найденная в справочнике или созданная на
//     основании исходной роли.
//
Функция НайтиСоздатьПолнуюРоль(ИсходнаяРоль,
	Знач ОсновнойОбъектАдресации = Неопределено,
	Знач ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда
		ОсновнойОбъектАдресации = Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда
		ДополнительныйОбъектАдресации = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Справочник.ПолныеРоли КАК ПолныеРоли
		|ГДЕ
		|	Владелец = &Владелец
		|   И ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
		|	И ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации");
		
	Запрос.УстановитьПараметр("Владелец", ИсходнаяРоль);
	Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ПолнаяРоль = СоздатьПолнуюРоль(ИсходнаяРоль, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
	
	Возврат ПолнаяРоль;
	
КонецФункции

// Создает полную роль по исходной и объектам адресации.
//
// Параметры:
//   ИсходнаяРоль - СправочникСсылка.РолиИсполнителей - исходная роль.
//   ОсновнойОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - основной объект адресации.
//   ДополнительныйОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - доп. объект адресации.
//
// Возвращаемое значение:
//   СправочникСсылка.ПолныеРоли - полная роль, созданная на основании исходной роли.
//
Функция СоздатьПолнуюРоль(ИсходнаяРоль, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации) Экспорт
	
	ПолнаяРоль = Справочники.ПолныеРоли.СоздатьЭлемент();
	
	ПолнаяРоль.Владелец = ИсходнаяРоль;
	ПолнаяРоль.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
	ПолнаяРоль.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
	
	ПолнаяРоль.Записать();
	
	Возврат ПолнаяРоль.Ссылка;
	
КонецФункции
	
// Получает дополнительные поля представления для полной роли.
//
Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Владелец");
	Поля.Добавить("ОсновнойОбъектАдресации");
	Поля.Добавить("ДополнительныйОбъектАдресации");
	
КонецПроцедуры

// Собирает представление полной роли из исходной и объектов адресации.
//
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Данные.ОсновнойОбъектАдресации) Тогда
		Если ЗначениеЗаполнено(Данные.ДополнительныйОбъектАдресации) Тогда
			Представление = СтрШаблон("%1, %2, %3",
				Данные.Владелец,
				Данные.ОсновнойОбъектАдресации,
				Данные.ДополнительныйОбъектАдресации);
		Иначе
			Представление = СтрШаблон("%1, %2",
				Данные.Владелец,
				Данные.ОсновнойОбъектАдресации);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Данные.ДополнительныйОбъектАдресации) Тогда
			Представление = СтрШаблон("%1, %2",
				Данные.Владелец,
				Данные.ДополнительныйОбъектАдресации);
		Иначе
			Представление = Строка(Данные.Владелец);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает состав пользователей, входящих в указанный контейнер.
//
// Параметры:
//   Контейнер - СправочникСсылка.ПолныеРоли - контейнер пользователей.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.Пользователи - состав контейнера.
//
Функция СоставКонтейнераПользователей(Контейнер) Экспорт
	
	Возврат РегистрыСведений.ИсполнителиЗадач.ИсполнителиРоли(Контейнер);
	
КонецФункции

// Возвращает контейнеры типа ПолныеРоли, которым принадлежит указанный пользователь.
//
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - проверяемый пользователь.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.ПолныеРоли - контейнеры, которым принадлежит пользователь.
//
Функция КонтейнерыПользователя(Пользователь) Экспорт
	
	Возврат РегистрыСведений.ИсполнителиЗадач.РолиИсполнителя(Пользователь);
	
КонецФункции

// Устанавливает или снимает пометку удаления с полных ролей, подчиненных указанному владельцу,
// по указанным признакам.
//
// Параметры:
//   Владелец - СправочникСсылка.РолиИсполнителей - роль-владелец.
//   УстанавливаемаяПометкаПолныхРолейБезОбъектовАдресации - Булево - новая пометка для ролей без ОА, или
//                                                         - Неопределено - не менять пометку.
//   УстанавливаемаяПометкаПолныхРолейСОбъектамиАдресации - Булево - новая пометка для ролей с ОА, или
//                                                        - Неопределено - не менять пометку.
//
Процедура ОбновитьПометкуУдаленияСогласноВладельцу(Владелец, ПометкаУдаления,
	ИспользуетсяБезОбъектовАдресации, ИспользуетсяСОбъектамиАдресации,
	ТипыОсновногоОбъектаАдресации, ТипыДополнительногоОбъектаАдресации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.УстановитьПараметр("ОбъектыАдресацииОбязательны", Не ИспользуетсяБезОбъектовАдресации);
	
	Если ИспользуетсяСОбъектамиАдресации
		И ЗначениеЗаполнено(ТипыОсновногоОбъектаАдресации) Тогда
		Запрос.УстановитьПараметр("ТипыОсновногоОбъектаАдресации", ТипыОсновногоОбъектаАдресации.ТипЗначения.Типы());
		Если ИспользуетсяБезОбъектовАдресации Тогда
			Запрос.Параметры.ТипыОсновногоОбъектаАдресации.Добавить(Тип("Неопределено"));
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ТипыОсновногоОбъектаАдресации", Новый Массив);
		Запрос.Параметры.ТипыОсновногоОбъектаАдресации.Добавить(Тип("Неопределено"));
	КонецЕсли;
	
	Если ИспользуетсяСОбъектамиАдресации
		И ЗначениеЗаполнено(ТипыДополнительногоОбъектаАдресации) Тогда
		Запрос.УстановитьПараметр("ТипыДополнительногоОбъектаАдресации", ТипыДополнительногоОбъектаАдресации.ТипЗначения.Типы());
		Если ИспользуетсяБезОбъектовАдресации Тогда
			Запрос.Параметры.ТипыДополнительногоОбъектаАдресации.Добавить(Тип("Неопределено"));
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ТипыДополнительногоОбъектаАдресации", Новый Массив);
		Запрос.Параметры.ТипыДополнительногоОбъектаАдресации.Добавить(Тип("Неопределено"));
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПолныеРоли.Ссылка КАК Ссылка,
		|	НЕ ПолныеРоли.ПометкаУдаления КАК НоваяПометкаУдаления
		|ИЗ
		|	Справочник.ПолныеРоли КАК ПолныеРоли
		|ГДЕ
		|	ПолныеРоли.Владелец = &Владелец
		|	И ВЫБОР
		|		КОГДА &ПометкаУдаления И ПолныеРоли.ПометкаУдаления <> &ПометкаУдаления
		|			ТОГДА ИСТИНА
		|		КОГДА &ОбъектыАдресацииОбязательны И
		|			(ПолныеРоли.ОсновнойОбъектАдресации = Неопределено И ПолныеРоли.ДополнительныйОбъектАдресации = Неопределено)
		|			ТОГДА ИСТИНА
		|		КОГДА НЕ ТИПЗНАЧЕНИЯ(ПолныеРоли.ОсновнойОбъектАдресации) В (&ТипыОсновногоОбъектаАдресации)
		|			ТОГДА ИСТИНА
		|		КОГДА НЕ ТИПЗНАЧЕНИЯ(ПолныеРоли.ДополнительныйОбъектАдресации) В (&ТипыДополнительногоОбъектаАдресации)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ <> ПолныеРоли.ПометкаУдаления
		|";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИзменяемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ИзменяемыйОбъект.Записать();
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Подменяет форму элемента общей формой ВыборРолиИсполнителя.
//
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация,
	СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта"
		И Не Параметры.Свойство("Ключ") Тогда
		
		ВызватьИсключение НСтр("ru = 'Справочник наполняется автоматически и не предназначен для редактирования.'; en = 'This catalog is maintained automatically an is not intended for interactive viewing and editing.'");
		
	КонецЕсли;
	
	Если ВидФормы <> "ФормаОбъекта"
		Или Не Параметры.Свойство("Ключ")
		Или Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Ключ,
		"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		
	Если ЗначениеЗаполнено(РеквизитыСсылки.ОсновнойОбъектАдресации)
		Или ЗначениеЗаполнено(РеквизитыСсылки.ДополнительныйОбъектАдресации) Тогда
		
		ВыбраннаяФорма = Метаданные.ОбщиеФормы.ВыборРолиИсполнителя;
		
		Параметры.Вставить("РольИсполнителя", РеквизитыСсылки.Владелец);
		Параметры.Вставить("ОсновнойОбъектАдресации", РеквизитыСсылки.ОсновнойОбъектАдресации);
		Параметры.Вставить("ДополнительныйОбъектАдресации", РеквизитыСсылки.ДополнительныйОбъектАдресации);
		Параметры.Вставить("Заголовок", НСтр("ru = 'Просмотр роли'; en = 'View role'"));
		Параметры.Вставить("ТолькоПросмотр", Истина);
		
	Иначе
		
		ВыбраннаяФорма = Метаданные.Справочники.РолиИсполнителей.Формы.ФормаЭлемента;
		
		Параметры.Ключ = РеквизитыСсылки.Владелец;
		
	КонецЕсли;
	
КонецПроцедуры

// Подменяет стандартную обработку получения данных выбора поиском по наименованию владельца.
//
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Текст = Параметры.СтрокаПоиска; 
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПолныеРоли.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПолныеРоли КАК ПолныеРоли
	|ГДЕ
	|	ПолныеРоли.Владелец.Наименование ПОДОБНО &Текст
	|	И Не ПолныеРоли.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеВыбора.Добавить(Выборка.Ссылка);
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
