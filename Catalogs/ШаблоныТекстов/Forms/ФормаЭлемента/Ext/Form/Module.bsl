
&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

&НаКлиенте
Перем ТекущееПоложениеНачало; // позиция начала выделения в блоке текста в HTML письме

&НаКлиенте
Перем ТекущееПоложениеКонец;  // позиция конца выделения в блоке текста в HTML письме

&НаКлиенте
Перем ТекущийНомерУзла; // номер текущего узла в HTML письме

&НаКлиенте
Перем ГоризонтальнаяПрокруткаHTML; // положение гор прокрутки в HTML письме

&НаКлиенте
Перем ВертикальнаяПрокруткаHTML; // положение вертикальной прокрутки в HTML письме

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
	КонецЕсли;	
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.Автор = ТекущийПользователь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстПисьма = Объект.Шаблон;
		// также картинки тут корректировать
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
			
			Если Не ЗначениеЗаполнено(ТекстПисьма) Тогда
				ТекстПисьма = "<html><body contentEditable=true></body></html>";
			КонецЕсли;	
		
			ВключитьРежимРедактированияHTML();
		КонецЕсли;	
	КонецЕсли;	
	
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	
	Если Параметры.Свойство("ЗаголовокФормыСоздания") И ЗначениеЗаполнено(Параметры.ЗаголовокФормыСоздания) Тогда 
		ЗаголовокФормыСоздания = Параметры.ЗаголовокФормыСоздания;
		Заголовок = Параметры.ЗаголовокФормыСоздания + НСтр("ru=' (создание)'; en = ' (creation)'");
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Параметры.Свойство("ОбластьПрименения") И ЗначениеЗаполнено(Параметры.ОбластьПрименения)
			И Не ЗначениеЗаполнено(Объект.ОбластьПрименения) Тогда 
			Объект.ОбластьПрименения = Параметры.ОбластьПрименения;
		Иначе
			Объект.ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.Почта;
		КонецЕсли;
	КонецЕсли;	
	
	// Отображение шрифта
	НастройкаШрифтОтображения = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ШрифтОтображения");
	НастройкаОтображатьДругиеШрифтыВПисьмах = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ОтображатьДругиеШрифтыВПисьмах");
	ШрифтОтображения = НастройкаШрифтОтображения;
	
	Если Не Объект.ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.Резолюции
		И Не Объект.ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.Почта Тогда 
		
		ПростойШаблон = Истина;  // упрощенная форма
		
		Элементы.ГруппаПолейПодписи.Видимость = Ложь;
		Элементы.Доступ.Видимость = Ложь;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ОбщийШаблонЗакладкаШаблон.Видимость = Истина;
		Элементы.Шаблон.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.НастроитьДоступ.Видимость = Объект.ОбщийШаблон;
		Если Объект.Пользователи.Количество() <> 0 Тогда
			Элементы.НастроитьДоступ.Заголовок 
				= СтрШаблон(НСтр("ru = 'Настроить доступ (%1)'; en = 'Configure access (%1)'"), Объект.Пользователи.Количество());
		Иначе	
			Элементы.НастроитьДоступ.Заголовок = НСтр("ru = 'Настроить доступ'; en = 'Configure access'");
		КонецЕсли;	
		
		КлючСохраненияПоложенияОкна = "ШаблоныТекстов.ПростойШаблон";
		
	Иначе	
		
		Элементы.ОбщийШаблонЗакладкаШаблон.Видимость = Ложь;
		Элементы.НастроитьДоступ.Видимость = Ложь;
		
		КлючСохраненияПоложенияОкна = "ШаблоныТекстов.РасширенныйШаблон";
		
	КонецЕсли;	
	
	Если Объект.ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.Резолюции Тогда 
		Элементы.ВставитьШаблонВремени.Видимость = Ложь;
		Элементы.ВставитьСрокИсполнения.Видимость = Истина;
	КонецЕсли;
		
	Если Не Объект.ОбщийШаблон Тогда 
		Элементы.ГруппаДоступа.Доступность = Ложь;
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда 
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		Если Не ПраваПоОбъекту.Изменение Тогда
			ТолькоПросмотр = Истина;
			Элементы.ПользователиПодобратьПользователей.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Наименование)
		И Не ЗначениеЗаполнено(Объект.Шаблон)
		И Объект.ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.Почта Тогда
		
		Объект.Шаблон = Объект.Наименование;
		
	КонецЕсли;	
	
	Элементы.ПодменюСпособРедактирования.Видимость 
		= (Объект.ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.Почта);
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		Элементы.ТекстПисьмаHTML.Видимость = Истина;
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаHTML;
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Ложь;
	Иначе
		Элементы.ТекстПисьмаHTML.Видимость = Ложь;
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Истина;
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаПолеВвода;
	КонецЕсли;
	
	Если ПриложениеЯвляетсяВебКлиентом Тогда
		Элементы.ПодменюСпособРедактирования.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Не ЗначениеЗаполнено(Объект.ТипТекста) Тогда
		Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
	КонецЕсли;	
	
	ТекстПисьма = Объект.Шаблон;
	
	Вложения.Очистить();
	ОбновитьФайлыШаблона();
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ВключитьРежимРедактированияHTML();
		
		ВстроеннаяПочтаСервер.ВставитьКартинкиВТекстHTML(
			ТекстПисьма,
			Объект.Ссылка,
			УникальныйИдентификатор,
			ИдентификаторыКартинокПисьма);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		ВыполнитьЗаписьHTML();
	КонецЕсли;
	
	ВыполняетсяЗапись = Истина;
	
	Если Не ПоместитьФайлыСДискаВоВременноеХранилище() Тогда
		ВыполняетсяЗапись = Ложь;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.Резолюции Тогда 
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда 
			ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
		
		ИначеЕсли Модифицированность И 
			ТекущийОбъект.Наименование <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "Наименование") Тогда 
			ПараметрыЗаписи.Вставить("ИзменилосьНаименование", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	ТекстПисьмаДляЗаписи = "";
	Если ТекущийОбъект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		ТекстПисьмаДляЗаписи = ТекстПисьмаHTMLПриЗаписи;
	Иначе	
		ТекстПисьмаДляЗаписи = ТекстПисьма;
	КонецЕсли;
	
	Если ИдентификаторыКартинокПисьма.Количество() <> 0 Тогда
		
		Для Каждого Строка Из ИдентификаторыКартинокПисьма Цикл
			
			ОписаниеИсточника = Строка.Значение;
			
			Если Найти(ТекстПисьмаДляЗаписи, ОписаниеИсточника.НавигационнаяСсылка) <> 0 Тогда
				
				// при записи возвращаем GUID - а не навигационную ссылку на временное хранилище
				ТекстПисьмаДляЗаписи = СтрЗаменить(ТекстПисьмаДляЗаписи, 
					ОписаниеИсточника.НавигационнаяСсылка,
					"cid:" + ОписаниеИсточника.ИсточникФайла);
				
			Иначе
				
				// картинку из HTML удалили - удалим и из ИдентификаторыПочтовыхВложений, и пометим файл на удаление 
				УдаляемыеКартинки.Добавить(ОписаниеИсточника.ИсточникФайла);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТекстПисьма", ТекстПисьмаДляЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьВложения(ТекущийОбъект.Ссылка);
	
	// файла картинок добавим
	Для Каждого Строка Из СписокДобавленныхФайлов Цикл
		
		ОписаниеФайла = Строка.Значение;
		
		ВложениеПисьмаСсылка = Неопределено;
		
		Если ЗначениеЗаполнено(ОписаниеФайла.Ссылка) Тогда
			
			ВложениеПисьмаСсылка = ОписаниеФайла.Ссылка;
			
		Иначе
			
			ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ОписаниеФайла.ИмяФайла);
			ВремяИзмененияУниверсальное = РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(ОписаниеФайла.ВремяИзменения);
			АдресВременногоХранилищаТекста = "";
			
			// Создадим карточку Файла в БД
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.АдресВременногоХранилищаФайла = ОписаниеФайла.Адрес;
			СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
			СведенияОФайле.ИмяБезРасширения = ИмяФайлаИнфо.Имя;
			СведенияОФайле.РасширениеБезТочки = ИмяФайлаИнфо.Расширение;
			СведенияОФайле.Размер = ОписаниеФайла.Размер;
			СведенияОФайле.ВремяИзменения = ОписаниеФайла.ВремяИзменения;
			СведенияОФайле.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
			СведенияОФайле.ХранитьВерсии = Ложь;
				
			ВложениеПисьмаСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ТекущийОбъект.Ссылка, СведенияОФайле);
				
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеФайла.УникальныйИдентификаторФайла) Тогда
			РегистрыСведений.ИдентификаторыПочтовыхВложений.УстановитьИдентификаторПочтовогоВложения(ВложениеПисьмаСсылка, 
				ОписаниеФайла.УникальныйИдентификаторФайла);
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ТекущийОбъект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		ТекстПисьма = ТекстПисьмаHTMLПриЗаписи;
	КонецЕсли;	
	
	ВыполняетсяЗапись = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ЗаголовокФормыСоздания) Тогда
		Заголовок = Объект.Наименование + " (" + ЗаголовокФормыСоздания + ")";
	КонецЕсли;	

	ТекстПисьмаПриОткрытии = "";
	
	Вложения.Очистить();
	
	Если СписокДобавленныхФайлов.Количество() <> 0 Тогда
		ВстроеннаяПочтаСервер.ВставитьКартинкиВТекстHTML(ТекстПисьма, Объект.Ссылка, УникальныйИдентификатор,
			ИдентификаторыКартинокПисьма);
	КонецЕсли;	
	
	СписокДобавленныхФайлов.Очистить();
	
	Для Каждого Строка Из УдаляемыеКартинки Цикл
		
		Идентификатор = Строка.Значение;
		
		Файл = НайтиИдентификаторПочтовыхВложений(Идентификатор, ТекущийОбъект.Ссылка);
		Если ЗначениеЗаполнено(Файл) Тогда
			
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Файл);
				ФайлОбъект = Файл.ПолучитьОбъект();
				ФайлОбъект.УстановитьПометкуУдаления(Истина);
				РазблокироватьДанныеДляРедактирования(Файл);
			Исключение
				СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	УдаляемыеКартинки.Очистить();
	
	ОбновитьФайлыШаблона();
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект Тогда
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Шаблон", Объект.Ссылка);
		ПараметрОповещения.Вставить("Наименование", Объект.Наименование);
		Оповестить("СозданНовыйШаблонРезолюции", ПараметрОповещения);
	ИначеЕсли ПараметрыЗаписи.Свойство("ИзменилосьНаименование") И ПараметрыЗаписи.ИзменилосьНаименование Тогда
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Шаблон", Объект.Ссылка);   
		ПараметрОповещения.Вставить("Наименование", Объект.Наименование);
		Оповестить("ИзменилсяШаблонРезолюции", ПараметрОповещения);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПользователиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ПользовательИлиГруппа = 
			ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПользовательИлиГруппаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПользователей(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПользовательИлиГруппаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущийДанные = Элементы.Пользователи.ТекущиеДанные;
		ТекущийДанные.ПользовательИлиГруппа = ВыбранноеЗначение.РольИсполнителя;
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") 
		Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		ТекущийДанные = Элементы.Пользователи.ТекущиеДанные;
		ТекущийДанные.ПользовательИлиГруппа = ВыбранноеЗначение;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПользовательИлиГруппаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь; 
		ДанныеВыбора = СформироватьДанныеВыбора(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийШаблонПриИзменении(Элемент)
	
	Элементы.ГруппаДоступа.Доступность = Объект.ОбщийШаблон;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийШаблонЗакладкаШаблонПриИзменении(Элемент)
	
	Элементы.НастроитьДоступ.Видимость = Объект.ОбщийШаблон;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ТекстПисьма) И ЗначениеЗаполнено(Объект.Наименование) Тогда
		ТекстПисьма = Объект.Наименование;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ШаблонПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) И ЗначениеЗаполнено(ТекстПисьма) Тогда
		Объект.Наименование = ТекстПисьма;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВставитьДатаИВремя(Команда)
	
	ШаблонТекста = "[День].[Месяц].[Год] [Час]:[Минута]";
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
		Выделение = HTMLДокумент.selection.createRange();
		Выделение.pasteHTML(ШаблонТекста);
		
	Иначе	
	
		ТекстПисьма = ТекстПисьма + ШаблонТекста;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьДень(Команда)
	
	ШаблонТекста = "[День]";
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
		Выделение = HTMLДокумент.selection.createRange();
		Выделение.pasteHTML(ШаблонТекста);
		
	Иначе	
	
		ТекстПисьма = ТекстПисьма + ШаблонТекста;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьМесяц(Команда)
	
	ШаблонТекста = "[Месяц]";
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
		Выделение = HTMLДокумент.selection.createRange();
		Выделение.pasteHTML(ШаблонТекста);
		
	Иначе	
	
		ТекстПисьма = ТекстПисьма + ШаблонТекста;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГод(Команда)
	
	ШаблонТекста = "[Год]";
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
		Выделение = HTMLДокумент.selection.createRange();
		Выделение.pasteHTML(ШаблонТекста);
		
	Иначе	
	
		ТекстПисьма = ТекстПисьма + ШаблонТекста;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьЧас(Команда)
	
	ШаблонТекста = "[Час]";
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
		Выделение = HTMLДокумент.selection.createRange();
		Выделение.pasteHTML(ШаблонТекста);
		
	Иначе	
	
		ТекстПисьма = ТекстПисьма + ШаблонТекста;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьМинута(Команда)
	
	ШаблонТекста = "[Минута]";
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
		Выделение = HTMLДокумент.selection.createRange();
		Выделение.pasteHTML(ШаблонТекста);
		
	Иначе	
	
		ТекстПисьма = ТекстПисьма + ШаблонТекста;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПользователей(Команда)
	
	ВыбратьПользователей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПользователей(МножественныйВыбор)
	
	РабочаяГруппа = Новый Массив;
	
	Если МножественныйВыбор Тогда
		Для Каждого ТаблицаСтрока Из Объект.Пользователи Цикл
			Участник = Новый Структура("Контакт", ТаблицаСтрока.ПользовательИлиГруппа);
			РабочаяГруппа.Добавить(Участник);
		КонецЦикла;
		
		РежимРаботыФормы = 2;
		ЗаголовокФормы = НСтр("ru = 'Подбор пользователей общего шаблона текста'; en = 'Selection of users of a shared text template'");
		ЗаголовокСпискаВыбранных = НСтр("ru = 'Выбранные пользователи/группы:'; en = 'The selected users/groups:'");
		ЗаголовокСпискаАдреснойКниги = НСтр("ru = 'Все пользователи/группы:'; en = 'All users/groups:'");
	Иначе
		РежимРаботыФормы = 1;
		ЗаголовокФормы = НСтр("ru = 'Выбор участника группы доступа'; en = 'Select access group member'");
		ЗаголовокСпискаВыбранных = "";
		ЗаголовокСпискаАдреснойКниги = "";
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", ЗаголовокСпискаВыбранных);
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", ЗаголовокСпискаАдреснойКниги);
	ПараметрыФормы.Вставить("РежимРаботыФормы", РежимРаботыФормы);
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", РабочаяГруппа);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеПодбораПользователей", ЭтотОбъект, МножественныйВыбор);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПодбораПользователей(ВыбранныеПользователи, МножественныйВыбор) Экспорт
	
	Если ВыбранныеПользователи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МножественныйВыбор Тогда
		Объект.Пользователи.Очистить();
		Для Каждого ГруппаСтрока Из ВыбранныеПользователи Цикл
			Строка = Объект.Пользователи.Добавить();
			Строка.ПользовательИлиГруппа = ГруппаСтрока.Контакт;
		КонецЦикла;
	Иначе
		ТекущаяСтрока = Элементы.Пользователи.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Объект.Пользователи.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.ПользовательИлиГруппа = ВыбранныеПользователи[0].Контакт;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОрфографию(Команда)
	
	#Если Не ВебКлиент Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверитьОрфографиюТекст", ЭтотОбъект);
		ВстроеннаяПочтаКлиент.ПроверитьОрфографиюТекст(ОписаниеОповещения, Объект.Шаблон);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ЗавершениеПроверитьОрфографиюТекст(Результат, Параметры) Экспорт
	
	Если Результат.ТекстИзменен Тогда
		Объект.Шаблон = Результат.ТекстПисьма;
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступ(Команда)
	
	Если Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ОбщийШаблон = Истина;
	
	Пользователи = Новый Массив;
	Для Каждого Строка Из Объект.Пользователи Цикл
		Пользователи.Добавить(Строка.ПользовательИлиГруппа);
	КонецЦикла;	
	
	ПараметрыФормы = Новый Структура("Пользователи", 
		Пользователи);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НастроитьДоступПродолжение",
		ЭтотОбъект);
		
	ОткрытьФорму("Справочник.ШаблоныТекстов.Форма.НастройкаДоступа", 
		ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив")  Тогда 
		
		Объект.Пользователи.Очистить();
		Для Каждого Пользователь Из Результат Цикл
			Строка = Объект.Пользователи.Добавить();
			Строка.ПользовательИлиГруппа = Пользователь;
		КонецЦикла;	
		
		Если Объект.Пользователи.Количество() <> 0 Тогда
			Элементы.НастроитьДоступ.Заголовок 
				= СтрШаблон(НСтр("ru = 'Настроить доступ (%1)'; en = 'Configure access (%1)'"), Объект.Пользователи.Количество());
		Иначе	
			Элементы.НастроитьДоступ.Заголовок = НСтр("ru = 'Настроить доступ'; en = 'Configure access'");
		КонецЕсли;	
		
		Модифицированность = Истина;
		
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура АвтопереносСтрок(Команда)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		ТекстВопроса = НСтр("ru = 'Преобразование письма в текст удалит форматирование, вставленные изображения, таблицы, гиперссылки и другие элементы оформления.
			|Продолжить?';
			|en = 'Converting email to text will remove text formatting, inserted pictures, tables, hyperlinks, and other design elements. 
			|Do you want to continue?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеАвтопереносаСтрок", ЭтотОбъект);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 0);
		
		Возврат;
		
	КонецЕсли;
	
	ПродолжитьАвтопереносСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматHTML(Команда)
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		Возврат;
	Иначе
		// преобразуем текст в HTML
		ВыполнитьПереключениеВHTML();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовHTMLПисьма

&НаКлиенте
Процедура ВыполнитьHTMLКоманду(Команда)
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	HTMLДокумент.execCommand(Команда);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Полужирный(Команда)
	
	ВыполнитьHTMLКоманду("Bold");
	
КонецПроцедуры

&НаКлиенте
Процедура Наклонный(Команда)
	
	ВыполнитьHTMLКоманду("italic");
	
КонецПроцедуры

&НаКлиенте
Процедура Подчеркнутый(Команда)
	
	ВыполнитьHTMLКоманду("underline");
	
КонецПроцедуры

&НаКлиенте
Процедура МаркированныйСписок(Команда)
	
	ВыполнитьHTMLКоманду("insertUnorderedList");
	
КонецПроцедуры

&НаКлиенте
Процедура НумерованныйСписок(Команда)
	
	ВыполнитьHTMLКоманду("insertOrderedList");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтступВлево(Команда)
	
	ВыполнитьHTMLКоманду("outdent");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтступВправо(Команда)
	ВыполнитьHTMLКоманду("indent");
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВлево(Команда)
	ВыполнитьHTMLКоманду("justifyLeft");
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеПоЦентру(Команда)
	ВыполнитьHTMLКоманду("justifyCenter");
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВправо(Команда)
	ВыполнитьHTMLКоманду("justifyRight");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦветСтиля(Цвет)
	
	ИмяСтиля = Сред(Строка(Цвет), 8); // убираем "стиль: "
	Элемент = Метаданные.ЭлементыСтиля.Найти(ИмяСтиля);
	Если Элемент <> Неопределено Тогда
		Возврат Элемент.Значение;
	КонецЕсли;	
	
	Возврат Цвет;
	
КонецФункции	

&НаКлиенте
Функция ПолучитьHexЗначение(Значение)
	
	Если Значение = 0 Тогда
		Возврат "0";
	ИначеЕсли Значение = 1 Тогда
		Возврат "1";	
	ИначеЕсли Значение = 2 Тогда
		Возврат "2";	
	ИначеЕсли Значение = 3 Тогда
		Возврат "3";	
	ИначеЕсли Значение = 4 Тогда
		Возврат "4";	
	ИначеЕсли Значение = 5 Тогда
		Возврат "5";	
	ИначеЕсли Значение = 6 Тогда
		Возврат "6";	
	ИначеЕсли Значение = 7 Тогда
		Возврат "7";	
	ИначеЕсли Значение = 8 Тогда
		Возврат "8";	
	ИначеЕсли Значение = 9 Тогда
		Возврат "9";	
	ИначеЕсли Значение = 10 Тогда
		Возврат "A";	
	ИначеЕсли Значение = 11 Тогда
		Возврат "B";	
	ИначеЕсли Значение = 12 Тогда
		Возврат "C";	
	ИначеЕсли Значение = 13 Тогда
		Возврат "D";	
	ИначеЕсли Значение = 14 Тогда
		Возврат "E";	
	ИначеЕсли Значение = 15 Тогда
		Возврат "F";	
	КонецЕсли;
	
	Возврат "0";
	
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуЗначенияЦвета(Значение)
	
	СтаршееЧисло = Цел(Значение / 16);
	МладшееЧисло = Значение - 16 * СтаршееЧисло;
	
	Возврат ПолучитьHexЗначение(СтаршееЧисло) + ПолучитьHexЗначение(МладшееЧисло);
	
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуЦвета(Цвет, СтрокаЦвета)
	
	Если Цвет.Вид = ВидЦвета.ЭлементСтиля Тогда
		Цвет = ПолучитьЦветСтиля(Цвет);
	КонецЕсли;
	
	Если Цвет.Вид = ВидЦвета.ЭлементСтиля Тогда	
		
		СтрокаЦвета = "";
		ИмяСтиля = Сред(Строка(Цвет), 8); // убираем "стиль: "
		ИмяСтиля = СтрЗаменить(ИмяСтиля, " ", "");
		
		Если ВРег(ИмяСтиля) = ВРег("ТекстРедактирования") Тогда
			СтрокаЦвета = "#000000";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонФормы") Тогда
			СтрокаЦвета = "#fcfaeb";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ТекстФормы") Тогда
			СтрокаЦвета = "#413003";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонКнопки") Тогда
			СтрокаЦвета = "#F5F2DD";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ТекстКнопки") Тогда
			СтрокаЦвета = "#594304";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонРедактирования") Тогда
			СтрокаЦвета = "#FFFFFF";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонВыделенияРедактирования") Тогда
			СтрокаЦвета = "#536AC2";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ТекстВыделенияРедактирования") Тогда
			СтрокаЦвета = "#FFFFFF";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("АльтернативныйФонРедактирования") Тогда
			СтрокаЦвета = "#F5FBF7";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонПодсказки") Тогда
			СтрокаЦвета = "#FFFAD9";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ТекстПодсказки") Тогда
			СтрокаЦвета = "#000000";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ОсобыйТекст") Тогда
			СтрокаЦвета = "#FF0000";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ОтрицательноеЧисло") Тогда
			СтрокаЦвета = "#FF0000";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("Рамка") Тогда
			СтрокаЦвета = "#B3AC86";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонШапкиОтчета") Тогда
			СтрокаЦвета = "#F4ECC5";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонГруппировкиОтчета1") Тогда
			СтрокаЦвета = "#F8F2D8";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ФонГруппировкиОтчета2") Тогда
			СтрокаЦвета = "#FBF9EC";
		ИначеЕсли ВРег(ИмяСтиля) = ВРег("ЛинияОтчета") Тогда
			СтрокаЦвета = "#0xCCC085";
		КонецЕсли;
		
		Возврат Истина;	
		
	КонецЕсли;
		
	
	Если Цвет.Вид = ВидЦвета.Абсолютный Тогда
		СтрокаЦвета = "#" + ПолучитьСтрокуЗначенияЦвета(Цвет.Красный)
			+ ПолучитьСтрокуЗначенияЦвета(Цвет.Зеленый)
			+ ПолучитьСтрокуЗначенияЦвета(Цвет.Синий);
		Возврат Истина;	
	КонецЕсли;
	
	СтрокаПоЦвету = Новый Соответствие;
	СтрокаПоЦвету[WebЦвета.Аквамарин] = "#7FFFD4";
	СтрокаПоЦвету[WebЦвета.АкварельноСиний] = "#F0F8FF";
	СтрокаПоЦвету[WebЦвета.АнтикБелый] = "#FAEBD7";
	СтрокаПоЦвету[WebЦвета.Бежевый] = "#F5F5DC";
	СтрокаПоЦвету[WebЦвета.Белоснежный] = "#FFFAFA";
	СтрокаПоЦвету[WebЦвета.Белый] = "#FFFFFF";
	СтрокаПоЦвету[WebЦвета.Бирюзовый] = "#40E0D0";
	СтрокаПоЦвету[WebЦвета.БледноБирюзовый] = "#AFEEEE";
	СтрокаПоЦвету[WebЦвета.БледноЗеленый] = "#98FB98";
	СтрокаПоЦвету[WebЦвета.БледноЗолотистый] = "#EEE8AA";
	СтрокаПоЦвету[WebЦвета.БледноКрасноФиолетовый] = "#PaleVioletRed";
	СтрокаПоЦвету[WebЦвета.БледноЛиловый] = "#E6E6FA";
	СтрокаПоЦвету[WebЦвета.БледноМиндальный] = "#FFEBCD";
	СтрокаПоЦвету[WebЦвета.БледноСиреневый] = "#D8BFD8";
	СтрокаПоЦвету[WebЦвета.Васильковый] = "#6495ED";
	СтрокаПоЦвету[WebЦвета.ВесеннеЗеленый] = "#00FF7F";
	СтрокаПоЦвету[WebЦвета.Голубой] = "#ADD8E6";
	СтрокаПоЦвету[WebЦвета.ГолубойСКраснымОттенком] = "#FFF0F5";
	СтрокаПоЦвету[WebЦвета.ГолубойСоСтальнымОттенком] = "#B0C4DE";
	СтрокаПоЦвету[WebЦвета.ГрифельноСерый] = "#708090";
	СтрокаПоЦвету[WebЦвета.ГрифельноСиний] = "#6A5ACD";
	СтрокаПоЦвету[WebЦвета.Древесный] = "#DEB887";
	СтрокаПоЦвету[WebЦвета.ДымчатоБелый] = "#F5F5F5";
	СтрокаПоЦвету[WebЦвета.ЖелтоЗеленый] = "#9ACD32";
	СтрокаПоЦвету[WebЦвета.Желтый] = "#FFFF00";
	СтрокаПоЦвету[WebЦвета.ЗамшаСветлый] = "#FFE4B5";
	СтрокаПоЦвету[WebЦвета.ЗеленаяЛужайка] = "#7CFC00";
	СтрокаПоЦвету[WebЦвета.ЗеленоватоЖелтый] = "#7FFF00";
	СтрокаПоЦвету[WebЦвета.ЗеленоватоЛимонный] = "#00FF00";
	СтрокаПоЦвету[WebЦвета.ЗеленоЖелтый] = "#ADFF2F";
	СтрокаПоЦвету[WebЦвета.Зеленый] = "#008000";
	СтрокаПоЦвету[WebЦвета.ЗеленыйЛес] = "#228B22";
	СтрокаПоЦвету[WebЦвета.Золотистый] = "#DAA520";
	СтрокаПоЦвету[WebЦвета.Золотой] = "#FFD700";
	СтрокаПоЦвету[WebЦвета.Индиго] = "#4B0082";
	СтрокаПоЦвету[WebЦвета.Киноварь] = "#CD5C5C";
	СтрокаПоЦвету[WebЦвета.Кирпичный] = "#B22222";
	СтрокаПоЦвету[WebЦвета.КожаноКоричневый] = "#8B4513";
	СтрокаПоЦвету[WebЦвета.Коралловый] = "#FF7F50";
	СтрокаПоЦвету[WebЦвета.Коричневый] = "#A52A2A";
	СтрокаПоЦвету[WebЦвета.КоролевскиГолубой] = "#4169E1";
	СтрокаПоЦвету[WebЦвета.КрасноФиолетовый] = "#D02090";
	СтрокаПоЦвету[WebЦвета.Красный] = "#FF0000";
	СтрокаПоЦвету[WebЦвета.Кремовый] = "#FFFBF0";
	СтрокаПоЦвету[WebЦвета.Лазурный] = "#F0FFFF";
	СтрокаПоЦвету[WebЦвета.ЛимонноЗеленый] = "#32CD32";
	СтрокаПоЦвету[WebЦвета.Лимонный] = "#FFFACD";
	СтрокаПоЦвету[WebЦвета.Лосось] = "#FA8072";
	СтрокаПоЦвету[WebЦвета.ЛососьСветлый] = "#FFA07A";
	СтрокаПоЦвету[WebЦвета.ЛососьТемный] = "#E9967A";
	СтрокаПоЦвету[WebЦвета.Льняной] = "#FAF0E6";
	СтрокаПоЦвету[WebЦвета.Малиновый] = "#DC143C";
	СтрокаПоЦвету[WebЦвета.МятныйКрем] = "#F5FFFA";
	СтрокаПоЦвету[WebЦвета.НавахоБелый] = "#FFDEAD";
	СтрокаПоЦвету[WebЦвета.НасыщенноНебесноГолубой] = "#00BFFF";
	СтрокаПоЦвету[WebЦвета.НасыщенноРозовый] = "#FF1493";
	СтрокаПоЦвету[WebЦвета.НебесноГолубой] = "#87CEEB";
	СтрокаПоЦвету[WebЦвета.НейтральноАквамариновый] = "#66CDAA";
	СтрокаПоЦвету[WebЦвета.НейтральноБирюзовый] = "#48D1CC";
	СтрокаПоЦвету[WebЦвета.НейтральноВесеннеЗеленый] = "#00FA9A";
	СтрокаПоЦвету[WebЦвета.НейтральноГрифельноСиний] = "#7B68EE";
	СтрокаПоЦвету[WebЦвета.НейтральноЗеленый] = "#C0DCC0";
	СтрокаПоЦвету[WebЦвета.НейтральноКоричневый] = "#CD853F";
	СтрокаПоЦвету[WebЦвета.НейтральноПурпурный] = "#9370D8";
	СтрокаПоЦвету[WebЦвета.НейтральноСерый] = "#A0A0A4";
	СтрокаПоЦвету[WebЦвета.НейтральноСиний] = "#0000CD";
	СтрокаПоЦвету[WebЦвета.НейтральноФиолетовоКрасный] = "#C71585";
	СтрокаПоЦвету[WebЦвета.Оливковый] = "#808000";
	СтрокаПоЦвету[WebЦвета.ОранжевоКрасный] = "#FF4500";
	СтрокаПоЦвету[WebЦвета.Оранжевый] = "#FFA500";
	СтрокаПоЦвету[WebЦвета.Орхидея] = "#DA70D6";
	СтрокаПоЦвету[WebЦвета.ОрхидеяНейтральный] = "#BA55D3";
	СтрокаПоЦвету[WebЦвета.ОрхидеяТемный] = "#9932CC";
	СтрокаПоЦвету[WebЦвета.Охра] = "#A0522D";
	СтрокаПоЦвету[WebЦвета.Перламутровый] = "#FFF5EE";
	СтрокаПоЦвету[WebЦвета.Персиковый] = "#FFDAB9";
	СтрокаПоЦвету[WebЦвета.ПесочноКоричневый] = "#F4A460";
	СтрокаПоЦвету[WebЦвета.ПолночноСиний] = "#191970";
	СтрокаПоЦвету[WebЦвета.ПризрачноБелый] = "#F8F8FF";
	СтрокаПоЦвету[WebЦвета.Пурпурный] = "#800080";
	СтрокаПоЦвету[WebЦвета.Пшеничный] = "#F5DEB3";
	СтрокаПоЦвету[WebЦвета.РозовоКоричневый] = "#BC8F8F";
	СтрокаПоЦвету[WebЦвета.Розовый] = "#FFC0CB";
	СтрокаПоЦвету[WebЦвета.Роса] = "#F0FFF0";
	СтрокаПоЦвету[WebЦвета.РыжеватоКоричневый] = "#D2B48C";
	СтрокаПоЦвету[WebЦвета.СветлоГрифельноСерый] = "#778899";
	СтрокаПоЦвету[WebЦвета.СветлоГрифельноСиний] = "#8470FF";
	СтрокаПоЦвету[WebЦвета.СветлоЖелтый] = "#FFFFE0";
	СтрокаПоЦвету[WebЦвета.СветлоЖелтыйЗолотистый] = "#FAFAD2";
	СтрокаПоЦвету[WebЦвета.СветлоЗеленый] = "#90EE90";
	СтрокаПоЦвету[WebЦвета.СветлоЗолотистый] = "#FFEC8B";
	СтрокаПоЦвету[WebЦвета.СветлоКоралловый] = "#F08080";
	СтрокаПоЦвету[WebЦвета.СветлоКоричневый] = "#FFE4C4";
	СтрокаПоЦвету[WebЦвета.СветлоНебесноГолубой] = "#87CEFA";
	СтрокаПоЦвету[WebЦвета.СветлоРозовый] = "#FFB6C1";
	СтрокаПоЦвету[WebЦвета.СветлоСерый] = "#D3D3D3";
	СтрокаПоЦвету[WebЦвета.СеребристоСерый] = "#DCDCDC";
	СтрокаПоЦвету[WebЦвета.Серебряный] = "#C0C0C0";
	СтрокаПоЦвету[WebЦвета.СероСиний] = "#5F9EA0";
	СтрокаПоЦвету[WebЦвета.Серый] = "#808080";
	СтрокаПоЦвету[WebЦвета.СинеСерый] = "#1E90FF";
	СтрокаПоЦвету[WebЦвета.СинеФиолетовый] = "#8A2BE2";
	СтрокаПоЦвету[WebЦвета.Синий] = "#0000FF";
	СтрокаПоЦвету[WebЦвета.СинийСоСтальнымОттенком] = "#4682B4";
	СтрокаПоЦвету[WebЦвета.СинийСПороховымОттенком] = "#B0E0E6";
	СтрокаПоЦвету[WebЦвета.Сливовый] = "#DDA0DD";
	СтрокаПоЦвету[WebЦвета.СлоноваяКость] = "#FFFFF0";
	СтрокаПоЦвету[WebЦвета.СтароеКружево] = "#FDF5E6";
	СтрокаПоЦвету[WebЦвета.ТемноБирюзовый] = "#00CED1";
	СтрокаПоЦвету[WebЦвета.ТемноБордовый] = "#800000";
	СтрокаПоЦвету[WebЦвета.ТемноГрифельноСерый] = "#2F4F4F";
	СтрокаПоЦвету[WebЦвета.ТемноГрифельноСиний] = "#483D8B";
	СтрокаПоЦвету[WebЦвета.ТемноЗеленый] = "#006400";
	СтрокаПоЦвету[WebЦвета.ТемноЗолотистый] = "#B8860B";
	СтрокаПоЦвету[WebЦвета.ТемноКрасный] = "#8B0000";
	СтрокаПоЦвету[WebЦвета.ТемноОливковоЗеленый] = "#556B2F";
	СтрокаПоЦвету[WebЦвета.ТемноОранжевый] = "#FF8C00";
	СтрокаПоЦвету[WebЦвета.ТемноСерый] = "#A9A9A9";
	СтрокаПоЦвету[WebЦвета.ТемноСиний] = "#00008B";
	СтрокаПоЦвету[WebЦвета.ТемноФиолетовый] = "#9400D3";
	СтрокаПоЦвету[WebЦвета.ТеплоРозовый] = "#FF69B4";
	СтрокаПоЦвету[WebЦвета.Томатный] = "#FF6347";
	СтрокаПоЦвету[WebЦвета.ТопленоеМолоко] = "#FFEFD5";
	СтрокаПоЦвету[WebЦвета.ТусклоОливковый] = "#6B8E23";
	СтрокаПоЦвету[WebЦвета.ТусклоРозовый] = "#FFE4E1";
	СтрокаПоЦвету[WebЦвета.ТусклоСерый] = "#696969";
	СтрокаПоЦвету[WebЦвета.Ультрамарин] = "#000080";
	СтрокаПоЦвету[WebЦвета.Фиолетовый] = "#EE82EE";
	СтрокаПоЦвету[WebЦвета.Фуксин] = "#FF00FF";
	СтрокаПоЦвету[WebЦвета.ФуксинТемный] = "#8B008B";
	СтрокаПоЦвету[WebЦвета.Фуксия] = "#FF00FF";
	СтрокаПоЦвету[WebЦвета.Хаки] = "#F0E68C";
	СтрокаПоЦвету[WebЦвета.ХакиТемный] = "#BDB76B";
	СтрокаПоЦвету[WebЦвета.ЦветМорскойВолны] = "#2E8B57";
	СтрокаПоЦвету[WebЦвета.ЦветМорскойВолныНейтральный] = "#3CB371";
	СтрокаПоЦвету[WebЦвета.ЦветМорскойВолныСветлый] = "#20B2AA";
	СтрокаПоЦвету[WebЦвета.ЦветМорскойВолныТемный] = "#8FBC8F";
	СтрокаПоЦвету[WebЦвета.ЦветокБелый] = "#FFFAF0";
	СтрокаПоЦвету[WebЦвета.Циан] = "#00FFFF";
	СтрокаПоЦвету[WebЦвета.ЦианАкварельный] = "#00FFFF";
	СтрокаПоЦвету[WebЦвета.ЦианНейтральный] = "#008080";
	СтрокаПоЦвету[WebЦвета.ЦианСветлый] = "#E0FFFF";
	СтрокаПоЦвету[WebЦвета.ЦианТемный] = "#008B8B";
	СтрокаПоЦвету[WebЦвета.Черный] = "#000000";
	СтрокаПоЦвету[WebЦвета.ШелковыйОттенок] = "#FFF8DC";
	СтрокаПоЦвету[WebЦвета.Шоколадный] = "#D2691E";
	
	СтрокаЦвета = СтрокаПоЦвету.Получить(Цвет);
	Если СтрокаЦвета <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ЦветТекста(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеЦветТекста", ЭтотОбъект);
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаВыбораЦвета",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЦветТекста(Цвет, Параметры) Экспорт

	Если Цвет <> Неопределено Тогда
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("foreColor", Ложь, Цвет );
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветФона(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеЦветФона", ЭтотОбъект);
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаВыбораЦветаФона",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЦветФона(Цвет, Параметры) Экспорт
	
	Если Цвет <> Неопределено Тогда
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("backColor", Ложь, Цвет );
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормат(Команда)
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	HTMLДокумент.execCommand("removeFormat", Ложь, "");
	
	Модифицированность = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифт(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьШрифтПродолжение", ЭтотОбъект);
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаВыбораШрифта",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифтПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
		
	ИначеЕсли Результат = "Шрифт по умолчанию" Тогда 
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("fontName", Ложь, НастройкаШрифтОтображения.Имя);
		Модифицированность = Истина;
		
	ИначеЕсли Результат = "Другой.." Тогда 
		ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзменитьШрифт", ЭтотОбъект);
		ДиалогВыбораШрифта.Показать(ОписаниеОповещения);
		
	Иначе 
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("fontName", Ложь, Результат);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзменитьШрифт(Шрифт, Параметры) Экспорт

	Если Шрифт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Шрифт.Имя) Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		HTMLДокумент.execCommand("fontName", Ложь, Шрифт.Имя);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	РазмерШрифта = 2;
	
	Если Шрифт.Размер <> -1 Тогда
		Если Шрифт.Размер < 8 Тогда
			РазмерШрифта = 1;
		ИначеЕсли Шрифт.Размер <= 10 Тогда
			РазмерШрифта = 2;	
		ИначеЕсли Шрифт.Размер <= 12 Тогда
			РазмерШрифта = 3;	
		ИначеЕсли Шрифт.Размер <= 14 Тогда
			РазмерШрифта = 4;	
		ИначеЕсли Шрифт.Размер <= 16 Тогда
			РазмерШрифта = 5;	
		ИначеЕсли Шрифт.Размер <= 18 Тогда
			РазмерШрифта = 6;	
		Иначе
			РазмерШрифта = 7;	
		КонецЕсли;	
	КонецЕсли;
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	HTMLДокумент.execCommand("fontSize", Ложь, РазмерШрифта);
	Модифицированность = Истина;
	
	Если Шрифт.Зачеркивание = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ВыполнитьHTMLКоманду("strikeThrough");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если Шрифт.Жирный = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ВыполнитьHTMLКоманду("Bold");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если Шрифт.Наклонный = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ВыполнитьHTMLКоманду("italic");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если Шрифт.Подчеркивание = Истина Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
		ВыполнитьHTMLКоманду("underline");
		Модифицированность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьШрифт(Команда)
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	Размер = HTMLДокумент.queryCommandValue("fontSize");
	
	Если Не ЗначениеЗаполнено(Размер) Тогда 
		Размер = 2;
	КонецЕсли;
	HTMLДокумент.execCommand("fontSize", Ложь, Размер + 1);
	
	Модифицированность = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьШрифт(Команда)
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	Размер = HTMLДокумент.queryCommandValue("fontSize");
	Если Не ЗначениеЗаполнено(Размер) Тогда 
		Размер = 3;
	КонецЕсли;
	HTMLДокумент.execCommand("fontSize", Ложь, Размер - 1);
	
	Модифицированность = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
			HTMLДокумент.execCommand("InsertImage", Ложь, "file://" + ПутьКФайлу);
			Модифицированность = Истина;
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'; en = 'The Clipboard does not contain picture'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинку(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуПослеУстановкиРасширения", ЭтотОбъект);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ВставитьКартинкуПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	Если НЕ ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Возврат;	
	КонецЕсли;
		
	Фильтр = НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf'; en = 'All images (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf'")
		+ НСтр("ru = '|Все файлы(*.*)|*.*'; en = '|All files (*.*)|*.*'")
		+ НСтр("ru = '|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle'; en = '|BMP format (*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle'")
		+ НСтр("ru = '|Формат GIF(*.gif*)|*.gif'; en = '|GIF format (*.gif*)|*.gif'")
		+ НСтр("ru = '|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg'; en = '|JPEG format (*.jpeg;*.jpg)|*.jpeg;*.jpg'")
		+ НСтр("ru = '|Формат PNG(*.png*)|*.png'; en = '|PNG format (*.png*)|*.png'")
		+ НСтр("ru = '|Формат TIFF(*.tif)|*.tif'; en = '|TIFF format (*.tif)|*.tif'")
		+ НСтр("ru = '|Формат icon(*.ico)|*.ico'; en = '|Icons (*.ico)|*.ico'")
		+ НСтр("ru = '|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'; en = '|Metafile format (*.wmf;*.emf)|*.wmf;*.emf'");
								
	АдресВременногоХранилищаФайла = "";
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.Заголовок = НСтр("ru = 'Выбор картинки'; en = 'Selecting picture'");
	ВыборФайла.Фильтр = Фильтр;
	
	Результат = ВыборФайла.Выбрать();
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ПутьФайла = ВыборФайла.ПолноеИмяФайла;
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	HTMLДокумент.execCommand("InsertImage", Ложь, "file://" + ПутьФайла);
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияФормыНаКлиенте()
	
КонецПроцедуры				

&НаСервере
Процедура СкопироватьКартинкиПисьмаОснования(ПисьмоОснование)
	
	ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		ПисьмоОснование, // отдаем ссылку на другое письмо
		Ложь, // ФормироватьПредставлениеРазмера
		Ложь, // ВключатьПомеченныеНаУдаление
		Истина); // ТолькоСИдентификаторами
		
	НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	
	Для каждого ФайлПисьма Из ФайлыПисьма Цикл
		
		ИсточникФайла = ФайлПисьма.ИДФайлаЭлектронногоПисьма;
		
		ЭтоФайлКартинка = РаботаСФайламиКлиентСервер.ЭтоРасширениеКартинки(ФайлПисьма.ТекущаяВерсияРасширение);		
		НужноПроверитьНаличиеКартинкиВHTML = Не ЭтоФайлКартинка;
		СсылкаЕстьВHTML = Истина;
		
		Если НужноПроверитьНаличиеКартинкиВHTML Тогда
			
			СсылкаЕстьВHTML = Ложь;
			
			Если Найти(ТекстПисьма, "http:cid:" + ИсточникФайла) <> 0 Тогда
				СсылкаЕстьВHTML = Истина;
			ИначеЕсли Найти(ТекстПисьма, "cid:" + ИсточникФайла) <> 0 Тогда
				СсылкаЕстьВHTML = Истина;
			ИначеЕсли (СтрДлина(ИсточникФайла) > 18) И Найти(ТекстПисьма, ИсточникФайла) <> 0 Тогда
				СсылкаЕстьВHTML = Истина;
			КонецЕсли;	
			
		КонецЕсли;	
		
		НавигационнаяСсылкаФайла = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(
			ФайлПисьма.ТекущаяВерсия, // ВерсияСсылка
			УникальныйИдентификатор); // ИдентификаторФормы
		АбсолютнаяСсылкаНаКартинку = НавигационнаяСсылкаИнформационнойБазы + "/" + НавигационнаяСсылкаФайла;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "http:cid:" + ИсточникФайла, АбсолютнаяСсылкаНаКартинку); // коррекция ошибочного html
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "cid:" + ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
		Если СтрДлина(ИсточникФайла) > 18 Тогда
			ТекстПисьма = СтрЗаменить(ТекстПисьма, ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
		КонецЕсли;
		
		ОписаниеФайла = Новый Структура("Адрес, УникальныйИдентификаторФайла, ВремяИзменения, ИмяФайла, Размер, Ссылка",
			НавигационнаяСсылкаФайла, ИсточникФайла,
			ФайлПисьма.ТекущаяВерсияДатаМодификацииФайла, 
			ФайлПисьма.ИмяФайла, 
			ФайлПисьма.Размер,
			ФайлПисьма.Ссылка);
		
		СписокДобавленныхФайлов.Добавить(ОписаниеФайла);
		
		Если СсылкаЕстьВHTML Тогда
			ОписаниеИсточника = Новый Структура("ИсточникФайла, НавигационнаяСсылка", 
				ИсточникФайла, АбсолютнаяСсылкаНаКартинку);
			ИдентификаторыКартинокПисьма.Добавить(ОписаниеИсточника);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстИзБуфера(Команда)
	ВыполнитьHTMLКоманду("paste");
КонецПроцедуры

&НаКлиенте
Процедура Вырезать(Команда)
	ВыполнитьHTMLКоманду("cut");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбора(Текст)
	
	Возврат ПользователиДокументооборот.СформироватьДанныеВыбора(Текст, Истина);
	
КонецФункции

&НаКлиенте
Процедура ВставитьОдинДень(Команда)
	
	Объект.Шаблон  = Объект.Шаблон + "[1 день]";
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьДваДня(Команда)
	
	Объект.Шаблон  = Объект.Шаблон + "[2 дня]";
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТриДня(Команда)
	
	Объект.Шаблон  = Объект.Шаблон + "[3 дня]";
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНеделю(Команда)
	
	Объект.Шаблон  = Объект.Шаблон + "[Неделя]";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеАвтопереносаСтрок(Ответ, Параметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	// преобразуем HTML в текст
	ПолучитьHTMLИзПоляHTMLДокумента();
	ВыполнитьПереключениеВТекст();
	Модифицированность = Истина;
	
	ПродолжитьАвтопереносСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьАвтопереносСтрок()
	
	ОбновитьКомандыФорматаТекста();
	
	Элементы.ГруппаСтраницаПолеВвода.Видимость = Истина;
	
	Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаПолеВвода;
	Элементы.ФормаАвтопереносСтрок.Пометка = Истина; 
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПереключениеВHTML()
	
	ТекстПисьма = РаботаС_HTML.ПолучитьТекстHTMLДляИсходящегоПисьмаИзПростогоТекста(ТекстПисьма);
	Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML");
	ВключитьРежимРедактированияHTML();
	ОбновитьКомандыФорматаТекста();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыФорматаТекста()
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		Элементы.ФормаФорматHTML.Пометка = Истина;
		Элементы.ФормаАвтопереносСтрок.Пометка = Ложь;
	Иначе
		Элементы.ФормаФорматHTML.Пометка = Ложь;
		Элементы.ФормаАвтопереносСтрок.Пометка = Истина;
	КонецЕсли;	
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		Элементы.ТекстПисьмаHTML.Видимость = Истина;
		
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаHTML;
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Ложь;
		
	Иначе		
		Элементы.ТекстПисьмаHTML.Видимость = Ложь;
			
		Элементы.ГруппаСтраницаПолеВвода.Видимость = Истина;
		
		Элементы.ГруппаСтраницыТекстаПисьма.ТекущаяСтраница = Элементы.ГруппаСтраницаПолеВвода;
		Элементы.ФормаАвтопереносСтрок.Пометка = Истина; 
			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПереключениеВТекст()
	
	ТекстПисьма = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстПисьма);
	
	Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст");
	
	ОбновитьКомандыФорматаТекста();
	
	// получаем только файлы картинки в теле HTML - в режиме HTML они не видны как вложения, но при смене формата в текст станут видны
	
	//!!!!!
	ИдентификаторыКартинокПисьма.Очистить();
	
	ВложенияКартинки.Очистить();
	СписокДобавленныхФайлов.Очистить();
	//
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ФайлыШаблона = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			Объект.Ссылка, // Письмо
			Истина, // ФормироватьРазмерПредставление
			ОтображатьУдаленныеФайлы, // ВключатьПомеченныеНаУдаление
			Истина,    // ТолькоСИдентификаторами
			Ложь); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать

		Для каждого ФайлыШаблонаСтрока Из ФайлыШаблона Цикл
			ВложенияСтрока = Вложения.Добавить();
			ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыШаблонаСтрока);
			ВложенияСтрока.Расположение = "Файл";
			
			РегистрыСведений.ИдентификаторыПочтовыхВложений.УдалитьИдентификаторПочтовогоВложения(ФайлыШаблонаСтрока.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьРежимРедактированияHTML()
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		Если Найти(ТекстПисьма, "<body contentEditable") = 0 И Найти(ТекстПисьма, "<BODY contentEditable") = 0 Тогда
		
			Если Найти(ТекстПисьма, "<body") <> 0 Или Найти(ТекстПисьма, "<BODY") <> 0 Тогда
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<body", "<body contentEditable=true");
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<BODY", "<BODY contentEditable=true");
			Иначе	
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<html>", "<html><body contentEditable=true>");
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "</html>", "</body></html>");
				
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "<HTML>", "<HTML><BODY contentEditable=true>");
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "</HTML>", "</BODY></HTML>");
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьHTMLИзПоляHTMLДокумента()
	
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда			
		ТекстПисьма = ПолучитьТекстПисьмаВПоле();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстПисьмаВПоле()
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	ТекстПисьмаВПоле = "<html><body>" + HTMLДокумент.body.innerHTML + "</body></html>";
	
	Возврат ТекстПисьмаВПоле;
	
КонецФункции

&НаКлиенте
Процедура ТекстПисьмаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФайлыШаблона()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТолькоБезИдентификаторов = (Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML);
		
		ФайлыШаблона = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			Объект.Ссылка, // Письмо
			Истина, // ФормироватьРазмерПредставление
			ОтображатьУдаленныеФайлы, // ВключатьПомеченныеНаУдаление
			Ложь,    // ТолькоСИдентификаторами
			ТолькоБезИдентификаторов); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
			
		ВложенияВременнаяТаблица = Вложения.Выгрузить();
		Вложения.Очистить();
		Для каждого ФайлыШаблонаСтрока Из ФайлыШаблона Цикл
			ВложенияСтрока = Вложения.Добавить();
			ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыШаблонаСтрока);
			ВложенияСтрока.Расположение = "Файл";
		КонецЦикла;
		
		Для каждого ВложенияВременнаяТаблицаСтрока Из ВложенияВременнаяТаблица Цикл
			Если ВложенияВременнаяТаблицаСтрока.Расположение <> "Файл" Тогда
				ВложенияСтрока = Вложения.Добавить();
				ЗаполнитьЗначенияСвойств(ВложенияСтрока, ВложенияВременнаяТаблицаСтрока);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ВключитьРежимРедактированияHTML();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложения(ТекущийОбъект)
	
	Для каждого ВложениеСтрока Из ВложенияКартинки Цикл	
		Строка = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ВложениеСтрока);
	КонецЦикла;	
	ВложенияКартинки.Очистить();
	
	Для каждого ВложениеСтрока Из Вложения Цикл
		
		Если ВложениеСтрока.Расположение = "СсылкаНаФайл" Тогда
			
			НовыйФайл = РаботаСФайламиВызовСервера.СкопироватьФайл(ВложениеСтрока.Ссылка, ТекущийОбъект.Ссылка);
			
			Кодировка = РаботаСФайламиВызовСервера.ПолучитьКодировкуВерсииФайла(
				ВложениеСтрока.Ссылка.ТекущаяВерсия);
			Если ЗначениеЗаполнено(Кодировка) Тогда
				РаботаСФайламиВызовСервера.ЗаписатьКодировкуВерсииФайла(НовыйФайл.ТекущаяВерсия, Кодировка);
			КонецЕсли;
			
			// заменяем ссылки на новые файлы
			Для Каждого Строка Из СписокДобавленныхФайлов Цикл
				
				ОписаниеФайла = Строка.Значение;
				Если ОписаниеФайла.Ссылка = ВложениеСтрока.Ссылка Тогда
					ОписаниеФайла.Ссылка = НовыйФайл;
				КонецЕсли;	
					
			КонецЦикла;		
			
		ИначеЕсли ВложениеСтрока.Расположение = "ВременноеХранилище" Тогда
			
			ВстроеннаяПочтаСервер.ДобавитьВложениеПисьмаИзВременногоХранилища(
				ТекущийОбъект.Ссылка, // Письмо
				ВложениеСтрока.Адрес, // АдресВременногоХранилища
				ВложениеСтрока.АдресИзвлеченногоТекста, // АдресВременногоХранилищаТекста
				ВложениеСтрока.Размер,
				ВложениеСтрока.ИмяФайла,
				ТекущаяДата(), // ВремяИзменения
				Неопределено); // Идентификатор - идентификатор картинки
			
			ВложениеСтрока.Расположение = "Файл";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиИдентификаторПочтовыхВложений(Идентификатор, ВладелецФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыПочтовыхВложений.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.ИдентификаторыПочтовыхВложений КАК ИдентификаторыПочтовыхВложений
		|ГДЕ
		|	ИдентификаторыПочтовыхВложений.Идентификатор = &Идентификатор
		|	И ИдентификаторыПочтовыхВложений.Файл.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);	
	
	Таблица = Запрос.Выполнить().Выгрузить();	
	Если Таблица.Количество() <> 0 Тогда
		Возврат Таблица[0].Файл;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Функция ПоместитьФайлыСДискаВоВременноеХранилище()
	
	Попытка
		
		Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
			Возврат Истина;
		КонецЕсли;
	
	Исключение
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключить расширение работы с файлами по причине:
				|""%1""';
				|en = 'Unable to mount the extension for working woth files for a reason:
				|""%1""'"),
			СообщениеОбОшибке);
			
		ПоказатьПредупреждение(, ТекстСообщения);	
		Возврат Истина;
		
	КонецПопытки;
	
	Для каждого ВложенияСтрока Из Вложения Цикл
		
		Если ВложенияСтрока.Расположение <> "НаДиске" Тогда
			Продолжить;
		КонецЕсли;
			
		Пока Истина Цикл
			
			Попытка
				
				ПолныйПутьКФайлу = ВложенияСтрока.ИмяФайлаНаДиске;
				
				//Проверка и копирование файла, если файл занят внешним приложением на редактирование.
				//Далее копия файла будет использовать для помещения в ДО.
				#Если НЕ ВебКлиент Тогда
					Если РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляРедактирования(ПолныйПутьКФайлу) Тогда
						
						ПутьКИсходномуФайлу = ПолныйПутьКФайлу;
						
						ИсходныйФайл = Новый Файл(ПутьКИсходномуФайлу);
						
						ИмяКаталогаДляРазмещенияКопииФайла = 
						КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
						
						СоздатьКаталог(ИмяКаталогаДляРазмещенияКопииФайла);
						
						ПолныйПутьКФайлу = ИмяКаталогаДляРазмещенияКопииФайла + "\" + ИсходныйФайл.Имя;
						
						//Копирование файла, если попытка копирования не удалась, то
						//далее для помещения будет использоваться исходный файл.
						Попытка
							КопироватьФайл(ПутьКИсходномуФайлу, ПолныйПутьКФайлу);
						Исключение
							ПолныйПутьКФайлу = ПутьКИсходномуФайлу;
						КонецПопытки;
						
					КонецЕсли;
				#КонецЕсли
				
				АдресВоВременномХранилище = "";
				
				ПомещаемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьКФайлу, "");
				ПомещаемыеФайлы.Добавить(Описание);
				ПомещенныеФайлы = Новый Массив;
				Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь, УникальныйИдентификатор) Тогда
					ВызватьИсключение
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'; en = 'Unable to put the file: ""%1"" into the file storage'"),
							ПолныйПутьКФайлу);
				КонецЕсли;
				
				Если ПомещенныеФайлы.Количество() = 1 Тогда
					АдресВоВременномХранилище = ПомещенныеФайлы[0].Хранение;
				Иначе
					ВызватьИсключение
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'; en = 'Unable to put the file: ""%1"" into the file storage'"),
							ПолныйПутьКФайлу);
				КонецЕсли;
				
				ВложенияСтрока.Адрес = АдресВоВременномХранилище;
				ВложенияСтрока.Расположение = "ВременноеХранилище";
				НастройкиРаботыСФайлами = ФайловыеФункцииКлиентПовтИсп.ПолучитьОбщиеНастройкиРаботыСФайлами();
				Если Не НастройкиРаботыСФайлами.ИзвлекатьТекстыФайловНаСервере Тогда
					
					ВложенияСтрока.АдресИзвлеченногоТекста =
						ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
							ПолныйПутьКФайлу,
							УникальныйИдентификатор,
							Ложь); // Отказ
					
				КонецЕсли;
				
				#Если НЕ ВебКлиент Тогда
					Каталог = Новый Файл(ИмяКаталогаДляРазмещенияКопииФайла);
					Если Каталог.Существует() Тогда
						УдалитьФайлы(ИмяКаталогаДляРазмещенияКопииФайла);
					КонецЕсли;
				#КонецЕсли
				
				Прервать;
				
			Исключение
				
				СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось загрузить файл ""%1"" по причине:
						|""%2""
						|Попробуйте повторить.';
						|en = 'Unable to load file ""%1"" for a reason:""%2"" 
						|Try to repeat.'"),
					ПолныйПутьКФайлу,
					СообщениеОбОшибке);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					"Вложения");
					
				Возврат Ложь;	
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗаписьHTML()
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ; 
	
	ТекстПисьмаHTMLДляОтменыОтправки = "<html><body>" + HTMLДокумент.body.innerHTML + "</body></html>";
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		// в веб клиенте  HTMLДокумент.images недоступен
		#Если Не ВебКлиент Тогда 
		
		ЧислоКартинок = HTMLДокумент.images.length;  
		Для Индекс = 0 По ЧислоКартинок - 1 Цикл  
			
			Изображение = HTMLДокумент.images.item(Индекс);		
			
			Попытка
				Если Найти(ВРег(Изображение.src), ВРег("file://")) = 1 Тогда
					
					ПутьФайла = Сред(Изображение.src, СтрДлина("file://") + 1);
					ПутьФайла = СтрЗаменить(ПутьФайла, "%20", " ");
					
					ПервыйСимвол = Лев(ПутьФайла, 1);
					Если ПервыйСимвол = "/" Или ПервыйСимвол = "\" Тогда
						ПутьФайла = Сред(ПутьФайла, 2);
					КонецЕсли;	
					
					АдресВоВременномХранилище = "";
					
					ПомещаемыеФайлы = Новый Массив;
					Описание = Новый ОписаниеПередаваемогоФайла(ПутьФайла, "");
					ПомещаемыеФайлы.Добавить(Описание);
					ПомещенныеФайлы = Новый Массив;
					Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь, УникальныйИдентификатор) Тогда
						ВызватьИсключение
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'; en = 'Unable to put the file: ""%1"" into the file storage'"),
								ПутьФайла);
					КонецЕсли;
					
					Если ПомещенныеФайлы.Количество() = 1 Тогда
						АдресВоВременномХранилище = ПомещенныеФайлы[0].Хранение;
					Иначе
						ВызватьИсключение
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось поместить файл: ""%1"" в хранилище'; en = 'Unable to put the file: ""%1"" into the file storage'"),
								ПутьФайла);
					КонецЕсли;
					
					УникальныйИдентификаторФайла = Новый УникальныйИдентификатор; 
					УникальныйИдентификаторФайла = Строка(УникальныйИдентификаторФайла);
					Изображение.src = "cid:" + УникальныйИдентификаторФайла;
					
					Файл = Новый Файл(ПутьФайла);
					
					ОписаниеФайла = Новый Структура("Адрес, УникальныйИдентификаторФайла, ВремяИзменения, ИмяФайла, Размер, Ссылка",
						АдресВоВременномХранилище, УникальныйИдентификаторФайла,
						Файл.ПолучитьВремяИзменения(), Файл.Имя, Файл.Размер(), 
						Неопределено);
						
					СписокДобавленныхФайлов.Добавить(ОписаниеФайла);
					
				КонецЕсли;	
			Исключение
				СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Почта.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке);
			КонецПопытки;
			
		КонецЦикла;	
		
		#КонецЕсли
		
	КонецЕсли;
	
	ТекстПисьмаHTMLПриЗаписи = ПолучитьТекстПисьмаВПоле();
	
КонецПроцедуры

#КонецОбласти
