// Возвращает текст, сформированный из указанного шаблона
Функция ПолучитьТекстШаблона(Шаблон) Экспорт
	
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныТекстов") Тогда 
		ТекстШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "Шаблон");
	Иначе 
		ТекстШаблона = Шаблон;
	КонецЕсли;
	
	// Дата
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "[День]", Формат(ТекущаяДата, "ДФ=дд"));
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Месяц]", Формат(ТекущаяДата, "ДФ=ММ"));
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Год]", Формат(ТекущаяДата, "ДФ=гггг"));
	
	// Время
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Час]", Формат(ТекущаяДата, "ДФ=ЧЧ"));
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Минута]", Формат(ТекущаяДата, "ДФ=мм"));
	
	// Сроки исполнения
	Если Найти(ТекстШаблона, "[1 день]") > 0 
		Или Найти(ТекстШаблона, "[2 дня]") > 0
		Или Найти(ТекстШаблона, "[3 дня]") > 0 
		Или Найти(ТекстШаблона, "[Неделя]") > 0 Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
		ФорматДаты = ?(ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"), 
			"ДФ='dd.MM.yy H:mm'",
			"ДФ='dd.MM.yy'");
			
		ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
		Если ИспользоватьГрафикиРаботы Тогда
			График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Пользователь);
		Иначе 
			График = Неопределено;
		КонецЕсли;
		
		Если Найти(ТекстШаблона, "[1 день]") > 0 Тогда 
			СрокИсполнения = РассчитатьДату(ИспользоватьГрафикиРаботы, График, ТекущаяДата, 1);
			ТекстШаблона = СтрЗаменить(ТекстШаблона, "[1 день]", 
				Формат(СрокИсполнения, ФорматДаты));
		КонецЕсли;
		
		Если Найти(ТекстШаблона, "[2 дня]") > 0 Тогда 
			СрокИсполнения = РассчитатьДату(ИспользоватьГрафикиРаботы, График, ТекущаяДата, 2);
			ТекстШаблона = СтрЗаменить(ТекстШаблона, "[2 дня]", 
				Формат(СрокИсполнения, ФорматДаты));
		КонецЕсли;
		
		Если Найти(ТекстШаблона, "[3 дня]") > 0 Тогда 
			СрокИсполнения = РассчитатьДату(ИспользоватьГрафикиРаботы, График, ТекущаяДата, 3);
			ТекстШаблона = СтрЗаменить(ТекстШаблона, "[3 дня]", 
				Формат(СрокИсполнения, ФорматДаты));
		КонецЕсли;
		
		Если Найти(ТекстШаблона, "[Неделя]") > 0 Тогда 
			СрокИсполнения = РассчитатьДату(ИспользоватьГрафикиРаботы, График, ТекущаяДата, 7);
			ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Неделя]", 
				Формат(СрокИсполнения, ФорматДаты));
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекстШаблона;
	
КонецФункции

Функция РассчитатьДату(ИспользоватьГрафикиРаботы, График, ТекущаяДата, КоличествоДней)
	
	Если ИспользоватьГрафикиРаботы Тогда
		Дата = КалендарныеГрафики.ПолучитьДатуПоКалендарю(
			График.Календарь, 
			ТекущаяДата,
			КоличествоДней);
		Дата = Дата + (ТекущаяДата - НачалоДня(ТекущаяДата));
	Иначе
		Дата = ТекущаяДата + КоличествоДней * 24 * 3600;
	КонецЕсли;
		
	Возврат Дата;
		
КонецФункции

// УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка,
		|ОбщийШаблон,
		|Автор,
		|Пользователи";
	
КонецФункции

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
		ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Автор, Истина);
	
	ТаблицаПользователей = ОбъектДоступа.Пользователи.Выгрузить();
	Для Каждого СтрПользователя Из ТаблицаПользователей Цикл
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, СтрПользователя.ПользовательИлиГруппа, Ложь);
	КонецЦикла;
	
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		
		ЗаписьПротокола = Новый Структура("Элемент, Описание",
			ОбъектДоступа.Автор, НСтр("ru = 'Автор'; en = 'Author'"));
		ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
		
		Если ТаблицаПользователей.Количество() > 0 Тогда
			ЗаписьПротокола = Новый Структура("Элемент, Описание",
				ОбъектДоступа.Ссылка, НСтр("ru = 'Пользователи на закладке ""Доступ""'; en = 'Users on the ""Access"" tab'"));
			ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив пользователей, делегирующих права проверяемому пользователю
//
// Параметры
//  	Пользователь - СправочникСсылка.Пользователи - проверяемый пользователь
//
// Возвращаемое значение:
//  Массив - массив пользователей
Функция ПолучитьПользователейДелегирующихПрава(Пользователь) Экспорт 
	
	СправочникШаблоны = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ШаблоныТекстов");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбластиДелегированияПравСостав.Ссылка
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
		|ГДЕ
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных = &СправочникШаблоны
		|	И НЕ ОбластиДелегированияПравСостав.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("СправочникШаблоны", СправочникШаблоны);
	ОбластиДелегирования = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДелегированиеПрав.ОтКого
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ТаблЧастьОбластиДелегирования
		|		ПО ДелегированиеПрав.Ссылка = ТаблЧастьОбластиДелегирования.Ссылка
		|ГДЕ
		|	ДелегированиеПрав.Кому = &ТекущийПользователь
		|	И ДелегированиеПрав.Действует
		|	И (ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
		|			ИЛИ ТаблЧастьОбластиДелегирования.ОбластьДелегирования В (&ОбластиДелегирования))";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	Запрос.УстановитьПараметр("ОбластиДелегирования", ОбластиДелегирования);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОтКого");
	
КонецФункции


