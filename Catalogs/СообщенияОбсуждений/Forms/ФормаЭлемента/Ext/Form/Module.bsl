#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Параметры.Свойство("Тема") И ЗначениеЗаполнено(Параметры.Тема) Тогда
			
			// Создание нового сообщения в теме
			Объект.ВладелецСообщения = Параметры.Тема;
			Предмет = Объект.ВладелецСообщения.Документ;
			
		ИначеЕсли Параметры.Свойство("Сообщение") Тогда
			
			// Создание нового сообщения в ответ на сообщение
			Объект.Родитель = Параметры.Сообщение.Ссылка;
			Объект.ВладелецСообщения = Объект.Родитель.ВладелецСообщения;
			Предмет = Объект.ВладелецСообщения.Документ;
			
		ИначеЕсли Параметры.Свойство("Предмет") Тогда
			
			// Создание темы по предмету обсуждения
			Предмет = Параметры.Предмет;
			ТемаРаздел = Справочники.ПапкиФорума.ТемыДокументов;
			ТемаНаименование = НСтр("ru = 'Обсуждение ""%1""'; en = 'Discussion on ""%1""'");
			ТемаНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТемаНаименование, Предмет);
			Объект.ПервоеСообщениеТемы = Истина;
			
		ИначеЕсли Параметры.Свойство("ТемаРаздел") Тогда
			
			// Создание темы в разделе
			ТемаРаздел = Параметры.ТемаРаздел;
			Объект.ПервоеСообщениеТемы = Истина;
			
		ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") 
			И Параметры.ЗначенияЗаполнения.Свойство("Тема") Тогда
			
			Объект.ВладелецСообщения = Параметры.ЗначенияЗаполнения.Тема;
			Предмет = Объект.ВладелецСообщения.Документ;
			
		ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") 
			И Параметры.ЗначенияЗаполнения.Свойство("Предмет") Тогда
			
			Предмет = Параметры.ЗначенияЗаполнения.Предмет;
			
		ИначеЕсли Параметры.Свойство("ШаблонДокумента")
			И Параметры.ШаблонДокумента = "СоздатьПустойДокумент" Тогда
			
			// Создание темы
			Объект.ПервоеСообщениеТемы = Истина;
			
		ИначеЕсли Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
			
			Основание = Параметры.Основание;
			Если ТипЗнч(Основание) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				
				ТемаОснование = Основание;
				ТемаРаздел = ТемаОснование.Папка;
				ТемаНаименование = ТемаОснование.Наименование;
				
				РаботаСРабочимиГруппами.ФормаДокументаДобавитьУчастников(
					ЭтаФорма,
					РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(ТемаОснование));
				ТемаРабочаяГруппа = РабочаяГруппаТаблица.Количество() <> 0;
				
				Объект.ПервоеСообщениеТемы = Истина;
				
			КонецЕсли;
			
		Иначе
			
			Сообщение =
				НСтр("ru = 'Для создания нового сообщения необходимо сначала выбрать тему обсуждения'; en = 'You must select forum thread to create a new message.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
			
			Возврат;
			
		КонецЕсли;
		
		Если Параметры.Свойство("ТекстНовогоСообщения") Тогда
			
			Объект.ТекстСообщения = Параметры.ТекстНовогоСообщения;
			
		КонецЕсли;
		
		СозданиеСообщения = Истина;
		
	Иначе
		
		ОбновитьФайлСообщения();
		ОбновитьДанныеТемы();
		
	КонецЕсли;
	
	// Режим чтения
	УстановитьРежимЧтения();
	
	// Прочтение
	ОповеститьОПрочтении = РаботаСПрочтениями.УстановитьСвойствоПрочтен(Объект.Ссылка);
	
	// Файлы
	Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	Файлы.Параметры.УстановитьЗначениеПараметра(
		"ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
	
	// Голосование
	ГолосованиеВПроцессе = Объект.ДобавленоГолосование;
	ОбновитьГолосованиеСервер(Ложь);
	
	// Рабочая группа
	Если ВозможноВедениеРабочейГруппы() Тогда
		РаботаСРабочимиГруппами.ДокументУстановитьУсловноеОформлениеСпискаРабочейГруппы(ЭтаФорма);
	КонецЕсли;
	
	// Настройка отображения формы
	УстановитьЗаголовокФормы();
	УстановитьВидимостьЭлементов();
	СформироватьНаЧтоОтвечаем();
	
	// Показ помеченных на удаление файлов
	ПоказатьПомеченныеНаУдаление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭтаФорма.ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		Ложь);
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	
	// Действие при открытии формы
	Параметры.Свойство("ДействиеПриОткрытии", ДействиеПриОткрытии);
	Элементы.ПервыйПрикрепленныйФайл.АктивизироватьПоУмолчанию = (ДействиеПриОткрытии = "ОткрытьФайлы")
		И КоличествоФайлов = 1;
	Элементы.Файлы.АктивизироватьПоУмолчанию = (ДействиеПриОткрытии = "ОткрытьФайлы")
		И КоличествоФайлов > 1;
	Элементы.Голосование.АктивизироватьПоУмолчанию = (ДействиеПриОткрытии = "ОткрытьГолосование");
	
	// Представление предмета
	ПредметСтрокой = РаботаСОбсуждениями.ПолучитьПредставлениеПредмета(Предмет);
	
	// Автор и дата
	СформироватьАвторДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РаботаСПрочтениямиКлиент.ОповеститьОПрочтении(Объект.Ссылка, ОповеститьОПрочтении);
	
	УстановитьДоступностьФайловыхКоманд();
	
	// Действие при открытии формы
	Если ДействиеПриОткрытии = "ОткрытьФайлы" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаФайлы;
	ИначеЕсли ДействиеПриОткрытии = "ОткрытьГолосование" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаГолосование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		Если Объект.Ссылка = ВыбранноеЗначение Тогда
			ТекстПредупреждения = НСтр("ru = 'Сообщение форума не может отвечать на самого себя.'; en = 'Forum message cannot be an answer to himself.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Объект.Родитель = ВыбранноеЗначение;
		СформироватьНаЧтоОтвечаем();
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Объект.Ссылка Тогда
		ОбработатьОповещениеОНовыхФайлахСервер();
		Если Параметр <> Неопределено Тогда
			Элементы.Файлы.ТекущаяСтрока = Параметр;
		КонецЕсли;
		Если КоличествоФайлов > 1 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаФайлы;
		КонецЕсли;
		УстановитьДоступностьФайловыхКоманд();
		УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		ВладелецФайла = Неопределено;
		Если Параметр.Свойство("Владелец", ВладелецФайла) Тогда
			Если ВладелецФайла = Объект.Ссылка Тогда
				ОбработатьОповещениеОНовыхФайлахСервер();
				ФайлСозданный = Неопределено;
				Если Параметр.Свойство("Файл", ФайлСозданный) Тогда
					Элементы.Файлы.ТекущаяСтрока = ФайлСозданный;
				КонецЕсли;
				Если КоличествоФайлов > 1 Тогда
					Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаФайлы;
				КонецЕсли;
				УстановитьДоступностьФайловыхКоманд();
				УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненоГолосование" И Параметр = Объект.Ссылка Тогда
		ОбновитьГолосованиеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Рабочая группа
	Если ВозможноВедениеРабочейГруппы() Тогда
		
		РабочаяГруппаОбновитьНаСервере();
		
		ТемаРабочаяГруппа = РабочаяГруппаТаблица.Количество() <> 0;
		
		// Формирование исходной рабочей группы
		Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.ВладелецСообщения);
		ИсходнаяРабочаяГруппа.Очистить();
		Для Каждого Эл Из Участники Цикл
			Строка = ИсходнаяРабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.Изменение = Эл.Изменение;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(РабочаяГруппаТаблица, "Участник");
	КоличествоУчастниковРабочейГруппы = РабочаяГруппаТаблица.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СозданиеНовойТемы = Не ЗначениеЗаполнено(ТекущийОбъект.ВладелецСообщения);
	
	ОповеститьОСозданииНовойТемы = СозданиеНовойТемы И Не ЗначениеЗаполнено(Предмет);
	ПараметрыЗаписи.Вставить("ОповеститьОСозданииНовойТемы", ОповеститьОСозданииНовойТемы);
	
	ОповеститьОСозданииТемыПоПредмету = СозданиеНовойТемы И ЗначениеЗаполнено(Предмет);
	ПараметрыЗаписи.Вставить("ОповеститьОСозданииТемыПоПредмету", ОповеститьОСозданииТемыПоПредмету);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СозданиеНовойТемы", СозданиеНовойТемы);
	Если СозданиеНовойТемы Тогда
		РеквизитыТемы = ПолучитьРеквизитыТемы();
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РеквизитыТемы", РеквизитыТемы);
	КонецЕсли;
	
	// Рабочая группа
	Если ВозможноВедениеРабочейГруппы() Тогда
		
		Если Не ТемаРабочаяГруппа Тогда
			РабочаяГруппаТаблица.Очистить();
		КонецЕсли;
		
		РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
		Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
			Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
			Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
				РабочаяГруппаТаблица.Удалить(Строка);
			КонецЕсли;	
		КонецЦикла;
		
		НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
		РабочаяГруппаДобавить = Новый Массив;
		РабочаяГруппаУдалить = Новый Массив;
		
		// Формирование списка удаленных участников рабочей группы
		Для Каждого Эл Из ИсходнаяРабочаяГруппа Цикл
			
			Найден = Ложь;
			
			Для Каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
					
					Найден = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если Не Найден Тогда
				РабочаяГруппаУдалить.Добавить(
					Новый Структура("Участник, Изменение",
						Эл.Участник,
						Эл.Изменение));
			КонецЕсли;
			
		КонецЦикла;
		
		// Формирование списка добавленных участников рабочей группы
		Для каждого Эл Из НоваяРабочаяГруппа Цикл
			
			Найден = Ложь;
			
			Для Каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
				Если Эл.Участник = Эл2.Участник
					И Эл.Изменение = Эл2.Изменение Тогда
					
					Найден = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура("Участник, Изменение",
					Эл.Участник,
					Эл.Изменение));
			КонецЕсли;
			
		КонецЦикла;
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ПервоеСообщениеТемы Тогда
		ТемаОбъект = ТекущийОбъект.ВладелецСообщения.ПолучитьОбъект();
		РеквизитыТемы = ПолучитьРеквизитыТемы();
		ЗаполнитьЗначенияСвойств(ТемаОбъект, РеквизитыТемы, , "Документ");
		ТемаОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Файлы
	ЗначениеПараметра = Файлы.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("ВладелецФайла"));
	Если Не ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда 
		Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	КонецЕсли;
	
	ОбновитьДанныеТемы();
	
	Если УдалитьРезультатыГолосованияПослеЗаписи Тогда
		РаботаСОбсуждениями.УдалитьГолосование(Объект.Ссылка);
		УдалитьРезультатыГолосованияПослеЗаписи = Ложь;
	КонецЕсли;
	
	ГолосованиеВПроцессе = ТекущийОбъект.ДобавленоГолосование;
	
	ОбновитьГолосованиеСервер(Ложь);
	
	УстановитьВидимостьЭлементов();
	УстановитьЗаголовокФормы();
	
	// Рабочие группы
	Если ВозможноВедениеРабочейГруппы() Тогда
		
		РабочаяГруппаОбновитьНаСервере();
		
		// Формирование исходной рабочей группы
		Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.ВладелецСообщения);
		ИсходнаяРабочаяГруппа.Очистить();
		Для Каждого Эл Из Участники Цикл
			Строка = ИсходнаяРабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.Изменение = Эл.Изменение;
		КонецЦикла;
		
	КонецЕсли;
	
	// Автор и дата
	СформироватьАвторДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.ОповеститьОСозданииТемыПоПредмету Тогда
		ПараметрыОповещения = Новый Структура("Тема,Предмет", 
			Объект.ВладелецСообщения, 
			Предмет);
		Оповестить("СозданаТемаПоПредмету", ПараметрыОповещения);
	КонецЕсли;
	
	Если ПараметрыЗаписи.ОповеститьОСозданииНовойТемы Тогда
		ПараметрыОповещения = Новый Структура("Тема", Объект.ВладелецСообщения);
		Оповестить("Создание_ТемыОбсуждений", ПараметрыОповещения);
	КонецЕсли;
	
	Если Объект.ПервоеСообщениеТемы Тогда
		Оповестить("Изменение_ТемыОбсуждений");
	Иначе
		Оповестить("Изменение_СообщенияОбсуждений", Объект.Ссылка);
	КонецЕсли;
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не Объект.ПервоеСообщениеТемы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ТемаРаздел");
		МассивНепроверяемыхРеквизитов.Добавить("ТемаНаименование");
	КонецЕсли;
	
	Если Не ТемаРабочаяГруппа Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РабочаяГруппаТаблица");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Файлы

&НаКлиенте
Процедура ПервыйПрикрепленныйФайлНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ФайлПрикрепленный = Неопределено ИЛИ ФайлПрикрепленный.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлПрикрепленный,
		Неопределено, УникальныйИдентификатор, Неопределено, ФайлПредыдущийАдрес);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

#КонецОбласти

#Область Голосование

&НаКлиенте
Процедура ГолосованиеПриИзменении(Элемент)
	
	Элементы.Проголосовать.Доступность = ЗначениеЗаполнено(Голосование);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТекстСообщенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если КоличествоФайлов <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	КомандыРаботыСФайламиКлиент.Редактировать(ФайлПрикрепленный);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если КоличествоФайлов <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	КомандыРаботыСФайламиКлиент.Редактировать(ФайлПрикрепленный);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецСообщенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыОповещения = Новый Структура("Тема, Сообщение", 
		Объект.ВладелецСообщения, 
		Объект.Ссылка);
	Оповестить("ВыбраноСообщениеДляПросмотра", ПараметрыОповещения);
		
	Форма = ОткрытьФорму("Справочник.ТемыОбсуждений.Форма.ФормаПросмотраТемы",
		Новый Структура("Тема, ТекущееСообщение",
			Объект.ВладелецСообщения,
			Объект.Ссылка),
		,	
		Объект.ВладелецСообщения.УникальныйИдентификатор());
			
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНеУказаноНаЧтоОтвечаемНажатие(Элемент)
	
	ВыбратьРодителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Предмет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	
	ПерсональныеНастройкиРаботыСФайлами =
		ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами();
	КакОткрывать = ПерсональныеНастройкиРаботыСФайлами.ДействиеПоДвойномуЩелчкуМыши;
	
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ВыбраннаяСтрока, 
		Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения(
		"СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения(
			"УстановитьДоступностьКомандКлиент", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(
			Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:.'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	ФайлОснование = Элементы.Файлы.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 2;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтаФорма, РежимСоздания, Истина);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка создания нового файла: %1'; en = 'Error creating new file: %1'"),
				КраткоеПредставлениеОшибки(Инфо));
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецПопытки;
	Иначе
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент,
	ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:.'; en = 'Added:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(
		ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	ОбновитьФайлСообщения();
	УстановитьВидимостьЭлементов();
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВариантыГолосования

&НаКлиенте
Процедура ВариантыГолосованияТекстВариантаПриИзменении(Элемент)
	
	УдалитьРезультатыГолосования();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыГолосованияПередНачаломИзменения(Элемент, Отказ)
	
	ПредложитьУдалитьРезультатыГолосования(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыГолосованияПередУдалением(Элемент, Отказ)
	
	ПредложитьУдалитьРезультатыГолосования(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыГолосованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ПредложитьУдалитьРезультатыГолосования(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппа

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент,
	Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Файлы

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Записать();
	КонецЕсли;
	
	Попытка
		РежимСоздания = 2;
		РаботаСФайламиКлиент.ДобавитьФайл(
			Неопределено, Объект.Ссылка, ЭтотОбъект, РежимСоздания, Истина, , , , , Истина);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка создания нового файла: %1'; en = 'Error creating new file: %1'"),
			КраткоеПредставлениеОшибки(Инфо));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПомеченныеНаУдаление(Команда)
	
	ПоказатьПомеченныеНаУдаление = Не ПоказатьПомеченныеНаУдаление;
	ПоказатьПомеченныеНаУдалениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленных = ПолучитьИзВременногоХранилища(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе			
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;	
	Иначе
		Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
			
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
		РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		Элементы.Файлы.ТекущаяСтрока, 
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.Файлы.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.Файлы.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;	
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		Элементы.Файлы.ТекущаяСтрока, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	ПараметрыОбновленияФайла.Кодировка = ТекущиеДанные.Кодировка;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлПервый(Команда)
	
	Если ФайлПрикрепленный = Неопределено Или ФайлПрикрепленный.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьФайлПервыйЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Пометить ""%1"" на удаление?'; en = 'Mark ""%1"" for deletion?'"), ФайлПрикрепленный);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлПервыйЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПометкуУдаленияФайла();
	УстановитьВидимостьЭлементов();
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлПервый(Команда)
	
	Если ФайлПрикрепленный = Неопределено ИЛИ ФайлПрикрепленный.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, ФайлПрикрепленный);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеПервогоФайла(Команда)

	Если ФайлПрикрепленный = Неопределено ИЛИ ФайлПрикрепленный.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		ФайлПрикрепленный, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ФайлХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ФайлРедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ФайлРедактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПервыйФайл(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ФайлПрикрепленный);
	
	ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Обработчик, 
		Элементы.Файлы.ТекущаяСтрока);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла =
		РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ЧислоФайлов = 0;
	СкопироватьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) скопированы в буфер обмена.'; en = 'Files (%1 pcs) copied to the clipboard.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование в буфер'; en = 'Copy to clipboard'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	Если Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЧислоФайлов = 0;
	ВставитьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) вставлены из буфера обмена.'; en = 'Files (%1 pcs) pasted from the clipboard.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Вставка из буфера'; en = 'Paste from clipboard'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ЧислоФайлов)
	
	ЧислоФайлов = Элементы.Файлы.ВыделенныеСтроки.Количество();
	ОбщегоНазначения.СкопироватьФайлыВБуферОбменаИзСпискаФайлов(Элементы.Файлы.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ЧислоФайлов)
	
	Если ОбщегоНазначения.ПустойБуферОбмена() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	МассивФайлов = ДанныеИзБуфераОбмена.Данные;
	
	ЧислоФайлов = МассивФайлов.Количество();
	
	ВладелецФайла = Объект.Ссылка;
	
	РаботаСФайламиВызовСервера.СкопироватьФайлы(МассивФайлов, ВладелецФайла);
	Элементы.Файлы.Обновить();
	
	НайтиИПоказатьКоличествоФайлов();
	
КонецПроцедуры

#КонецОбласти

#Область РабочаяГруппа

&НаКлиенте
Процедура ДобавитьРабочуюГруппу(Команда)
	
	ТемаРабочаяГруппа = Истина;
	
	УстановитьВидимостьЭлементов();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРабочаяГруппа;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаОбновить(Команда)
	
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Голосование

&НаКлиенте
Процедура ДобавитьГолосование(Команда)
	
	Объект.ДобавленоГолосование = Истина;
	Если Объект.ВариантыГолосования.Количество() = 0 Тогда
		ЗаполнитьВариантыГолосованияПоУмолчанию();
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаГолосование;
	
КонецПроцедуры

&НаКлиенте
Процедура Проголосовать(Команда)
	
	ВыбранныйВариантГолосования = Голосование;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Записать();
	КонецЕсли;
	
	РаботаСОбсуждениямиКлиент.Проголосовать(Объект.Ссылка, ВыбранныйВариантГолосования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСвойГолос(Команда)
	
	ОтменитьСвойГолосСервер();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура Прокомментировать(Команда)
	
	ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаЭлемента", 
		Новый Структура("Сообщение, ТекстНовогоСообщения",
			Объект.Ссылка,
			ГолосПользователя));
			
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГолосование(Команда)
	
	ТекстВопроса = 
		НСтр("ru = 'Если изменить голосование, то все предыдущие результаты голосования будут удалены.
			|Продолжить?';
			|en = 'If you modify the poll then all the previous poll results will be cleared.
			|Do you want to continue?'");
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ИзменитьГолосованиеЗавершение", ЭтотОбъект);
		
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьГолосование(Команда)
	
	ТекстВопроса = 
		НСтр("ru = 'Если удалить голосование, то все предыдущие результаты голосования будут удалены.
			|Продолжить?';
			|en = 'If you delete the poll then all the previous poll results will be cleared. 
			|Do you want to continue?'");
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("УдалитьГолосованиеЗавершение", ЭтотОбъект);
		
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыборСообщенияИзТемы(Команда)
	
	ВыбратьРодителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСообщению(Команда)
	
	ПоказатьЗначение(, Объект.Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТеме(Команда)
	
	ПоказатьЗначение(, Объект.ВладелецСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьНаСообщение(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветитьНаСообщениеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для ответа на сообщение необходимо записать. Выполнить запись?'; en = 'You must save the message to reply to it. Do you want to save the message?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сообщение", Объект.Ссылка);
	ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаЭлемента", ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьНаСообщениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		"Создание:", 
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сообщение", Объект.Ссылка);
	ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Цитировать(Команда)
	
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		
		ВыделенныйТекстИсходногоСообщения = Элементы.РодительТекстСообщения.ВыделенныйТекст;
		Если ЗначениеЗаполнено(ВыделенныйТекстИсходногоСообщения) Тогда
			ТекстЦитирования = ВыделенныйТекстИсходногоСообщения;
		Иначе
			ТекстЦитирования = Элементы.РодительТекстСообщения.ТекстРедактирования;
		КонецЕсли;
		
		Почта.ДобавитьКвотирование(ТекстЦитирования, "> ");
		
		ВыделенныйТекстТекущегоСообщения = Элементы.ТекстСообщения.ВыделенныйТекст;
		Если ЗначениеЗаполнено(Элементы.ТекстСообщения.ТекстРедактирования) Тогда
			ТекстЦитирования = Символы.ПС + ТекстЦитирования;
		КонецЕсли;
		Элементы.ТекстСообщения.ВыделенныйТекст = ВыделенныйТекстТекущегоСообщения + ТекстЦитирования;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьТему(Команда)
	
	ТемаЗакрытая = Истина;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТему(Команда)
	
	ТемаЗакрытая = Ложь;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
				ПутьКФайлу, Объект.Ссылка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
				
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'; en = 'Ther is no picture in clipboard'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Отправить

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Исполнение", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Ознакомление", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработка(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"КомплексныйПроцесс", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РабочаяГруппа

&НаСервере
Процедура РабочаяГруппаОбновитьНаСервере()
	
	РабочаяГруппаТаблица.Очистить();
	РаботаСРабочимиГруппами.ФормаДокументаДобавитьУчастников(
		ЭтаФорма,
		РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(Объект.ВладелецСообщения));
	
КонецПроцедуры

&НаСервере
Функция ВозможноВедениеРабочейГруппы()
	
	Возврат Объект.ПервоеСообщениеТемы И Не ЗначениеЗаполнено(Предмет);
	
КонецФункции

#КонецОбласти

#Область Файлы

&НаСервере
Процедура НайтиИПоказатьКоличествоФайлов()
	
	КоличествоФайлов = 0;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФайлов = Делопроизводство.КоличествоФайлов(Объект.Ссылка);
	
КонецПроцедуры	

&НаСервере
Процедура ПоказатьПомеченныеНаУдалениеНаСервере()
	
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ЭтаФорма.ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		ПоказатьПомеченныеНаУдаление);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоказПомеченныхНаУдалениеФайлов()
	
	Элементы.ФайлыПоказатьПомеченныеНаУдаление.Пометка = ПоказатьПомеченныеНаУдаление;
	
	Если ПоказатьПомеченныеНаУдаление Тогда
		ПараметрПометкиУдаления = Новый ПараметрКомпоновкиДанных("НеПоказыватьПомеченныеНаУдаление");
		Для Каждого Элемент Из Файлы.Параметры.Элементы Цикл
			Если Элемент.Параметр = ПараметрПометкиУдаления Тогда
				Элемент.Использование = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Файлы.Параметры.УстановитьЗначениеПараметра("НеПоказыватьПомеченныеНаУдаление", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФайлСообщения()
	
	КоличествоФайлов = 0;
	ФайлПрикрепленный = Справочники.Файлы.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Объект.Ссылка, Ложь);
	КоличествоФайлов = МассивФайлов.Количество();
	
	Если МассивФайлов.Количество() > 0 Тогда
		ФайлПрикрепленный = МассивФайлов[0];
		РеквизитыПрикрепленногоФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ФайлПрикрепленный,
			"ИндексКартинки, ХранитьВерсии, Редактирует, ПометкаУдаления, Наименование, ТекущаяВерсияРасширение");
		
		ФайлИндексКартинки = РеквизитыПрикрепленногоФайла.ИндексКартинки;
		ФайлХранитьВерсии = РеквизитыПрикрепленногоФайла.ХранитьВерсии;
		ФайлРедактирует = РеквизитыПрикрепленногоФайла.Редактирует;
		ФайлПрикрепленныйПометкаУдаления = РеквизитыПрикрепленногоФайла.ПометкаУдаления;
		ФайлСРасширением =
			РеквизитыПрикрепленногоФайла.Наименование+ "."
			+ РеквизитыПрикрепленногоФайла.ТекущаяВерсияРасширение;
		
		Если ФайлРедактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
			ФайлРедактируетТекущийПользователь = Истина;
		Иначе
			ФайлРедактируетТекущийПользователь = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивФайлов.Количество() > 1 Тогда
		Элементы.Файлы.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Элементы.Файлы.ТекущаяСтрока, 
		Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуУдаленияФайла()
	
	ОбъектФайлПрикрепленный = ФайлПрикрепленный.ПолучитьОбъект();
	ОбъектФайлПрикрепленный.УстановитьПометкуУдаления(Не ОбъектФайлПрикрепленный.ПометкаУдаления);
	ОбновитьФайлСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКоманд()
	
	Если ФайлПрикрепленный <> Неопределено Тогда
		
		Элементы.ЗакончитьРедактированиеПервый.Доступность = ФайлРедактируетТекущийПользователь;
		Элементы.РедактироватьПервый.Доступность = 
			(ФайлРедактирует.Пустая()
			ИЛИ ФайлРедактируетТекущийПользователь)
			И НЕ РежимЧтенияСообщения;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандКлиент(
	Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ОбновитьФайлСообщения();
	УстановитьДоступностьФайловыхКоманд();
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если (ТекущиеДанные = Неопределено)
		ИЛИ ТипЗнч(Элементы.Файлы.ТекущаяСтрока) <> Тип("СправочникСсылка.Файлы") Тогда
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОткрытьФайл, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыРедактировать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗакончитьРедактирование, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Занять, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗанять, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьИзменения, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьКак, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Освободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОсвободить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Ложь);
			
	Иначе	
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОткрытьФайл, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, Редактирует.Пустая() И Не РежимЧтенияСообщения);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыРедактировать, 
			Редактирует.Пустая() И Не РежимЧтенияСообщения);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗакончитьРедактирование,
			РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Занять,
			Редактирует.Пустая() И Не РежимЧтенияСообщения);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗанять,
			Редактирует.Пустая() И Не РежимЧтенияСообщения);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения,
			РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьИзменения,
			РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьКак, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Освободить,
			Не Редактирует.Пустая() И Не РежимЧтенияСообщения);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОсвободить,
			Не Редактирует.Пустая() И Не РежимЧтенияСообщения);
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске,
			Истина И Не РежимЧтенияСообщения);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске,
			Истина И Не РежимЧтенияСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещениеОНовыхФайлахСервер()
	
	ОбновитьФайлСообщения();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область Голосование

&НаСервере
Процедура ОбновитьГолосованиеСервер(УстановитьВидимостьЭлементов = Истина)
	
	Элементы.Голосование.СписокВыбора.Очистить();
	
	РезультатГолосования = РаботаСОбсуждениями.ПолучитьРезультатГолосования(Объект.Ссылка);
	Для Каждого РезультатГолосования Из РезультатГолосования Цикл
		Если РезультатГолосования.Значение = 0 Тогда
			ВсегоГолосов = РезультатГолосования.Представление;
			Продолжить;	
		КонецЕсли;
		
		Элементы.Голосование.СписокВыбора.Добавить(
			РезультатГолосования.Значение,
			РезультатГолосования.Представление);
	КонецЦикла;
	
	Голосование = РаботаСОбсуждениями.ПолучитьРезультатГолосованияТекущегоПользователя(Объект.Ссылка);
	ГолосПользователя = РаботаСОбсуждениями.ПолучитьПредставлениеГолосаПользователя(Объект.Ссылка);
	Если Голосование <> 0 Тогда
		ПользовательПроголосовал = Истина;
	Иначе
		ПользовательПроголосовал = Ложь;
	КонецЕсли;	
	
	Если УстановитьВидимостьЭлементов Тогда
		УстановитьВидимостьЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСвойГолосСервер()
	
	РаботаСОбсуждениями.ОтменитьГолос(Объект.Ссылка);
	ОбновитьГолосованиеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантыГолосованияПоУмолчанию()
	
	Объект.ВопросГолосования = "";
	НовыйВариантГолосования = Объект.ВариантыГолосования.Добавить();
	НовыйВариантГолосования.ТекстВарианта = НСтр("ru = 'Да'; en = 'Yes'");
	НовыйВариантГолосования = Объект.ВариантыГолосования.Добавить();
	НовыйВариантГолосования.ТекстВарианта = НСтр("ru = 'Нет'; en = 'No'");
	НовыйВариантГолосования = Объект.ВариантыГолосования.Добавить();
	НовыйВариантГолосования.ТекстВарианта = НСтр("ru = 'Не знаю'; en = 'I do not know'");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРезультатыГолосования()
	
	Если ГолосованиеВПроцессе Тогда
		ГолосованиеВПроцессе = Ложь;
		УдалитьРезультатыГолосованияПослеЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьУдалитьРезультатыГолосования(Отказ)
	
	Если Не ГолосованиеВПроцессе Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредложитьУдалитьРезультатыГолосованияЗавершение", ЭтотОбъект);
	ТекстВопроса = 
		НСтр("ru = 'Если изменить варианты ответов, то все предыдущие результаты голосования будут удалены.
			|Продолжить редактирование?';
			|en = 'If you modify poll options then all the previous poll results will be cleared.
			|Do you want to continue?'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьУдалитьРезультатыГолосованияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьРезультатыГолосования();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ЯвляетсяТемой = Объект.ПервоеСообщениеТемы;
	
	// Закрытая тема
	Элементы.ФормаОтветитьНаСообщение.Доступность = Не ТемаЗакрытая;
	Элементы.ТемаЗакрыта.Видимость = ТемаЗакрытая;
	Элементы.ЗакрытьТему.Видимость = ЯвляетсяТемой И Не РежимЧтенияСообщения И Не ТемаЗакрытая;
	Элементы.ОткрытьТему.Видимость = ЯвляетсяТемой И Не РежимЧтенияСообщения И ТемаЗакрытая;
	
	// Предмет
	Элементы.Предмет.Видимость = ЗначениеЗаполнено(Предмет);
	
	// Тема
	Элементы.ТемаРаздел.Видимость = ЯвляетсяТемой;
	Элементы.ФормаПроцессы.Видимость = Не ЯвляетсяТемой;
	Элементы.ФормаПроцессыТемы.Видимость = ЯвляетсяТемой;
	Элементы.ТемаНаименование.Видимость = ЯвляетсяТемой И Не РежимЧтенияСообщения;
	Элементы.ФормаПерейтиКТеме.Видимость = ЗначениеЗаполнено(Объект.ВладелецСообщения);
	Элементы.ФормаПерейтиКТеме.ТолькоВоВсехДействиях = Не (Элементы.ТемаНаименование.Видимость);
	Элементы.ТемаСсылка.Видимость = Не ЯвляетсяТемой Или РежимЧтенияСообщения;
	Элементы.ТемаРаздел.Видимость = ЯвляетсяТемой;
	Элементы.ФормаВыборСообщенияИзТемы.Видимость = Не ЯвляетсяТемой И Не РежимЧтенияСообщения;
	Элементы.ФормаПерейтиКСообщению.Видимость = Не ЯвляетсяТемой И РежимЧтенияСообщения;
	
	// Файлы
	Элементы.ДобавитьФайл.Видимость = (КоличествоФайлов = 0) И Не РежимЧтенияСообщения;
	Элементы.ВставитьКартинкуИзБуфера.Видимость = (КоличествоФайлов = 0) И Не РежимЧтенияСообщения;
	Элементы.ГруппаФайл.Видимость = (КоличествоФайлов = 1);
	Элементы.СтраницаФайлы.Видимость = (КоличествоФайлов > 1);
	
	// Рабочая группа
	Элементы.РабочаяГруппаТаблица.Видимость = ВозможноВедениеРабочейГруппы();
	Элементы.СтраницаРабочаяГруппа.Видимость = ТемаРабочаяГруппа;
	Элементы.ДобавитьРабочуюГруппу.Видимость =
		ВозможноВедениеРабочейГруппы() И Не РежимЧтенияСообщения И Не ТемаРабочаяГруппа;
	
	// Режим чтения
	Элементы.ФормаЗакрыть.Видимость = РежимЧтенияСообщения;
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = РежимЧтенияСообщения;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = Не РежимЧтенияСообщения;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Не РежимЧтенияСообщения;
	Элементы.СоздатьФайл.Доступность = Не РежимЧтенияСообщения;
	Элементы.ФайлыВставитьКартинкуИзБуфера.Доступность = Не РежимЧтенияСообщения;
	Элементы.КонтекстноеМенюФайлыСоздать.Доступность = Не РежимЧтенияСообщения;
	Элементы.Удалить.Доступность = Не РежимЧтенияСообщения;
	Элементы.КонтекстноеМенюФайлыУстановитьПометкуУдаления.Доступность = Не РежимЧтенияСообщения;
	Элементы.СоздатьФайлОдинКомПанель.Доступность = Не РежимЧтенияСообщения;
	Элементы.ВставитьКартинкуИзБуфераОдин.Доступность = Не РежимЧтенияСообщения;
	Элементы.РедактироватьПервый.Доступность = Не РежимЧтенияСообщения;
	Элементы.УдалитьФайлПервый.Доступность = Не РежимЧтенияСообщения;
	Элементы.КоманднаяПанельДобавление.Видимость = Не РежимЧтенияСообщения;
	Элементы.ЦитироватьИсходноеСообщение.Видимость = Не РежимЧтенияСообщения;
	Элементы.ПерейтиКСообщению.Видимость = РежимЧтенияСообщения;
	Элементы.ФормаЗаписать.Видимость = Не РежимЧтенияСообщения;
	Элементы.ФормаУстановитьПометкуУдаления.Видимость = Не РежимЧтенияСообщения;
	
	// Автором сообщения является текущий пользователь
	Элементы.НадписьАвторДата.Видимость = Не (Объект.Автор = ПользователиКлиентСервер.ТекущийПользователь());
	
	// Создание сообщения
	Элементы.ФормаОтветитьНаСообщение.Видимость = Не СозданиеСообщения;
	
	// Голосование
	ГолосованиеВключено = Объект.ДобавленоГолосование;
	Элементы.СтраницаГолосование.Видимость = ГолосованиеВключено;
	Элементы.ДобавитьГолосование.Видимость = Не ГолосованиеВключено;
	Элементы.УдалитьГолосование.Видимость = ГолосованиеВключено И Не РежимЧтенияСообщения;
	Элементы.ГруппаГолосование.Видимость = ГолосованиеВПроцессе;
	Элементы.Проголосовать.Видимость = ГолосованиеВПроцессе;
	Элементы.Прокомментировать.Видимость = ГолосованиеВПроцессе;
	Элементы.ОтменитьСвойГолос.Видимость = ГолосованиеВПроцессе;
	Элементы.ИзменитьГолосование.Видимость = ГолосованиеВПроцессе И Не РежимЧтенияСообщения;
	
	// Голосование редактируется
	ГолосованиеРедактируется = ГолосованиеВключено И Не ГолосованиеВПроцессе И Не РежимЧтенияСообщения;
	Элементы.ДобавитьВариантГолосования.Видимость = ГолосованиеРедактируется;
	Элементы.УдалитьВариантГолосования.Видимость = ГолосованиеРедактируется;
	Элементы.ВариантыГолосования.Видимость = ГолосованиеРедактируется;
	Элементы.ВопросГолосования.РедактированиеТекста = ГолосованиеРедактируется;
	
	// Голосование доступно для участия
	ВыбранВариантГолосования = ЗначениеЗаполнено(Голосование);
	ГолосованиеДоступноДляУчастия = Не ТемаЗакрытая;
	Элементы.Голосование.Доступность = ГолосованиеДоступноДляУчастия;
	Элементы.Проголосовать.Доступность = ГолосованиеДоступноДляУчастия И ВыбранВариантГолосования;
	Элементы.Прокомментировать.Доступность = ГолосованиеДоступноДляУчастия И ПользовательПроголосовал;
	Элементы.ОтменитьСвойГолос.Доступность = ГолосованиеДоступноДляУчастия И ПользовательПроголосовал;
	
	// Тип закладок страниц
	ОтображатьЗакладки = 
		Элементы.СтраницаФайлы.Видимость
		Или Элементы.СтраницаГолосование.Видимость
		Или Элементы.СтраницаРабочаяГруппа.Видимость;
	Если ОтображатьЗакладки Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	// На что отвечаем
	УказанРодитель = ЗначениеЗаполнено(Объект.Родитель);
	Элементы.ГруппаНаЧтоОтвечаем.Видимость = УказанРодитель;
	Элементы.ГиперссылкаНеУказаноНаЧтоОтвечаем.Видимость = Не УказанРодитель И Не Объект.ПервоеСообщениеТемы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимЧтения()
	
	УстановитьРежимЧтения = Ложь;
	
	Если Объект.ВладелецСообщения.Закрытая И Не Объект.ПервоеСообщениеТемы Тогда
		
		УстановитьРежимЧтения = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
			
			ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(
				Объект.Ссылка, ПользователиКлиентСервер.ТекущийПользователь());
			Если Не ПраваПоОбъекту.Изменение Тогда
				УстановитьРежимЧтения = Истина;
			КонецЕсли;
			
		Иначе
			
			Если Не (Объект.Автор = ПользователиКлиентСервер.ТекущийПользователь()
				Или РольДоступна("ПолныеПрава")) Тогда
				УстановитьРежимЧтения = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УстановитьРежимЧтения Тогда
		ТолькоПросмотр = Истина;
		РежимЧтенияСообщения = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	АвтоЗаголовок = Не Объект.ПервоеСообщениеТемы;
	Если Объект.ПервоеСообщениеТемы Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ТекстЗаголовка = РаботаСОбсуждениями.ПолучитьЗаголовок(ТемаНаименование);
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 (%2)", ТекстЗаголовка, НСтр("ru = 'Тема'; en = 'Title'"));
		Иначе
			Заголовок = НСтр("ru = 'Тема (создание)'; en = 'Forum thread (create)'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТемы()
	
	ТемаНаименование = Объект.ВладелецСообщения.Наименование;
	ТемаРаздел = Объект.ВладелецСообщения.Папка;
	Предмет = Объект.ВладелецСообщения.Документ;
	ТемаЗакрытая = Объект.ВладелецСообщения.Закрытая;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыТемы()
	
	СтруктураРеквизитов = Справочники.ТемыОбсуждений.ПолучитьСтруктуруРеквизитов();
	
	СтруктураРеквизитов.Наименование = ТемаНаименование;
	СтруктураРеквизитов.Документ = Предмет;
	СтруктураРеквизитов.Папка = ТемаРаздел;
	СтруктураРеквизитов.Закрытая = ТемаЗакрытая;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаСервере
Процедура СформироватьНаЧтоОтвечаем()
	
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		
		ДатаРодителя = Макс(Объект.Родитель.ДатаСоздания, Объект.Родитель.ДатаИзменения);
		Элементы.НадписьНаЧтоОтвечаем.Заголовок =
			ПолучитьСтрокуАвторДата(Объект.Родитель.Автор, ДатаРодителя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьАвторДата()
	
	ДатаРодителя = Макс(Объект.ДатаСоздания, Объект.ДатаИзменения);
	Элементы.НадписьАвторДата.Заголовок = ПолучитьСтрокуАвторДата(Объект.Автор, ДатаРодителя);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокуАвторДата(Автор, Дата)
	
	ЧастиЗаголовка = Новый Массив;
	
	// Автор
	ТекстАвтор = Строка(Автор);
	ШрифтАвтор = Новый Шрифт( , , Истина);
	СтрокаАвтор = Новый ФорматированнаяСтрока(ТекстАвтор, ШрифтАвтор, , , ПолучитьНавигационнуюСсылку(Автор));
	ЧастиЗаголовка.Добавить(СтрокаАвтор);
	
	Если ЗначениеЗаполнено(Дата) Тогда
		// Писал
		СтрокаПисал = " " + НСтр("ru = 'писал'; en = 'wrote on'") + " ";
		ЧастиЗаголовка.Добавить(СтрокаПисал);
		
		// Дата
		СтрокаДата = РаботаСОбсуждениямиКлиентСервер.СформироватьТекстовоеПредставлениеДаты(Дата, Ложь);
		ЧастиЗаголовка.Добавить(СтрокаДата);
	КонецЕсли;
	
	СтрокаАвторДата = Новый ФорматированнаяСтрока(ЧастиЗаголовка);
	
	Возврат СтрокаАвторДата;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьРодителя()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Родитель);
	ПараметрыФормы.Вставить("Тема", Объект.ВладелецСообщения);
	
	ОткрытьФорму("Справочник.СообщенияОбсуждений.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГолосованиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	УдалитьРезультатыГолосования();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьГолосованиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Объект.ДобавленоГолосование = Ложь;
	УдалитьРезультатыГолосования();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

#КонецОбласти
