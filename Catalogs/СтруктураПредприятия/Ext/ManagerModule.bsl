
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру полей подразделения
//
// Возвращаемое значение:
//   Структура
//     Родитель
//     Наименование
//     Руководитель
//     ГрафикРаботы
//     Комментарий
//
Функция ПолучитьСтруктуруПодразделения() Экспорт
	
	ПараметрыПодразделения = Новый Структура;
	ПараметрыПодразделения.Вставить("Родитель");
	ПараметрыПодразделения.Вставить("Наименование");
	ПараметрыПодразделения.Вставить("Руководитель");
	ПараметрыПодразделения.Вставить("ГрафикРаботы");
	ПараметрыПодразделения.Вставить("Комментарий");
	
	Возврат ПараметрыПодразделения;
	
КонецФункции

// Создает и записывает в БД подразделение
//
// Параметры:
//   СтруктураПодразделения - Структура - структура полей подразделения.
//
// Возвращаемое значение:
//   СправочникСсылка.СтруктураПредприятия
//
Функция СоздатьПодразделение(СтруктураПодразделения) Экспорт
	
	НовоеПодразделение = СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовоеПодразделение, СтруктураПодразделения);
	НовоеПодразделение.Записать();
	
	Возврат НовоеПодразделение.Ссылка;
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

// Возвращает список подчиненных подразделений руководителей.
// Учитывается структура предприятия.
//
// Параметры:
//  Руководители - Массив
//   * СправочникСсылка.Пользователи
//
Функция ПодчиненныеПодразделения(Руководители) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка
		|ПОМЕСТИТЬ ПодчиненныеПодразделения
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Руководитель В(&Руководители)
		|	И СтруктураПредприятия.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтруктураПредприятия.Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ПодчиненныеПодразделения.Ссылка
		|			ИЗ
		|				ПодчиненныеПодразделения КАК ПодчиненныеПодразделения)";
	Запрос.УстановитьПараметр("Руководители", Руководители);
	
	ПодчиненныеПодразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ПодчиненныеПодразделения;
	
КонецФункции

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Возвращает состав пользователей, входящих в указанный контейнер.
//
// Параметры:
//   Контейнер - СправочникСсылка.СтруктураПредприятия - контейнер пользователей.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.Пользователи - состав контейнера.
//
Функция СоставКонтейнераПользователей(Контейнер) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникДанных.Пользователь КАК Пользователь 
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК ИсточникДанных
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|ПО
		|	ИсточникДанных.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|ГДЕ
		|	ПодчиненностьПодразделений.Вышестоящее = &Контейнер
		|	И НЕ ИсточникДанных.Подразделение.ПометкаУдаления
		|	И НЕ ИсточникДанных.Пользователь.ПометкаУдаления");
	Запрос.УстановитьПараметр("Контейнер", Контейнер);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции

// Возвращает контейнеры типа СтруктураПредприятия, которым принадлежит указанный пользователь.
//
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - проверяемый пользователь.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.СтруктураПредприятия - контейнеры, которым принадлежит пользователь.
//
Функция КонтейнерыПользователя(Пользователь) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодчиненностьПодразделений.Вышестоящее КАК Контейнер 
		|ИЗ
		|	РегистрСведений.СведенияОПользователяхДокументооборот КАК ИсточникДанных
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|ПО
		|	ИсточникДанных.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|ГДЕ
		|	ИсточникДанных.Пользователь = &Пользователь
		|	И НЕ ИсточникДанных.Подразделение.ПометкаУдаления
		|");
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контейнер");
	
КонецФункции

Функция ПолучитьПервоеПодразделениеОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.ра_Организация <> СтруктураПредприятия.Родитель.ра_Организация
	|	И СтруктураПредприятия.ра_Организация = &ра_Организация");
	
	Запрос.УстановитьПараметр("ра_Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПодразделениеОрганизацииПоУмолчанию(Организация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятияПодчиненные
	|		ПО СтруктураПредприятия.Ссылка = СтруктураПредприятияПодчиненные.Родитель
	|			И (НЕ СтруктураПредприятияПодчиненные.ПометкаУдаления)
	|ГДЕ
	|	СтруктураПредприятия.ра_Организация <> СтруктураПредприятия.Родитель.ра_Организация
	|	И СтруктураПредприятия.ра_Организация = &ра_Организация
	|	И СтруктураПредприятияПодчиненные.Родитель ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("ра_Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции


#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого КлючИЗнач Из Данные Цикл
		Представление = КлючИЗнач.Значение;
	КонецЦикла;
	
	ра_ОбщегоНазначения.ОбработатьПустоеПредставление(Представление);
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТекущийЯзык() = Метаданные.Языки.Английский Тогда
		Поля.Добавить("NaimenovanieEn");
	Иначе
		Поля.Добавить("Наименование");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	Текст = Параметры.СтрокаПоиска; 
	ДанныеВыбора = Новый СписокЗначений;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	|	Подразделения.Ссылка,
	|	Подразделения.ра_КодЦФО КАК ра_КодЦФО,
	|	Подразделения.Представление КАК Подразделение
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК Подразделения
	|ГДЕ
	|	Подразделения.ПометкаУдаления = ЛОЖЬ";
	
	ПоляВводаПоСтроке = ра_ОбщегоНазначения.ПолучитьПоляВводаПоСтроке(ПустаяСсылка().Метаданные());
	Запрос = ра_ОбщегоНазначения.ЗапросДанныхВыбораПоТексту(ТекстЗапроса, Параметры, ПоляВводаПоСтроке);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДобавкаТекста = ""; //СтрШаблон(НСтр("ru = ' (%1)'; en = ' (%1)'"), НСтр("ru = 'Подразделение'; en = 'Department'"));
		
		Если ЗначениеЗаполнено(Выборка.ра_КодЦФО) Тогда
			ДобавкаТекста = СтрШаблон(" (%1)", Выборка.ра_КодЦФО) + ДобавкаТекста; 	
		КонецЕсли;
			
		ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
			Выборка.Подразделение, 
			Новый ФорматированнаяСтрока(ДобавкаТекста, 
				, WebЦвета.Серый)
			);
			
		ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
