#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтарыйРуководитель = Объект.Руководитель;
	Нумерация.ПоказатьИндексНумерации(ЭтаФорма);
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Элементы.ФормаПолномочияИРазрешения.Заголовок = НСтр("ru = 'Полномочия'; en = 'Privileges'");
	КонецЕсли;	
	
	Элементы.ФормаПолномочияИРазрешения.Видимость = ПравоДоступа("Изменение", 
		Метаданные.РегистрыСведений.ПолномочияПользователей);
	
	// Видимость команды "Политики доступа".
	Если Элементы.Найти("ФормаПолитикиДоступа") <> Неопределено Тогда
		ОтключенныеРазрезы = ДокументооборотПраваДоступаПовтИсп.ОтключенныеРазрезыДоступа(Ложь);
		Если ОтключенныеРазрезы.Найти(ПланыВидовХарактеристик.ВидыДоступа.Подразделения) <> Неопределено Тогда
			Элементы.ФормаПолитикиДоступа.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаСвойства");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ФормаСтандартныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	ПолномочияТекущегоПользователя = ПолучитьПолномочияТекущегоПользователя();
	
	Если РольДоступна("ПолныеПрава") Тогда
		//полные права редактируют все
	ИначеЕсли Объект.ра_РедактированиеРазрешено и ПолномочияТекущегоПользователя.ПрофильАдминистратор1С Тогда
		//администратор 1С имеет право редактировать элементы ниже 4-го уровня включительно, которые создаются интерактивно
		
	ИначеЕсли Объект.ра_РедактированиеРазрешено И ПолномочияТекущегоПользователя.ПрофильЛокальныйАдминистратор Тогда
		//локальные администраторы имеют право редактировать элементы ниже 4-го уровня
		ТолькоПросмотр = (Объект.ра_Организация <> ПараметрыСеанса.ТекущийПользователь.ра_Организация);
		Элементы.ра_Организация.ТолькоПросмотр = Истина;
	Иначе
		//во всех остальных случаях редактирование запрещено
		ТолькоПросмотр = ИСТИНА;	
	КонецЕсли;
	
	Если ТолькоПросмотр и Объект.Ссылка.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа'; en = 'Access denied'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; en = 'Data has been changed. Save changes?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
					
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("НетНастройкиНумерации", Нумерация.НетНастройкиНумерации(ТекущийОбъект.Ссылка));
	ИндексНумерации = СокрЛП(ИндексНумерации);
	Если ИндексНумерации <> ИндексНумерацииПриОткрытии Тогда 
		Если ЗначениеЗаполнено(ИндексНумерации) Тогда 
			РегистрыСведений.ИндексыНумерации.ЗаписатьИндексНумерации(Объект.Ссылка, ИндексНумерации);
		Иначе 
			РегистрыСведений.ИндексыНумерации.УдалитьИндексНумерации(Объект.Ссылка);
		КонецЕсли;
		
		ИндексНумерацииПриОткрытии = ИндексНумерации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РуководительСоздание(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Подразделение", Объект.Ссылка);
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Наименование", Элемент.ТекстРедактирования);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаЭлемента",
			ПараметрыФормы,
			Элемент,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолномочияИРазрешения(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь", Объект.Ссылка);
	
	ОткрытьФорму("Обработка.ПолномочияИРазрешения.Форма",
		ПараметрыФормы,
		ЭтотОбъект,
		Объект.Ссылка);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПодразделение()
	
	МенеджерЗаписи = РегистрыСведений.СведенияОПользователяхДокументооборот.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Объект.Руководитель;
	МенеджерЗаписи.Прочитать();
	
	Набор = РегистрыСведений.СведенияОПользователяхДокументооборот.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Установить(Объект.Руководитель);
	
	НоваяЗапись = Набор.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, МенеджерЗаписи);
	НоваяЗапись.Пользователь = Объект.Руководитель;
	НоваяЗапись.Подразделение = Объект.Ссылка;
	
	Набор.Записать();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.Руководитель) И Объект.Руководитель <> СтарыйРуководитель Тогда 
		
		ПодразделениеРуководителя = РаботаСПользователями.ПолучитьПодразделение(Объект.Руководитель);
		Если Не ЗначениеЗаполнено(ПодразделениеРуководителя) Тогда 
			УстановитьПодразделение();
		ИначеЕсли ПодразделениеРуководителя <> Объект.Ссылка
			И Не ПараметрыЗаписи.Свойство("ЗаданВопросОбУстановкеПодразделения") Тогда 
			ПараметрыЗаписи.Вставить("ПодразделениеРуководителя", ПодразделениеРуководителя);
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пользователь ""%1"" входит в подразделение ""%2"". Переместить его в подразделение ""%3""?'; en = 'User ""%1"" belongs to department ""%2"". Move him to department ""%3""?'"),
					Строка(Объект.Руководитель),
					Строка(ПодразделениеРуководителя),
					Строка(Объект.Ссылка));
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеЗаписиПродолжениеПослеОтветаНаВопрос",
				ЭтотОбъект,
				ПараметрыЗаписи);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Руководитель) Тогда
		ОповеститьОбИзменении(Объект.Руководитель);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтарыйРуководитель) Тогда
		ОповеститьОбИзменении(СтарыйРуководитель);
	КонецЕсли;
	СтарыйРуководитель = Объект.Руководитель;
	
	Параметр = Новый Структура;
	Параметр.Вставить("Ссылка", Объект.Ссылка);
	Параметр.Вставить("Руководитель", Объект.Руководитель);
	Оповестить("Запись_СтруктураПредприятия", Параметр);
	
	Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение") 
		И ПараметрыЗаписи.Свойство("НетНастройкиНумерации") И ПараметрыЗаписи.НетНастройкиНумерации = Истина Тогда
		ОписаниеПредупреждения = Новый ОписаниеОповещения(
			"ПослеЗаписиПродолжениеПослеПредупреждения",
			ЭтотОбъект,
			ПараметрыЗаписи);
		ПоказатьПредупреждение(ОписаниеПредупреждения,
			НСтр("ru = 'Документы с данным подразделением нельзя будет зарегистрировать, так как отсутствует подходящая настройка нумерации.'; en = 'Documents with this department will not be able to register, because there is no suitable numeration settings.'"));
		Возврат;	
	КонецЕсли;	
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'; en = 'Changed:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжениеПослеПредупреждения(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение", Истина);
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжениеПослеОтветаНаВопрос(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		УстановитьПодразделение();
		ОповеститьОбИзменении(Объект.Руководитель);
		ОповеститьОбИзменении(Объект.Ссылка);
		ОповеститьОбИзменении(ПараметрыЗаписи.ПодразделениеРуководителя);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЗаданВопросОбУстановкеПодразделения", Истина);
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
	Если ВладелецФормы <> Неопределено Тогда
		ОповеститьОВыборе(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ПолучитьПолномочияТекущегоПользователя()
	
	Структура = Новый Структура("ПрофильАдминистратор1С, ПрофильЛокальныйАдминистратор", ЛОЖЬ, ЛОЖЬ);
	
	ПрофильАдминистратор1С = Справочники.ПрофилиГруппДоступа.НайтиПоРеквизиту("ИдентификаторПоставляемыхДанных", Новый УникальныйИдентификатор(УправлениеДоступомПереопределяемый.ИдентификаторПрофиляАдминистратор1С()));
	ПрофильЛокальныйАдминистратор = Справочники.ПрофилиГруппДоступа.НайтиПоРеквизиту("ИдентификаторПоставляемыхДанных", Новый УникальныйИдентификатор(УправлениеДоступомПереопределяемый.ИдентификаторПрофиляЛокальныйАдминистратор()));

	Полномочия = Новый Массив;
	Полномочия.Добавить(ПрофильАдминистратор1С);
	Полномочия.Добавить(ПрофильЛокальныйАдминистратор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолномочияПользователей.Полномочия КАК Полномочия
	|ИЗ
	|	РегистрСведений.ПолномочияПользователей КАК ПолномочияПользователей
	|ГДЕ
	|	ПолномочияПользователей.Владелец = &Владелец
	|	И ПолномочияПользователей.Полномочия В(&Полномочия)";
	
	Запрос.УстановитьПараметр("Полномочия", Полномочия);
	Запрос.УстановитьПараметр("Владелец", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Если Выборка.Полномочия = ПрофильАдминистратор1С Тогда
				Структура.ПрофильАдминистратор1С = ИСТИНА;
			ИначеЕсли 
				Выборка.Полномочия = ПрофильЛокальныйАдминистратор Тогда
				Структура.ПрофильЛокальныйАдминистратор = ИСТИНА;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти
