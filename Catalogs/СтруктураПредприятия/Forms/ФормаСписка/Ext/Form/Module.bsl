#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДоступенПереносПользователей = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СведенияОПользователяхДокументооборот);
	Элементы.ПеренестиВПодразделение.Доступность = ДоступенПереносПользователей;
	Элементы.ПользователиПеренестиВПодразделение.Доступность = ДоступенПереносПользователей;
	Элементы.ПользователиСписокКонтекстноеМенюПеренестиВПодразделение.Доступность = ДоступенПереносПользователей;
	
	ВыбиратьИерархически = Истина;
	Элементы.ПоказыватьПользователейНижестоящихПодразделений.Пометка = ВыбиратьИерархически;
	
	УстановитьНачальноеОтображениеДерева();
	ОформитьИСкрытьНедействительныхПользователей();
	ОформитьИСкрытьУдаленныеПодразделения();
	ОформитьПодразделениеТекущегоПользователя();
	ОформитьРуководителяТекущегоПодразделения();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ПользователиСписок, "Служебный",
		Ложь,,,
		Истина,
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		
	Элементы.ПодразделенияПолномочияИРазрешения.Видимость = ПравоДоступа("Изменение", 
		Метаданные.РегистрыСведений.ПолномочияПользователей);
	Элементы.СтруктураПредприятияКонтекстноеМенюПолномочияИРазрешения.Видимость = ПравоДоступа("Изменение", 
		Метаданные.РегистрыСведений.ПолномочияПользователей);
		
	Элементы.ПользователиГруппыИПолномочия.Видимость = ПравоДоступа("Изменение", 
		Метаданные.Справочники.РабочиеГруппы);
	Элементы.ПользователиСписокКонтекстноеМенюГруппыИПолномочия.Видимость = ПравоДоступа("Изменение", 
		Метаданные.Справочники.РабочиеГруппы);
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Элементы.ПодразделенияПолномочияИРазрешения.Заголовок = НСтр("ru = 'Полномочия'; en = 'Privileges'");
		Элементы.СтруктураПредприятияКонтекстноеМенюПолномочияИРазрешения.Заголовок = НСтр("ru = 'Полномочия'; en = 'Privileges'");
	КонецЕсли;
	
	ОбновитьСодержимоеФормыПриИзмененииПодразделения(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечатьПодразделения);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ТипЗнч(Настройки["ВыбиратьИерархически"]) = Тип("Булево") Тогда
		ВыбиратьИерархически = Настройки["ВыбиратьИерархически"];
	КонецЕсли;
	
	Если НЕ ВыбиратьИерархически Тогда
		ОбновитьСодержимоеФормыПриИзмененииПодразделения(ЭтотОбъект);
	КонецЕсли;
	
	Элементы.ПоказыватьПользователейНижестоящихПодразделений.Пометка = ВыбиратьИерархически;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказыватьНедействительныхПользователей"] <> Неопределено Тогда
		ПереключитьОтображениеНедействительныхПользователей(ПользователиСписок,
			ПоказыватьНедействительныхПользователей);
	КонецЕсли;
	Элементы.ПоказыватьНедействительныхПользователей.Пометка = ПоказыватьНедействительныхПользователей;
	
	Если Настройки["ПоказыватьУдаленныеПодразделения"] <> Неопределено Тогда
		ПереключитьОтображениеУдаленныхПодразделений(СтруктураПредприятия,
			ПоказыватьУдаленныеПодразделения);
	КонецЕсли;
	Элементы.ПоказыватьУдаленныеПодразделения.Пометка = ПоказыватьУдаленныеПодразделения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СтруктураПредприятия" Тогда
		Если Параметр.Ссылка = АктивноеПодразделение Тогда
			РуководительАктивногоПодразделения = Параметр.Руководитель;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователиСписок

&НаКлиенте
Процедура ПользователиСписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьОтборОформленияПодразделенияТекущегоПользователя", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", Элементы.СтруктураПредприятия.ТекущаяСтрока);
	
	Если Копирование
		И Элемент.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элемент.ТекущаяСтрока);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта",
		ПараметрыФормы,
		Элементы.ПользователиСписок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктураПредприятия

&НаКлиенте
Процедура СтруктураПредприятияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("СтруктураПредприятияПослеАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(Элементы.СтруктураПредприятия.ТекущаяСтрока) Тогда
		ПараметрыФормы.Вставить(
			"ЗначенияЗаполнения",
			Новый Структура("Родитель", Элементы.СтруктураПредприятия.ТекущаяСтрока));
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.СтруктураПредприятия.ФормаОбъекта",
		ПараметрыФормы,
		Элементы.СтруктураПредприятия);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ТолькоПодразделения = Истина;
	ТолькоПользователи = Истина;
	Для Каждого ЗначениеПеретаскивания Из ПараметрыПеретаскивания.Значение Цикл
		ТолькоПодразделения = ТолькоПодразделения
			И (ТипЗнч(ЗначениеПеретаскивания) = Тип("СправочникСсылка.СтруктураПредприятия"));
		ТолькоПользователи = ТолькоПользователи
			И (ТипЗнч(ЗначениеПеретаскивания) = Тип("СправочникСсылка.Пользователи"));
		КонецЦикла;
		
	Если ТолькоПодразделения Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ТолькоПользователи Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СтруктураПредприятия.ТекущаяСтрока = Строка
		Или Строка = Неопределено
		Или Не ДоступенПереносПользователей Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделениеПомеченоНаУдаление = Элементы.СтруктураПредприятия.ДанныеСтроки(Строка).ПометкаУдаления;
	КоличествоПользователей = ПараметрыПеретаскивания.Значение.Количество();
	
	ПустоеПодразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	ДействиеИсключитьПользователя = (ПустоеПодразделение = Строка);
	
	ДействиеСПользователем = ?(ПустоеПодразделение = Элементы.СтруктураПредприятия.ТекущаяСтрока,
		НСтр("ru = 'Включить'; en = 'Enable'"),
		НСтр("ru = 'Переместить'; en = 'Move'"));
	
	Если ПодразделениеПомеченоНаУдаление Тогда
		ШаблонДействия = НСтр("ru = 'Подразделение ""%1"" помечено на удаление. %2'; en = 'Department ""%1"" is marked for deletion. %2'");
		ДействиеСПользователем = СтрШаблон(ШаблонДействия, Строка(Строка), ДействиеСПользователем);
	КонецЕсли;
	
	Если КоличествоПользователей = 1 Тогда
		Если ДействиеИсключитьПользователя Тогда
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Исключить пользователя ""%1"" из подразделения ""%2""?'; en = 'Exclude user ""%1"" from department ""%2""?'"),
				Строка(ПараметрыПеретаскивания.Значение[0]),
				Строка(Элементы.СтруктураПредприятия.ТекущаяСтрока));
			
		ИначеЕсли Не ПодразделениеПомеченоНаУдаление Тогда
			ТекстВопроса = СтрШаблон(
				НСтр("ru = '%1 пользователя ""%2"" в подразделение ""%3""?'; en = '%1 users ""%2"" to department ""%3""?'"),
				ДействиеСПользователем,
				Строка(ПараметрыПеретаскивания.Значение[0]),
				Строка(Строка));
		Иначе
			ТекстВопроса = СтрШаблон(
				НСтр("ru = '%1 пользователя ""%2"" в это подразделение?'; en = '%1 users ""%2"" to this department?'"),
				ДействиеСПользователем,
				Строка(ПараметрыПеретаскивания.Значение[0]));
		КонецЕсли;
	Иначе
		Если ДействиеИсключитьПользователя Тогда
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Исключить пользователей (%1) из подразделения ""%2""?'; en = 'Exclude users (%1) from department ""%2""?'"),
				КоличествоПользователей,
				Строка(Элементы.СтруктураПредприятия.ТекущаяСтрока));
			
		ИначеЕсли Не ПодразделениеПомеченоНаУдаление Тогда
			ТекстВопроса = СтрШаблон(
				НСтр("ru = '%1 пользователей (%2) в подразделение ""%3""?'; en = '%1 users (%2) to department""%3""?'"),
				ДействиеСПользователем,
				КоличествоПользователей,
				Строка(Строка));
		Иначе
			ТекстВопроса = СтрШаблон(
				НСтр("ru = '%1 пользователей (%2) в это подразделение?'; en = '%1 users (%2) to this department?'"),
				ДействиеСПользователем,
				КоличествоПользователей);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПереносимыеПользователи", ПараметрыПеретаскивания.Значение);
	ДополнительныеПараметры.Вставить("Подразделение", Строка);
	
	Оповещение = Новый ОписаниеОповещения("СтруктураПредприятияПеретаскиваниеЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Элементы.СтруктураПредприятия.ТолькоПросмотр
		Или Не ДоступенПереносПользователей Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Иначе
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроцессИсполнение(Команда)
	
	Если Элементы.ПользователиСписок.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.ПользователиСписок.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Исполнение", Элементы.ПользователиСписок.ВыделенныеСтроки, ЭтаФорма, "ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОзнакомление(Команда)
	
	Если Элементы.ПользователиСписок.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.ПользователиСписок.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьПомощникСозданияОсновныхПроцессов(
		"Ознакомление", Элементы.ПользователиСписок.ВыделенныеСтроки, ЭтаФорма, "ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолномочияИРазрешения(Команда)
	
	Если Элементы.СтруктураПредприятия.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.СтруктураПредприятия.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь", Элементы.СтруктураПредприятия.ТекущаяСтрока);
	
	ОткрытьФорму("Обработка.ПолномочияИРазрешения.Форма",
		ПараметрыФормы,
		ЭтотОбъект,
		Элементы.СтруктураПредприятия.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыИПолномочия(Команда)
	
	Если Элементы.ПользователиСписок.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.ПользователиСписок.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь", Элементы.ПользователиСписок.ТекущаяСтрока);
	
	ОткрытьФорму("ОбщаяФорма.ГруппыИПолномочия",
		ПараметрыФормы,
		ЭтотОбъект,
		Элементы.ПользователиСписок.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПодразделение(Команда)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Пользователи", Элементы.ПользователиСписок.ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиВПодразделениеЗавершение",
		ЭтаФорма,
		ПараметрыОповещения);
		
		
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора",
		Новый Структура,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПодразделение(Команда)
	
	Если Элементы.ПользователиСписок.ТекущиеДанные <> Неопределено
		И ТипЗнч(Элементы.ПользователиСписок.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Элементы.СтруктураПредприятия.ТекущаяСтрока = 
			Элементы.ПользователиСписок.ТекущиеДанные.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеПодразделения(Команда)
	
	ПоказыватьУдаленныеПодразделения = Не ПоказыватьУдаленныеПодразделения;
	Элементы.ПоказыватьУдаленныеПодразделения.Пометка = ПоказыватьУдаленныеПодразделения;
	
	ПереключитьОтображениеУдаленныхПодразделений(СтруктураПредприятия,
		ПоказыватьУдаленныеПодразделения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительныхПользователей(Команда)
	
	ПоказыватьНедействительныхПользователей = Не ПоказыватьНедействительныхПользователей;
	Элементы.ПоказыватьНедействительныхПользователей.Пометка = ПоказыватьНедействительныхПользователей;
	
	ПереключитьОтображениеНедействительныхПользователей(ПользователиСписок,
		ПоказыватьНедействительныхПользователей);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПользователейНижестоящихПодразделений(Команда)
	
	ВыбиратьИерархически = Не ВыбиратьИерархически;
	Элементы.ПоказыватьПользователейНижестоящихПодразделений.Пометка = ВыбиратьИерархически;

	ОбновитьСодержимоеФормыПриИзмененииПодразделения(ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОформитьИСкрытьНедействительныхПользователей()
	
	// Оформление.
	
	// Цвет недействительных.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПользователиСписок.Недействителен");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("ПользователиСписок");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	// Шрифт удаленных.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПользователиСписок.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("ПользователиСписок");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	// Скрытие.
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ПользователиСписок, "Недействителен", Ложь, , , Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ПользователиСписок, "ПометкаУдаления", Ложь, , , Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

&НаСервере
Процедура ОформитьИСкрытьУдаленныеПодразделения()
	
	// Оформление.
	
	// Шрифт удаленных.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтруктураПредприятия.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("СтруктураПредприятия");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	// Скрытие.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СтруктураПредприятия, "ПометкаУдаления", Ложь, , , Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПодразделениеТекущегоПользователя()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Представление = "ПодразделениеТекущегоПользователя";
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтруктураПредприятия.Ссылка");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("СтруктураПредприятия");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Представление = "УдаленноеПодразделениеТекущегоПользователя";
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина,,,Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтруктураПредприятия.Ссылка");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("СтруктураПредприятия");
	ЭлементОформляемогоПоля.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборОформленияПодразделенияТекущегоПользователя()
	
	Если Элементы.ПользователиСписок.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.ПользователиСписок.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Подразделение = Неопределено;
	Иначе
		Подразделение = Элементы.ПользователиСписок.ТекущиеДанные.Подразделение;
	КонецЕсли;
	
	УстановитьОтборОформленияПодразделенияТекущегоПользователяСервер(Подразделение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОформленияПодразделенияТекущегоПользователяСервер(Подразделение)
	
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.Представление = "ПодразделениеТекущегоПользователя"
			Или ЭлементУсловногоОформления.Представление = "УдаленноеПодразделениеТекущегоПользователя" Тогда
			ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы[0];
			Если ЭлементОтбораДанных.ПравоеЗначение <> Подразделение Тогда 
				ЭлементОтбораДанных.ПравоеЗначение = Подразделение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьРуководителяТекущегоПодразделения()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Представление = "РуководительТекущегоПодразделения";
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПользователиСписок.Ссылка");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый ПолеКомпоновкиДанных("РуководительАктивногоПодразделения");
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("ПользователиСписок");
	ЭлементОформляемогоПоля.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияПослеАктивизацииСтроки()
	
	Если Элементы.СтруктураПредприятия.ТекущиеДанные = Неопределено Тогда
		РуководительАктивногоПодразделения = Неопределено;
	Иначе
		РуководительАктивногоПодразделения = Элементы.СтруктураПредприятия.ТекущиеДанные.Руководитель;
	КонецЕсли;
	
	Если Элементы.СтруктураПредприятия.ТекущаяСтрока <> АктивноеПодразделение Тогда
		АктивноеПодразделение = Элементы.СтруктураПредприятия.ТекущаяСтрока;
		ОбновитьСодержимоеФормыПриИзмененииПодразделения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияПеретаскиваниеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВопросыОбОткрытииКарточек = Новый СписокЗначений;
	ПеренестиВПодразделениеСервер(ДополнительныеПараметры.ПереносимыеПользователи,
		ДополнительныеПараметры.Подразделение,
		ВопросыОбОткрытииКарточек);
	
	Для Каждого ПереносимыйПользователь Из ДополнительныеПараметры.ПереносимыеПользователи Цикл
		ОповеститьОбИзменении(ПереносимыйПользователь);
	КонецЦикла;
	УстановитьОтборОформленияПодразделенияТекущегоПользователя();
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Перемещение пользователей'; en = 'Moving users'"),,,
		БиблиотекаКартинок.Информация32);
		
	ПоказатьВопросыОбОткрытииКарточек(ВопросыОбОткрытииКарточек);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросыОбОткрытииКарточек(Вопросы) Экспорт
	
	Если Вопросы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Вопрос = Вопросы[0];
	
	Ответы = Новый СписокЗначений;
	Ответы.Добавить("ОткрытьКарточку", НСтр("ru = 'Открыть карточку'; en = 'Open form'"));
	Ответы.Добавить("НеОткрывать", НСтр("ru = 'Не открывать'; en = 'Do not open'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОбОткрытииКарточек",
		ЭтаФорма,
		Вопросы);
		
	ПоказатьВопрос(ОписаниеОповещения, Вопрос.Представление, Ответы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОбОткрытииКарточек(Результат, Вопросы) Экспорт
	
	Вопрос = Вопросы[0];
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат = "ОткрытьКарточку" Тогда
		ПоказатьЗначение(, Вопрос.Значение);
	КонецЕсли;
	
	Вопросы.Удалить(0);
	ПоказатьВопросыОбОткрытииКарточек(Вопросы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьОтображениеНедействительныхПользователей(ПользователиСписок, ПоказатьНедействительных)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ПользователиСписок, "Недействителен", Ложь, , , Не ПоказатьНедействительных,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ПользователиСписок, "ПометкаУдаления", Ложь, , , Не ПоказатьНедействительных,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьОтображениеУдаленныхПодразделений(СтруктураПредприятия, ПоказатьУдаленных)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СтруктураПредприятия, "ПометкаУдаления", Ложь, , , НЕ ПоказатьУдаленных,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто,
		Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСодержимоеФормыПриИзмененииПодразделения(Форма)
	
	Элементы = Форма.Элементы;
	ПустоеПодразделение = ПредопределенноеЗначение(
		"Справочник.СтруктураПредприятия.ПустаяСсылка");
	
	Элементы.ПользователиСписокПодразделение.Видимость = 
		Форма.ВыбиратьИерархически
		Или Форма.АктивноеПодразделение = ПустоеПодразделение;
	
	Если Форма.АктивноеПодразделение = ПустоеПодразделение Тогда
		
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.ПользователиСписок,
			"ВсеПользователи", Истина);
		
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.ПользователиСписок,
			"ВыбиратьИерархически", Ложь);
		
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.ПользователиСписок,
			"Подразделение", ПустоеПодразделение);
		
	Иначе
			
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.ПользователиСписок,
			"ВсеПользователи", Ложь);
		
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.ПользователиСписок,
			"ВыбиратьИерархически", Форма.ВыбиратьИерархически);
		
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.ПользователиСписок,
			"Подразделение", Форма.АктивноеПодразделение);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначениеПараметраКомпоновкиДанных(Знач ВладелецПараметров,
	Знач ИмяПараметра, Знач ЗначениеПараметра)
	
	Для каждого Параметр Из ВладелецПараметров.Параметры.Элементы Цикл
		Если Строка(Параметр.Параметр) = ИмяПараметра Тогда
			
			Если Параметр.Использование
			   И Параметр.Значение = ЗначениеПараметра Тогда
				Возврат;
			КонецЕсли;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	ВладелецПараметров.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПодразделениеЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Возврат;
	КонецЕсли;
	
	ВопросыОбОткрытииКарточек = Новый СписокЗначений;
	ПеренестиВПодразделениеСервер(Параметры.Пользователи, Результат, ВопросыОбОткрытииКарточек);
	
	Для Каждого ПереносимыйПользователь Из Параметры.Пользователи Цикл
		ОповеститьОбИзменении(ПереносимыйПользователь);
	КонецЦикла;
	УстановитьОтборОформленияПодразделенияТекущегоПользователя();
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Перемещение пользователей'; en = 'Moving users'"),,,
		БиблиотекаКартинок.Информация32);
	
	ПоказатьВопросыОбОткрытииКарточек(ВопросыОбОткрытииКарточек);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВПодразделениеСервер(ПереносимыеПользователи, Подразделение, ВопросыОбОткрытииКарточек)
	
	Для Каждого ПереносимыйПользователь Из ПереносимыеПользователи Цикл
		
		Запись = РегистрыСведений.СведенияОПользователяхДокументооборот.СоздатьМенеджерЗаписи();
		Запись.Пользователь = ПереносимыйПользователь;
		Запись.Прочитать();
		
		Если Запись.Подразделение <> Подразделение Тогда
			
			Набор = РегистрыСведений.СведенияОПользователяхДокументооборот.СоздатьНаборЗаписей();
			Набор.Отбор.Пользователь.Установить(ПереносимыйПользователь);
			
			НоваяЗапись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
			НоваяЗапись.Подразделение = Подразделение;
			
			Набор.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим, следует ли предложить открытие карточек.
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.СтруктураПредприятия) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонВопроса = НСтр("ru = 'Пользователь ""%1"" указан как руководитель подразделения ""%2"".
		|Открыть карточку подразделения для изменения руководителя?';
		|en = 'User ""%1"" is specified as the supervisor of department ""%2"". 
		|Open the department form to change the supervisor manually?'");
	ЗапросПодразделенияКОткрытиюКарточек = Новый Запрос(
		"ВЫБРАТЬ
		|	Подразделения.Ссылка КАК Подразделение,
		|	Подразделения.Руководитель КАК ПереносимыйПользователь
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК Подразделения
		|ГДЕ
		|	Подразделения.Руководитель В (&ПереносимыеПользователи)
		|	И НЕ Подразделения.Ссылка В ИЕРАРХИИ (&Подразделение)
		|");
	ЗапросПодразделенияКОткрытиюКарточек.УстановитьПараметр("Подразделение", Подразделение);
	ЗапросПодразделенияКОткрытиюКарточек.УстановитьПараметр("ПереносимыеПользователи", ПереносимыеПользователи);
	ВыборкаПодразделения = ЗапросПодразделенияКОткрытиюКарточек.Выполнить().Выбрать();
	Пока ВыборкаПодразделения.Следующий() Цикл
		ВопросыОбОткрытииКарточек.Добавить(
			ВыборкаПодразделения.Подразделение,
			СтрШаблон(ШаблонВопроса, ВыборкаПодразделения.ПереносимыйПользователь, ВыборкаПодразделения.Подразделение));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНачальноеОтображениеДерева()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ КОЛИЧЕСТВО(Ссылка) КАК Количество ИЗ Справочник.СтруктураПредприятия");
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если Выборка.Количество > 23 Тогда
		Элементы.СтруктураПредприятия.НачальноеОтображениеДерева
			= НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	Иначе
		Элементы.СтруктураПредприятия.НачальноеОтображениеДерева
			= НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
